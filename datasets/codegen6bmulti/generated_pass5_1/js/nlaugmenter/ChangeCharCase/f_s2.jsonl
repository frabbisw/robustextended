{"task_id": "JavaScript/0", "prompt": "/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 2, "perturbed": true, "gc": "/* ChECk if in GiveN list of numbers, are anY TWo numbers CloseR TO Each Other than\n  gIven threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements9 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements10 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const sorted = numbers.sort()\n  const diff = sorted[len - 1] - sorted[0]\n  return diff < threshold\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 2, "perturbed": true, "gc": "/* InPUt to This Function IS A sTring CONTainIng multiplE groups of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = [];\n  const paren_groups_array = paren_string.split('(');\n  for (let i = 0; i < paren_groups_array.length; i++) {\n    const paren_group = paren_groups_array[i];\n    const paren_group_array = paren_group.split(')');\n    paren_groups.push(paren_group_array[0]);\n    paren_groups.push(paren_group_array[1]);\n  }\n  return paren_groups;\n};\n\n/* InPUt to This Function IS A sTring contaiNg a single group of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroups('((()))')\n  ['(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const paren_group = paren_string.split('(');\n  return paren_group[0];\n};\n\n/* InPUt to This Function IS A sTring contaiNg a single group of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroup('((()))')\n  '(()())'\n  */\nconst separateParenGroup_2 = (paren_string) => {\n  const paren_group = paren_string.split(')');\n  return paren_group[1];\n};\n\n/* InPUt to This Function IS A sTring contaiNg a single group of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroup_2('((()))')\n  '(()())'\n  */\nconst separateParenGroup_3 = (paren_string) => {\n  const paren_group = paren_string.split(')');\n  return paren_group[0];\n};\n\n/* InPUt to This Function IS A sTring contaiNg a single group of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroup_3('((()))')\n  '(()())'\n  */\nconst separateParenGroup_4 = (paren_string) => {\n  const paren_group = paren_string.split(')');\n  return paren_group[1];\n};\n\n/* InPUt to This Function IS A sTring contaiNg a single group of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroup_4('((()))')\n  '(()())'\n  */\nconst separateParenGroup_5 = (paren_string) => {\n  const paren_group = paren_string.split(')');\n  return paren_group[0];\n};\n\n/* InPUt to This Function IS A sTring contaiNg a single group of nested paREnThEsEs. Your gOAl is To\n  sePaRaTE tHosE GrouP iNtO sEpARaTE stRiNGS anD return THe list of those.\n  sePAraTe grOuPs aRe BALANced (eaCh Open bRacE Is PrOPERLy cLoSed) and nOt nESted wiThiN eACh oTher\n  igNOre AnY spaceS in THe inpUt string.\n  >>> separateParenGroup_5('((()))')\n  '(()())'\n  */\nconst separateParenGroup_6 = (paren_string) => {\n  const paren_group = paren_string.", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/* TeST if gNiveN strig is A PAlIndroME */\nCOnst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let start = 0;\n  let end = string.length - 1;\n  let mid = Math.floor((end + start) / 2);\n  let midString = string.substring(start, mid);\n  let midStringReverse = string.substring(mid, end + 1);\n  if (isPalindrome(midString) && isPalindrome(midStringReverse)) {\n    return string;\n  } else if (isPalindrome(midString)) {\n    return midString + string.substring(mid, end + 1);\n  } else if (isPalindrome(midStringReverse)) {\n    return string.substring(0, mid) + midStringReverse + string.substring(mid, end + 1);\n  } else {\n    return string;\n  }\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome2 = (string) => {\n  let start = 0;\n  let end = string.length - 1;\n  let mid = Math.floor((end + start) / 2);\n  let midString = string.substring(start, mid);\n  let midStringReverse = string.substring(mid, end + 1);\n  if (isPalindrome(midString) && isPalindrome(midStringReverse)) {\n    return string;\n  } else if (isPalindrome(midString)) {\n    return midString + string.substring(mid, end + 1);\n  } else if (isPalindrome(midStringReverse)) {\n    return string.substring(0, mid) + midStringReverse + string.substring(mid, end + 1);\n  } else {\n    return string;\n  }\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome3 = (string) => {\n  let start = 0;\n  let end = string.length - 1;\n  let mid = Math.floor((end + start) / 2);\n  let midString = string.substring(start, mid);\n  let midStringReverse = string.substring(mid, end + 1);\n  if (isPalindrome(midString) && isPalindrome(midStringReverse)) {\n    return string;\n  } else if (isPalindrome(midString)) {\n    return midString + string.substring(mid, end + 1);\n  } else if (isPalindrome(midStringReverse)) {\n    return string.substring(0, mid) + midStringReverse + string.substring(mid, end + 1);\n  } else {\n    return string;\n  }\n}\n\n/* find the shoRtest palindrome thAT bEgInS with a sUPpliEd string.\n  AlGoRiTHm IdeA Is siMpLe:\n  - fiNd THe LOngEsT POstFIX of suppliEd string THat Is a pAlIndRoME.\n  - aPPend to ThE end oF thE string ReVeRSE OF a string pReFix that ComES beforE thE pALinDromIc SUffIx.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome4 = (string) => {\n  let start = 0;\n  let end = string.length - 1;\n  let mid = Math.floor((end + start) / 2);\n  let midString = string.substring(start, mid);\n  let midStringReverse = string.substring(mid, end + 1);\n  if (isPalindrome(midString) && isPalindrome(midStringReverse)) {\n    return string;\n  } else if (isPalindrome(midString)) {\n    return midString + string.substring(mid, end + 1);\n  } else if (isPalindrome(midStringReverse)) {\n    return string.substring(0, mid) + midStringReverse + string.substring(mid, end", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, YoU have TO MAke a Pile of n leveLs of stones.\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  The firsT LeVeL hAs n stoneS.\n  the nUmbeR oF sTOnEs in tHE nexT lEvEl Is:\n      - THe NExt OdD NUmbER If n is odd.\n      - thE nEXt eVen nUmBer If n IS EVEn.\n  RetuRn The nuMbeR Of StONES in EacH lEvel in a list, whEre ELement At iNdEX\n  i rePresEnTS thE nUmber oF STones in The level (i+1).\n\n  exampleS:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words SEPAratEd by commas Or spaces. Your task iS\n  To SpLiT the strINg inTo woRdS aND return aN arRAy of ThE wOrDs.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  YoU Will Be giVen a striNG Of Words", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 2, "perturbed": true, "gc": "/*ThiS FuncTion Takes two POSiTive nUMBErs x aNd y and returNs the\n  biggest even iNTeGeR nUmber thAT is in tHe raNgE [x, y] iNClUsiVE. If \n  tHeRe'S nO sUCh NUmbEr, THEn tHE Function sHoULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (y % 2 === 0) {\n    return y;\n  }\n  return Math.max(x, y);\n};\n\nconst chooseNum15 = (x,", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen tWo positiVE InTegerS n AND m, and Your task is To compute the\n  averaGE oF tHe IntegerS From n ThroUgH m (iNClUdiNG n and m). \n  roUnD tHe ANsWEr tO tHE NeaRESt integer AnD ConVert ThAt tO bINARY.\n  If n is gReAter tHan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = n.toString(2).length;\n  const mBits = m.toString(2).length;\n  const nBitsDiff = nBits - mBits;\n  const nBitsSum = nBits + mBits;\n  const nBitsDiffSum = nBitsDiff + mBits;\n  const nBitsDiffSumDiv2 = nBitsDiffSum / 2;\n  const nBitsDiffSumDiv2Remainder = nBitsDiffSum % 2;\n  const nBitsDiffSumDiv2RemainderRemainder = nBitsDiffSumRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainder = nBitsDiffSumRemainderRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainderRemainder = nBitsDiffSumRemainderRemainderRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainderRemainderRemainder = nBitsDiffSumRemainderRemainderRemainderRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainderRemainderRemainderRemainder = nBitsDiffSumRemainderRemainderRemainderRemainderRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainderRemainderRemainderRemainderRemainder = nBitsDiffSumRemainderRemainderRemainderRemainderRemainderRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder = nBitsDiffSumRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder = nBitsDiffSumRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder % 2;\n  const nBitsDiffSumDiv2RemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainderRemainder", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 2, "perturbed": true, "gc": "/*GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digit = num % 10;\n    if (digit % 2!== 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digit = num % 10;\n    if (digit % 2!== 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digit = num % 10;\n    if (digit % 2!== 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDeR.\n  \n  FOr EXaMPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    const num = x - i;\n    const digit = num % 10;\n    if (digit % 2!== 0) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  GivEN a list of PosiTive inteGERs x. return A sortED list OF all \n  Elements thAt hasn't any even digIT.\n\n  NOtE: REturned list SHoulD be sOrTeD in InCreASing OrDe", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY of integERS, sOrt thE INTegeRs that are bEtween 1 and 9 inclusivE,\n  ReVeRsE the resULtinG arrAy, AnD ThEn rEPlacE eAcH dIgIT bY Its CoRREspONDing name fRoM\n  \"one\", \"two\", \"THrEe\", \"FOuR\", \"fIVE\", \"Six\", \"SeVeN\", \"EighT\", \"NiNE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength9 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const sortedArr = arr.sort((a, b) => {\n    return a - b\n  })\n  const reverseArr = sortedArr.reverse()\n  const arrLength = reverseArr.length\n  const result = []\n  for (let i = 0; i < arrLength; i++) {\n    result.push(reverseArr[i])\n  }\n  return result\n}\n\nconst byLength10 = (arr) => {\n  const arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  const", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 2, "perturbed": true, "gc": "/* ImPLemeNt thE functioN f THaT takeS n AS A parAmeter,\n  and rEturns a list of size n, such THaT tHe Value of THe elEmenT aT iNDeX i is THe faCtOrIaL oF i If i IS evEn\n  OR The SUM of numberS fROm 1 tO i othErWisE.\n  i sTARTS from 1.\n  tHe FactoRiaL Of i Is THE MUltIpLicatioN of THe numbErs FrOM 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i * i);\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return f(n).reduce((acc, curr) => acc * curr, 1);\n};\n\nconsole.log(factorial(5));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, return A tuple tHat haS THE numBer of even aNd odd\n  integer palinDRoMeS tHat fall WIthiN the RaNgE(1, n), InCluSIve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let result = [];\n    let odd = 0;\n    let even = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                result.push(i);\n                even++;\n            } else {\n                result.push(i);\n                odd++;\n            }\n        }\n    }\n    return (result);\n}\n\nexport default evenOddPalindrome;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon countNums which TAKeS an arRAY Of inTegers and rEturns\n  the number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  if A nuMBer iS nEgAtIvE, ThEN itS fIRSt sIGNed digit wIlL Be nEgatIvE:\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 HaS SIGNed digItS -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function which takes an arRAY of inTegers and returns the\n  number of ELeMeNtS which hAS a suM of dIgItS > 0.\n  e.g. -123 Ha", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2], ..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 2, "perturbed": true, "gc": "/*We hAVe an ArraY 'arr' of N inteGERs arr[1], arr[2],..., arr[N].The\n  NumbeRS in THe arRay will be rAndomly ordered. YouR TaSk Is To deterMIne iF\n  it iS pOsSIbLe tO Get aN aRrAy SoRTeD in Non-DeCREasING order by pErFOrmIng \n  tHe FolLoWING OperatIoN on thE giVEn ArRAY:\n      yOu aRe Allowed To pERform rIghT sHIft OperAtIOn aNy Number OF Times.\n  \n  one right Shift opERaTion meAns ShIFtinG ALl eleMentS of The array By One\n  Position in tHe rigHt direCtion. THe last EleMenT oF thE arRaY Will be mOVeD To\n  The starTIng POsition in tHe arrAy i.e. 0Th indeX. \n\n  If it is POsSIbLe to OBtAiN the soRTED arraY by peRforming the aBove oPeratIoN\n  Then return true ElsE return fALsE.\n  iF ThE GIVeN arRAy is EmpTy then return trUe.\n\n  Note: The giVEn list Is guARaNTeED tO haVe UniQuE ElemenTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let arrLength = arr.length;\n  let arrCopy = arr.slice();\n  let arrCopyLength = arrCopy.length;\n  let arrCopyCopy = arrCopy.slice();\n  let arrCopyCopyLength = arrCopyCopy.length;\n  let arrCopyCopyCopy = arrCopyCopy.slice();\n  let arrCopyCopyCopyLength = arrCopyCopyCopy.length;\n  let arrCopyCopyCopyCopy = arrCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyLength = arrCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopy = arrCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopyCopyCopyCopyCopyCopyLength = arrCopyCopyCopyCopyCopyCopyCopyCopy.length;\n  let arrCopyCopyCopyCopyCopyCopyCopyCopy = arrCopyCopyCopyCopyCopyCopyCopyCopy.slice();\n  let arrCopyCopyCopy", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 2, "perturbed": true, "gc": "/* InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = aArray[i] ^ bArray[i];\n  }\n  return String.fromCharCode.apply(null, aArray);\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = aArray[i] ^ bArray[i];\n  }\n  return String.fromCharCode.apply(null, aArray);\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = aArray[i] ^ bArray[i];\n  }\n  return String.fromCharCode.apply(null, aArray);\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = aArray[i] ^ bArray[i];\n  }\n  return String.fromCharCode.apply(null, aArray);\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = aArray[i] ^ bArray[i];\n  }\n  return String.fromCharCode.apply(null, aArray);\n};\n\n/*\n  InPUt arE two Strings a aND b CoNsistING Only Of 1s and 0s.\n  PerForm binary XOR on thESe InPuTs and return reSUlt aLso aS a sTrINg.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const aArray = new Array(aLength);\n  const bArray = new Array(bLength);\n  for (let i = 0; i < aLength; i++) {\n    aArray[i] = a.charCodeAt(i);\n  }\n  for (let i = 0; i < bLength; i++) {\n    bArray[i] = b.charCodeAt(i);\n  }\n", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 2, "perturbed": true, "gc": "/*In tHIs prObleM, you will IMPlEment A FUNctiOn that takeS two lists of numberS,\n  AnD dEtErmines WHethEr it Is PoSSiBle TO perFoRm An exchange Of ELeMEntS\n  bETWeeN THem to make lst1 A list oF OnlY eveN nUmbErS.\n  tHERe is no LiMit on The NUmBeR OF EXchAnGed elemEntS BetweeN lst1 anD lst2.\n  IF It iS posSiBLe tO exchange eLementS BEtweeN the lst1 and lst2 tO make\n  alL ThE elemeNts Of lst1 TO be eVEN, return \"YES\".\n  OTherWisE, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1!== len2) {\n    return 'NO';\n  }\n  const result = [];\n  for (let i = 0; i < len1; i++) {\n    result.push(lst1[i]);\n  }\n  for (let i = 0; i < len2; i++) {\n    result.push(lst2[i]);\n  }\n  return 'YES';\n};\n\nexports.exchange = exchange;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/111", "prompt": "/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 2, "perturbed": true, "gc": "/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testStr = test.toLowerCase()\n  const testStrLen = testStr.length\n  const letterCount = {}\n  for (let i = 0; i < testStrLen; i++) {\n    const letter = testStr.charAt(i)\n    if (letterCount[letter] === undefined) {\n      letterCount[letter] = 1\n    } else {\n      letterCount[letter]++\n    }\n  }\n  return letterCount\n}\n\n/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram2 = (test) => {\n  const testStr = test.toLowerCase()\n  const testStrLen = testStr.length\n  const letterCount = {}\n  for (let i = 0; i < testStrLen; i++) {\n    const letter = testStr.charAt(i)\n    if (letterCount[letter] === undefined) {\n      letterCount[letter] = 1\n    } else {\n      letterCount[letter]++\n    }\n  }\n  return letterCount\n}\n\n/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram3 = (test) => {\n  const testStr = test.toLowerCase()\n  const testStrLen = testStr.length\n  const letterCount = {}\n  for (let i = 0; i < testStrLen; i++) {\n    const letter = testStr.charAt(i)\n    if (letterCount[letter] === undefined) {\n      letterCount[letter] = 1\n    } else {\n      letterCount[letter]++\n    }\n  }\n  return letterCount\n}\n\n/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram4 = (test) => {\n  const testStr = test.toLowerCase()\n  const testStrLen = testStr.length\n  const letterCount = {}\n  for (let i = 0; i < testStrLen; i++) {\n    const letter = testStr.charAt(i)\n    if (letterCount[letter] === undefined) {\n      letterCount[letter] = 1\n    } else {\n      letterCount[letter]++\n    }\n  }\n  return letterCount\n}\n\n/*GivEN a strIng rEpresentING a sPace sEPARateD lowercase Letters, return a dictionary\n  OF tHe LeTter witH The mOst rEpEtITiOn aND conTaInInG tHE cORreSpONDinG COunt.\n  If sevErAL leTterS hAve ThE SAME occurReNce, return alL of THeM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram5 = (test) => {\n  const testStr = test.toLowerCase()\n", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 2, "perturbed": true, "gc": "/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let i = 0, j = 0;\n    let result = [];\n    while (i < s.length) {\n        if (s[i] === c) {\n            i++;\n        } else {\n            result.push(s[i]);\n            i++;\n        }\n    }\n    return result;\n}\n\n/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete2 = (s, c) => {\n    let i = 0, j = 0;\n    let result = [];\n    while (i < s.length) {\n        if (s[i] === c) {\n            i++;\n        } else {\n            j++;\n            result.push(s[j]);\n            i++;\n        }\n    }\n    return result;\n}\n\n/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete3 = (s, c) => {\n    let i = 0, j = 0;\n    let result = [];\n    while (i < s.length) {\n        if (s[i] === c) {\n            i++;\n        } else {\n            j++;\n            result.push(s[j]);\n            i++;\n        }\n    }\n    return result;\n}\n\n/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete4 = (s, c) => {\n    let i = 0, j = 0;\n    let result = [];\n    while (i < s.length) {\n        if (s[i] === c) {\n            i++;\n        } else {\n            j++;\n            result.push(s[j]);\n            i++;\n        }\n    }\n    return result;\n}\n\n/*TasK\n  we arE givEn two strINGs s And c, yoU HAVe to Deleted all The characters in s that ARe EqUaL to any cHAracTer in c\n  tHeN cHEcK if THe reSuLt StRiNG iS PalInDROme.\n  a STring is caLlED paLindRoMe iF iT READs the sAmE backWarD As FoRWARD.\n  YoU sHould return a tuple cOntAIning tHe rEsULt sTrinG aND trUe/False fOR The chEck.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete5 = (s, c) => {\n    let i = 0, j", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 2, "perturbed": true, "gc": "/*GivEN a list of StriNgs, where EACh StrinG CONsisTs of only diGits, return a list.\n  Each element i oF ThE oUtPut shouLD be \"tHe nuMbEr OF oDd eLEmenTs in ThE\n  sTrINg i OF thE iNPUt.\" wHERe all the i's sHoULd bE repLaCed By THE NUmber\n  oF oDd digIts in THe i'th StRING Of tHe Input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++\n    }\n  }\n  return [`the number of odd elements ${count} of the ${lst.length} input.`]\n}\n\nmodule.exports = oddCount\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY of integERS nums, fInd thE MINimuM sum of any nOn-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0);\n  const minSum = Math.min(sum, 0);\n  const minSubArraySum = (nums) => {\n    const sum = nums.reduce((acc, num) => acc + num, 0);\n    return Math.min(sum, 0);\n  };\n  return minSubArraySum(nums);\n};\n\nconst test = () => {\n  console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n  console.log(minSubArraySum([-1, -2, -3]));\n};\n\ntest();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A rectangULAr grid Of welLS. eAch rOw represenTs a single well,\n  and eACh 1 in A rOw RepreseNTs a sInglE uNiT Of WatER.\n  EacH wElL hAs A CoRResPoNDIng BUCket that cAn BE usEd to ExTraCt WATER from iT, \n  aNd all BucKEtS hAVE THe sAmE capacity.\n  Your taSk iS To use tHe bUcKEts To emPtY The WeLls.\n  OutPUT the nUmber of tImes you NEeD to lowEr tHe BUckeTS.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let n = grid.length;\n    let m = grid[0].length;\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                res += 1;\n            }\n        }\n    }\n    return res >= capacity? res : -1;\n};\n\nconst main = () => {\n    let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n    let capacity = 1;\n    console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  In THis KAta, yOu have to SORt An arrAY OF non-Negative inTegers according to\n  NUmBeR oF ones in thEIr biNary RePrESeNtaTIon in aScEnDiNg ORdER.\n  FoR sIMIlaR NUmber of onEs, SOrt BaseD oN deCiMAL VAlue.\n\n  It MuSt be iMplEMeNtED LIKe tHiS:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 2, "perturbed": true, "gc": "/*GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length >= n) {\n      result.push(words[i].substr(0, n))\n    }\n  }\n  return result\n}\n\n/*\n  GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length >= n) {\n      result.push(words[i].substr(0, n))\n    }\n  }\n  return result\n}\n\n/*\n  GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length >= n) {\n      result.push(words[i].substr(0, n))\n    }\n  }\n  return result\n}\n\n/*\n  GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length >= n) {\n      result.push(words[i].substr(0, n))\n    }\n  }\n  return result\n}\n\n/*\n  GivEN a stRing s And a natuRAL nUmber n, YOU Have Been tasked To implement \n  a functIOn ThAt Returns A list Of alL worDs FrOM sTriNG s thaT cOnTaIn EXaCTly \n  n CoNSOnaNTS, in order theSe WOrdS appEaR in thE sTRING s.\n  If the StRing s iS emPTy ThEN THE fuNcTion shoUld return AN empty list.\n  notE: yOU maY assUmE The InPut strING contAins only Letters ANd Spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a word. your task IS To Find tHE CLoseSt vowel thaT stands between \n  two COnSoNaNts from THe riGht sIdE oF ThE word (caSE senSiTiVe).\n  \n  voWElS in The BeGINniNG And ending DoESn't CounT. REtuRn EMPTY strinG iF you dIdn'T\n  FiNd ANY VOweL mEt the abOve COnditiOn. \n\n  YOu MAy aSsumE tHAt tHe Given sTRIng coNtains EnGlish leTTeR only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < wordLength; i++) {\n    let vowel = word[i]\n    let distance = Math.abs(vowel.charCodeAt(0) - vowels.indexOf(closestVowel))\n    if (distance < closestDistance) {\n      closestVowel = vowel\n      closestDistance = distance\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < wordLength; i++) {\n    let vowel = word[i]\n    let distance = Math.abs(vowel.charCodeAt(0) - vowels.indexOf(closestVowel))\n    if (distance < closestDistance) {\n      closestVowel = vowel\n      closestDistance = distance\n    }\n  }\n  return closestVowel\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < wordLength; i++) {\n    let vowel = word[i]\n    let distance = Math.abs(vowel.charCodeAt(0) - vowels.indexOf(closestVowel))\n    if (distance < closestDistance) {\n      closestVowel = vowel\n      closestDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < wordLength; i++) {\n    let vowel = word[i]\n    let distance = Math.abs(vowel.charCodeAt(0) - vowels.indexOf(closestVowel))\n    if (distance < closestDistance) {\n      closestVowel = vowel\n      closestDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < wordLength; i++) {\n    let vowel = word[i]\n    let distance = Math.abs(vowel.charCodeAt(0) - vowels.indexOf(closestVowel))\n    if (distance < closestDistance) {\n      closestVowel = vowel\n      closestDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0; i < wordLength; i++) {\n    let vowel = word[i]\n    let distance = Math.abs(vowel.charCodeAt(0) - vowels.indexOf(closestVowel))\n    if (distance < closestDistance) {\n      closestVowel = vowel\n      closestDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst getClosestVowel7 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const wordLength = word.length\n  let closestVowel = ''\n  let closestDistance = Infinity\n  for (let i = 0;", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 2, "perturbed": true, "gc": "/* YoU Are gIven A list of two stRINgS, both STRIngs Consist of oPen\n  parentheses '(' or cLOsE pArEntheseS ')' Only.\n  your JoB iS To CheCK if iT iS pOsSiBLe TO coNcATEnaTE The two strInGS in\n  soMe orDeR, thAt THE REsultiNg StrinG wiLL bE gOOD.\n  a StrInG S is conSidERed to bE goOd IF anD onlY iF All PaRentheSES in S\n  are Balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\n/*\n  matchParens(['()', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens2 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens3 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens4 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens5 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens6 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens7 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens8 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconst matchParens9 = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0", "passed": 0}
{"task_id": "JavaScript/12", "prompt": "/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 2, "perturbed": true, "gc": "/* OuT Of list of strings, return The longest oNe. Return THE fIrst oNE in CAse oF multiple\n  strings oF the same length. RetURn NuLl in Case the INput list Is emPtY.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = ''\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY arr of integERS aNd a poSITIve iNteger k, return a sorTed list \n  of length k with thE maximum k NuMbErS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const min = arr[0]\n  const minIndex = 0\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[maxIndex])\n    maxIndex = (maxIndex + 1) % len\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const min = arr[0]\n  const minIndex = 0\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[maxIndex])\n    maxIndex = (maxIndex + 1) % len\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const min = arr[0]\n  const minIndex = 0\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[minIndex])\n    minIndex = (minIndex + 1) % len\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const min = arr[0]\n  const minIndex = 0\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[maxIndex])\n    maxIndex = (maxIndex + 1) % len\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const min = arr[0]\n  const minIndex = 0\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[minIndex])\n    minIndex = (minIndex + 1) % len\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const min = arr[0]\n  const minIndex = 0\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[maxIndex])\n    maxIndex = (maxIndex + 1) % len\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex = 0\n  const min = arr[0]\n  const minIndex = 0\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n    }\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    result.push(arr[minIndex])\n    minIndex = (minIndex + 1) % len\n  }\n  return result\n}\n\nconst maximum = (arr, k) => {\n  const len = arr.length\n  const max = arr[0]\n  const maxIndex", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 2, "perturbed": true, "gc": "/*GivEN a noN-empTy list of inteGERs, return The suM OF All oF the odd eleMents that are in even pOSiTiOnS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a nOn-emPty array OF InTegerS arr AND an iNteger k, return\n  the sUm of the elements wiTH aT mOsT two digITs frOm thE fIrST k eLemENts oF arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, return A sOrted list THAT has The odd numbErs in collatz sequencE.\n\n  thE COlLatz conJEctuRe is A cOnJEcTurE in MathEmAtIcS tHAt COncErNS A seQUEnce definEd\n  AS foLlowS: sTarT wITH ANy posiTiVe intEgeR n. thEn EACH TerM iS obtainEd fROm the \n  pRevIoUS teRm as FoLLowS: iF the prEVIous tErm is eveN, the nexT TeRm is onE haLf OF \n  the PREviouS terM. If The previOuS teRm is odd, thE next Term is 3 Times tHe prevIouS\n  teRm PluS 1. ThE cONjecturE Is THaT no mattER whAT value of n, The seQuEnce wiLl alwayS ReACh 1.\n\n  note: \n      1. cOlLaTz(1) is [1].\n      2. reTURNed list soRted in iNcreasing ordEr.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = n % 2;\n    const even = n - odd;\n    const oddCollatz = collatz(odd);\n    const evenCollatz = collatz(even);\n    return oddCollatz.concat(evenCollatz);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    ", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 2, "perturbed": true, "gc": "/*You HAve tO wriTe a functION wHich vALIDateS a given date strIng and\n  returns true IF tHe date Is Valid otHErwiSe faLsE.\n  THE date iS vaLId if AlL oF tHe FOlLOwiNg RULes ARE satisfieD:\n  1. THE date stRing Is Not EmPTY.\n  2. tHe numbEr Of dayS is NOt LeSS THAn 1 oR hIgher thAn 31 dAYs for mOntHs 1,3,5,7,8,10,12. aNd tHe nuMbER of DaYs is noT LEss thAn 1 or highEr than 30 dAYs For monThs 4,6,9,11. anD, The nUMBer of Days Is nOt less thAn 1 Or hIgher than 29 For thE month 2.\n  3. the monThs shoUld Not Be LesS thAn 1 OR higher THaN 12.\n  4. thE date should BE in thE Format: mm-Dd-yyyY\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (year < 1900 || year > 2020) {\n    return false;\n  }\n  if (month === 2 && day > 29) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default validDate;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1, ... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 2, "perturbed": true, "gc": "/* GiVEn a sTrinG of words, return A list OF wOrds sPLIT on wHitespace, iF no whitespaces exiSTs in ThE tExt you\n  sHOuld SpliT oN cOMmAs ',' iF No coMmAs ExIsTS yOU shOuLD return The NUMber of lowEr-CAse LettErS wiTh ODD ORder in thE\n  aLphabEt, oRD('a') = 0, OrD('B') = 1,... ORD('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsLengthMinusOne = wordsLength - 1;\n  const wordsLengthMinusTwo = wordsLength - 2;\n  const wordsLengthMinusThree = wordsLength - 3;\n  const wordsLengthMinusFour = wordsLength - 4;\n  const wordsLengthMinusFive = wordsLength - 5;\n  const wordsLengthMinusSix = wordsLength - 6;\n  const wordsLengthMinusSeven = wordsLength - 7;\n  const wordsLengthMinusEight = wordsLength - 8;\n  const wordsLengthMinusNine = wordsLength - 9;\n  const wordsLengthMinusTen = wordsLength - 10;\n  const wordsLengthMinusEleven = wordsLength - 11;\n  const wordsLengthMinusTwelve = wordsLength - 12;\n  const wordsLengthMinusThirteen = wordsLength - 13;\n  const wordsLengthMinusFourteen = wordsLength - 14;\n  const wordsLengthMinusFifteen = wordsLength - 15;\n  const wordsLengthMinusSixteen = wordsLength - 16;\n  const wordsLengthMinusSeventeen = wordsLength - 17;\n  const wordsLengthMinusEighteen = wordsLength - 18;\n  const wordsLengthMinusNineteen = wordsLength - 19;\n  const wordsLengthMinusTwenty = wordsLength - 20;\n  const wordsLengthMinusTwentyOne = wordsLength - 21;\n  const wordsLengthMinusTwentyTwo = wordsLength - 22;\n  const wordsLengthMinusTwentyThree = wordsLength - 23;\n  const wordsLengthMinusTwentyFour = wordsLength - 24;\n  const wordsLengthMinusTwentyFive = wordsLength - 25;\n  const wordsLengthMinusTwentySix = wordsLength - 26;\n  const wordsLengthMinusTwentySeven = wordsLength - 27;\n  const wordsLengthMinusTwentyEight = wordsLength - 28;\n  const wordsLengthMinusTwentyNine = wordsLength - 29;\n  const wordsLengthMinusThirty = wordsLength - 30;\n  const wordsLengthMinusThirtyOne = wordsLength - 31;\n  const wordsLengthMinusThirtyTwo = wordsLength - 32;\n  const wordsLengthMinusThirtyThree = wordsLength - 33;\n  const wordsLengthMinusThirtyFour = wordsLength - 34;\n  const wordsLengthMinusThirtyFive = wordsLength - 35;\n  const wordsLengthMinusThirtySix = wordsLength - 36;\n  const wordsLengthMinusThirtySeven = wordsLength - 37;\n  const wordsLengthMinusThirtyEight = wordsLength - 38;\n  const wordsLengthMinusThirtyNine = wordsLength - 39;\n  const wordsLengthMinusFourty = wordsLength - 40;\n  const wordsLengthMinusFourtyOne = wordsLength - 41;\n  const wordsLengthMinusFourtyTwo = wordsLength - 42;\n  const wordsLengthMinusFourtyThree = wordsLength - 43;\n  const wordsLengthMinusFourtyFour = wordsLength - 44;\n  const wordsLengthMinusFourtyFive = wordsLength - 45;\n  const wordsLengthMinusFourtySix = wordsLength - 46;\n  const wordsLengthMinusFourtySeven = wordsLength - 47;\n  const wordsLengthMinusFourtyEight = wordsLength - 48;\n  const wordsLengthMinusFourtyNine = wordsLength - 49;\n  const wordsLengthMinusFifty = wordsLength - 50;\n  const wordsLengthMinusFiftyOne = wordsLength - 51;\n  const wordsLengthMinusFiftyTwo = wordsLength - 52;\n  const wordsLengthMinusFiftyThree = wordsLength - 53;\n  const wordsLengthMinusFiftyFour = wordsLength - 54;\n  const wordsLengthMinusFiftyFive = wordsLength - 55;\n  const wordsLengthMinusFiftySix = wordsLength - 56;\n  const wordsLengthMinusFiftySeven = wordsLength - 57;\n  const wordsLengthMinusFiftyEight = wordsLength - 58;\n  const wordsLengthMinusFiftyNine = wordsLength - 59;\n  const wordsLengthMinusSixty = wordsLength - 60;\n  const wordsLengthMinusSixtyOne = wordsLength - 61;\n  const wordsLengthMinusSixtyTwo = wordsLength - 62;\n  const wordsLengthMinusSixtyThree = wordsLength - 63;\n  const wordsLengthMinusSixtyFour = wordsLength - 64;\n  const wordsLengthMinusSixtyFive = wordsLength - 65;\n  const wordsLengthMinusSixtySix = wordsLength - 66;\n  const wordsLengthMinusSixtySeven = wordsLength - 67;\n  const wordsLengthMinusSixtyEight = wordsLength - 68;\n  const wordsLengthMinusSixtyNine = wordsLength - 69;\n  const wordsLengthMinusSeventy = wordsLength - 70;\n  const wordsLengthMinusSeventyOne = wordsLength - 71;\n  const wordsLengthMinusSeventyTwo = wordsLength - 72;\n  const wordsLengthMinusSeventyThree = wordsLength - 73;\n  const wordsLengthMinusSeventyFour = wordsLength - 74;\n  const wordsLengthMinusSeventyFive = wordsLength - 75;\n  const wordsLengthMinusSeventySix = wordsLength - 76;\n  const wordsLengthMinusSeventySeven = wordsLength - 77;\n  const wordsLengthMinusSeventyEight = wordsLength - 78;\n  const wordsLengthMinusSeventyNine = wordsLength - 79;\n  const wordsLengthMinusEighty = wordsLength - 80;\n  const wordsLengthMinusEightyOne = wordsLength - 81;\n  const wordsLengthMinusEightyTwo = wordsLength - 82;\n  const wordsLengthMinusEightyThree = wordsLength - 83;\n  const wordsLengthMinusEightyFour = wordsLength - 84;\n  const wordsLengthMinusEightyFive = wordsLength - 85", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 2, "perturbed": true, "gc": "/* GiVEn a list oF numBers, return whetHER oR not tHEY Are sOrted\n  in ascenDing order. If list has morE ThAn 1 DuPlicate OF the Same\n  NuMbER, return fAlsE. assuMe No NeGaTIvE NumBeRS And ONLy integerS.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 1;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[j]) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\n/*\n  Given a list of numBers, return the number of unique numBers.\n  Examples\n  numBers([1, 2, 3, 4, 5]) ➞ 5\n  numBers([1, 2, 3, 4, 5, 6]) ➞ 6\n  numBers([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  numBers([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 8\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 9\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 10\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 11\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 12\n  */\nconst numBers = (lst) => {\n  let i = 0;\n  let j = 0;\n  let numBers = 0;\n  while (i < lst.length) {\n    if (lst[i] === lst[j]) {\n      numBers++;\n    }\n    i++;\n    j++;\n  }\n  return numBers;\n};\n\n/*\n  Given a list of numBers, return the number of unique numBers,\n  but only return the numBers that are in ascending order.\n  Examples\n  numBers([1, 2, 3, 4, 5]) ➞ [1, 2, 3, 4, 5]\n  numBers([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  numBers([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6, 7]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8]) ➞ [1, 2, 3, 4, 5, 6, 7, 8]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst numBersAsc = (lst) => {\n  let i = 0;\n  let j = 0;\n  let numBers = [];\n  while (i < lst.length) {\n    if (lst[i] === lst[j]) {\n      numBers.push(lst[i]);\n    }\n    i++;\n    j++;\n  }\n  return numBers;\n};\n\n/*\n  Given a list of numBers, return the number of unique numBers,\n  but only return the numBers that are in descending order.\n  Examples\n  numBers([1, 2, 3, 4, 5]) ➞ [5, 4, 3, 2, 1]\n  numBers([1, 2, 3, 4, 5, 6]) ➞ [5, 4, 3, 2, 1, 6]\n  numBers([1, 2, 3, 4, 5, 6, 7]) ➞ [5, 4, 3, 2, 1, 6, 7]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8]) ➞ [5, 4, 3, 2, 1, 6, 7, 8]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ [5, 4, 3, 2, 1, 6, 7, 8, 9]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ [5, 4, 3, 2, 1, 6, 7, 8, 9, 10]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ [5, 4, 3, 2, 1, 6, 7, 8, 9, 10, 11]\n  numBers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ [5, 4", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen tWo intervALS,\n  wHere eACH InteRval is a paiR of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start && interval1.end === interval2.end) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n  if (interval1.end < interval2.start) {\n    return \"NO\";\n  }\n  if (interval1.start === interval2.start &&", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note: return NuLL foR empTy arr.\n\n  exaMpLE:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i])\n  }\n  return sum\n}\n\n/*\n  YoU Are gIven An array arr oF INtEgers AND You nEed to return\n  sum of Magnitudes of integERs MuLtIplied bY ProdUct oF aLl SIgNs\n  oF Each NuMbEr in ThE ArRAy, rEpRESenTED by 1, -1 or 0.\n  Note:", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a grid wIth N Rows and N COLuMns (N >= 2) aND A PosiTive integeR k, \n  each cell of the grid conTAiNs A vAlue. EveRY intEger in ThE rANgE [1, N * N]\n  INcluSiVe ApPeARs EXacTlY ONce ON The cells oF tHE grid.\n\n  YoU havE tO fiNd THE MInimum PaTh of lEngTH k in tHe grid. yOU CAn sTaRt\n  from aNy cELl, and in eAch StEP yoU can MoVE to AnY of the NEIghboR cells,\n  in otHer wordS, YoU can go To cElLS whiCH Share An edGe wIth you cuRrEnt\n  Cell.\n  PleasE note That a pAth of lEngth k mEanS viSiTinG exAcTLy k cells (NOt\n  NEcEssarilY DisTInct).\n  You CaNNOT Go Off the grid.\n  a path A (oF LeNGtH k) is cONsIdEred leSS THan a pAth B (oF length k) if\n  aftEr makIng thE oRDered lisTs oF tHE vALUEs ON THe CelLS thaT A aNd B go\n  thrOugh (let's calL ThEm lsT_a aND lST_B), Lst_a iS leXiCOgraphIcALLY LEss\n  than lST_B, in oThEr words, tHerE exiSt AN integeR indeX i (1 <= i <= k)\n  SUch That lST_A[i] < Lst_B[i] and FoR aNY j (1 <= j < i) we haVe\n  lst_A[J] = lST_B[J].\n  It IS guArantEEd THaT THE aNsweR iS UniQue.\n  RetuRN an OrdereD list OF tHe values ON thE ceLls tHat the mINiMUM path Go ThrOUgh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0];\n  const [row_max, col_max] = [rows, cols];\n  const [row_min, col_min] = [1, 1];\n  const [row_step, col_step] = [1, 1];\n  const [row_start, col_start] = [1, 1];\n  const [row_end, col_end] = [row_max, col_max];\n  const [row_step_end, col_step_end] = [row_max, col_max];\n  const [row_step_start, col_step_start] = [row_max, col_max];\n  const [row_step_start_end, col_step_start_end] = [row_max, col_max];\n  const [row_step_end_start, col_step_end_start] = [row_max, col_max];\n  const [row_step_end_start_end, col_step_end_start_end] = [row_max, col_max];\n  const [row_step_end_end_start, col_step_end_end_start] = [row_max, col_max];\n  const [row_step_end_end_start_end, col_step_end_end_start_end] = [row_max, col_max];\n  const [row_step_end_end_end_start, col_step_end_end_end_start] = [row_max, col_max];\n  const [row_step_end_end_end_start_end, col_step_end_end_end_start_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end, col_step_end_end_end_start_end_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end_end, col_step_end_end_end_start_end_end_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end_end_end, col_step_end_end_end_start_end_end_end_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end_end_end_end, col_step_end_end_end_start_end_end_end_end_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end_end_end_end_end, col_step_end_end_end_start_end_end_end_end_end_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end_end_end_end_end_end, col_step_end_end_end_start_end_end_end_end_end_end_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end_end_end_end_end_end_end, col_step_end_end_end_start_end_end_end_end_end_end_end_end] = [row_max, col_max];\n  const [row_step_end_end_end_start_end_end_end_end_end_end_end_end_end, col_step_end_end_end_start_end_end_end_end_end_end_end_end_end] = [row_max, col_max];\n  const [row_step_end_end_end", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 2, "perturbed": true, "gc": "/* ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    const remainder = y % x;\n    y = x;\n    x = remainder;\n  }\n  return y;\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the greatest common divisor\nconst gcd = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and b\n// and return the least common multiple\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\n// ReTUrn a gReatEst commoN DIvIsor oF TWO intEgers a and", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 2, "perturbed": true, "gc": "/*EveRYone KnowS FibonacCI SeQuencE, IT Was sTudied deepLy by mathematicianS in \n  ThE lAsT couple CEntuRies. hoWeVEr, WhaT PeopLe DoN't KnOW iS triBoNACci SEQuence.\n  TriBoNAccI seqUeNce Is DEFINed by tHe RecurRenCE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, iF n iS EVEN.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n Is Odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1, b = 1, c = 1, i = 1;\n  let result = [];\n  while (i <= n) {\n    result.push(a + b + c);\n    a = b;\n    b = c;\n    c = a + b;\n    i++;\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/131", "prompt": "/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 2, "perturbed": true, "gc": "/*GivEN a poSitiVe integeR n, return THe ProduCT OF the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = 0;\n  while (n > 0) {\n    digits = digits + n % 2;\n    n = n / 2;\n  }\n  return digits;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Product of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst product = (n) => {\n  let product = 1;\n  while (n > 0) {\n    product = product * n % 10;\n    n = n / 10;\n  }\n  return product;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum2 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum3 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum4 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum5 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum6 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum7 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum8 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum9 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*GivEN a poSitiVe integeR n, return THe Sum of the Odd digits.\n  Return 0 iF all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst sum10 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    n = n / 10;\n  }\n  return sum;\n}\n\n/*", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 2, "perturbed": true, "gc": "/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested = (string) => {\n  const regex = /\\[\\[\\]\\]/g\n  return regex.test(string)\n}\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested2 = (string) => {\n  const regex = /\\[\\[\\]\\]/g\n  return regex.test(string)\n}\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested3 = (string) => {\n  const regex = /\\[\\[\\]\\]/g\n  return regex.test(string)\n}\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested4 = (string) => {\n  const regex = /\\[\\[\\]\\]/g\n  return regex.test(string)\n}\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested5 = (string) => {\n  const regex = /\\[\\[\\]\\]/g\n  return regex.test(string)\n}\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE Of bRACkets\n  wherE aT LeaSt onE bRacKeT in THE SubseqUeNce is NesTEd.\n  isNested('[[]]') ➞ TrUE\n  isNested('[]]]]]]][[[[[]') ➞ FALse\n  isNested('[][]') ➞ FaLse\n  isNested('[]') ➞ falsE\n  isNested('[[][]]') ➞ trUE\n  isNested('[[]][[') ➞ true\n  */\ncOnsT isNested6 = (string) => {\n  const regex = /\\[\\[\\]\\]/g\n  return regex.test(string)\n}\n\n/*\n  CrEAte a FuncTion that TAKeS a string as iNPUT whiCh contains Only square bracketS.\n  thE fUnCtion shOUld return tRue iF aNd ONlY if THere Is A vAlId SUbSEquEnCE", "passed": 0}
{"task_id": "JavaScript/133", "prompt": "/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a list Of numberS.\n  yOu Need tO return THE sum Of squared nUmbers in the given list,\n  rouND eAcH eLement in tHE list to tHe upPeR int(Ceiling) fIRsT.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sum", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 2, "perturbed": true, "gc": "/* CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotAlpha =!isAlpha;\n  return isAlpha && isNotAlpha;\n};\n\n/*\n  CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotAlpha =!isAlpha;\n  return isAlpha && isNotAlpha;\n};\n\n/*\n  CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotAlpha =!isAlpha;\n  return isAlpha && isNotAlpha;\n};\n\n/*\n  CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotAlpha =!isAlpha;\n  return isAlpha && isNotAlpha;\n};\n\n/*\n  CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotAlpha =!isAlpha;\n  return isAlpha && isNotAlpha;\n};\n\n/*\n  CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse OtHERwiSE.\n  note: \"word\" iS a GRouP of cHaRacTeRS SEParateD bY spacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  const isAlpha = /[a-zA-Z]/.test(lastChar);\n  const isNotAlpha =!isAlpha;\n  return isAlpha && isNotAlpha;\n};\n\n/*\n  CrEAte a FuncTion that RETuRns trUE IF the Last characTer\n  of a given string IS aN aLpHabeticAL chaRactEr AnD Is Not\n  A Part Of A wOrD, aND fALse", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 2, "perturbed": true, "gc": "/*CreATe a fUnctIon which RETuRns thE LARgesT index of an Element which\n  is not GReAtEr Than or eQUal tO the ElEmENt ImmEDiatElY pReCeDInG It. IF\n  nO SUch ELEment exisTs THen return -1. the gIvEn aRrAY WILl not cOnTain\n  dUplICaTe VALUEs.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the LARGest index of an Element which is not GREATER THAN or EQUAL\n  TO the Element ImmEDiatElY pReCeDInG. IF nO SUch ELEment exisTs THen\n  return -1.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the LARGest index of an Element which is GREATER THAN or EQUAL\n  TO the Element ImmEDiatElY pReCeDInG. IF nO SUch ELEment exisTs THen\n  return -1.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the LARGest index of an Element which is GREATER THAN or EQUAL\n  TO the Element ImmEDiatElY pReCeDInG. IF nO SUch ELEment exisTs THen\n  return -1.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the LARGest index of an Element which is GREATER THAN or EQUAL\n  TO the Element ImmEDiatElY pReCeDInG. IF nO SUch ELEment exisTs THen\n  return -1.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the LARGest index of an Element which is GREATER THAN or EQUAL\n  TO the Element ImmEDiatElY pReCeDInG. IF nO SUch ELEment exisTs THen\n  return -1.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the LARGest index of an Element which is GREATER THAN or EQUAL\n  TO the Element ImmEDiatElY pReCeDInG. IF nO SUch ELEment exisTs THen\n  return -1.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange7 = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the LARGest index of an Element which is GREATER THAN or EQUAL\n  TO the Element ImmEDiatElY pReCeDInG. IF nO SUch ELEment exisTs THen\n  return -1.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange8 = (arr) => {\n  let max = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\nexport {\n  canArrange,\n  canArrange2,\n  canArrange3,\n  canArrange4,\n  canArrange5,\n  canArrange6,\n  canArrange7,\n  canArrange8\n};\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 2, "perturbed": true, "gc": "/* CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [null, a];\n  return [a, b];\n};\n\n/*\n  CrEAte a fUnctIon that rETUrNs a tuple (a, b), wheRE 'a' IS\n  the Largest of nEgative integers, anD 'b' Is ThE sMallest\n  OF posItivE iNtEGeRs in a list.\n  IF TherE iS nO nEgATiVE or PoSITivE INtegers, return thEm AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 3)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers2 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers3 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers4 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers5 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers6 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers7 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers8 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers9 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers10 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers11 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers12 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers13 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers14 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers15 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0) return [null, null];\n  if (b === 0) return [a, null];\n  return [a, b];\n};\n\nconst largestSmallestIntegers16 = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (a === 0", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE . oR ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 2, "perturbed": true, "gc": "/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ NulL\n  */\nconSt compareOne = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  return null\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"6\"\n  compareTwo(\"1\", 1) ➞ NulL\n  */\nconSt compareTwo = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  return null\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareThree(1, 2.5) ➞ 2.5\n  compareThree(1, \"2,3\") ➞ \"2,3\"\n  compareThree(\"5,1\", \"6\") ➞ \"6\"\n  compareThree(\"1\", 1) ➞ NulL\n  */\nconSt compareThree = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  return null\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareFour(1, 2.5) ➞ 2.5\n  compareFour(1, \"2,3\") ➞ \"2,3\"\n  compareFour(\"5,1\", \"6\") ➞ \"6\"\n  compareFour(\"1\", 1) ➞ NulL\n  */\nconSt compareFour = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  return null\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs thE larGeR vARiAblE in Its gIvEn VaRiABlE TypE.\n  RETUrn NULl if the vaLuES arE equAl.\n  notE: IF a REAL numbeR iS reprEseNTeD aS a STRIng, ThE floatiNg pOInt migHt bE. oR,\n\n  compareFive(1, 2.5) ➞ 2.5\n  compareFive(1, \"2,3\") ➞ \"2,3\"\n  compareFive(\"5,1\", \"6\") ➞ \"6\"\n  compareFive(\"1\", 1) ➞ NulL\n  */\nconSt compareFive = (a, b) => {\n  if (a === b) return a\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b)\n  }\n  return null\n}\n\n/*\n  CrEAte a fUnctIon that tAKEs IntegERS, FloaTs, or stringS representing\n  real NUmBeRs, And retuRNs", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 2, "perturbed": true, "gc": "/*EvaLUate WhetHer the giVEN nUmber n CAN Be wrItten as the Sum of exactly 4 positIVe EvEn Numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\nexport default isEqualToSumEven;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 2, "perturbed": true, "gc": "/*The bRaziLian FactoriaL IS dEfineD AS:\n  BrazIlian_factoRial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For examPLe:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial = (n) => {\n  return specialFactorial(n) + factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial2 = (n) => {\n  return specialFactorial(n) + factorial(n) * n;\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial3 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial4 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial5 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial6 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial7 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial8 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial9 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial10 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial11 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial12 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial13 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11);\n};\n\n/*\n  The function will receive an integer as input and should return the sum of\n  the factorial of this integer.\n  */\nconst sumFactorial14 = (n) => {\n  return specialFactorial(n) + factorial(n) * n * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 2, "perturbed": true, "gc": "/* ReTUrn list oF all Prefixes FROm ShortEST To loNgest of the Input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.slice(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcd')\n  ['a", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a sTrinG text, replace ALL sPaces in IT WIth uNderscores, \n  And if a string has moRE tHaN 2 cOnsecutIVe spAces, \n  ThEn REpLacE All cOnSeCuTiVE sPAceS wITH - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\nconst getSpaces = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\nconst getSpacesCount = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount2 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount3 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount4 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount5 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount6 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount7 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount8 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount9 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount10 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount11 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount12 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount13 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount14 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount15 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount16 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount17 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount18 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount19 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount20 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount21 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount22 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount23 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount24 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount25 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount26 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount27 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount28 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount29 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount30 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount31 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount32 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount33 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount34 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount35 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount36 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount37 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount38 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount39 = (text) => {\n  return text.replace(/\\s+/g,'').length\n}\n\nconst getSpacesCount40 = (", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 2, "perturbed": true, "gc": "/*CreATe a fuNctiOn which tAKEs a StrinG REPresEnting a file'S name, and returns\n  'YeS' If ThE tHe file's NAme iS valId, AnD ReTurNS 'No' oThErWiSe.\n  a FiLE's nAmE IS coNSIdered to bE vALid If anD oNly If ALL THe follOwIng coNdiTIoNs \n  ARE MEt:\n  - THeRe shoulD noT Be more ThaN tHRee DigiTs ('0'-'9') in THe fIlE's name.\n  - tHE file'S name conTains exACtLy one dOt '.'\n  - THe SUbstRINg befOre tHe dOt should NoT be Empty, and iT starTs with a Letter From \n  thE laTin AlPhaPet ('a'-'z' AnD 'a'-'Z').\n  - The suBStRInG after tHE doT Should be One of ThEse: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_5 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_7 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_9 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_11 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_13 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_14 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_15 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_16 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_17 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_18 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_19 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_20 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_21 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_22 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_error_23 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-z", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 2, "perturbed": true, "gc": "/*\"\n  ThIS funCtioN will takE A list Of IntegERS. for aLl entries in tHe list, the function shalL SqUaRe The inteGEr enTry iF iTs INdEx iS A \n  mulTiPlE oF 3 aND wILl cUbE THe iNTEger entry If ITs iNdex Is A muLtIPLE Of 4 and nOt A multIplE Of 3. thE FUNCtiOn Will not \n  ChaNGe the eNtrIeS in The list WhosE iNDexEs Are not A MUltipLe of 3 or 4. ThE functiON sHall thEn return tHe SUm of ALL entrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A string rEPReSentiNG A sentence,\n  The sentence cOntains somE words separated by A SpAcE,\n  aNd you haVE to return a StriNg ThAT cOntAIns tHe WoRdS fROm THe oRiGINal sentence,\n  WHOse lengthS aRE prIme nUmBerS,\n  tHE ORDer of tHe Words in The NEw StRING ShoUlD be the sAme AS the orIgiNaL One.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const wordLengths = words.map(word => word.length)\n  const maxWordLength = Math.max(...wordLengths)\n  const maxWordCount = Math.max(...wordLengths.map(wordLength => wordLength / maxWordLength))\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWordCount = Math.max(1, maxWordCount)\n  const maxWordCount = Math.min(maxWordCount, words.length)\n  const maxWord", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 2, "perturbed": true, "gc": "/*YouR Task Is to ImplemenT a FUnCtion THAT wilL simplify the expresSion\n  x * n. The function reTUrNs TrUe if x * n evaLUateS to a wHoLe NUmBer ANd faLsE\n  oThErWIsE. botH x aND n, Are STRing repreSeNTatIon oF a fRacTiON, AND have tHe FolloWinG FoRmAT,\n  <NUMerAtOr>/<denomInaTOr> wherE boTh NUmeRatoR aND deNoMinatoR ARe posItive whoLe numbeRS.\n\n  YOu can aSsuMe THat x, aND n Are vaLid fRacTions, and Do Not Have zero aS denoMinatoR.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = fAlse\n  simplify(\"7/10\", \"10/2\") = faLse\n  */\nConSt simplify = (x, n) => {\n  if (x === n) return true\n  if (x === 0) return false\n  if (x === 1) return true\n  if (x === -1) return false\n  if (x === 2) return true\n  if (x === -2) return false\n  if (x === 3) return true\n  if (x === -3) return false\n  if (x === 4) return true\n  if (x === -4) return false\n  if (x === 5) return true\n  if (x === -5) return false\n  if (x === 6) return true\n  if (x === -6) return false\n  if (x === 7) return true\n  if (x === -7) return false\n  if (x === 8) return true\n  if (x === -8) return false\n  if (x === 9) return true\n  if (x === -9) return false\n  if (x === 10) return true\n  if (x === -10) return false\n  if (x === 11) return true\n  if (x === -11) return false\n  if (x === 12) return true\n  if (x === -12) return false\n  if (x === 13) return true\n  if (x === -13) return false\n  if (x === 14) return true\n  if (x === -14) return false\n  if (x === 15) return true\n  if (x === -15) return false\n  if (x === 16) return true\n  if (x === -16) return false\n  if (x === 17) return true\n  if (x === -17) return false\n  if (x === 18) return true\n  if (x === -18) return false\n  if (x === 19) return true\n  if (x === -19) return false\n  if (x === 20) return true\n  if (x === -20) return false\n  if (x === 21) return true\n  if (x === -21) return false\n  if (x === 22) return true\n  if (x === -22) return false\n  if (x === 23) return true\n  if (x === -23) return false\n  if (x === 24) return true\n  if (x === -24) return false\n  if (x === 25) return true\n  if (x === -25) return false\n  if (x === 26) return true\n  if (x === -26) return false\n  if (x === 27) return true\n  if (x === -27) return false\n  if (x === 28) return true\n  if (x === -28) return false\n  if (x === 29) return true\n  if (x === -29) return false\n  if (x === 30) return true\n  if (x === -30) return false\n  if (x === 31) return true\n  if (x === -31) return false\n  if (x === 32) return true\n  if (x === -32) return false\n  if (x === 33) return true\n  if (x === -33) return false\n  if (x === 34) return true\n  if (x === -34) return false\n  if (x === 35) return true\n  if (x === -35) return false\n  if (x === 36) return true\n  if (x === -36) return false\n  if (x === 37) return true\n  if (x === -37) return false\n  if (x === 38) return true\n  if (x === -38) return false\n  if (x === 39) return true\n  if (x === -39) return false\n  if (x === 40) return true\n  if (x === -40) return false\n  if (x === 41) return true\n  if (x === -41) return false\n  if (x === 42) return true\n  if (x === -42) return false\n  if (x === 43) return true\n  if (x === -43) return false\n  if (x === 44) return true\n  if (x === -44) return false\n  if (x === 45) return true\n  if (x === -45) return false\n  if (x === 46) return true\n  if (x === -46) return false\n  if (x === 47) return true\n  if (x === -47) return false\n  if (x === 48) return true\n  if (x === -48) return false\n  if (x === 49) return true\n  if (x === -49) return false\n  if (x === 50) return true\n  if (x === -50) return false\n  if (x === 51) return true\n  if (x === -51) return false\n  if (x === 52) return true\n  if (x === -52) return false\n  if (x === 53) return true\n  if (x === -53) return false\n  if (x === 54) return true\n  if (x === -54) return false\n  if (x === 55) return true\n  if (x === -55) return false\n  if (x === 56) return true\n  if (x === -56) return false\n  if (x === 57) return true\n  if (x === -57) return false\n  if (x === 58) return true\n  if (x === -58) return false\n  if (x === 59) return true\n  if (x === -59) return false\n  if (x === 60) return true\n", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS WitH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted.map(n => n * -1);\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS witH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderBySum = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted.map(n => n + sorted.reduce((a, b) => a + b, 0));\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS witH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderBySum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderBySum([]) == []\n  */\nconst orderBySum2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted.map(n => n + sorted.reduce((a, b) => a + b, 0));\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS witH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderBySum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderBySum([]) == []\n  */\nconst orderBySum3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted.map(n => n + sorted.reduce((a, b) => a + b, 0));\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS witH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderBySum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderBySum([]) == []\n  */\nconst orderBySum4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted.map(n => n + sorted.reduce((a, b) => a + b, 0));\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS witH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderBySum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderBySum([]) == []\n  */\nconst orderBySum5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);\n  return sorted.map(n => n + sorted.reduce((a, b) => a + b, 0));\n};\n\n/*\n  WrITe a fUnctIon which SORtS the gIVEN list of iNtegers\n  in ascEnding order accordINg To ThE sum of tHEir dIgitS.\n  NOtE: If TheRE are SeVeRaL iTEmS witH sIMIlaR SUm of their DiGIts,\n  OrdeR tHem BaSED ON their InDex in orIgiNAl list.\n\n  foR EXAMplE:\n  >>> orderBySum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderBySum([]) == []\n  */\nconst orderBySum6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => a - b);", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that taKES aN arraY OF NumbErs as input And returns \n  the numbER oF eLeMents in thE ArraY thaT aRe GReAteR Than 10 AnD bOtH \n  fIRsT And LaST DigITS of a numbeR aRE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const numsArr = Array.from(nums);\n  const arr = [];\n  const arrLength = numsArr.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  let max = 0;\n  let min = 0;\n  let sum = 0;\n  let sum2 = 0;\n  let sum3 = 0;\n  let sum4 = 0;\n  let sum5 = 0;\n  let sum6 = 0;\n  let sum7 = 0;\n  let sum8 = 0;\n  let sum9 = 0;\n  let sum10 = 0;\n  let sum11 = 0;\n  let sum12 = 0;\n  let sum13 = 0;\n  let sum14 = 0;\n  let sum15 = 0;\n  let sum16 = 0;\n  let sum17 = 0;\n  let sum18 = 0;\n  let sum19 = 0;\n  let sum20 = 0;\n  let sum21 = 0;\n  let sum22 = 0;\n  let sum23 = 0;\n  let sum24 = 0;\n  let sum25 = 0;\n  let sum26 = 0;\n  let sum27 = 0;\n  let sum28 = 0;\n  let sum29 = 0;\n  let sum30 = 0;\n  let sum31 = 0;\n  let sum32 = 0;\n  let sum33 = 0;\n  let sum34 = 0;\n  let sum35 = 0;\n  let sum36 = 0;\n  let sum37 = 0;\n  let sum38 = 0;\n  let sum39 = 0;\n  let sum40 = 0;\n  let sum41 = 0;\n  let sum42 = 0;\n  let sum43 = 0;\n  let sum44 = 0;\n  let sum45 = 0;\n  let sum46 = 0;\n  let sum47 = 0;\n  let sum48 = 0;\n  let sum49 = 0;\n  let sum50 = 0;\n  let sum51 = 0;\n  let sum52 = 0;\n  let sum53 = 0;\n  let sum54 = 0;\n  let sum55 = 0;\n  let sum56 = 0;\n  let sum57 = 0;\n  let sum58 = 0;\n  let sum59 = 0;\n  let sum60 = 0;\n  let sum61 = 0;\n  let sum62 = 0;\n  let sum63 = 0;\n  let sum64 = 0;\n  let sum65 = 0;\n  let sum66 = 0;\n  let sum67 = 0;\n  let sum68 = 0;\n  let sum69 = 0;\n  let sum70 = 0;\n  let sum71 = 0;\n  let sum72 = 0;\n  let sum73 = 0;\n  let sum74 = 0;\n  let sum75 = 0;\n  let sum76 = 0;\n  let sum77 = 0;\n  let sum78 = 0;\n  let sum79 = 0;\n  let sum80 = 0;\n  let sum81 = 0;\n  let sum82 = 0;\n  let sum83 = 0;\n  let sum84 = 0;\n  let sum85 = 0;\n  let sum86 = 0;\n  let sum87 = 0;\n  let sum88 = 0;\n  let sum89 = 0;\n  let sum90 = 0;\n  let sum91 = 0;\n  let sum92 = 0;\n  let sum93 = 0;\n  let sum94 = 0;\n  let sum95 = 0;\n  let sum96 = 0;\n  let sum97 = 0;\n  let sum98 = 0;\n  let sum99 = 0;\n  let sum100 = 0;\n  let sum101 = 0;\n  let sum102 = 0;\n  let sum103 = 0;\n  let sum104 = 0;\n  let sum105 = 0;\n  let sum106 = 0;\n  let sum107 = 0;\n  let sum108 = 0;\n  let sum109 = 0;\n  let sum110 = 0;\n  let sum111 = 0;\n  let sum112 = 0;\n  let sum113 = 0;\n  let sum114 = 0;\n  let sum115 = 0;\n  let sum116 = 0;\n  let sum117 = 0;\n  let sum118 = 0;\n  let sum119 = 0;\n  let sum120 = 0;\n  let sum121 = 0;\n  let sum122 = 0;\n  let sum123 = 0;\n  let sum124 = 0;\n  let sum125 = 0;\n  let sum126 = 0;\n  let sum127 = 0;\n  let sum128 = 0;\n  let sum129 = 0;\n  let sum130 = 0;\n  let sum131 = 0;\n  let sum132 = 0;\n  let sum133 = 0;\n  let sum134 = 0;\n  let sum135 = 0;\n  let sum136 = 0;\n  let sum137 = 0;\n  let sum138 = 0;\n  let sum139 = 0;\n  let sum140 = 0;\n  let sum141 = 0;\n  let sum142 = 0;\n  let sum143 = 0;\n  let sum144 = 0;\n  let sum145 = 0;\n  let sum146 = 0;\n  let sum147 = 0;\n  let sum148 = 0;\n  let sum149 = 0;\n  let sum150 = 0;\n  let sum151 = 0;\n  let sum152 = 0;\n  let sum153 = 0;\n  let sum154 = 0;\n  let sum155 = 0;\n  let sum156 = 0;\n  let sum157 = 0;\n  let sum158 = 0;\n  let sum159 = 0;\n  let sum160 = 0;\n  let sum161 = 0;\n  let sum162 = 0;\n  let sum163 = 0;\n  let sum164", "passed": 0}
{"task_id": "JavaScript/147", "prompt": "/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A positivE INtEger n. YOU HAve tO create an iNteger array a of lenGTh n.\n      foR eAch i (1 ≤ i ≤ n), the vALue oF a[i] = i * i - i + 1.\n      REtUrN ThE nuMBer oF tRiPlEs (A[I], a[J], A[k]) oF a WHEre i < j < k, \n  AND a[i] + a[j] + a[k] is A mULtiPle oF 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  let max = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] === 3 * n) {\n          max = Math.max(max, a[i] + a[j] + a[k])\n        }\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/148", "prompt": "/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 2, "perturbed": true, "gc": "/* ThERe arE eigHt planetS in OUr Solar SYSTem: tHe closerst To the Sun\n  is Mercury, THe NeXt One is VeNUs, thEn EaRtH, MARs, jupITer, SAtUrN,\n  URaNUs, nEptUnE.\n  wRitE A Function tHaT TakEs twO pLanEt NAMES as strInGs planet1 and planet2.\n  the FUnCtION SHouLd return A tuple contaiNinG All plaNetS wHOse OrbiTs ARe\n  lOcAted beTWEen thE orbit of planet1 And the oRBiT of planet2, sorTed By\n  THe prOXImity To thE suN.\n  The funcTiOn sHould return an emPty tuple if planet1 Or planet2\n  are nOt corrEct plaNet NamEs.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  const planet1Orbit = planet1Index >= 0? planets.slice(0, planet1Index + 1) : []\n  const planet2Orbit = planet2Index >= 0? planets.slice(0, planet2Index + 1) : []\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitIntersection = planet1Orbit.filter((planet, index) => planet2Orbit.indexOf(planet) >= 0)\n  const planet2OrbitIntersection = planet2Orbit.filter((planet, index) => planet1Orbit.indexOf(planet) >= 0)\n  const planet1OrbitUnion = planet1Orbit.concat(planet2Orbit)\n  const planet2OrbitUnion = planet1Orbit.concat(planet2Orbit)\n  const planet1OrbitIntersectionLength = planet1OrbitIntersection.length\n  const planet2OrbitIntersectionLength = planet2OrbitIntersection.length\n  const planet1OrbitUnionLength = planet1OrbitUnion.length\n  const planet2OrbitUnionLength = planet2OrbitUnion.length\n  const planet1OrbitIntersectionUnion = planet1OrbitIntersection.concat(planet2OrbitUnion)\n  const planet2OrbitIntersectionUnion = planet2OrbitIntersection.concat(planet1OrbitUnion)\n  const planet1OrbitIntersectionUnionLength = planet1OrbitIntersectionUnion.length\n  const planet2OrbitIntersectionUnionLength = planet2OrbitIntersectionUnion.length\n  const planet1OrbitIntersectionUnionUnion = planet1OrbitIntersectionUnion.concat(planet2OrbitIntersectionUnion)\n  const planet2OrbitIntersectionUnionUnion = planet2OrbitIntersectionUnion.concat(planet1OrbitIntersectionUnion)\n  const planet1OrbitIntersectionUnionUnionLength = planet1OrbitIntersectionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionLength = planet2OrbitIntersectionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnion = planet1OrbitIntersectionUnionUnion.concat(planet2OrbitIntersectionUnionUnion)\n  const planet2OrbitIntersectionUnionUnionUnion = planet2OrbitIntersectionUnionUnion.concat(planet1OrbitIntersectionUnionUnion)\n  const planet1OrbitIntersectionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnion = planet1OrbitIntersectionUnionUnionUnion.concat(planet2OrbitIntersectionUnionUnionUnion)\n  const planet2OrbitIntersectionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet1OrbitIntersectionUnionUnionUnionUnionUnionUnionUnion.length\n  const planet2OrbitIntersectionUnionUnionUnionUnionUnionUnionUnionLength = planet2Orbit", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs aS a parameteR,\n  deletes the stringS ThAt HaVe odd leNGths From It,\n  AnD ReTurNS the ReSuLtEd list WItH A soRtED OrdER,\n  the list is alwaYs A list Of sTrinGs And NeVER AN array Of NumbeRs,\n  aND iT mAY CONtaIn DuplicaTes.\n  tHe ordeR of ThE list ShoUld bE aSCenDiNg by leNGTh of eAch word, aNd you\n  shOUlD return the list soRteD bY That RULe.\n  If tWo woRds Have the sAmE leNgth, sort tHe list alpHabetiCally.\n  THe funcTioN shOuLd return a list Of sTrINgs in sortED oRDeR.\n  You may ASsuME that all Words WiLl have The same LEnGTh.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  return list\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => a - b)\n  return list\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => b - a)\n  return list\n}\n\nconst list_sort_by_length_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => a - b, (a, b) => b - a)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => b - a, (a, b) => a - b)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => a - b, (a, b) => b - a)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => b - a, (a, b) => a - b)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => a - b, (a, b) => b - a)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => b - a, (a, b) => a - b)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => a - b, (a, b) => b - a)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n  }\n  list.sort((a, b) => b - a, (a, b) => a - b)\n  return list\n}\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const list = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i]\n    list.push(sum)\n", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 2, "perturbed": true, "gc": "/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i} `;\n  }\n  return result;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0, 'a')\n  '0'\n  >>> stringSequence(5, 'a')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator}`;\n  }\n  return result;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0, 'a', 'b')\n  '0'\n  >>> stringSequence(5, 'a', 'b')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator1, separator2) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator1}${i + 1}${separator2}`;\n  }\n  return result;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0, 'a', 'b', 'c')\n  '0'\n  >>> stringSequence(5, 'a', 'b', 'c')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator1, separator2, separator3) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator1}${i + 1}${separator2}${i + 2}${separator3}`;\n  }\n  return result;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd')\n  '0'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator1, separator2, separator3, separator4) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator1}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}`;\n  }\n  return result;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e')\n  '0'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator1, separator2, separator3, separator4, separator5) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator1}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}${i + 4}${separator5}`;\n  }\n  return result;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f')\n  '0'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator1, separator2, separator3, separator4, separator5, separator6) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator1}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}${i + 4}${separator5}${i + 5}${separator6}`;\n  }\n  return result;\n};\n\n/* ReTUrn a StriNg contaiNINg Space-DELImitEd numbers sTarting from 0 upto n inCLuSiVe.\n  >>> stringSequence(0, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  '0'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, separator1, separator2, separator3, separator4, separator5, separator6, separator7) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}${separator1}${i + 1}${separator2}${i + 2}${separator3}${i + 3}${separator4}${i + 4}${separator5}${i + 5}${separator6}${i + 6}", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 2, "perturbed": true, "gc": "/*A siMPle pRogrAm which sHOUlD return the vALUE of x iF n is \n  a prime nUmber and should return the VAlUe Of y OtherwiSE.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n}\n\nconst isPrime = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst xOrYPrime = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (isPrime(n)) {\n    return xOrY(n, x, y);\n  }\n  return y;\n}\n\nconst xOr", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 2, "perturbed": true, "gc": "/* GiVEn a list oF numBers, return the sUM Of SquarES OF the Numbers\n  in the list That are odd. Ignore nUMbErS tHat are nEGatiVe or NoT iNTeGerS.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  if thE iNpUt list Is EMpTY, return 0.\n  */\ncoNsT doubleTheDifference = (lst) => {\n  const diff = (a, b) => a - b;\n  const sum = (a, b) => a + b;\n  const isOdd = (n) => n % 2 === 1;\n  const isEven = (n) => n % 2 === 0;\n  const isNegative = (n) => n < 0;\n  const isPositive = (n) => n > 0;\n  const isZero = (n) => n === 0;\n  const isPositiveOrZero = (n) => isPositive(n) || isZero(n);\n  const isNegativeOrZero = (n) => isNegative(n) || isZero(n);\n  const isPositiveOrNegative = (n) => isPositive(n) || isNegative(n);\n  const isNegativeOrPositive = (n) => isNegative(n) || isPositive(n);\n  const isPositiveOrNegativeOrZero = (n) => isPositive(n) || isNegative(n) || isZero(n);\n  const isNegativeOrPositiveOrZero = (n) => isNegative(n) || isPositive(n) || isZero(n);\n  const isPositiveOrNegativeOrPositive = (n) => isPositive(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrPositiveOrNegative = (n) => isNegative(n) || isPositive(n) || isNegative(n);\n  const isPositiveOrNegativeOrNegative = (n) => isPositive(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrPositiveOrPositive = (n) => isNegative(n) || isPositive(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrPositiveOrNegative = (n) => isNegative(n) || isPositive(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrPositiveOrNegative = (n) => isNegative(n) || isPositive(n) || isNegative(n);\n  const isNegativeOrPositiveOrNegative = (n) => isNegative(n) || isPositive(n) || isNegative(n);\n  const isNegativeOrPositiveOrNegative = (n) => isNegative(n) || isPositive(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrPositiveOrNegative = (n) => isNegative(n) || isPositive(n) || isNegative(n);\n  const isNegativeOrPositiveOrNegative = (n) => isNegative(n) || isPositive(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || isNegative(n) || isPositive(n);\n  const isNegativeOrNegativeOrNegative = (n) => isNegative(n) || isNegative(n) || isNegative(n);\n  const isNegativeOrNegativeOrPositive = (n) => isNegative(n) || is", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 2, "perturbed": true, "gc": "/*I thINk we All rEmember tHAT fEelinG WHEn thE result of sOme long-awaited\n  eveNT iS fInAlly knoWN. The FeelInGs ANd ThoUGhts YoU hAvE aT ThAT moMeNT Are\n  DEFinitely wOrTH noTing DoWn aNd COMPAring.\n  YOuR task Is tO DeTeRMINE if A pErson coRreCTly gueSseD tHE reSultS oF A nuMbEr of maTCHes.\n  YoU are giveN two arrAYs Of scorEs aNd GUessES Of equAl leNgtH, where eaCh IndEx shows a mAtch. \n  REturn aN array Of the sAme LenGtH deNotInG How far oFF eACh guess Was. If thEY haVE guessed CorreCtLy,\n  the vAlue is 0, aND iF NoT, the VAlUe Is the aBSOLute dIfferEnce between tHe guess and The scOrE.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  let gameLen = game.length;\n  let guessLen = guess.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  ", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 2, "perturbed": true, "gc": "/*You WIll bE givEn the namE OF a Class (A STRing) And a list of extensions.\n  The extensions aRe to be used to load aDDiTiOnAl classES to tHe clAsS. THE\n  sTreNGth oF tHe ExTeNSiON is As FOLloWS: let CAP be tHe NUmbEr of ThE upPeRCASE\n  letteRs in The exTenSIoN's NAME, And LeT SM be thE nuMBer of lOweRcASe lEtteRs\n  in THe eXtEnsion'S NAme, thE strengtH is giveN By The fraCtiOn caP - SM.\n  yOU shouLd fiNd tHe strongEsT exTension anD return a strIng in thiS\n  formaT: ClassnamE.StRoNgeStEXtENsionNaME.\n  IF ThEre are tWO or MOre extensions with tHe samE sTrengtH, you shoULd\n  CHoOse tHE oNe That coMES First in The list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_split = class_name.split('.');\n  const class_name_last_part = class_name_split[class_name_split.length - 1];\n  const class_name_last_part_split = class_name_last_part.split('.');\n  const class_name_last_part_last_part = class_name_last_part_split[class_name_last_part_split.length - 1];\n  const class_name_last_part_last_part_split = class_name_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part = class_name_last_part_last_part_split[class_name_last_part_last_part_split.length - 1];\n  const class_name_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part = class_name_last_part_last_part_last_part_split[class_name_last_part_last_part_last_part_split.length - 1];\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n  const class_name_last_part_last_part_last_part_last_part_split = class_name_last_part_last_part_last_part_last_part.split('.');\n", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen 2 wOrds. You nEED tO return true IF THe seCond word or Any of its rotations IS a sUbStRing in the FIrst Word\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt cycpatternCheck = (a, b) => {\n    let a_len = a.length;\n    let b_len = b.length;\n    let a_first = a.charAt(0);\n    let b_first = b.charAt(0);\n    if (a_first === b_first) {\n        let a_second = a.charAt(1);\n        let b_second = b.charAt(1);\n        if (a_second === b_second) {\n            let a_third = a.charAt(2);\n            let b_third = b.charAt(2);\n            if (a_third === b_third) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  cycpatternCheck(\"abcd\",\"abd\") => FaLsE\n  cycpatternCheck(\"hello\",\"ell\") => TrUe\n  cycpatternCheck(\"whassup\",\"psus\") => fALse\n  cycpatternCheck(\"abab\",\"baa\") => tRuE\n  cycpatternCheck(\"efef\",\"eeff\") => fAlSe\n  cycpatternCheck(\"himenss\",\"simen\") => TRuE\n  */\nConSt isSubstring = (a, b) => {\n    let a_len = a.length;\n    let b_len = b.length;\n    let a_first = a.charAt(0);\n    let b_first = b.charAt(0);\n    if (a_first === b_first) {\n        let a_second = a.charAt(1);\n        let b_second = b.charAt(1);\n        if (a_second === b_second) {\n            let a_third = a.charAt(2);\n            let b_third = b.charAt(2);\n            if (a_third === b_third) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n/*\n  isSubstring(\"abcd\",\"abd\") => FaLsE\n  isSubstring(\"hello\",\"ell\") => TrUe\n  isSubstring(\"whassup\",\"psus\") => fALse\n  isSubstring(\"abab\",\"baa\") => tRuE\n  isSubstring(\"efef\",\"eeff\") => fAlSe\n  isSubstring(\"himenss\",\"simen\") => TRuE\n  */\nConSt isPalindrome = (a) => {\n    let a_len = a.length;\n    let a_first = a.charAt(0);\n    let a_second = a.charAt(1);\n    let a_third = a.charAt(2);\n    if (a_first === a_third) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  isPalindrome(\"abcd\") => tRuE\n  isPalindrome(\"hello\") => tRuE\n  isPalindrome(\"whassup\") => tRuE\n  isPalindrome(\"abab\") => tRuE\n  isPalindrome(\"efef\") => tRuE\n  isPalindrome(\"himenss\") => tRuE\n  */\nConSt isPalindrome2 = (a) => {\n    let a_len = a.length;\n    let a_first = a.charAt(0);\n    let a_second = a.charAt(1);\n    let a_third = a.charAt(2);\n    if (a_first === a_third) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  isPalindrome(\"abcd\") => tRuE\n  isPalindrome(\"hello\") => tRuE\n  isPalindrome(\"whassup\") => tRuE\n  isPalindrome(\"abab\") => tRuE\n  isPalindrome(\"efef\") => tRuE\n  isPalindrome(\"himenss\") => tRuE\n  */\nConSt isPalindrome3 = (a) => {\n    let a_len = a.length;\n    let a_first = a.charAt(0);\n    let a_second = a.charAt(1);\n    let a_third = a.charAt(2);\n    if (a_first === a_second) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  isPalindrome(\"abcd\") => tRuE\n  isPalindrome(\"hello\") => tRuE\n  isPalindrome(\"whassup\") => tRuE\n  isPalindrome(\"abab\") => tRuE\n  isPalindrome(\"efef\") => tRuE\n  isPalindrome(\"himenss\") => tRuE\n  */\nConSt isPalindrome4 = (a) => {\n    let a_len = a.length;\n    let a_first = a.charAt(0);\n    let a_second = a.charAt(1);\n    let a_third = a.charAt(2);\n    if (a_first === a_third) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  isPalindrome(\"abcd\") => tRuE\n  isPalindrome(\"hello\") => tRuE\n  isPalindrome(\"whassup\") => tRuE\n  isPalindrome(\"abab\") => tRuE\n  isPalindrome(\"efef\") => tRuE\n  isPalindrome(\"himenss\") => tRuE\n  */\nConSt isPalindrome5 = (a) => {\n    let a_len = a.length;\n    let a_first = a.charAt(0);\n    let a_second = a.charAt(1);\n    let a_third = a.charAt(2);\n    if (", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 2, "perturbed": true, "gc": "/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digIts respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount2 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount3 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount4 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount5 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount6 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount7 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount8 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount9 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount10 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\n/*GivEN an iNtegEr. return a tuple that hAS ThE numbER OF eveN and odd digITS respectively.\n   Example:\n      evenOddCount(12) ==> (2, 2)\n      evenOddCount(123) ==> (2, 3)\n  */\nconst evenOddCount11 = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0)", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = number;\n  let result = '';\n  while (num > 0) {\n    let digit = num % 10;\n    let roman = {\n      1: 'I',\n      2: 'II',\n      3: 'III',\n      4: 'IV',\n      5: 'V',\n      6: 'VI',\n      7: 'VII',\n      8: 'VIII',\n      9: 'IX',\n      10: 'X',\n    };\n    result = roman[digit] + result;\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let num = number;\n  let result = '';\n  while (num > 0) {\n    let digit = num % 10;\n    let roman = {\n      1: 'I',\n      2: 'II',\n      3: 'III',\n      4: 'IV',\n      5: 'V',\n      6: 'VI',\n      7: 'VII',\n      8: 'VIII',\n      9: 'IX',\n      10: 'X',\n    };\n    result = roman[digit] + result;\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let num = number;\n  let result = '';\n  while (num > 0) {\n    let digit = num % 10;\n    let roman = {\n      1: 'I',\n      2: 'II',\n      3: 'III',\n      4: 'IV',\n      5: 'V',\n      6: 'VI',\n      7: 'VII',\n      8: 'VIII',\n      9: 'IX',\n      10: 'X',\n    };\n    result = roman[digit] + result;\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let num = number;\n  let result = '';\n  while (num > 0) {\n    let digit = num % 10;\n    let roman = {\n      1: 'I',\n      2: 'II',\n      3: 'III',\n      4: 'IV',\n      5: 'V',\n      6: 'VI',\n      7: 'VII',\n      8: 'VIII',\n      9: 'IX',\n      10: 'X',\n    };\n    result = roman[digit] + result;\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let num = number;\n  let result = '';\n  while (num > 0) {\n    let digit = num % 10;\n    let roman = {\n      1: 'I',\n      2: 'II',\n      3: 'III',\n      4: 'IV',\n      5: 'V',\n      6: 'VI',\n      7: 'VII',\n      8: 'VIII',\n      9: 'IX',\n      10: 'X',\n    };\n    result = roman[digit] + result;\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER, ObTain iTS ROman Numeral equIvalent as a string,\n  aND return iT in lOwErcase.\n  REStriCtioNs: 1 <= num <= 1000\n\n  exAMpLes:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  let num = number;\n  let result = '';\n  while (num > 0) {\n    let digit = num % 10;\n    let roman = {\n      1:", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 2, "perturbed": true, "gc": "/*\n GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN true if the three\n  siDEs FoRm a Right-anGLed tRianGlE, fALsE otHErwiSe.\n  a rIgHt-ANgLEd tRiANGle IS a Triangle in wHiCH onE angLe Is rIgHT ANGle or\n  90 dEgRee.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab * bc;\n  const acb = ac * bc;\n  const abc_ = abc + acb;\n  return abc_ === 0;\n};\n\n/*\n  GIVEN a triangle, return true if the triangle is a right angle triangle.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const ab", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n    }\n  }\n  return max;\n};\n\n/*\n  WriTE a fuNctiOn that acCEPtS a list of sTRINgs.\n  THe list contains Different words. Return thE WoRd WiTh maximUM numBer\n  oF uNiQUe ChaRActeRs. if MuLtIPlE StrInGS HavE MAximum numBeR Of uNiquE\n  cHarAcTERS, return The one WhIch coMes FIrSt in LEXICogRaPhical oRdeR.\n\n  findMax([\"name\", \"Of\", \"striNg\"]) === \"sTrINg\"\n  findMax([\"name\", \"eNam\", \"gAmE\"]) === \"EnaM\"\n  findMax([\"aaaaaaa\", \"bB\",\"cc\"]) === \"\"aaaAAAa\"\n  */\nconSt findMax = (words) => {\n", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 2, "perturbed": true, "gc": "/*\n  YoU'Re a hUngrY rabbit, aND YoU alreADY Have Eaten a certAin number of carrots,\n  but noW YoU need tO eat mOre carrOTs to CompLeTe THe Day'S MealS.\n  yOu ShOuLD return aN ArrAy OF [ TotAL number Of eaten caRrOTs aFter YoUr mEaLS,\n                                  THE number of carRoTs lefT afTEr YoUR MEAls ]\n  If There arE noT Enough remaining CarRoTS, yoU wilL eat aLL remaining caRrOts, but WILl stiLl be hungRy.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  } else {\n    return [number, number - need];\n  }\n};\n\nconst main = () => {\n  const [number, remaining] = eat(5, 6, 10);\n  console.log(`${number} ${remaining}`);\n};\n\nmain();\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/16", "prompt": "/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 2, "perturbed": true, "gc": "/* GiVEn a string, fInd oUt how manY DIsTinct CHARactErs (regardlEss of case) does it coNSiSt Of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters10 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters11 = (string) => {\n  const charCount = {};\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charCount[char]) {\n      charCount[char]++;\n    } else {\n      charCount[char] = 1;\n    }\n  }\n  return Object.keys(charCount).length;\n};\n\n/*\n  >>> count", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn twO lisTs operator, and operand. The FIRsT list has bASIC algEbra operatIons, and \n  the second list iS A list oF iNtEgers. UsE The tWo giVeN lIStS to BUild ThE aLgEbRIc \n  EXprEsSIOn aND return The evaluaTiON of This ExPreSsION.\n\n  tHe basiC aLgebrA opERaTiONS:\n  aDdiTiOn ( + ) \n  SubtrActIOn ( - ) \n  MultIplIcATioN ( * ) \n  FloOr DIviSiOn ( // ) \n  ExpoNENtiatIon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let i2 = 0;\n  let i3 = 0;\n  let i4 = 0;\n  let i5 = 0;\n  let i6 = 0;\n  let i7 = 0;\n  let i8 = 0;\n  let i9 = 0;\n  let i10 = 0;\n  let i11 = 0;\n  let i12 = 0;\n  let i13 = 0;\n  let i14 = 0;\n  let i15 = 0;\n  let i16 = 0;\n  let i17 = 0;\n  let i18 = 0;\n  let i19 = 0;\n  let i20 = 0;\n  let i21 = 0;\n  let i22 = 0;\n  let i23 = 0;\n  let i24 = 0;\n  let i25 = 0;\n  let i26 = 0;\n  let i27 = 0;\n  let i28 = 0;\n  let i29 = 0;\n  let i30 = 0;\n  let i31 = 0;\n  let i32 = 0;\n  let i33 = 0;\n  let i34 = 0;\n  let i35 = 0;\n  let i36 = 0;\n  let i37 = 0;\n  let i38 = 0;\n  let i39 = 0;\n  let i40 = 0;\n  let i41 = 0;\n  let i42 = 0;\n  let i43 = 0;\n  let i44 = 0;\n  let i45 = 0;\n  let i46 = 0;\n  let i47 = 0;\n  let i48 = 0;\n  let i49 = 0;\n  let i50 = 0;\n  let i51 = 0;\n  let i52 = 0;\n  let i53 = 0;\n  let i54 = 0;\n  let i55 = 0;\n  let i56 = 0;\n  let i57 = 0;\n  let i58 = 0;\n  let i59 = 0;\n  let i60 = 0;\n  let i61 = 0;\n  let i62 = 0;\n  let i63 = 0;\n  let i64 = 0;\n  let i65 = 0;\n  let i66 = 0;\n  let i67 = 0;\n  let i68 = 0;\n  let i69 = 0;\n  let i70 = 0;\n  let i71 = 0;\n  let i72 = 0;\n  let i73 = 0;\n  let i74 = 0;\n  let i75 = 0;\n  let i76 = 0;\n  let i77 = 0;\n  let i78 = 0;\n  let i79 = 0;\n  let i80 = 0;\n  let i81 = 0;\n  let i82 = 0;\n  let i83 = 0;\n  let i84 = 0;\n  let i85 = 0;\n  let i86 = 0;\n  let i87 = 0;\n  let i88 = 0;\n  let i89 = 0;\n  let i90 = 0;\n  let i91 = 0;\n  let i92 = 0;\n  let i93 = 0;\n  let i94 = 0;\n  let i95 = 0;\n  let i96 = 0;\n  let i97 = 0;\n  let i98 = 0;\n  let i99 = 0;\n  let i100 = 0;\n  let i101 = 0;\n  let i102 = 0;\n  let i103 = 0;\n  let i104 = 0;\n  let i105 = 0;\n  let i106 = 0;\n  let i107 = 0;\n  let i108 = 0;\n  let i109 = 0;\n  let i110 = 0;\n  let i111 = 0;\n  let i112 = 0;\n  let i113 = 0;\n  let i114 = 0;\n  let i115 = 0;\n  let i116 = 0;\n  let i117 = 0;\n  let i118 = 0;\n  let i119 = 0;\n  let i120 = 0;\n  let i121 = 0;\n  let i122 = 0;\n  let i123 = 0;\n  let i124 = 0;\n  let i125 = 0;\n  let i126 = 0;\n  let i127 = 0;\n  let i128 = 0;\n  let i129 = 0;\n  let i130 = 0;\n  let i131 = 0;\n", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a String s.\n  if s[i] IS A lEtter, REVErse Its case froM lower to upper or viSE vErSa, \n  OtherwiSE keeP it aS iT iS.\n  if The STrinG cOnTaInS No LEttErS, REveRSE the strinG.\n  THE fuNctiOn ShoUlD return THE ResultEd StrinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  let index = 0;\n  let char = str[index];\n  while (char!== \"\") {\n    if (char === \"a\" || char === \"e\" || char === \"i\" || char === \"o\" || char === \"u\") {\n      result += char.toUpperCase();\n    } else {\n      result += char;\n    }\n    index++;\n    char = str[index];\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/162", "prompt": "/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a sTrinG 'text', return its md5 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null\n  }\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  GiVEn a sTrinG 'text', return its sha1 hash EQUiValenT STRing.\n  if 'text' is an emptY string, return null.\n\n  >>> stringToSha1('Hello world') == '5d5f8b7a8d3a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8b9a0d6b6a9d8", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn twO posItive intEGErS a and b, return tHE EVen dIgits betweEn a\n  and b, in ascending ordER.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GIVEN a positive integer, return the number of digits in the number.\n\n  For example:\n  digitCount(2) => 2\n  digitCount(10) => 2\n  digitCount(100) => 3\n  digitCount(1000) => 4\n  digitCount(10000) => 5\n  digitCount(100000) => 6\n  digitCount(1000000) => 7\n  digitCount(10000000) => 8\n  digitCount(100000000) => 9\n  digitCount(1000000000) => 10\n  digitCount(10000000000) => 11\n  digitCount(100000000000) => 12\n  digitCount(1000000000000) => 13\n  digitCount(10000000000000) => 14\n  digitCount(100000000000000) => 15\n  digitCount(1000000000000000) => 16\n  digitCount(10000000000000000) => 17\n  digitCount(100000000000000000) => 18\n  digitCount(1000000000000000000) => 19\n  digitCount(10000000000000000000) => 20\n  digitCount(100000000000000000000) => 21\n  digitCount(1000000000000000000000) => 22\n  digitCount(10000000000000000000000) => 23\n  digitCount(100000000000000000000000) => 24\n  digitCount(1000000000000000000000000) => 25\n  digitCount(10000000000000000000000000) => 26\n  digitCount(100000000000000000000000000) => 27\n  digitCount(1000000000000000000000000000) => 28\n  digitCount(10000000000000000000000000000) => 29\n  digitCount(100000000000000000000000000000) => 30\n  digitCount(1000000000000000000000000000000) => 31\n  digitCount(10000000000000000000000000000000) => 32\n  digitCount(100000000000000000000000000000000) => 33\n  digitCount(10000000000000000000000000000000000) => 34\n  digitCount(100000000000000000000000000000000000) => 35\n  digitCount(1000000000000000000000000000000000000) => 36\n  digitCount(10000000000000000000000000000000000000) => 37\n  digitCount(100000000000000000000000000000000000000) => 38\n  digitCount(1000000000000000000000000000000000000000) => 39\n  digitCount(10000000000000000000000000000000000000000) => 40\n  digitCount(100000000000000000000000000000000000000000) => 41\n  digitCount(1000000000000000000000000000000000000000000) => 42\n  digitCount(10000000000000000000000000000000000000000000) => 43\n  digitCount(100000000000000000000000000000000000000000000) => 44\n  digitCount(1000000000000000000000000000000000000000000000) => 45\n  digitCount(10000000000000000000000000000000000000000000000) => 46\n  digitCount(100000000000000000000000000000000000000000000000) => 47\n  digitCount(1000000000000000000000000000000000000000000000000) => 48\n  digitCount(100000000000000000000000000000000000000000000000000) => 49\n  digitCount(1000000000000000000000000000000000000000000000000000) => 50\n  digitCount(10000000000000000000000000000000000000000000000000000) => 51\n  digitCount(100000000000000000000000000000000000000000000000000000) => 52\n  digitCount(1000000000000000000000000000000000000000000000000000000) => 53\n  digitCount(10000000000000000000000000000000000000000000000000000000) => 54\n  digitCount(100000000000000000000000000000000000000000000000000000000) => 55\n  digitCount(1000000000000000000000000000000000000000000000000000000000) => 56\n  digitCount(10000000000000000000000000000000000000000000000000000000000) => 57\n  digitCount(100000000000000000000000000000000000000000000000000000000000) => 58\n  digitCount(1000000000000000000000000000000000000000000000000000000000000) => 59\n  digitCount(10000000000000000000000000000000000000000000000000000000000000) => 60\n  digitCount(100000000000000000000000000000000000000000000000000000000000000) => 61\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000) => 62\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000) => 63\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000) => 64\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000) => 65\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000) => 66\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000) => 67\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000) => 68\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000) => 69\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000) => 70\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000) => 71\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000) => 72\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000) => 73\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000) => 74\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000) => 75\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000) => 76\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000) => 77\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000) => 78\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 79\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 80\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 81\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 82\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 83\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 84\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 85\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 86\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 87\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 88\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 89\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 90\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 91\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 92\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 93\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 94\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 95\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 96\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 97\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 98\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 99\n  digitCount(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 100\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 101\n  digitCount(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) => 102\n  digitCount(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 2, "perturbed": true, "gc": "/* InPUt to This Function IS A sTring REPReseNting musicAl notes in a special ASciI FoRmAt.\n  Your tASk is To paRsE tHIs StrINg anD return list oF iNtEgERs COrrEsPONdiNG To how many BeATs dOes eAcH\n  noT lAST.\n\n  hEre is a LeGend:\n  'o' - WhoLE nOtE, LASTs fOuR beats\n  'o|' - HalF Note, laSts TwO BeaTs\n  '.|' - quAtER noTe, Lasts oNE Beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_array = music_string.split(' ');\n  const music_array = [];\n  const beat_array = [];\n  const beat_count = 0;\n  const beat_count_max = 0;\n  const beat_count_min = 0;\n  const beat_count_average = 0;\n  const beat_count_median = 0;\n  const beat_count_mode = 0;\n  const beat_count_stdev = 0;\n  const beat_count_variance = 0;\n  const beat_count_skewness = 0;\n  const beat_count_kurtosis = 0;\n  const beat_count_skewness_average = 0;\n  const beat_count_kurtosis_average = 0;\n  const beat_count_skewness_variance = 0;\n  const beat_count_kurtosis_variance = 0;\n  const beat_count_skewness_skewness = 0;\n  const beat_count_kurtosis_kurtosis = 0;\n  const beat_count_skewness_kurtosis = 0;\n  const beat_count_kurtosis_skewness = 0;\n  const beat_count_mode_mode = 0;\n  const beat_count_mode_average = 0;\n  const beat_count_mode_variance = 0;\n  const beat_count_mode_skewness = 0;\n  const beat_count_mode_kurtosis = 0;\n  const beat_count_mode_skewness_average = 0;\n  const beat_count_mode_kurtosis_average = 0;\n  const beat_count_mode_skewness_variance = 0;\n  const beat_count_mode_kurtosis_variance = 0;\n  const beat_count_mode_skewness_skewness = 0;\n  const beat_count_mode_kurtosis_kurtosis = 0;\n  const beat_count_mode_skewness_kurtosis = 0;\n  const beat_count_mode_kurtosis_skewness = 0;\n  const beat_count_mode_average_average = 0;\n  const beat_count_mode_variance_variance = 0;\n  const beat_count_mode_skewness_variance = 0;\n  const beat_count_mode_kurtosis_variance = 0;\n  const beat_count_mode_skewness_skewness = 0;\n  const beat_count_mode_kurtosis_kurtosis = 0;\n  const beat_count_mode_skewness_kurtosis = 0;\n  const beat_count_mode_kurtosis_skewness = 0;\n  const beat_count_mode_average_average = 0;\n  const beat_count_mode_variance_variance = 0;\n  const beat_count_mode_skewness_variance = 0;\n  const beat_count_mode_kurtosis_variance = 0;\n  const beat_count_mode_skewness_skewness = 0;\n  const beat_count_mode_kurtosis_kurtosis = 0;\n  const beat_count_mode_skewness_kurtosis = 0;\n  const beat_count_mode_kurtosis_skewness = 0;\n  const beat_count_mode_average_average = 0;\n  const beat_count_mode_variance_variance = 0;\n  const beat_count_mode_skewness_variance = 0;\n  const beat_count_mode_kurtosis_variance = 0;\n  const beat_count_mode_skewness_skewness = 0;\n  const beat_count_mode_kurtosis_kurtosis = 0;\n  const beat_count_mode_skewness_kurtosis = 0;\n  const beat_count_mode_kurtosis_skewness = 0;\n  const beat_count_mode_average_average = 0;\n  const beat_count_mode_variance_variance = 0;\n  const beat_count_mode_skewness_variance = 0;\n  const beat_count_mode_kurtosis_variance = 0;\n  const beat_count_mode_skewness_skewness = 0;\n  const beat_count_mode_kurtosis_kurtosis = 0;\n  const beat_count_mode_skewness_kurtosis = 0;\n  const beat_count_mode_kurtosis_skewness = 0;\n  const beat_count_mode_average_average = 0;\n  const beat_count_mode_variance_variance = 0;\n  const beat_count_mode_skewness_variance = 0;\n  const beat_count_mode_kurtosis_variance = 0;\n  const beat_count_mode_skewness_skewness = 0;\n  const beat_count_mode_kurtosis_kurtosis = 0;\n  const beat_count_mode_skewness_kurtosis = 0;\n  const beat_count_mode_kurtosis_skewness = 0;\n  const beat_count_mode_average_average = 0;\n  const beat_count_mode_variance_variance = 0;\n  const beat_count_mode_skewness_variance = 0;\n  const beat_count_mode_kurt", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 2, "perturbed": true, "gc": "/* FiND how Many times A given substring caN BE fOund in tHE ORigiNal string. Count ovErlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('ab', 'a')\n  1\n  >>> howManyTimes('ab', 'b')\n  1\n  >>> howManyTimes('ab', 'ab')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('ab', 'a')\n  1\n  >>> howManyTimes('ab', 'b')\n  1\n  >>> howManyTimes('ab', 'ab')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('ab', 'a')\n  1\n  >>> howManyTimes('ab', 'b')\n  1\n  >>> howManyTimes('ab', 'ab')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('ab', 'a')\n  1\n  >>> howManyTimes('ab', 'b')\n  1\n  >>> howManyTimes('ab', 'ab')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('ab', 'a')\n  1\n  >>> howManyTimes('ab', 'b')\n  1\n  >>> howManyTimes('ab', 'ab')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('ab', 'a')\n  1\n  >>> howManyTimes('ab', 'b')\n  1\n  >>> howManyTimes('ab', 'ab')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('a', 'b')\n  0\n  >>> howManyTimes('ab', 'a')\n  1\n  >>> howManyTimes('ab', 'b')\n  1\n  >>> howManyTimes('ab', 'ab')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length;", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX', 'seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 2, "perturbed": true, "gc": "/* InPUt is a SpacE-delimitED StRing oF NUMberAls from 'zerO' to 'nine'.\n  Valid choicES aRe 'ZeRo', 'one', 'twO', 'ThreE', 'fouR', 'fIvE', 'SiX','seVEn', 'eiGhT' aNd 'NiNE'.\n  RETurN tHE StrING with numbers sortEd FRom SmalLeSt tO lARGESt\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from small to large.\n  >>> sortNumbers('one two three')\n  'one two three'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from large to small.\n  >>> sortNumbers2('one two three')\n  'one two three'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from small to large.\n  >>> sortNumbers3('one two three')\n  'one two three'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from large to small.\n  >>> sortNumbers4('one two three')\n  'one two three'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from small to large.\n  >>> sortNumbers5('one two three')\n  'one two three'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from large to small.\n  >>> sortNumbers6('one two three')\n  'one two three'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from small to large.\n  >>> sortNumbers7('one two three')\n  'one two three'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString, 10)\n      sortedArray.push(numberInt)\n    })\n  })\n  return sortedArray.reverse().join(' ')\n}\n\n/*\n  REturns a string with the numbers sorted from large to small.\n  >>> sortNumbers8('one two three')\n  'one two three'\n  */\nconst sortNumbers9 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedArray = []\n  numbersArray.forEach((number) => {\n    const numberArray = number.split('o')\n    numberArray.forEach((number) => {\n      const numberString = number.toLowerCase()\n      const numberInt = parseInt(numberString,", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 2, "perturbed": true, "gc": "/* GiVEn a pOsitIve floatING pOint number, iT CAN be dEcomposed iNto\n  and integer part (LArGeSt Integer SMallEr thAn GiVEn number) And DEcimAlS\n  (lEfToVEr PArt AlWAYs sMALler than 1).\n\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber3 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber4 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber5 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber6 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber7 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber8 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) + (intPartFrac * 1000)\n}\n\n/*\n  REtURn tHe deCiMal PaRT OF The number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber9 = (number) => {\n  const intPart = Math.floor(number)\n  const decPart = number - intPart\n  const decPartInt = Math.floor(decPart)\n  const decPartFrac = decPart - decPartInt\n  const intPartInt = Math.floor(intPart)\n  const intPartFrac = intPart - intPartInt\n  return intPartInt + (decPartInt * 10) + (decPartFrac * 100) +", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 2, "perturbed": true, "gc": "/* FrOM a supPlieD list of numbers (of lenGTH aT leasT TWO) selEct and return two tHat are the closest tO EaCh\n  OtHer and return tHEm in orDer (sMaLlER nUmbER, larGeR nUmBeR).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length\n  if (len === 1) {\n    return (numbers[0], numbers[0])\n  }\n  const min = numbers[0]\n  const max = numbers[0]\n  for (let i = 1; i < len; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n  const diff = max - min\n  const closest = numbers[0]\n  for (let i = 1; i < len; i++) {\n    const diff2 = max - numbers[i]\n    if (diff2 < diff) {\n      closest = numbers[i]\n      diff = diff2\n    }\n  }\n  return (closest, min)\n}\n\nexport default findClosestElements\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 2, "perturbed": true, "gc": "/* GiVEn list of numbers (Of at Least two ELEmEnts), aPPLY a liNear transfOrm to that list,\n  such that THe SmAlLest numBEr wiLl beCoMe 0 ANd The LArgeSt WiLl BeCOmE 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitBy = (numbers, factor) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * factor)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy2 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy3 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy4 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy5 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy6 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy7 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy8 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy9 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescaleToUnitBy10 = (numbers) => {\n  const len = numbers.length\n  const sum = numbers.reduce((acc, curr) => acc + curr, 0)\n  const unit = 1 / sum\n  return numbers.map(curr => curr * unit)\n}\n\n/*\n  >>> rescaleToUnitBy([1.0, 2.0, 3.0, 4.0, 5.0], 2)\n  [0", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 2, "perturbed": true, "gc": "/* FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n// ## Filter out all the non-numbers\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any pytHON values oNly foR INTegeRs\n//\n// FiLTer gIven list Of any", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 2, "perturbed": true, "gc": "/* ReTUrn lEngtH of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* ReTUrn lEngtH of given string\n  >>> strlen('abc')\n", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j === 0) {\n      k = j;\n      j = n / j;\n    } else {\n      j = j + 1;\n    }\n  }\n  return k;\n};\n\n/*\n  FoR A givEn nuMber n, find THE lArgesT NUMber That divideS n evenly, smaller thaN n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 1;\n  let j = n;\n  let k = 1;\n  while (j > 1) {\n    if (n % j ===", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 2, "perturbed": true, "gc": "/* ReTUrn list oF priMe factorS OF gIven iNTEGer in tHe order froM smallest to largesT.\n  eaCh Of The factORs shOuld Be LiSTeD nuMBer oF tImEs CoRReSPonDiNG To hOW Many times It APpeAres in FaCtoRiZATIOn.\n  InpuT nUmber ShoULd Be EQUAL to ThE producT of ALl factOrs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if (factor === 0) {\n      factors.push(i)\n      n = n / i\n    }\n  }\n  return factors\n}\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const factor = n % i\n    if", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 2, "perturbed": true, "gc": "/* FrOM a list of InteGers, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueNumbers.indexOf(numbers[i]) === -1) {\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates2 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates2([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates3 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates3([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates4 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates4([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates5 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates5([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates6 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates6([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates7 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates7([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates8 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (uniqueStrings.indexOf(strings[i]) === -1) {\n      uniqueStrings.push(strings[i]);\n    }\n  }\n  return uniqueStrings;\n};\n\n/*\n  FrOM a list of Strings, remoVE AlL elemENTS thaT occur more Than once.\n  Keep order OF eLeMeNts left THe saMe as in ThE iNPuT.\n  >>> removeDuplicates8([\"a\", \"b\", \"c\", \"b\", \"d\"])\n  [\"a\", \"c\", \"d\"]\n  */\nconst removeDuplicates9 = (strings) => {\n  const uniqueStrings = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn string, flIp lowercASE cHaracTERS to uPpercase anD uppercase to lowerCAsE.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.toLowerCase().replace(/[A-Z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n  return string.toUpperCase().replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase21 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (match) => {\n    return match.", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 2, "perturbed": true, "gc": "/* CoNCateNate list Of strings into a sINGlE striNG\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  */\nconst concatenate = (strings) => {\n  let acc = '';\n  for (let i = 0; i < strings.length; i++) {\n    acc += strings[i];\n  }\n  return acc;\n};\n\n/*\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  */\nconst concatenate = (strings) => {\n  let acc = '';\n  for (let i = 0; i < strings.length; i++) {\n    acc += strings[i];\n  }\n  return acc;\n};\n\n/*\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  */\nconst concatenate = (strings) => {\n  let acc = '';\n  for (let i = 0; i < strings.length; i++) {\n    acc += strings[i];\n  }\n  return acc;\n};\n\n/*\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '12345678901234567890122'\n  */\nconst concatenate = (strings) => {\n  let acc = '';\n  for (let i = 0; i < strings.length; i++) {\n    acc += strings[i];\n  }\n  return acc;\n};\n\n/*\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '1234567890123456789012223'\n  */\nconst concatenate = (strings) => {\n  let acc = '';\n  for (let i = 0; i < strings.length; i++) {\n    acc += strings[i];\n  }\n  return acc;\n};\n\n/*\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901222324'\n  */\nconst concatenate = (strings) => {\n  let acc = '';\n  for (let i = 0; i < strings.length; i++) {\n    acc += strings[i];\n  }\n  return acc;\n};\n\n/*\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 2, "perturbed": true, "gc": "/* FiLTer aN inpUt list of strings only FOR oNes thAT STart With a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix([], 'a')\n  ", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 2, "perturbed": true, "gc": "/* YoU'Re giVen a list Of deposiT ANd WithdRAWAl operations on A bank accouNt that starts with\n  zERo balance. yoUr Task is tO DeteCt if At AnY PoInt THe balance of AcCoUnT fALlLS beLoW ZEro, AND\n  at that poInT FunCtioN sHouLd return TRUE. otherwIsE it shOulD return FaLsE.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i];\n  }\n  return sum < 0;\n};\n\nexport default belowZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 2, "perturbed": true, "gc": "/*RetURn onLy poSitive nuMBErS in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 2, "perturbed": true, "gc": "/*RetURn trUe if A given nuMBEr Is priME, ANd faLse otherwiSe.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n < 30) return true\n  const d = Math.sqrt(n)\n  for (let i = 3; i <= d; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(10)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  true\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  true\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  false\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> is", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 2, "perturbed": true, "gc": "/*\n  EvALuatEs poLynomial WITh CoeffICIEnts xs At point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconSt poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients OF a PoLyNomial.\n  findZero fINd x suCh thAt poly(x) = 0.\n  findZero ReTUrNs oNLy onLy ZeRo PoINt, EVen If THEre ARE many.\n  MoreOvER, findZero onLy taKeS list xs haViNG EVEn numbEr Of coeFfiCIeNtS\n  AND LarGeSt non zeRo cOEfficiEnt As IT guAranTeES\n  a sOlUtion.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let n = xs.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x0 = 0;\n  let x1 = 0;\n  let x2 = 0;\n  let x3 = 0;\n  let x4 = 0;\n  let x5 = 0;\n  let x6 = 0;\n  let x7 = 0;\n  let x8 = 0;\n  let x9 = 0;\n  let x10 = 0;\n  let x11 = 0;\n  let x12 = 0;\n  let x13 = 0;\n  let x14 = 0;\n  let x15 = 0;\n  let x16 = 0;\n  let x17 = 0;\n  let x18 = 0;\n  let x19 = 0;\n  let x20 = 0;\n  let x21 = 0;\n  let x22 = 0;\n  let x23 = 0;\n  let x24 = 0;\n  let x25 = 0;\n  let x26 = 0;\n  let x27 = 0;\n  let x28 = 0;\n  let x29 = 0;\n  let x30 = 0;\n  let x31 = 0;\n  let x32 = 0;\n  let x33 = 0;\n  let x34 = 0;\n  let x35 = 0;\n  let x36 = 0;\n  let x37 = 0;\n  let x38 = 0;\n  let x39 = 0;\n  let x40 = 0;\n  let x41 = 0;\n  let x42 = 0;\n  let x43 = 0;\n  let x44 = 0;\n  let x45 = 0;\n  let x46 = 0;\n  let x47 = 0;\n  let x48 = 0;\n  let x49 = 0;\n  let x50 = 0;\n  let x51 = 0;\n  let x52 = 0;\n  let x53 = 0;\n  let x54 = 0;\n  let x55 = 0;\n  let x56 = 0;\n  let x57 = 0;\n  let x58 = 0;\n  let x59 = 0;\n  let x60 = 0;\n  let x61 = 0;\n  let x62 = 0;\n  let x63 = 0;\n  let x64 = 0;\n  let x65 = 0;\n  let x66 = 0;\n  let x67 = 0;\n  let x68 = 0;\n  let x69 = 0;\n  let x70 = 0;\n  let x71 = 0;\n  let x72 = 0;\n  let x73 = 0;\n  let x74 = 0;\n  let x75 = 0;\n  let x76 = 0;\n  let x77 = 0;\n  let x78 = 0;\n  let x79 = 0;\n  let x80 = 0;\n  let x81 = 0;\n  let x82 = 0;\n  let x83 = 0;\n  let x84 = 0;\n  let x85 = 0;\n  let x86 = 0;\n  let x87 = 0;\n  let x88 = 0;\n  let x89 = 0;\n  let x90 = 0;\n  let x91 = 0;\n  let x92 = 0;\n  let x93 = 0;\n  let x94 = 0;\n  let x95 = 0;\n  let x96 = 0;\n  let x97 = 0;\n  let x98 = 0;\n  let x99 = 0;\n  let x100 = 0;\n  let x101 = 0;\n  let x102 = 0;\n  let x103 = 0;\n  let x104 = 0;\n  let x105 = 0;\n  let x106 = 0;\n  let x107 = 0;\n  let x108 = 0;\n  let x109 = 0;\n  let x110 = 0;\n  let x111 = 0;\n  let x112 = 0;\n  let x113 = 0;\n  let x114 = 0;\n  let x115 = 0;\n  let x116 = 0;\n  let x117 = 0;\n  let x118 = 0;\n  let x119 = 0;\n  let x120 = 0;\n  let x121 = 0;\n  let x122 = 0;\n  let x123 = 0;\n  let x124 = 0;\n  let x125 = 0;\n  let x126 = 0;\n  let x127 = 0;\n  let x128 = 0;\n  let x129 = 0;\n  let x130 = 0;\n  let x131 = 0;\n  let x132 = 0;\n  let x133 = 0;", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 2, "perturbed": true, "gc": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the indicies that ARe NoT dIvisiblE By three, whIle iTs VaLUeS at THe inDiCiEs ThAT aRE diViSIBle BY three Are equal\n  tO tHE vaLues Of The CoRRESPondinG iNdiciEs oF l, BuT sORTED.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  const sorted2 = [];\n  const sorted3 = [];\n  const sorted4 = [];\n  const sorted5 = [];\n  const sorted6 = [];\n  const sorted7 = [];\n  const sorted8 = [];\n  const sorted9 = [];\n  const sorted10 = [];\n  const sorted11 = [];\n  const sorted12 = [];\n  const sorted13 = [];\n  const sorted14 = [];\n  const sorted15 = [];\n  const sorted16 = [];\n  const sorted17 = [];\n  const sorted18 = [];\n  const sorted19 = [];\n  const sorted20 = [];\n  const sorted21 = [];\n  const sorted22 = [];\n  const sorted23 = [];\n  const sorted24 = [];\n  const sorted25 = [];\n  const sorted26 = [];\n  const sorted27 = [];\n  const sorted28 = [];\n  const sorted29 = [];\n  const sorted30 = [];\n  const sorted31 = [];\n  const sorted32 = [];\n  const sorted33 = [];\n  const sorted34 = [];\n  const sorted35 = [];\n  const sorted36 = [];\n  const sorted37 = [];\n  const sorted38 = [];\n  const sorted39 = [];\n  const sorted40 = [];\n  const sorted41 = [];\n  const sorted42 = [];\n  const sorted43 = [];\n  const sorted44 = [];\n  const sorted45 = [];\n  const sorted46 = [];\n  const sorted47 = [];\n  const sorted48 = [];\n  const sorted49 = [];\n  const sorted50 = [];\n  const sorted51 = [];\n  const sorted52 = [];\n  const sorted53 = [];\n  const sorted54 = [];\n  const sorted55 = [];\n  const sorted56 = [];\n  const sorted57 = [];\n  const sorted58 = [];\n  const sorted59 = [];\n  const sorted60 = [];\n  const sorted61 = [];\n  const sorted62 = [];\n  const sorted63 = [];\n  const sorted64 = [];\n  const sorted65 = [];\n  const sorted66 = [];\n  const sorted67 = [];\n  const sorted68 = [];\n  const sorted69 = [];\n  const sorted70 = [];\n  const sorted71 = [];\n  const sorted72 = [];\n  const sorted73 = [];\n  const sorted74 = [];\n  const sorted75 = [];\n  const sorted76 = [];\n  const sorted77 = [];\n  const sorted78 = [];\n  const sorted79 = [];\n  const sorted80 = [];\n  const sorted81 = [];\n  const sorted82 = [];\n  const sorted83 = [];\n  const sorted84 = [];\n  const sorted85 = [];\n  const sorted86 = [];\n  const sorted87 = [];\n  const sorted88 = [];\n  const sorted89 = [];\n  const sorted90 = [];\n  const sorted91 = [];\n  const sorted92 = [];\n  const sorted93 = [];\n  const sorted94 = [];\n  const sorted95 = [];\n  const sorted96 = [];\n  const sorted97 = [];\n  const sorted98 = [];\n  const sorted99 = [];\n  const sorted100 = [];\n  const sorted101 = [];\n  const sorted102 = [];\n  const sorted103 = [];\n  const sorted104 = [];\n  const sorted105 = [];\n  const sorted106 = [];\n  const sorted107 = [];\n  const sorted108 = [];\n  const sorted109 = [];\n  const sorted110 = [];\n  const sorted111 = [];\n  const sorted112 = [];\n  const sorted113 = [];\n  const sorted114 = [];\n  const sorted115 = [];\n  const sorted116 = [];\n  const sorted117 = [];\n  const sorted118 = [];\n  const sorted119 = [];\n  const sorted120 = [];\n  const sorted121 = [];\n  const sorted122 = [];\n  const sorted123 = [];\n  const sorted124 = [];\n  const sorted125 = [];\n  const sorted126 = [];\n  const sorted127 = [];\n  const sorted128 = [];\n  const sorted129 = [];\n  const sorted130 = [];\n  const sorted131 = [];\n  const sorted132 = [];\n  const sorted133 = [];\n  const sorted134 = [];\n  const sorted135 = [];\n  const sorted136 = [];\n  const sorted137 = [];\n  const sorted138 = [];\n  const sorted139 = [];\n  const sorted140 = [];\n  const sorted141 = [];\n  const sorted142 = [];\n  const sorted143 = [];\n  const sorted144 = [];\n  const sorted145 = [];\n  const sorted146 = [];\n  const sorted147 = [];\n  const sorted148 = [];\n  const sorted149 = [];\n  const sorted150 = [];\n  const sorted151 = [];\n  const sorted152 = [];\n  const sorted153 = [];\n  const sorted154 = [];\n  const sorted155 = [];\n  const sorted156 = [];\n  const sorted157 = [];\n  const sorted158 = [];\n  const sorted159 = [];\n  const sorted160 = [];\n  const sorted161 = [];\n  const sorted162 = [];\n  const sorted163 = [];\n  const sorted164 = [];\n  const sorted165 = [];\n  const sorted166 = [];\n  const sorted167 = [];\n  const sorted168 = [];\n  const sorted169 = [];\n  const sorted170 = [];\n  const sorted171 = [];\n  const sorted172 = [];\n  const sorted173 = [];\n  const sorted174 = [];\n  const sorted175 = [];\n  const sorted176 = [];\n  const sorted177 = [];\n  const sorted178 = [];\n  const sorted179 = [];\n  const sorted180 = [];\n  const sorted181 = [];\n  const sorted182 = [];\n  const sorted183 = [];\n  const sorted184 = [];\n  const sorted185 = [];\n  const sorted186 = [];\n  const sorted187 = [];\n  const sorted188 = [];\n  const sorted189 = [];\n  const sorted190 = [];\n  const sorted191 = [];\n  const sorted192 = [];\n  const sorted193 = [];\n", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 2, "perturbed": true, "gc": "/*RetURn soRted unique Elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = new Set();\n  return l.filter(x => seen.add(x));\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy2 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy3 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy4 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy5 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy6 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy7 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy8 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy9 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy10 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy11 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy12 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy13 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy14 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy15 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n};\n\n/*\n  >>> uniqueBy([5, 3, 5, 2, 3, 3, 9, 0, 123], x => x)\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy16 = (l, key) => {\n  const seen = new Map();\n  return l.filter(x => seen.set(key(x), x));\n", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 2, "perturbed": true, "gc": "/*RetURn maXimuM element in THE list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 2, "perturbed": true, "gc": "/*RetURn thE numBer of timES ThE digiT 7 APPearS in integers lEss than n which are diVIsIbLe By 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizz = 0\n  let buzz = 0\n  let fizzBuzz = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      fizzBuzz += fizz\n      fizz = 0\n    }\n    if (i % 5 === 0) {\n      fizzBuzz += buzz\n      buzz = 0\n    }\n    if (i % 15 === 0) {\n      fizzBuzz += fizzBuzz\n      fizz = 0\n      buzz = 0\n    }\n  }\n  return fizzBuzz\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/37", "prompt": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 2, "perturbed": true, "gc": "/*ThiS FuncTion Takes a list l and RETuRns a list l' suCH THat\n  l' iS identical To l in the odd indicies, wHIlE iTs Values aT The even iNdicIeS aRE eQuaL\n  To thE vAlUeS oF ThE even IndIcIES of l, BUT sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l1 = l.slice();\n  const l2 = l.slice();\n  const l3 = l.slice();\n  const l4 = l.slice();\n  const l5 = l.slice();\n  const l6 = l.slice();\n  const l7 = l.slice();\n  const l8 = l.slice();\n  const l9 = l.slice();\n  const l10 = l.slice();\n  const l11 = l.slice();\n  const l12 = l.slice();\n  const l13 = l.slice();\n  const l14 = l.slice();\n  const l15 = l.slice();\n  const l16 = l.slice();\n  const l17 = l.slice();\n  const l18 = l.slice();\n  const l19 = l.slice();\n  const l20 = l.slice();\n  const l21 = l.slice();\n  const l22 = l.slice();\n  const l23 = l.slice();\n  const l24 = l.slice();\n  const l25 = l.slice();\n  const l26 = l.slice();\n  const l27 = l.slice();\n  const l28 = l.slice();\n  const l29 = l.slice();\n  const l30 = l.slice();\n  const l31 = l.slice();\n  const l32 = l.slice();\n  const l33 = l.slice();\n  const l34 = l.slice();\n  const l35 = l.slice();\n  const l36 = l.slice();\n  const l37 = l.slice();\n  const l38 = l.slice();\n  const l39 = l.slice();\n  const l40 = l.slice();\n  const l41 = l.slice();\n  const l42 = l.slice();\n  const l43 = l.slice();\n  const l44 = l.slice();\n  const l45 = l.slice();\n  const l46 = l.slice();\n  const l47 = l.slice();\n  const l48 = l.slice();\n  const l49 = l.slice();\n  const l50 = l.slice();\n  const l51 = l.slice();\n  const l52 = l.slice();\n  const l53 = l.slice();\n  const l54 = l.slice();\n  const l55 = l.slice();\n  const l56 = l.slice();\n  const l57 = l.slice();\n  const l58 = l.slice();\n  const l59 = l.slice();\n  const l60 = l.slice();\n  const l61 = l.slice();\n  const l62 = l.slice();\n  const l63 = l.slice();\n  const l64 = l.slice();\n  const l65 = l.slice();\n  const l66 = l.slice();\n  const l67 = l.slice();\n  const l68 = l.slice();\n  const l69 = l.slice();\n  const l70 = l.slice();\n  const l71 = l.slice();\n  const l72 = l.slice();\n  const l73 = l.slice();\n  const l74 = l.slice();\n  const l75 = l.slice();\n  const l76 = l.slice();\n  const l77 = l.slice();\n  const l78 = l.slice();\n  const l79 = l.slice();\n  const l80 = l.slice();\n  const l81 = l.slice();\n  const l82 = l.slice();\n  const l83 = l.slice();\n  const l84 = l.slice();\n  const l85 = l.slice();\n  const l86 = l.slice();\n  const l87 = l.slice();\n  const l88 = l.slice();\n  const l89 = l.slice();\n  const l90 = l.slice();\n  const l91 = l.slice();\n  const l92 = l.slice();\n  const l93 = l.slice();\n  const l94 = l.slice();\n  const l95 = l.slice();\n  const l96 = l.slice();\n  const l97 = l.slice();\n  const l98 = l.slice();\n  const l99 = l.slice();\n  const l100 = l.slice();\n  const l101 = l.slice();\n  const l102 = l.slice();\n  const l103 = l.slice();\n  const l104 = l.slice();\n  const l105 = l.slice();\n  const l106 = l.slice();\n  const l107 = l.slice();\n  const l108 = l.slice();\n  const l109 = l.slice();\n  const l110 = l.slice();\n  const l111 = l.slice();\n  const l112 = l.slice();\n  const l113 = l.slice();\n  const l114 = l.slice();\n  const l115 = l.slice();\n  const l116 = l.slice();\n  const l117 = l.slice();\n  const l118 = l.slice();\n  const l119 = l.slice();\n  const l120 = l.slice();\n  const l121 = l.slice();\n  const l122 = l.slice();\n  const l123 = l.slice();\n  const l124 = l.slice();\n  const l125 = l.slice();\n  const l126 = l.slice();\n  const l127 = l.slice();\n  const l128 = l.slice();\n  const l129 = l.slice();\n  const l130 = l.slice();\n  const l131 = l.slice();\n  const l132 = l.slice();\n  const l133 = l.slice();\n  const l134 = l.slice();\n  const l135 = l.slice();\n  const l136 = l.slice();\n  const l137 = l.slice();\n  const l138 = l.slice();\n  const l139 = l.", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 2, "perturbed": true, "gc": "/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  TAkes As inPuT sTRiNg eNCodeD wItH eNcODe_CYclIc FUNctION. Returns dEcODed StriNg.\n  */\nConSt decodeCyclic = (s) => {\n  var groups = s.split('');\n  var groups2 = [];\n  for (let i = 0; i < groups.length; i++) {\n    groups2.push(groups[i] + groups[i + 1] + groups[i + 2]);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTUrns EncoDed strinG BY cYclinG groups OF ThreE characterS.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  foR (CoNsT group oF groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 2, "perturbed": true, "gc": "/*\n  primeFib reTUrns n-th NumbEr that is A fIbOnaccI NUMber And it's also Prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let i = 2;\n  let prime = 2;\n  while (prime <= n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    i++;\n    prime = i * 2;\n  }\n  return prime;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fibPrime = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (isPrime(n)) {\n    return fibPrime(n - 1) + fibPrime(n - 2);\n  }\n  return fibPrime(n - 1) + fibPrime(n - 2);\n};\n\nconst test = () => {\n  console.log(primeFib(1));\n  console.log(primeFib(2));\n  console.log(primeFib(3));\n  console.log(primeFib(4));\n  console.log(primeFib(5));\n  console.log(primeFib(6));\n  console.log(primeFib(7));\n  console.log(primeFib(8));\n  console.log(primeFib(9));\n  console.log(primeFib(10));\n  console.log(primeFib(11));\n  console.log(primeFib(12));\n  console.log(primeFib(13));\n  console.log(primeFib(14));\n  console.log(primeFib(15));\n  console.log(primeFib(16));\n  console.log(primeFib(17));\n  console.log(primeFib(18));\n  console.log(primeFib(19));\n  console.log(primeFib(20));\n  console.log(primeFib(21));\n  console.log(primeFib(22));\n  console.log(primeFib(23));\n  console.log(primeFib(24));\n  console.log(primeFib(25));\n  console.log(primeFib(26));\n  console.log(primeFib(27));\n  console.log(primeFib(28));\n  console.log(primeFib(29));\n  console.log(primeFib(30));\n  console.log(primeFib(31));\n  console.log(primeFib(32));\n  console.log(primeFib(33));\n  console.log(primeFib(34));\n  console.log(primeFib(35));\n  console.log(primeFib(36));\n  console.log(primeFib(37));\n  console.log(primeFib(38));\n  console.log(primeFib(39));\n  console.log(primeFib(40));\n  console.log(primeFib(41));\n  console.log(primeFib(42));\n  console.log(primeFib(43));\n  console.log(primeFib(44));\n  console.log(primeFib(45));\n  console.log(primeFib(46));\n  console.log(primeFib(47));\n  console.log(primeFib(48));\n  console.log(primeFib(49));\n  console.log(primeFib(50));\n  console.log(primeFib(51));\n  console.log(primeFib(52));\n  console.log(primeFib(53));\n  console.log(primeFib(54));\n  console.log(primeFib(55));\n  console.log(primeFib(56));\n  console.log(primeFib(57));\n  console.log(primeFib(58));\n  console.log(primeFib(59));\n  console.log(primeFib(60));\n  console.log(primeFib(61));\n  console.log(primeFib(62));\n  console.log(primeFib(63));\n  console.log(primeFib(64));\n  console.log(primeFib(65));\n  console.log(primeFib(66));\n  console.log(primeFib(67));\n  console.log(primeFib(68));\n  console.log(primeFib(69));\n  console.log(primeFib(70));\n  console.log(primeFib(71));\n  console.log(primeFib(72));\n  console.log(primeFib(73));\n  console.log(primeFib(74));\n  console.log(primeFib(75));\n  console.log(primeFib(76));\n  console.log(primeFib(77));\n  console.log(primeFib(78));\n  console.log(primeFib(79));\n  console.log(primeFib(80));\n  console.log(primeFib(81));\n  console.log(primeFib(82));\n  console.log(primeFib(83));\n  console.log(primeFib(84));\n  console.log(primeFib(85));\n  console.log(primeFib(86));\n  console.log(primeFib(87));\n  console.log(primeFib(88));\n  console.log(primeFib(89));\n  console.log(primeFib(", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return (x) => {\n    return Math.abs(x - mean)\n  }\n}\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return (x) => {\n    return Math.abs(x - mean)\n  }\n}\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return (x) => {\n    return Math.abs(x - mean)\n  }\n}\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return (x) => {\n    return Math.abs(x - mean)\n  }\n}\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return (x) => {\n    return Math.abs(x - mean)\n  }\n}\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return (x) => {\n    return Math.abs(x - mean)\n  }\n}\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return (x) => {\n    return Math.abs(x - mean)\n  }\n}\n\n/*\n  FoR A givEn list of Input numbers, calCULaTe MeaN aBSoluTe DeviatioN\n  around the mean of this dATaSeT.\n  MEan AbsoLUte DEviaTiOn IS tHe aVEragE aBsOlUtE DiFFerEnCE BetWEEn each\n  eleMeNT anD a ceNtErpOiNT (mean in THIs case):\n  mAd = averAge | X - X_mEaN |\n  >>> meanAbsoluteDeviation([1.0, 2", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  const isZero = sum === 0\n  return isZero\n}\n\n/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  const isOne = sum === 1\n  return isOne\n}\n\n/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  const isTwo = sum === 2\n  return isTwo\n}\n\n/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  const isThree = sum === 3\n  return isThree\n}\n\n/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  const isFour = sum === 4\n  return isFour\n}\n\n/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  const isFive = sum === 5\n  return isFive\n}\n\n/*\n  triplesSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are three distinct eLEmEnTs in The list that\n  SUm to Zero, AnD fALsE otHErwiSe.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  const sum = l.reduce((a, b)", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 2, "perturbed": true, "gc": "/*\n  ImAGine A roaD that's a pERFeCtly sTRAIght Infinitely Long line.\n  n cars are drIViNg LeFt to rigHT;  simUltaNeOuSLy, A diFFereNt SeT oF n cARs\n  ARe dRiVINg rIGHt to left.   THe TWo sEts oF cArs StART OUt beinG vEry faR frOM\n  eAcH OTHEr.  ALl Cars movE in thE Same spEed.  twO CarS are SaID to CoLlide\n  wHEN a car That's movIng left TO rIght hiTs a CaR That'S MOving RighT to Left.\n  HoweVeR, thE cars are iNfiniTely stUrdy anD stronG; as A reSuLt, tHey CoNTinue moVInG\n  in ThEir trajECtoRY as if theY did nOt CollidE.\n\n  This fuNCtIOn OutpUTs ThE numbeR OF Such cOllisIons.\n  */\nconst carRaceCollision = (n) => {\n  let cars = [];\n  let car;\n  let i;\n  for (i = 0; i < n; i++) {\n    car = {\n      x: Math.random() * window.innerWidth,\n      y: Math.random() * window.innerHeight,\n      speed: Math.random() * 10,\n      angle: Math.random() * 2 * Math.PI,\n      color: '#' + Math.floor(Math.random() * 16777215).toString(16)\n    };\n    cars.push(car);\n  }\n  return cars;\n};\n\nconst carRace = (cars) => {\n  let i;\n  for (i = 0; i < cars.length; i++) {\n    cars[i].x += cars[i].speed * Math.cos(cars[i].angle);\n    cars[i].y += cars[i].speed * Math.sin(cars[i].angle);\n  }\n  return cars;\n};\n\nconst carRaceCollision = (cars) => {\n  let i;\n  for (i = 0; i < cars.length; i++) {\n    cars[i].x += cars[i].speed * Math.cos(cars[i].angle);\n    cars[i].y += cars[i].speed * Math.sin(cars[i].angle);\n    if (cars[i].x < 0 || cars[i].x > window.innerWidth || cars[i].y < 0 || cars[i].y > window.innerHeight) {\n      cars[i].x = Math.random() * window.innerWidth;\n      cars[i].y = Math.random() * window.innerHeight;\n      cars[i].speed = Math.random() * 10;\n      cars[i].angle = Math.random() * 2 * Math.PI;\n    }\n  }\n  return cars;\n};\n\nconst carRaceCollision2 = (cars) => {\n  let i;\n  for (i = 0; i < cars.length; i++) {\n    cars[i].x += cars[i].speed * Math.cos(cars[i].angle);\n    cars[i].y += cars[i].speed * Math.sin(cars[i].angle);\n    if (cars[i].x < 0 || cars[i].x > window.innerWidth || cars[i].y < 0 || cars[i].y > window.innerHeight) {\n      cars[i].x = Math.random() * window.innerWidth;\n      cars[i].y = Math.random() * window.innerHeight;\n      cars[i].speed = Math.random() * 10;\n      cars[i].angle = Math.random() * 2 * Math.PI;\n    }\n  }\n  return cars;\n};\n\nconst carRaceCollision3 = (cars) => {\n  let i;\n  for (i = 0; i < cars.length; i++) {\n    cars[i].x += cars[i].speed * Math.cos(cars[i].angle);\n    cars[i].y += cars[i].speed * Math.sin(cars[i].angle);\n    if (cars[i].x < 0 || cars[i].x > window.innerWidth || cars[i].y < 0 || cars[i].y > window.innerHeight) {\n      cars[i].x = Math.random() * window.innerWidth;\n      cars[i].y = Math.random() * window.innerHeight;\n      cars[i].speed = Math.random() * 10;\n      cars[i].angle = Math.random() * 2 * Math.PI;\n    }\n  }\n  return cars;\n};\n\nconst carRaceCollision4 = (cars) => {\n  let i;\n  for (i = 0; i < cars.length; i++) {\n    cars[i].x += cars[i].speed * Math.cos(cars[i].angle);\n    cars[i].y += cars[i].speed * Math.sin(cars[i].angle);\n    if (cars[i].x < 0 || cars[i].x > window.innerWidth || cars[i].y < 0 || cars[i].y > window.innerHeight) {\n      cars[i].x = Math.random() * window.innerWidth;\n      cars[i].y = Math.random() * window.innerHeight;\n      cars[i].speed = Math.random() * 10;\n      cars[i].angle = Math.random() * 2 * Math.PI;\n    }\n  }\n  return cars;\n};\n\nconst carRaceCollision5 = (cars) => {\n  let i;\n  for (i = 0; i < cars.length; i++) {\n    cars[i].x += cars[i].speed * Math.cos(cars[i].angle);\n    cars[i].y += cars[i].speed * Math.sin(cars[i].angle);\n    if (cars[i].x < 0 || cars[i].x > window.innerWidth || cars[i].y < 0 || cars[i].y > window.innerHeight) {\n      cars[i].x = Math.random() * window.innerWidth;\n      cars[i].y = Math.random() * window.innerHeight;\n      cars[i].speed = Math.random() * 10;\n", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 2, "perturbed": true, "gc": "/*RetURn list wiTh elEments inCREmEnted BY 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  let result = [];\n  while (l.length > i) {\n    result.push(l[i]);\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 2, "perturbed": true, "gc": "/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const pairs = l.filter((x, i) => i === 0? x === 0 : x > 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  const pairs = l.filter((x, i) => i === 0? x === 0 : x > 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero3 = (l) => {\n  const pairs = l.filter((x, i) => i === 0? x === 0 : x > 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero4 = (l) => {\n  const pairs = l.filter((x, i) => i === 0? x === 0 : x > 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero5 = (l) => {\n  const pairs = l.filter((x, i) => i === 0? x === 0 : x > 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero6 = (l) => {\n  const pairs = l.filter((x, i) => i === 0? x === 0 : x > 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairsSumToZero taKEs a list oF intEgers as aN INpUt.\n  it rETURns tRue if there Are two distinct eleMEnTs in ThE list that\n  suM To zeRo, anD fAlSE oTheRWise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 2, "perturbed": true, "gc": "/*ChaNGe nuMeriCal base of inpUT NuMber x tO base.\n  return STRing RepresentaTion after the conveRSiOn.\n  base NuMbers arE Less Than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = x;\n  if (x < 0) {\n    result = x.toString().split('').reverse().join('');\n  }\n  while (result.length > base) {\n    result = result.substring(0, result.length - 1);\n  }\n  return result;\n};\n\n/*\n  ConveRsion of a number in base 10.\n  >>> changeBase(12, 2)\n  '11'\n  >>> changeBase(12, 3)\n  '10'\n  >>> changeBase(12, 5)\n  '1011'\n  >>> changeBase(12, 7)\n  '10101'\n  >>> changeBase(12, 8)\n  '101001'\n  >>> changeBase(12, 9)\n  '10100011'\n  >>> changeBase(12, 10)\n  '101000011'\n  >>> changeBase(12, 11)\n  '10100000111'\n  >>> changeBase(12, 12)\n  '1010000010111'\n  >>> changeBase(12, 13)\n  '101000001010111'\n  >>> changeBase(12, 14)\n  '10100000101010111'\n  >>> changeBase(12, 15)\n  '1010000010101010111'\n  >>> changeBase(12, 16)\n  '101000001010101010111'\n  >>> changeBase(12, 17)\n  '10100000101010101010111'\n  >>> changeBase(12, 18)\n  '1010000010101010101010111'\n  >>> changeBase(12, 19)\n  '101000001010101010101010111'\n  >>> changeBase(12, 20)\n  '10100000101010101010101010111'\n  >>> changeBase(12, 21)\n  '1010000010101010101010101010111'\n  >>> changeBase(12, 22)\n  '101000001010101010101010101010111'\n  >>> changeBase(12, 23)\n  '10100000101010101010101010101010111'\n  >>> changeBase(12, 24)\n  '1010000010101010101010101010101010111'\n  >>> changeBase(12, 25)\n  '101000001010101010101010101010101010111'\n  >>> changeBase(12, 26)\n  '10100000101010101010101010101010101010111'\n  >>> changeBase(12, 27)\n  '1010000010101010101010101010101010101010111'\n  >>> changeBase(12, 28)\n  '101000001010101010101010101010101010101010111'\n  >>> changeBase(12, 29)\n  '10100000101010101010101010101010101010101010111'\n  >>> changeBase(12, 30)\n  '1010000010101010101010101010101010101010101010111'\n  >>> changeBase(12, 31)\n  '101000001010101010101010101010101010101010101010111'\n  >>> changeBase(12, 32)\n  '10100000101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 33)\n  '1010000010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 34)\n  '101000001010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 35)\n  '10100000101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 36)\n  '1010000010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 37)\n  '101000001010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 38)\n  '10100000101010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 39)\n  '1010000010101010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 40)\n  '101000001010101010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 41)\n  '10100000101010101010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 42)\n  '1010000010101010101010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 43)\n  '101000001010101010101010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 44)\n  '10100000101010101010101010101010101010101010101010101010101010101010101010111'\n  >>> changeBase(12, 45)\n  '101000001010101010101010101010101010101010101010101010101010101010101010101", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*GivEN lenGth oF a side and HIGh return Area fOR a TRianGle.\n  >>> triangleArea(5, 3)\n  7.5", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 2, "perturbed": true, "gc": "/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n/*The fIb4 nuMber Sequence IS A sEquenCE SImilAr to the FibBonacci sequnece thAT's DeFiNed as foLLows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  pleaSe WrITe A fuNCtioN tO eFfIcIEnTLy cOmPUTe tHE n-th Element of ThE fib4 NumBer sEqUenCe.  dO NOT use reCuRsion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4_2 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_2(n - 1) + fib4_2(n - 2) + fib4_2(n - 3) + fib4_2(n - 4)\n}\n\nconst fib4_3 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_3(n - 1) + fib4_3(n - 2) + fib4_3(n - 3) + fib4_3(n - 4)\n}\n\nconst fib4_4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_4(n - 1) + fib4_4(n - 2) + fib4_4(n - 3) + fib4_4(n - 4)\n}\n\nconst fib4_5 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_5(n - 1) + fib4_5(n - 2) + fib4_5(n - 3) + fib4_5(n - 4)\n}\n\nconst fib4_6 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_6(n - 1) + fib4_6(n - 2) + fib4_6(n - 3) + fib4_6(n - 4)\n}\n\nconst fib4_7 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_7(n - 1) + fib4_7(n - 2) + fib4_7(n - 3) + fib4_7(n - 4)\n}\n\nconst fib4_8 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_8(n - 1) + fib4_8(n - 2) + fib4_8(n - 3) + fib4_8(n - 4)\n}\n\nconst fib4_9 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_9(n - 1) + fib4_9(n - 2) + fib4_9(n - 3) + fib4_9(n - 4)\n}\n\nconst fib4_10 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_10(n - 1) + fib4_10(n - 2) + fib4_10(n - 3) + fib4_10(n - 4)\n}\n\nconst fib4_11 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_11(n - 1) + fib4_11(n - 2) + fib4_11(n - 3) + fib4_11(n - 4)\n}\n\nconst fib4_12 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_12(n - 1) + fib4_12(n - 2) + fib4_12(n - 3) + fib4_12(n - 4)\n}\n\nconst fib4_13 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4_13(n - 1) + fib4_13(n - 2) + fib4", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 2, "perturbed": true, "gc": "/*RetURn median of ElemEnts in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median2 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median3 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median4 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median5 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median6 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median7 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median8 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median9 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median10 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median11 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median12 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median13 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median14 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median15 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median16 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*\n  ", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 2, "perturbed": true, "gc": "/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  if (text.length === 0) {\n    return true;\n  }\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  ChECks iF givEn string IS A pAlindROME\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  ", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 2, "perturbed": true, "gc": "/*RetURn 2^n mOdulO p (be aware OF NuMericS).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p) === 0? n : modp(n, p * 2);\n};\n\nexport default modp;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 2, "perturbed": true, "gc": "/* InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  * and return the result as a string\n  *\n  * @param {Array} numbers\n  * @param {Number} delimeter\n  * @returns {String}\n  */\nconst intersperseAsString = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result.join('');\n};\n\n/*\n  * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  * and return the result as a string\n  *\n  * @param {Array} numbers\n  * @param {Number} delimeter\n  * @returns {String}\n  */\nconst intersperseAsStringWithDelimiter = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result.join(delimeter);\n};\n\n/*\n  * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  * and return the result as a string\n  *\n  * @param {Array} numbers\n  * @param {Number} delimeter\n  * @returns {String}\n  */\nconst intersperseAsStringWithDelimiterAndSpace = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result.join(delimeter +'');\n};\n\n/*\n  * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  * and return the result as a string\n  *\n  * @param {Array} numbers\n  * @param {Number} delimeter\n  * @returns {String}\n  */\nconst intersperseAsStringWithDelimiterAndSpaceAndNewLine = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result.join(delimeter + '\\n' +'');\n};\n\n/*\n  * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  * and return the result as a string\n  *\n  * @param {Array} numbers\n  * @param {Number} delimeter\n  * @returns {String}\n  */\nconst intersperseAsStringWithDelimiterAndSpaceAndNewLineAndTab = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result.join(delimeter + '\\n' + '\\t' +'');\n};\n\n/*\n  * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  * and return the result as a string\n  *\n  * @param {Array} numbers\n  * @param {Number} delimeter\n  * @returns {String}\n  */\nconst intersperseAsStringWithDelimiterAndSpaceAndNewLineAndTabAndSpace = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result.join(delimeter + '\\n' + '\\t' +'');\n};\n\n/*\n  * InSErt a NumbEr 'delimeter' betweeN EVeRy two CONSecuTive elemenTs of input list `numbers'\n  * and return the result as a string\n  *\n  * @param {Array} numbers\n  * @param {Number} delimeter\n  * @returns {String}\n  */\nconst intersperseAsStringWithDelimiterAndSpaceAndNewLineAndTabAndSpace = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(del", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 2, "perturbed": true, "gc": "/*\n  reTUrns EncoDed strinG BY sHiftiNG EVery Character bY 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"A\".ChArcoDeAt(0)) % 26) + \"a\".chARCodEAt(0)\n  )).jOiN(\"\");\n}\n\n/*\n  tAKeS as INput StRiNg EnCOdED wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".chARCodEAt(0) - 5) % 26) + \"A\".ChArcoDeAt(0)\n  ));\n}\n\n/*\n  tAKEs as INput StRiNg EnCOdEd wiTh ENCodE_SHift functIoN. retUrns DeCodEd STRINg.\n  */\nconsT encodeShift = (s) => {", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 2, "perturbed": true, "gc": "/*\n  removeVowels is A FuncTion That takeS STrIng anD RETurnS string witHout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const newText = text.toLowerCase()\n  const newText = newText.replace(/[aeiou]/g, '')\n  return newText\n}\n\n/*\n  removePunctuation is A FuncTion That takeS STrIng anD RETurnS string witHout punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'BAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  const punctuation = [',', '.', ':', ';', '!', '?', '\"', '\\'', '`', '-', '_', '*', '+', '%', '^', '&', '~', '{', '}', '[', ']', '(', ')']\n  const newText = text.toLowerCase()\n  const newText = newText.replace(/[,.]/g, '')\n  return newText\n}\n\n/*\n  removeWhitespace is A FuncTion That takeS STrIng anD RETurnS string witHout whitespace.\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWhitespace('abcdef')\n  'abcdef'\n  >>> removeWhitespace('aaaaa')\n  ''\n  >>> removeWhitespace('aaBAA')\n  'BAA'\n  >>> removeWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeWhitespace = (text) => {\n  const whitespace = [',', '.', ':', ';', '!', '?', '\"', '\\'', '`', '-', '_', '*', '+', '%', '^', '&', '~', '{', '}', '[', ']', '(', ')']\n  const newText = text.toLowerCase()\n  const newText = newText.replace(/\\s/g, '')\n  return newText\n}\n\n/*\n  removeNonAlphanumeric is A FuncTion That takeS STrIng anD RETurnS string witHout non-alphanumeric characters.\n  >>> removeNonAlphanumeric('')\n  ''\n  >>> removeNonAlphanumeric(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonAlphanumeric('abcdef')\n  'abcdef'\n  >>> removeNonAlphanumeric('aaaaa')\n  ''\n  >>> removeNonAlphanumeric('aaBAA')\n  'BAA'\n  >>> removeNonAlphanumeric('zbcd')\n  'zbcd'\n  */\nconst removeNonAlphanumeric = (text) => {\n  const nonAlphanumeric = [',', '.', ':', ';', '!', '?', '\"', '\\'', '`', '-', '_', '*', '+', '%', '^', '&', '~', '{', '}', '[', ']', '(', ')']\n  const newText = text.toLowerCase()\n  const newText = newText.replace(/[^a-z0-9]/g, '')\n  return newText\n}\n\n/*\n  removeAllPunctuation is A FuncTion That takeS STrIng anD RETurnS string witHout all punctuation.\n  >>> removeAllPunctuation('')\n  ''\n  >>> removeAllPunctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllPunctuation('abcdef')\n  'abcdef'\n  >>> removeAllPunctuation('aaaaa')\n  ''\n  >>> removeAllPunctuation('aaBAA')\n  'BAA'\n  >>> removeAllPunctuation('zbcd')\n  'zbcd'\n  */\nconst removeAllPunctuation = (text) => {\n  const punctuation = [',', '.', ':', ';', '!', '?', '\"', '\\'', '`', '-', '_', '*', '+', '%', '^', '&', '~', '{', '}', '[', ']', '(', ')']\n  const newText = text.toLowerCase()\n  const newText = newText.replace(/[^a-z0-9]/g, '')\n  return newText\n}\n\n/*\n  removeAllWhitespace is A FuncTion That takeS STrIng anD RETurnS string witHout all whitespace.\n  >>> removeAllWhitespace('')\n  ''\n  >>> removeAllWhitespace(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllWhitespace('abcdef')\n  'abcdef'\n  >>> removeAllWhitespace('aaaaa')\n  ''\n  >>> removeAllWhitespace('aaBAA')\n  'BAA'\n  >>> removeAllWhitespace('zbcd')\n  'zbcd'\n  */\nconst removeAllWhitespace = (text) => {\n  const whitespace = [',', '.', ':', ';', '!', '?', '\"', '\\'', '`', '-", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 2, "perturbed": true, "gc": "/*RetURn trUe if All numbeRS in ThE list l are bELOW thrEshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  return l.every(x => x < t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  return l.every(x => x > t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold14 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold15 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold16 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold17 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold18 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold19 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold20 = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*\n  >>> belowThreshold([1, 2", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*Add TWo nuMberS x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 2, "perturbed": true, "gc": "/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0;\n    let j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n    return i === s0.length && j === s1.length;\n};\n\n/*\n  ChECk if Two wOrds have THE sAme chARACterS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    let i = 0;\n    let j = 0;\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++;\n            j++;\n        } else {\n            break;\n        }\n    }\n    return i === s0.length && j === s1.length;\n};\n\nmodule.exports = {\n    sameChars,\n    sameChars2\n};\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/55", "prompt": "/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 2, "perturbed": true, "gc": "/*RetURn n-th FiBonaCci numbeR.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 1;\n  for (let i = 2; i <= n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is A StriNg of \"<\" And \">\".\n  return false IF EvEry opENINg brAcket has a cOrresponding closiNG bRaCkEt.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    const char = brackets[i]\n    if (char === \"<\") {\n      stack.push(\"<\")\n    } else if (char === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBr", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 2, "perturbed": true, "gc": "/*RetURn trUe is list Elements ARE mOnotoNICAlly Increasing Or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  return sorted.length === 1 || sorted[1] - sorted[0] < 0;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 2, "perturbed": true, "gc": "/*RetURn soRted Unique common elEMEnTs for TWO ListS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Sorted = sort(l1);\n  const l2Sorted = sort(l2);\n  const l1Length = l1Sorted.length;\n  const l2Length = l2Sorted.length;\n  const l1Index = 0;\n  const l2Index = 0;\n  const commonLength = Math.min(l1Length, l2Length);\n  const common = [];\n  while (l1Index < l1Length && l2Index < l2Length) {\n    if (l1Sorted[l1Index] === l2Sorted[l2Index]) {\n      common.push(l1Sorted[l1Index]);\n      l1Index++;\n      l2Index++;\n    } else if (l1Sorted[l1Index] < l2Sorted[l2Index]) {\n      l1Index++;\n    } else {\n      l2Index++;\n    }\n  }\n  return common;\n};\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 2, "perturbed": true, "gc": "/*RetURn thE largest priMe factor OF n. asSume n > 1 aND IS not A prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max.apply(Math, factors);\n};\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 2, "perturbed": true, "gc": "/* InPUt to This Function IS A sTring REPReseNted multipLe groups for nested PArEnThEses sepARateD by sPaCeS.\n  foR eaCH of tHe GrOuP, oUTpUT thE dEEPesT LEvel of nesTiNG of PareNtHesEs.\n  e.G. (()()) HAS maximUm Two leVelS Of NeSTING whIlE ((())) has thrEe.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_length = paren_string.length\n  const paren_string_array = paren_string.split('')\n  const paren_string_array_length = paren_string_array.length\n  const paren_string_array_index = 0\n  const paren_string_array_index_2 = 0\n  const paren_string_array_index_3 = 0\n  const paren_string_array_index_4 = 0\n  const paren_string_array_index_5 = 0\n  const paren_string_array_index_6 = 0\n  const paren_string_array_index_7 = 0\n  const paren_string_array_index_8 = 0\n  const paren_string_array_index_9 = 0\n  const paren_string_array_index_10 = 0\n  const paren_string_array_index_11 = 0\n  const paren_string_array_index_12 = 0\n  const paren_string_array_index_13 = 0\n  const paren_string_array_index_14 = 0\n  const paren_string_array_index_15 = 0\n  const paren_string_array_index_16 = 0\n  const paren_string_array_index_17 = 0\n  const paren_string_array_index_18 = 0\n  const paren_string_array_index_19 = 0\n  const paren_string_array_index_20 = 0\n  const paren_string_array_index_21 = 0\n  const paren_string_array_index_22 = 0\n  const paren_string_array_index_23 = 0\n  const paren_string_array_index_24 = 0\n  const paren_string_array_index_25 = 0\n  const paren_string_array_index_26 = 0\n  const paren_string_array_index_27 = 0\n  const paren_string_array_index_28 = 0\n  const paren_string_array_index_29 = 0\n  const paren_string_array_index_30 = 0\n  const paren_string_array_index_31 = 0\n  const paren_string_array_index_32 = 0\n  const paren_string_array_index_33 = 0\n  const paren_string_array_index_34 = 0\n  const paren_string_array_index_35 = 0\n  const paren_string_array_index_36 = 0\n  const paren_string_array_index_37 = 0\n  const paren_string_array_index_38 = 0\n  const paren_string_array_index_39 = 0\n  const paren_string_array_index_40 = 0\n  const paren_string_array_index_41 = 0\n  const paren_string_array_index_42 = 0\n  const paren_string_array_index_43 = 0\n  const paren_string_array_index_44 = 0\n  const paren_string_array_index_45 = 0\n  const paren_string_array_index_46 = 0\n  const paren_string_array_index_47 = 0\n  const paren_string_array_index_48 = 0\n  const paren_string_array_index_49 = 0\n  const paren_string_array_index_50 = 0\n  const paren_string_array_index_51 = 0\n  const paren_string_array_index_52 = 0\n  const paren_string_array_index_53 = 0\n  const paren_string_array_index_54 = 0\n  const paren_string_array_index_55 = 0\n  const paren_string_array_index_56 = 0\n  const paren_string_array_index_57 = 0\n  const paren_string_array_index_58 = 0\n  const paren_string_array_index_59 = 0\n  const paren_string_array_index_60 = 0\n  const paren_string_array_index_61 = 0\n  const paren_string_array_index_62 = 0\n  const paren_string_array_index_63 = 0\n  const paren_string_array_index_64 = 0\n  const paren_string_array_index_65 = 0\n  const paren_string_array_index_66 = 0\n  const paren_string_array_index_67 = 0\n  const paren_string_array_index_68 = 0\n  const paren_string_array_index_69 = 0\n  const paren_string_array_index_70 = 0\n  const paren_string_array_index_71 = 0\n  const paren_string_array_index_72 = 0\n  const paren_string_array_index_73 = 0\n  const paren_string_array_index_74 = 0\n  const paren_string_array_index_75 = 0\n  const paren_string_array_index_76 = 0\n  const paren_string_array_index_77 = 0\n  const paren_string_array_index_78 = 0\n  const paren_string_array_index_79 = 0\n  const paren_string_array_index_80 = 0\n  const paren_string_array_index_81 = 0\n  const paren_string_array_index_82 = 0\n  const paren_string_array_index_83 = 0\n  const paren_string_array_index_84 = 0\n  const paren_string_array_index_85 = 0\n  const paren_string_array_index_86 = 0\n  const paren_string_array_index_87 = 0\n  const paren_string_array_index_88 = 0", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 2, "perturbed": true, "gc": "/*sumtON is A funCtion thaT SUmS numbERS From 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 2, "perturbed": true, "gc": "/* brackets is A StriNg of \"(\" And \")\".\n  return true iF EVeRy opeNING braCket has a coRresponding closinG BrAcKeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    bracket = brackets[0],\n    isClosingBracket = false,\n    isOpeningBracket = false,\n    isParenthesis = false;\n\n  for (let i = 1; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      isOpeningBracket = true;\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      isOpeningBracket = true;\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      isOpeningBracket = true;\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      isOpeningBracket = true;\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      isOpeningBracket = true;\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      isOpeningBracket = true;\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop();\n        isClosingBracket = true;\n      } else {\n        return false;\n      }\n    } else if (brackets[i] === '(') {\n      stack.push(brackets[i]);\n      isOpeningBracket = true;\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 2, "perturbed": true, "gc": "/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = 1\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = 1\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = 1\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative of thiS polynomial in the samE FoRm.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = 1\n    for (let j = i + 1; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/* xs rePReseNt coEfficienTS Of A polyNOMIal.\n  xs[0] + xs[1] *", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 2, "perturbed": true, "gc": "/*The fIbFiB numBer sequeNCE iS a seqUENCe siMilar to the fibbonacci sequnecE ThAt'S dEfined aS FollOws:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLeAsE WrIte A FuncTiOn To EfFIcIEntLy COMpuTE The n-th elemenT oF The fibfib NumbEr SeqUeNCE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfib_iter = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib_iter(n - 1) + fibfib_iter(n - 2) + fibfib_iter(n - 3);\n};\n\nconst fibfib_iter_memo = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 1;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  if (n === 5) {\n    return 3;\n  }\n  if (n === 6) {\n    return 5;\n  }\n  if (n === 7) {\n    return 8;\n  }\n  if (n === 8) {\n    return 13;\n  }\n  if (n === 9) {\n    return 21;\n  }\n  if (n === 10) {\n    return 34;\n  }\n  if (n === 11) {\n    return 55;\n  }\n  if (n === 12) {\n    return 89;\n  }\n  if (n === 13) {\n    return 144;\n  }\n  if (n === 14) {\n    return 233;\n  }\n  if (n === 15) {\n    return 377;\n  }\n  if (n === 16) {\n    return 634;\n  }\n  if (n === 17) {\n    return 1023;\n  }\n  if (n === 18) {\n    return 1597;\n  }\n  if (n === 19) {\n    return 2584;\n  }\n  if (n === 20) {\n    return 4181;\n  }\n  if (n === 21) {\n    return 6765;\n  }\n  if (n === 22) {\n    return 11440;\n  }\n  if (n === 23) {\n    return 19441;\n  }\n  if (n === 24) {\n    return 28657;\n  }\n  if (n === 25) {\n    return 39240;\n  }\n  if (n === 26) {\n    return 52429;\n  }\n  if (n === 27) {\n    return 64430;\n  }\n  if (n === 28) {\n    return 80141;\n  }\n  if (n === 29) {\n    return 101500;\n  }\n  if (n === 30) {\n    return 120501;\n  }\n  if (n === 31) {\n    return 140600;\n  }\n  if (n === 32) {\n    return 161500;\n  }\n  if (n === 33) {\n    return 182000;\n  }\n  if (n === 34) {\n    return 203500;\n  }\n  if (n === 35) {\n    return 224401;\n  }\n  if (n === 36) {\n    return 256500;\n  }\n  if (n === 37) {\n    return 284000;\n  }\n  if (n === 38) {\n    return 320000;\n  }\n  if (n === 39) {\n    return 350000;\n  }\n  if (n === 40) {\n    return 380000;\n  }\n  if (n === 41) {\n    return 410000;\n  }\n  if (n === 42) {\n    return 430000;\n  }\n  if (n === 43) {\n    return 450000;\n  }\n  if (n === 44) {\n    return 480000;\n  }\n  if (n === 45) {\n    return 510000;\n  }\n  if (n === 46) {\n    return 520000;\n  }\n  if (n === 47) {\n    return 550000;\n  }\n  if (n === 48) {\n    return 580000;\n  }\n  if (n === 49) {\n    return 610000;\n  }\n  if (n === 50) {\n    return 640000;\n  }\n  if (n === 51) {\n    return 670000;\n  }\n  if (n === 52) {\n    return 700000;\n  }\n  if (n === 53) {\n    return 740000;\n  }\n  if (n === 54) {\n    return 770000;\n  }\n  if (n === 55) {\n    return 800000;\n  }\n  if (n === 56) {\n    return 840000;\n  }\n  if (n === 57) {\n    return 870000;\n  }\n  if (n === 58) {\n    return 900000;\n  }\n  if (n === 59) {\n    return 940000;\n  }\n  if (n === 60) {\n    return 970000;\n  }\n  if (n === 61) {\n    return 1000000;\n  }\n  if (n === 62) {\n    ", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn vowelsCount which tAKEs A striNG REpreSenting\n  a woRd as input and returNS tHe NuMber of vowels in tHE strIng.\n  VOwElS in ThIs cASe arE 'a', 'E', 'i', 'O', 'u'. heRE, 'y' IS alSo A\n  VOweL, BUt only wheN iT Is aT the EnD of ThE GIVEn word.\n\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n  exAmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 2, "perturbed": true, "gc": "/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const dIGits = x.toString().split('').reverse().join('');\n  const result = dIGits.substr(shift, dIGits.length);\n  return result;\n};\n\n/*CirCUlar shift The dIgits of tHE InTeger x, shift THE DigiTs right by shift\n  aNd return the result as a strINg.\n  if shift > NuMber of dIGits, return DigiTs ReVErSed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  ", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 2, "perturbed": true, "gc": "/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += parseInt(s[i])\n  }\n  return sum\n}\n\n/*TasK\n  writE a fuNction thAT TaKes a sTRINg as Input and reTurns the sum of the uPPeR cHaRacters ONly'\n  AsCII CoDeS.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 2, "perturbed": true, "gc": "/*\n  In THis tAsk, yOu will be GIVeN a strING That Represents A number of apples anD OrAnGeS\n  that arE DistRibuTeD in a BAsKet OF fruIt ThIs BaSKeT ConTaINS\n  apPLEs, oranges, AnD ManGo frUiTs. GIvEN THE strinG tHat rePreSEnTs THE TOtaL nUmber of\n  The ORanges And ApPLes And aN iNTegEr That rePREsent The total Number oF ThE fruitS\n  in thE bASket return THE numbEr of The Mango fruItS in thE basket.\n  foR examBle:\n  fruitDistribution(\"5 appLes and 6 OrangeS\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apPleS aNd 1 oRanGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 applES anD 1 Oranges\",120) -> 120 - 100 - 1 = 19\n  */\ncOnst fruitDistribution = (s, n) => {\n  let str = s.split(\" \");\n  let num = Number(str[0]);\n  let fruit = str.slice(1, str.length).join(\" \");\n  let total = num * fruit.length;\n  return total;\n};\n\nconsole.log(fruitDistribution(\"5 appLes and 6 OrangeS\", 19));\nconsole.log(fruitDistribution(\"0 apPleS aNd 1 oRanGeS\", 3));\nconsole.log(fruitDistribution(\"2 Apples aND 3 oRAnGes\", 100));\nconsole.log(fruitDistribution(\"100 applES anD 1 Oranges\", 120));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 2, "perturbed": true, "gc": "/*\n  \"GiVEn an ArraY represeNTInG a braNCH Of a tRee that has Non-negative integeR NoDeS\n  yOur task IS to pluck oNe of ThE nODeS anD return It.\n  ThE pLuCkEd NOdE ShoUlD BE thE NOde with thE sMAllEst eVeN vaLuE.\n  iF MUltiplE nOdes wIth THe SaME SMAllEsT even vaLue ARe founD return thE nODe tHat hAs SMalLeSt indeX.\n\n  tHe pluCked node Should bE ReTurned in A list, [ smAlESt_vaLUE, its iNdex ],\n  if tHere are nO eVen Values or tHe givEn arraY is empTy, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [min, minIdx] = findMin(arr);\n  if (min === 0) return [];\n  const [max, maxIdx] = findMax(arr);\n  if (max === 0) return [];\n  const [result, resultIdx] = findMin(arr.slice(minIdx + 1, maxIdx + 1));\n  return [result, resultIdx];\n};\n\nconst findMin = (arr) => {\n  let min = arr[0];\n  let minIdx = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIdx = i;\n    }\n  }\n  return [min, minIdx];\n};\n\nconst findMax = (arr) => {\n  let max = arr[0];\n  let maxIdx = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIdx = i;\n    }\n  }\n  return [max, maxIdx];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\n/*\n  YoU Are gIven A non-emptY list OF pOsitiVE INtegErs. Return tHe greatest integer THaT iS gReater tHAn\n  zeRo, anD hAs A FrEquENcy gReAtEr ThAN oR EquAl TO The VALue of the iNtEGer ItseLf.\n  the FrEQUENcy of aN iNtegeR is THe NuMBER Of tImEs it appEarS in The list.\n  If nO suCh A ValUe exIsT, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return maxIndex\n}\n\nconst search = (lst) =>", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 2, "perturbed": true, "gc": "/* FiLTer aN inpUt list of strings only FOR oNes thAT COntaIn given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that don't contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringNot = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringContains = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring)!== -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that don't contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringNotContains = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringContainsNot = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that don't contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringContainsNotContains = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringContainsNotContainsNot = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that don't contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringContainsNotContainsNotContains = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that don't contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringContainsNotContainsNotContainsNot = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\n/**\n  * Filter out strings that don't contain the given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nconst filterBySubstringContainsNotContainsNotContainsNotContains = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i];\n    if (string.indexOf(substring) === -1) {\n      result.push(string);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterBySubstringNot,\n  filterBySubstringContains,\n  filterBySubstringNotContains,\n  filterBySubstringContainsNot,\n  filterBySubstringContainsNotContains,\n  filterBySubstringContainsNotContainsNot,\n  filterBySubstringContainsNotContainsNotContains\n};\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/70", "prompt": "/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn list of InteGers, return list in straNGE oRder.\n  STRANge sOrting, is whEn you start with the MInImUm Value,\n  thEN maxImum Of ThE ReMaiNIng iNtEgErS, tHEn MIniMuM ANd sO ON.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const max = lst[len - 1]\n  const min = lst[0]\n  const range = max - min\n  const sorted = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let temp = 0\n  let temp2 = 0\n  while (i < len) {\n    if (lst[i] < min) {\n      sorted[k] = lst[i]\n      k++\n      i++\n    } else if (lst[i] > max) {\n      sorted[k] = lst[i]\n      k++\n      i++\n    } else {\n      temp = lst[i]\n      while (j < len) {\n        if (lst[j] < temp) {\n          sorted[k] = lst[j]\n          k++\n          j++\n        } else if (lst[j] > temp) {\n          temp2 = lst[j]\n          while (temp2 < temp) {\n            sorted[k] = temp2\n            k++\n            temp2++\n          }\n          j++\n        } else {\n          sorted[k] = lst[j]\n          k++\n          j++\n        }\n      }\n      i++\n    }\n  }\n  return sorted\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn thE lenGths of thE THrEe sidES OF a triAngle. ReturN the area of\n  the triangle ROuNdEd To 2 decimAL poiNts iF tHe THrEe sIDes fOrM a vAlId TRiANglE.\n  OTHErwISE return -1\n  Three sidEs MAke a ValiD tRiaNgLE WHEn the sUm Of any Two SIdEs IS GREatEr\n  Than the ThiRD side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a < b && b < c) {\n    return (c - b) * (c - a) / 2\n  } else if (a > b && b > c) {\n    return (a - b) * (a - c) / 2\n  } else if (a < b && b > c) {\n    return (b - c) * (c - a) / 2\n  } else if (a > b && b < c) {\n    return (c - b) * (b - a) / 2\n  } else {\n    return -1\n  }\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  return (a + b - c) * (a + b - c) / 2\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea4 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea5 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea6 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea7 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea8 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea9 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea10 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea11 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea12 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea13 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea14 = (a, b, c) => {\n  return (a * b * c) / 6\n}\n\n/*\n  GIVEN A TRIANGLE, RETURN THE AREA OF THE TRIANGLE\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  tri", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that rETUrNs truE IF The oBject q will fLy, and false otherwiSE.\n  THe ObJect q wilL Fly iF it's BaLaNCeD (it IS a paLiNdRoMiC list) AnD The SuM OF itS ELements is LeSS thAn or EqUal ThE MAXImum poSsIble wEigHT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  if (q.length === 4) return q[0] + q[1] + q[2] + q[3] <= w;\n  if (q.length === 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n  if (q.length === 6) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n  if (q.length === 7) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n  if (q.length === 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w;\n  if (q.length === 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w;\n  if (q.length === 10) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w;\n  if (q.length === 11) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] <= w;\n  if (q.length === 12) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] <= w;\n  if (q.length === 13) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] <= w;\n  if (q.length === 14) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] <= w;\n  if (q.length === 15) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] <= w;\n  if (q.length === 16) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] <= w;\n  if (q.length === 17) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] <= w;\n  if (q.length === 18) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] <= w;\n  if (q.length === 19) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] <= w;\n  if (q.length === 20) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an ArraY arr of integERS, fInd thE MINimuM number of eLements that\n  need to BE cHaNgEd to makE The aRray PaLiNDrOmiC. a palInDrOmIc ARrAY is An ARRay THAt\n  is read tHe SAme BackWaRds AnD FORWards. IN oNe chaNge, YOu CaN CHANge OnE elemenT to ANy otheR elEmENt.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Finds the smallest number in an array.\n  */\nconst smallest = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Finds the largest number in an array.\n  */\nconst largest = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Finds the largest number in an array.\n  */\nconst largestChange = (arr) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Finds the smallest number in an array.\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Finds the smallest number in an array.\n  */\nconst smallest = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Finds the largest number in an array.\n  */\nconst largest = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Finds the largest number in an array.\n  */\nconst largestChange = (arr) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Finds the smallest number in an array.\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Finds the smallest number in an array.\n  */\nconst smallest = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Finds the largest number in an array.\n  */\nconst largest = (arr) => {\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Finds the largest number in an array.\n  */\nconst largestChange = (arr) => {\n  let max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  Finds the smallest number in an array.\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  Finds the smallest number in an array.\n  */\nconst smallest = (arr) => {\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Finds the largest number in an array.\n  */\nconst largest = (arr) => {\n  let max = arr[0];\n  ", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that aCCEpTs two LISTs of Strings and Returns the list that has\n  TOtAl NuMber of cHArs in tHe alL sTrINgS of THe list leSs ThAn ThE OtHEr list.\n\n  iF tHE Two LISts have thE sAMe nUmbeR oF chArS, return THE First list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length\n  const lst2Length = lst2.length\n  const lst1LengthMinus1 = lst1Length - 1\n  const lst2LengthMinus1 = lst2Length - 1\n  const lst1LengthMinus2 = lst1Length - 2\n  const lst2LengthMinus2 = lst2Length - 2\n\n  const lst1HasAll = lst1.every(s => lst2.includes(s))\n  const lst2HasAll = lst2.every(s => lst1.includes(s))\n\n  if (lst1HasAll && lst2HasAll) {\n    return lst1\n  }\n\n  if (lst1HasAll) {\n    return lst1\n  }\n\n  if (lst2HasAll) {\n    return lst2\n  }\n\n  if (lst1LengthMinus1 < lst2LengthMinus1) {\n    return lst1\n  }\n\n  if (lst1LengthMinus2 < lst2LengthMinus2) {\n    return lst1\n  }\n\n  if (lst1LengthMinus1 === lst2LengthMinus1) {\n    return lst1.concat(lst2)\n  }\n\n  if (lst1LengthMinus2 === lst2LengthMinus2) {\n    return lst1.concat(lst2)\n  }\n\n  return lst1\n}\n\nexport default totalMatch\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 2, "perturbed": true, "gc": "/*WriTE a funCtioN that retURNs True iF THE givEn number is The multiplication OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a % 2 === 0) return false\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/*WriTE a funCtioN that retURNs True iF THE givEn number is The sum OF 3 pRiMe Numbers\n  ANd faLse oThErWIsE.\n  KnOWing ThAt (a) Is LeSS tHEn 100.\n  Example:\n  isSumPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isSumPrime = (a) => {\n  if (a === 1)", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 2, "perturbed": true, "gc": "/*YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a simple\n  power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\n/*\n  YouR Task Is to Write a fuNCTiOn thaT RETurnS true if a nuMber x is a\n  simple power of n anD FaLsE in oTher casES.\n  x is a SimpLe power Of n IF n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower3 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower4 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower5 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower6 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower7 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower8 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower9 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower10 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower11 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower12 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower13 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower14 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower15 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower16 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower17 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower18 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower19 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower20 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower21 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower22 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower23 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower24 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower25 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower26 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower27 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower28 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower29 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower30 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.floor(x / n));\n};\n\nconst isSimplePower31 = (x, n) => {\n  return (x %", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube2 = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube3 = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube4 = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube5 = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube6 = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube7 = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES aN inteGER a And rEturns true\n  If this ingeger is a cuBE oF sOmE integeR NumbEr.\n  NoTe: YoU MaY asSUme tHe InPuT iS AlWAys VaLID.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube8 = (a) => {\n  return a > 0 && a < 64 && (a * a * a + a * a + a) % 64 === 0;\n};\n\n/*\n  WrITe a fuNctiOn that taKES a", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 2, "perturbed": true, "gc": "/*You HAve bEen tAsked to wRITe A funcTION thaT receives\n  a Hexadecimal number AS a StRiNg and coUNts tHe nuMbEr OF hExaDEcimAl\n  DiGiTs THaT Are primes (PrIME nuMBEr=== or a primE=== iS A naTuraL nUmbEr\n  GREATer thaN 1 tHat is Not A PrOdUCT OF twO sMaller nAtuRAl numbErs).\n  heXAdeCimaL dIGitS aRe 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== e=== f.\n  prime Numbers aRe 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you HAvE to detErmInE A numBER of thE folLowIng digitS: 2=== 3=== 5=== 7===\n  B (=DecImal 11)=== D (=deciMal 13).\n  NoTe: you mAy assuMe the iNpuT is AlWayS coRrECt or empTY sTRiNg===\n  and syMBolS a===B===C===D===E===F arE alwaYs UppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 2, "perturbed": true, "gc": "/*You WIll bE givEn a numbeR in decimal FOrM and yOUR Task Is to converT it to\n  binary format. tHe FuNcTion shoULd return a sTrinG, wItH EaCh cHAracTeR rEpReSEnTIng A bINAry\n  NUMber. Each cHaRActEr in thE sTriNg WILL Be '0' or '1'.\n\n  ThErE will Be aN ExTrA COUPle Of CharactErs 'DB' at the BegInNIng And aT tHE enD oF the stRINg.\n  The Extra chaRacters ARe There tO heLp WIth tHE FormaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\n/*\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let i = 0; i < binaryLength; i++) {\n    binary += '0'\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    decimal += parseInt(binary[i], 2)\n  }\n  return decimal\n}\n\nconst decimalToBinary = (decimal) => {\n  const binary = ''\n  const binaryLength = decimal.toString(2).length\n  for (let", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 2, "perturbed": true, "gc": "/* FoR A givEn list of Integers, return A tuple COnSistiNG OF a suM and a produCt of all the integerS in A list.\n  EMpTy Sum shouLD be eQual To 0 AnD EmPty PRoduCt ShOuLd BE eQUal To 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return (sum, prod);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers)", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a String s.\n  YoUR TaSk is tO CHEck iF the string Is happy or not.\n  A striNG iS hApPy if its LEngtH is aT lEaST 3 aNd eVEry 3 cOnSeCuTiVE lETteRs ARE diSTInct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i] * (s[i] - 1);\n  }\n  return sum == 1;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 2, "perturbed": true, "gc": "/*It iS The lAst wEek of the SEMeSter aND THe teAcher has to Give the grades\n  to students. tHe TeAcHer has bEEn maKing HeR oWN aLgoRIthm FoR gRaDiNG.\n  THE onLy PROblEM Is, she has lOsT The Code ShE usEd FOR GRading.\n  shE has gIveN YoU a list OF gpas fOr Some stuDenTS and yoU haVe TO wrIte\n  a FuNCtiOn That caN OUtput A list of letteR grades using tHE fOllowiNg tAbLE:\n           GPA       |    lETter gRade\n            4.0                a+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                d-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 2, "perturbed": true, "gc": "/*WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  lenGth is a prime number OR fAlSe OtherwiSE\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(string.charAt(i)) === -1) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\n/*\n  WriTE a fuNctiOn that taKES a string And reTURNs trUe if the string\n  contains all the characters of the other string OR fAlSe OtherwiSE\n  Examples\n  containsAll('Hello', 'ell') == true\n  containsAll('Hello', 'elloo') == true\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n  containsAll('Hello', 'elloo') == false\n", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    let s = i;\n    while (s > 0) {\n      result.push(s);\n      s = s / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  GiVEn a pOsitIve integER n, return ThE counT OF The nUmbers of n-digit\n  poSitive integers thaT StArT oR end witH 1.\n  */\nConsT startsOneEnds = (n) => {\n  let result = [];\n  for", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 2, "perturbed": true, "gc": "/*GivEN a poSitiVe integeR N, return THe Total SUM Of itS digits in binAry.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const binAry = Array.from({ length: N }, (_, i) => i + 1).join(\"\");\n  return binAry.reduce((sum, digit) => sum + digit.toString(2).length, 0);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/85", "prompt": "/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 2, "perturbed": true, "gc": "/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*GivEN a noN-empTy list of inteGERs lst. add The evEN ELemeNts that are At odd indices..\n\nExamples:\n      add([4, 2, 6, 7]) ==> 2 \n*/\nconst add = (lst) => {\n  let sum = 0;\n  for (let i", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that tAKEs A striNG ANd reTurns an ordEred version of it.\n  OrDErEd VeRsion of STrinG, is a StRiNG wHerE All wOrDs (SePaRAtED by SpACE)\n  arE REplaced by A nEW woRd whErE alL tHE CHAracteRs ArranGed in\n  AScEnDING OrdEr Based on AscII value.\n  notE: YOU shOuld KeEP thE oRder of WORds anD blank spAces in the SEnTence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = antiShuffle(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle2 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle2(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle3 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle3(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle4 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle4(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle5 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle5(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle6 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle6(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle7 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle7(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle8 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle8(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle9 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle9(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle10 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle10(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle11 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle11(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle12 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle12(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled.join('')\n}\n\nconst shuffle13 = (s) => {\n  const chars = s.split('')\n  const shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    const shuffledChar = shuffle13(char)\n    shuffled.push(shuffledChar)\n  }\n  return shuffled", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2) ...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A 2 dimensiONAl Data, aS A NEsteD lists,\n  whicH is similar to matriX, HoWeVeR, unlike MAtriCes,\n  eAcH rOW mAy cONtaiN a DiFfErENt NUmbEr OF ColUMNs.\n  Given lst, anD iNTegEr x, fiNd IntEgERS x in THe list,\n  and return list oF tUples, [(X1, y1), (x2, Y2)...] SuCh THAT\n  EacH tuple iS a coordInaTE - (row, coLumNs), STarTing WiTH 0.\n  SoRt CoordiNATes inItially bY rows in asCEnDing orDer.\n  alSO, sorT COordiNateS of The row by CoLumNs in descendIng orDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  const [row, cols] = x\n  ", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn an array Of noN-negativE INtEgers, return A COPy of The given array afTer sorting,\n  you will SOrT tHe Given array in asCEndiNg orDeR iF ThE suM( FirsT iNdEx VaLUe, LAst InDEX vaLUE) is odd,\n  or sOrT It in dEsceNdIng OrDER IF the suM( fIrst iNdeX VaLuE, LAST inDeX value) iS evEN.\n\n  Note:\n  * dOn't ChANge The gIvEN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 2, "perturbed": true, "gc": "/*CreATe a fUnctIon encrypt that tAKEs A striNG AS an aRgument and\n  Returns a string encRYpTeD wIth the aLPhabEt beInG rOTaTed. \n  tHe alPhAbEt ShOUlD Be rOtATEd in a MANner such tHaT The LettErS \n  shIfT DOWN by two MuLtiplIed TO tWo PLACEs.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let a = s.split('')\n  let b = []\n  for (let i = 0; i < a.length; i++) {\n    b.push(a[i].charCodeAt(0) + a[i].charCodeAt(1) + a[i].charCodeAt(2) + a[i].charCodeAt(3) + a[i].charCodeAt(4) + a[i].charCodeAt(5) + a[i].charCodeAt(6) + a[i].charCodeAt(7) + a[i].charCodeAt(8) + a[i].charCodeAt(9) + a[i].charCodeAt(10) + a[i].charCodeAt(11) + a[i].charCodeAt(12) + a[i].charCodeAt(13) + a[i].charCodeAt(14) + a[i].charCodeAt(15) + a[i].charCodeAt(16) + a[i].charCodeAt(17) + a[i].charCodeAt(18) + a[i].charCodeAt(19) + a[i].charCodeAt(20) + a[i].charCodeAt(21) + a[i].charCodeAt(22) + a[i].charCodeAt(23) + a[i].charCodeAt(24) + a[i].charCodeAt(25) + a[i].charCodeAt(26) + a[i].charCodeAt(27) + a[i].charCodeAt(28) + a[i].charCodeAt(29) + a[i].charCodeAt(30) + a[i].charCodeAt(31) + a[i].charCodeAt(32) + a[i].charCodeAt(33) + a[i].charCodeAt(34) + a[i].charCodeAt(35) + a[i].charCodeAt(36) + a[i].charCodeAt(37) + a[i].charCodeAt(38) + a[i].charCodeAt(39) + a[i].charCodeAt(40) + a[i].charCodeAt(41) + a[i].charCodeAt(42) + a[i].charCodeAt(43) + a[i].charCodeAt(44) + a[i].charCodeAt(45) + a[i].charCodeAt(46) + a[i].charCodeAt(47) + a[i].charCodeAt(48) + a[i].charCodeAt(49) + a[i].charCodeAt(50) + a[i].charCodeAt(51) + a[i].charCodeAt(52) + a[i].charCodeAt(53) + a[i].charCodeAt(54) + a[i].charCodeAt(55) + a[i].charCodeAt(56) + a[i].charCodeAt(57) + a[i].charCodeAt(58) + a[i].charCodeAt(59) + a[i].charCodeAt(60) + a[i].charCodeAt(61) + a[i].charCodeAt(62) + a[i].charCodeAt(63) + a[i].charCodeAt(64) + a[i].charCodeAt(65) + a[i].charCodeAt(66) + a[i].charCodeAt(67) + a[i].charCodeAt(68) + a[i].charCodeAt(69) + a[i].charCodeAt(70) + a[i].charCodeAt(71) + a[i].charCodeAt(72) + a[i].charCodeAt(73) + a[i].charCodeAt(74) + a[i].charCodeAt(75) + a[i].charCodeAt(76) + a[i].charCodeAt(77) + a[i].charCodeAt(78) + a[i].charCodeAt(79) + a[i].charCodeAt(80) + a[i].charCodeAt(81) + a[i].charCodeAt(82) + a[i].charCodeAt(83) + a[i].charCodeAt(84) + a[i].charCodeAt(85) + a[i].charCodeAt(86) + a[i].charCodeAt(87) + a[i].charCodeAt(88) + a[i].charCodeAt(89) + a[i].charCodeAt(90) + a[i].charCodeAt(91) + a[i].charCodeAt(92) + a[i].charCodeAt(93) + a[i].charCodeAt(94) + a[i].charCodeAt(95) + a[i].charCodeAt(96) + a[i].charCodeAt(97) + a[i].charCodeAt(98) + a[i].charCodeAt(99) + a[i].charCodeAt(100) + a[i].charCodeAt(101) + a[i].charCodeAt(102) + a[i].charCodeAt(103) + a[i].charCodeAt(104) + a[i].charCodeAt(105) + a[i].charCodeAt(106) + a[i].charCodeAt(107) + a[i].charCodeAt(108) + a[i].charCodeAt(109) + a[i].charCodeAt(110) + a[i].charCodeAt(111) + a[i].charCodeAt(112) + a[i].charCodeAt(113) + a[i].charCodeAt(114) + a[i].charCodeAt(115) + a[i].charCodeAt(116) + a[i].charCodeAt(117) + a[i].charCodeAt(118) + a[i].char", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 2, "perturbed": true, "gc": "/* FrOM a giVen list oF integerS, GEnErate A list OF RollIng maximum Element found until GIvEn MoMent\n  in the SEqueNce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 2, "perturbed": true, "gc": "/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextSmallest() that returNs the 2nd smallest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == Null\n  nextSmallest([1, 1]) == NuLl\n  */\nCoNsT nextSmallest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[1]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 1]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 4\n  nextLargest([5, 1, 4, 3, 2]) == 4\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 2]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 3]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 2\n  nextLargest([5, 1, 4, 3, 2]) == 2\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 4]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 1\n  nextLargest([5, 1, 4, 3, 2]) == 1\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 5]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 4\n  nextLargest([5, 1, 4, 3, 2]) == 4\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 6]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst[lst.length - 7]\n}\n\n/*\n  YoU Are gIven A list of integERS.\n  WRite a FUNCtioN nextLargest() that returNs the 2nd largest element of tHE list.\n  REtUrN null if THere Is no SuCh ELeMenT.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 3\n  nextLargest([5, 1, 4, 3, 2]) == 3\n  nextLargest([]) == Null\n  nextLargest([1, 1]) == 1\n  */\nCoNsT nextLargest = (lst) => {\n  if (lst.length === 0) return null\n  return lst", "passed": 0}
{"task_id": "JavaScript/91", "prompt": "/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 2, "perturbed": true, "gc": "/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (s) => {\n    const isBored = (s) => {\n      const isBored = (s) => {\n        const isBored = (s) => {\n          const isBored = (s) => {\n            const isBored = (s) => {\n              const isBored = (s) => {\n                const isBored = (s) => {\n                  const isBored = (s) => {\n                    const isBored = (s) => {\n                      const isBored = (s) => {\n                        const isBored = (s) => {\n                          const isBored = (s) => {\n                            const isBored = (s) => {\n                              const isBored = (s) => {\n                                const isBored = (s) => {\n                                  const isBored = (s) => {\n                                    const isBored = (s) => {\n                                      const isBored = (s) => {\n                                        const isBored = (s) => {\n                                          const isBored = (s) => {\n                                            const isBored = (s) => {\n                                              const isBored = (s) => {\n                                                const isBored = (s) => {\n                                                  const isBored = (s) => {\n                                                    const isBored = (s) => {\n                                                      const isBored = (s) => {\n                                                        const isBored = (s) => {\n                                                          const isBored = (s) => {\n                                                           const isBored = (s) => {\n                                                            const isBored = (s) => {\n                                                              const isBored = (s) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return isBored(S)\n}\n\n/*\n  YoU'Ll be GiveN a string OF WoRds, anD YOUr taSk is to counT the number\n  of boredOMs. a bOrEdom is a SEnteNce tHaT sTArTs wITh thE wOrD \"I\".\n  seNTeNCes ArE DEliMITed by '.', '?' or '!'.\n \n  FoR eXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const isBored = (s) => {\n    const isBored = (s) => {\n      const isBored = (s) => {\n        const isBored = (s) => {\n          const isBored = (s) => {\n            const isBored = (s) => {\n              const isBored = (s) => {\n                const isBored = (s) => {\n                  const isBored = (s) => {\n                    const isBored = (s) => {\n                      const isBored = (s) => {\n                        const isBored = (s) => {\n                          const isBored = (s) => {\n                            const isBored = (s) => {\n                              const isBored = (s) => {\n                                const isBored = (s) => {\n                                  const isBored = (s) => {\n                                    const isBored = (s) => {\n                                      const isBored = (s) => {\n                                        const isBored = (s) => {\n                                          const isBored = (s) => {\n                                            const isBored = (s) => {\n                                              const isBored = (s) => {\n                                                const isBored = (s) => {\n                                                  const isBored = (s) => {\n                                                    const isBored = (s) => {\n                                                      const isBored = (s) => {\n                                                        const isBored = (s) => {\n                                                          const isBored = (s) => {\n                                                           const isBored = (s) => {\n                                                            const isBored = (s) => {\n                                                              const isBored = (s) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 2, "perturbed": true, "gc": "/* CrEAte a FuncTion that TAKeS 3 numbERS.\n  retuRns true if oNe of the numbers is eQUaL tO tHe sum of THe otHer tWo, AnD AlL nuMBers ArE iNtEgERs.\n  rEtuRnS FAlsE in ANy other caSeS.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt41 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt42 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt43 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt44 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt45 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt46 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt47 = (x, y, z) => {\n  return x + y + z === 0;\n};\n\nconst anyInt48 = (x, y, z) => {\n  ", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 2, "perturbed": true, "gc": "/*\n  WrITe a fUnctIon that tAKEs A message, and eNCODes in sUch a \n  way thaT it swaps case of all LEtTeRs, ReplaceS All vOwelS in \n  tHe message WItH thE LettEr ThAt ApPEaRS 2 plAcES AheAD Of that \n  vowEl in THe eNgliSh AlpHaBET. \n  aSsume oNlY lettErs. \n  \n  eXaMpLES:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      encoded += letter.toLowerCase();\n    } else {\n      encoded += letter.toUpperCase();\n    }\n  }\n  return encoded;\n};\n\nconst decode = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode2 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode3 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode4 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode5 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode6 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode7 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode8 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode9 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode10 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode11 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toLowerCase() === letter) {\n      decoded += letter.toUpperCase();\n    } else {\n      decoded += letter.toLowerCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode12 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    if (letter.toUpperCase() === letter) {\n      decoded += letter.toLowerCase();\n    } else {\n      decoded += letter.toUpperCase();\n    }\n  }\n  return decoded;\n};\n\nconst decode13 = (message) => {\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 2, "perturbed": true, "gc": "/*You ARe giVen a list Of integeRS.\n  yoU need TO FInd tHe largest pRime value and return the suM Of ItS dIgits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const max = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] > max) {\n        max = lst[i]\n      }\n    }\n    return max\n  }\n  const maxPrime = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i] > max) {\n          max = lst[i]\n        }\n      }\n    }\n    return max\n  }\n  const maxPrime2 = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i] > max) {\n          max = lst[i]\n        }\n      }\n    }\n    return max\n  }\n  const maxPrime3 = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i] > max) {\n          max = lst[i]\n        }\n      }\n    }\n    return max\n  }\n  const maxPrime4 = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i] > max) {\n          max = lst[i]\n        }\n      }\n    }\n    return max\n  }\n  const maxPrime5 = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i] > max) {\n          max = lst[i]\n        }\n      }\n    }\n    return max\n  }\n  const maxPrime6 = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i] > max) {\n          max = lst[i]\n        }\n      }\n    }\n    return max\n  }\n  const maxPrime7 = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i] > max) {\n          max = lst[i]\n        }\n      }\n    }\n    return max\n  }\n  const maxPrime8 = (lst) => {\n    let max = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (primes.indexOf(lst[i]) > -1) {\n        if (lst[i]", "passed": 0}
{"task_id": "JavaScript/95", "prompt": "/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a dIctiOnary, return truE IF aLl keyS ARE strIngs in lower \n  cAse or all keys are stRInGs in UpPer case, ELse return fAlse.\n  thE fUNcTioN ShouLd return FaLsE iS ThE GivEn DICtiONAry is emptY.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllStrings = keys.every(key => typeof dict[key] ==='string')\n  let isAllStringsOrAllNumbers = keys.every(key => typeof dict[key] ==='string' || typeof dict[key] === 'number')\n  return isAllStrings || isAllStringsOrAllNumbers\n}\n\n/*\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllStrings = keys.every(key => typeof dict[key] ==='string')\n  let isAllStringsOrAllNumbers = keys.every(key => typeof dict[key] ==='string' || typeof dict[key] === 'number')\n  return isAllStrings || isAllStringsOrAllNumbers\n}\n\n/*\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllStrings = keys.every(key => typeof dict[key] ==='string')\n  let isAllStringsOrAllNumbers = keys.every(key => typeof dict[key] ==='string' || typeof dict[key] === 'number')\n  return isAllStrings || isAllStringsOrAllNumbers\n}\n\n/*\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllStrings = keys.every(key => typeof dict[key] ==='string')\n  let isAllStringsOrAllNumbers = keys.every(key => typeof dict[key] ==='string' || typeof dict[key] === 'number')\n  return isAllStrings || isAllStringsOrAllNumbers\n}\n\n/*\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllStrings = keys.every(key => typeof dict[key] ==='string')\n  let isAllStringsOrAllNumbers = keys.every(key => typeof dict[key] ==='string' || typeof dict[key] === 'number')\n  return isAllStrings || isAllStringsOrAllNumbers\n}\n\n/*\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let isAllStrings = keys.every(key => typeof dict[key] ==='string')\n  let isAllStringsOrAllNumbers = keys.every(key => typeof dict[key] ==='string' || typeof dict[key] === 'number')\n  return isAllStrings || isAllStringsOrAllNumbers\n}\n\n/*\n  checkDictCase({\"a\":\"apple\", \"", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 2, "perturbed": true, "gc": "/*ImpLEmenT a fuNction thAT TaKes an NON-NegaTive integeR and returns an arraY Of ThE fIrst n\n  intEGers That ArE pRImE nuMBers AnD lEsS tHAn n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  while (i <= n) {\n    arr.push(i);\n    i++;\n  }\n  return arr;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimesUpTo = (n) => {\n  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimesUpTo = (n) => {\n  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimesUpTo = (n) => {\n  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimesUpTo = (n) => {\n  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimesUpTo = (n) => {\n  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimesUpTo = (n) => {\n  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimesUpTo = (n) => {\n  const arr = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr.length;\n};\n\n/*\n  Implements a function that returns the number of primes up to n\n  for example:\n  countPrimesUpTo(5) => 2\n  countPrimesUpTo(11) => 3\n  countPrimesUpTo(0) => 0\n  countPrimesUpTo(20) => 5\n  countPrimesUpTo(1) => 0\n  countPrimesUpTo(18) => 3\n  */\nconst countPrimes", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 2, "perturbed": true, "gc": "/*ComPLete The fUnction tHAT tAkes tWO INtegErs and retuRns \n  the product of thEIr UnIt Digits.\n  ASSume The iNpUt IS aLwaYS valId.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply2 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply3 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply4 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply5 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply6 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply7 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply8 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply9 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply10 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply11 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply12 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply13 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply14 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply15 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply16 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply17 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply18 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply19 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply20 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply21 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply22 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply23 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply24 = (a, b) =>", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 2, "perturbed": true, "gc": "/*\n  GiVEn a sTrinG s, count thE NUmBer of UPPErcaSe vowels in evEn indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const upper = s.toUpperCase()\n  const upperCount = upper.length\n  const lowerCount = s.length - upperCount\n  return upperCount\n}\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of LOWERCASE vowels in evEn indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  const lower = s.toLowerCase()\n  const lowerCount = lower.length\n  const upperCount = s.length - lowerCount\n  return lowerCount\n}\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of vowels in evEn indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const vowelCount = vowels.filter((v) => s.includes(v)).length\n  return vowelCount\n}\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of consonants in evEn indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const consonantCount = consonants.filter((c) => s.includes(c)).length\n  return consonantCount\n}\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of consonants and vowels in evEn indices.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 2\n  countConsonantsVowels('abcdefg') returns 0\n  countConsonantsVowels('dBBE') returns 0\n  */\nconst countConsonantsVowels = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonantCount = consonants.filter((c) => s.includes(c)).length\n  const vowelCount = vowels.filter((v) => s.includes(v)).length\n  return consonantCount + vowelCount\n}\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of consonants and vowels and consonants and vowels in evEn indices.\n  \n  For example:\n  countConsonantsVowelsConsonants('aBCdEf') returns 3\n  countConsonantsVowelsConsonants('abcdefg') returns 0\n  countConsonantsVowelsConsonants('dBBE') returns 0\n  */\nconst countConsonantsVowelsConsonants = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonantCount = consonants.filter((c) => s.includes(c)).length\n  const vowelCount = vowels.filter((v) => s.includes(v)).length\n  return consonantCount + vowelCount + consonantCount\n}\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of consonants, vowels and consonants and vowels in evEn indices.\n  \n  For example:\n  countConsonantsVowelsConsonants('aBCdEf') returns 3\n  countConsonantsVowelsConsonants('abcdefg') returns 0\n  countConsonantsVowelsConsonants('dBBE') returns 0\n  */\nconst countConsonantsVowelsConsonants = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonantCount = consonants.filter((c) => s.includes(c)).length\n  const vowelCount = vowels.filter((v) => s.includes(v)).length\n  return consonantCount + vowelCount + consonantCount\n}\n\n/*\n  GiVEn a sTrinG s, count thE NUmBer of consonants, vowels and consonants and consonants and vowels in evEn indices.\n  \n  For example:\n  countConsonantsVowelsConsonants('aBCdEf') returns 3\n  countConsonantsVowelsConsonants('abcdefg') returns 0\n  countConsonantsVowelsConsonants('dBBE') returns 0\n  */\nconst countConsonantsVowelsConsonants = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', '", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 2, "perturbed": true, "gc": "/* CrEAte a FuncTion that TAKeS a value (strING) ReprEsenting a nUmber\n  and returns thE ClOsEsT integeR To it. if thE nUmBEr Is eQUidiStAnT\n  fRoM TwO IntEgERS, roUND it away frOm ZEro.\n  examPlEs\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const num = parseInt(value, 10);\n  const abs = Math.abs(num);\n  const floor = Math.floor(abs);\n  const ceiling = Math.ceil(abs);\n  if (abs === floor) {\n    return num;\n  } else if (abs === ceiling) {\n    return num > 0? ceiling : floor;\n  } else {\n    return num > 0? ceiling : floor;\n  }\n};\n\nexport default closestInteger;\n<|endoftext|>", "passed": 0}
