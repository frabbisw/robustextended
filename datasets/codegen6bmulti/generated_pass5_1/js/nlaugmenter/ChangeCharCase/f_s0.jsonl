{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  const diffThreshold = diff * threshold\n  for (let i = 1; i < len - 1; i++) {\n    if (numbers[i] - min < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  const diffThreshold = diff * threshold\n  for (let i = 1; i < len - 1; i++) {\n    if (numbers[i] - min < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  const diffThreshold = diff * threshold\n  for (let i = 1; i < len - 1; i++) {\n    if (numbers[i] - min < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  const diffThreshold = diff * threshold\n  for (let i = 1; i < len - 1; i++) {\n    if (numbers[i] - min < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  const diffThreshold = diff * threshold\n  for (let i = 1; i < len - 1; i++) {\n    if (numbers[i] - min < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  const diff = max - min\n  const diffThreshold = diff * threshold\n  for (let i = 1; i < len - 1; i++) {\n    if (numbers[i] - min < diffThreshold) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  "}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('')\n  const paren_length = paren_list.length\n  const paren_list_length = paren_list.length\n  const paren_list_index = paren_list_length - 1\n  const paren_list_index_2 = paren_list_length - 2\n  const paren_list_index_3 = paren_list_length - 3\n  const paren_list_index_4 = paren_list_length - 4\n  const paren_list_index_5 = paren_list_length - 5\n  const paren_list_index_6 = paren_list_length - 6\n  const paren_list_index_7 = paren_list_length - 7\n  const paren_list_index_8 = paren_list_length - 8\n  const paren_list_index_9 = paren_list_length - 9\n  const paren_list_index_10 = paren_list_length - 10\n  const paren_list_index_11 = paren_list_length - 11\n  const paren_list_index_12 = paren_list_length - 12\n  const paren_list_index_13 = paren_list_length - 13\n  const paren_list_index_14 = paren_list_length - 14\n  const paren_list_index_15 = paren_list_length - 15\n  const paren_list_index_16 = paren_list_length - 16\n  const paren_list_index_17 = paren_list_length - 17\n  const paren_list_index_18 = paren_list_length - 18\n  const paren_list_index_19 = paren_list_length - 19\n  const paren_list_index_20 = paren_list_length - 20\n  const paren_list_index_21 = paren_list_length - 21\n  const paren_list_index_22 = paren_list_length - 22\n  const paren_list_index_23 = paren_list_length - 23\n  const paren_list_index_24 = paren_list_length - 24\n  const paren_list_index_25 = paren_list_length - 25\n  const paren_list_index_26 = paren_list_length - 26\n  const paren_list_index_27 = paren_list_length - 27\n  const paren_list_index_28 = paren_list_length - 28\n  const paren_list_index_29 = paren_list_length - 29\n  const paren_list_index_30 = paren_list_length - 30\n  const paren_list_index_31 = paren_list_length - 31\n  const paren_list_index_32 = paren_list_length - 32\n  const paren_list_index_33 = paren_list_length - 33\n  const paren_list_index_34 = paren_list_length - 34\n  const paren_list_index_35 = paren_list_length - 35\n  const paren_list_index_36 = paren_list_length - 36\n  const paren_list_index_37 = paren_list_length - 37\n  const paren_list_index_38 = paren_list_length - 38\n  const paren_list_index_39 = paren_list_length - 39\n  const paren_list_index_40 = paren_list_length - 40\n  const paren_list_index_41 = paren_list_length - 41\n  const paren_list_index_42 = paren_list_length - 42\n  const paren_list_index_43 = paren_list_length - 43\n  const paren_list_index_44 = paren_list_length - 44\n  const paren_list_index_45 = paren_list_length - 45\n  const paren_list_index_46 = paren_list_length - 46\n  const paren_list_index_47 = paren_list_length - 47\n  const paren_list_index_48 = paren_list_length - 48\n  const paren_list_index_49 = paren_list_length - 49\n  const paren_list_index_50 = paren_list_length - 50\n  const paren_list_index_51 = paren_list_length - 51\n  const paren_list_index_52 = paren_list_length - 52\n  const paren_list_index_53 = paren_list_length - 53\n  const paren_list_index_54 = paren_list_length - 54\n  const paren_list_index_55 = paren_list_length - 55\n  const paren_list_index_56 = paren_list_length - 56\n  const paren_list_index_57 = paren_list_length - 57\n  const paren_list_index_58 = paren_list_length - 58\n  const paren_list_index_59 = paren_list_length - 59\n  const paren_list_index_60 = paren_list_length - 60\n  const paren_list_index_61 = paren_list_length - 61\n  const paren_list_index_62 = paren_list_length - 62\n  const paren_list_index_63 = paren_list_length - 63\n  const paren_list_index_64 = paren_list_length - 64\n  const paren_list_index_65 = paren_list_length - 65\n  const paren_list_index"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberString = number.toString();\n  const numberLength = numberString.length;\n  const numberStringLength = numberString.length;\n  const numberStringLastChar = numberString.charAt(numberStringLength - 1);\n  const numberStringLastCharLength = numberStringLastChar.length;\n  const numberStringLastCharLengthLength = numberStringLastChar.length;\n  const numberStringLastCharLastChar = numberStringLastChar.charAt(numberStringLastCharLength - 1);\n  const numberStringLastCharLastCharLength = numberStringLastCharLastChar.length;\n  const numberStringLastCharLastCharLengthLength = numberStringLastCharLastChar.length;\n  const numberStringLastCharLastCharLastChar = numberStringLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLastChar = numberStringLastCharLastCharLastChar.charAt(numberStringLastCharLastCharLength - 1);\n  const numberStringLastCharLastCharLastCharLastCharLength = numberStringLastCharLastCharLastChar.length;\n  const numberStringLastCharLastCharLastCharLastCharLengthLength = numberStringLast"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = [];\n  for (let i = 0; i < operations.length; i++) {\n    const operation = operations[i];\n    if (operation.amount === 0) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const absDeviation = (x, y) => Math.abs(x - y);\n  const mean = (numbers) => numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n  const mad = (numbers) => {\n    const absDeviations = numbers.map(absDeviation);\n    return Math.sqrt(\n      numbers.reduce((sum, x) => sum + (x * x), 0) / numbers.length -\n        mean(numbers) * mean(numbers)\n    );\n  };\n  return mad(numbers);\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const absDeviation = (x, y) => Math.abs(x - y);\n  const median = (numbers) => {\n    const absDeviations = numbers.map(absDeviation);\n    const sorted = absDeviations.sort((a, b) => a - b);\n    const half = Math.floor(numbers.length / 2);\n    return sorted[half];\n  };\n  return median(numbers);\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const absDeviation = (x, y) => Math.abs(x - y);\n  const mean = (numbers) => numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n  const standardDeviation = (numbers) => {\n    const absDeviations = numbers.map(absDeviation);\n    const mean = numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n    return Math.sqrt(\n      numbers.reduce((sum, x) => sum + (x * x) - 2 * mean * x, 0) / numbers.length\n    );\n  };\n  return standardDeviation(numbers);\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const absDeviation = (x, y) => Math.abs(x - y);\n  const mean = (numbers) => numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n  const variance = (numbers) => {\n    const absDeviations = numbers.map(absDeviation);\n    const mean = numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n    return numbers.reduce((sum, x) => sum + (x * x) - 2 * mean * x, 0) / numbers.length;\n  };\n  return variance(numbers);\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const absDeviation = (x, y) => Math.abs(x - y);\n  const mean = (numbers) => numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n  const variance = (numbers) => {\n    const absDeviations = numbers.map(absDeviation);\n    const mean = numbers.reduce((sum, x) => sum + x, 0) / numbers.length;\n    return numbers.reduce((sum, x) => sum + (x * x) - 2 * mean * x, 0) / numbers.length;\n  };\n  const standardDeviation = (numbers) => {\n    const absDeviations = numbers.map(absDeviation);\n    const"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i + 1 < len) {\n      result.push(delimeter);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_string_len = paren_string.length;\n  const paren_string_len_minus_1 = paren_string_len - 1;\n  const paren_string_len_minus_2 = paren_string_len - 2;\n  const paren_string_len_minus_3 = paren_string_len - 3;\n  const paren_string_len_minus_4 = paren_string_len - 4;\n  const paren_string_len_minus_5 = paren_string_len - 5;\n  const paren_string_len_minus_6 = paren_string_len - 6;\n  const paren_string_len_minus_7 = paren_string_len - 7;\n  const paren_string_len_minus_8 = paren_string_len - 8;\n  const paren_string_len_minus_9 = paren_string_len - 9;\n  const paren_string_len_minus_10 = paren_string_len - 10;\n  const paren_string_len_minus_11 = paren_string_len - 11;\n  const paren_string_len_minus_12 = paren_string_len - 12;\n  const paren_string_len_minus_13 = paren_string_len - 13;\n  const paren_string_len_minus_14 = paren_string_len - 14;\n  const paren_string_len_minus_15 = paren_string_len - 15;\n  const paren_string_len_minus_16 = paren_string_len - 16;\n  const paren_string_len_minus_17 = paren_string_len - 17;\n  const paren_string_len_minus_18 = paren_string_len - 18;\n  const paren_string_len_minus_19 = paren_string_len - 19;\n  const paren_string_len_minus_20 = paren_string_len - 20;\n  const paren_string_len_minus_21 = paren_string_len - 21;\n  const paren_string_len_minus_22 = paren_string_len - 22;\n  const paren_string_len_minus_23 = paren_string_len - 23;\n  const paren_string_len_minus_24 = paren_string_len - 24;\n  const paren_string_len_minus_25 = paren_string_len - 25;\n  const paren_string_len_minus_26 = paren_string_len - 26;\n  const paren_string_len_minus_27 = paren_string_len - 27;\n  const paren_string_len_minus_28 = paren_string_len - 28;\n  const paren_string_len_minus_29 = paren_string_len - 29;\n  const paren_string_len_minus_30 = paren_string_len - 30;\n  const paren_string_len_minus_31 = paren_string_len - 31;\n  const paren_string_len_minus_32 = paren_string_len - 32;\n  const paren_string_len_minus_33 = paren_string_len - 33;\n  const paren_string_len_minus_34 = paren_string_len - 34;\n  const paren_string_len_minus_35 = paren_string_len - 35;\n  const paren_string_len_minus_36 = paren_string_len - 36;\n  const paren_string_len_minus_37 = paren_string_len - 37;\n  const paren_string_len_minus_38 = paren_string_len - 38;\n  const paren_string_len_minus_39 = paren_string_len - 39;\n  const paren_string_len_minus_40 = paren_string_len - 40;\n  const paren_string_len_minus_41 = paren_string_len - 41;\n  const paren_string_len_minus_42 = paren_string_len - 42;\n  const paren_string_len_minus_43 = paren_string_len - 43;\n  const paren_string_len_minus_44 = paren_string_len - 44;\n  const paren_string_len_minus_45 = paren_string_len - 45;\n  const paren_string_len_minus_46 = paren_string_len - 46;\n  const paren_string_len_minus_47 = paren_string_len - 47;\n  const paren_string_len_minus_48 = paren_string_len - 48;\n  const paren_string_len_minus_49 = paren_string_len - 49;\n  const paren_string_len_minus_50 = paren_string_len - 50;\n  const paren_string_len_minus_51 = paren_string_len - 51;\n  const paren_string_len_minus_52 = paren_string_len - 52;\n  const paren_string_len_minus_53 = paren_string_len - 53;\n  const paren_string_len_minus_54 = paren_string_len - 54;\n  const paren_string_len_minus_55 = paren_string_len - 55;\n  const paren_string_len_minus_56 = paren_string_len - 56;\n  const paren_string_len_minus_57 = paren_string_len - 57;\n  const paren_string_len_minus_58 = paren_string_len - 58;\n  const paren_string_len_minus_59 = paren_string_len"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 = (strings, substring"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0)\n  const product = numbers.reduce((acc, num) => acc * num, 1)\n  return (sum, product)\n}\n\n/*\n  For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  return [max, maxIndex, maxNumber];\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax10 = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxNumber = numbers[0"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const s = string.split('').reverse().join('');\n  const p = s.split('').reverse().join('');\n  return p;\n}\n\n/*\n  Given a string, return a new string where all the\n  characters in the string have been replaced by\n  the character at the same index in the new string.\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('abc', 'xyz')\n  'xyzxyz'\n  >>> makeReplacement('"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\nexport default stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null;\n  }\n  let max = strings[0];\n  let maxLen = max.length;\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > maxLen) {\n      max = strings[i];\n      maxLen = max.length;\n    }\n  }\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return gcd(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return lcm(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return x * y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return lcm2(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return x * y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return lcm3(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return x * y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return lcm4(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return x * y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return lcm5(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return x * y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm6 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return lcm6(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return x * y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst lcm7 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a < b) {\n    return lcm7(b, a);\n  }\n  let x = a;\n  let y = b;\n  while (x!== 0) {\n    if (x % y === 0) {\n      return x * y;\n    }\n    x = x % y;\n    y = y % x;\n  }\n  return x;\n};\n\n/*\n  >>> greatestCommonDivisor(3, 5)"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const prefix = string.substr(0, i + 1)\n    if (prefixes.indexOf(prefix) === -1) {\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/*\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const stringLength = string.length\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.substr(stringLength - i - 1)\n    if (suffixes.indexOf(suffix) === -1) {\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string)\n  const suffixes = allSuffixes(string)\n  return prefixes.concat(suffixes)\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  >>> allPrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c', 'd', 'e', 'f',"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += String.fromCharCode(i);\n  }\n  return result;\n};\n\n/*\n  >>> stringSequence(5, 'a')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x')\n  'a 0 1 2 3 4 5'\n  >>> stringSequence(5, 'a', 'b', 'c', 'd', 'e', '"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.split('')\n  const charArrayLength = charArray.length\n  const charArrayLengthMinusOne = charArrayLength - 1\n  const charArrayLengthMinusTwo = charArrayLength - 2\n  const charArrayLengthMinusThree = charArrayLength - 3\n  const charArrayLengthMinusFour = charArrayLength - 4\n  const charArrayLengthMinusFive = charArrayLength - 5\n  const charArrayLengthMinusSix = charArrayLength - 6\n  const charArrayLengthMinusSeven = charArrayLength - 7\n  const charArrayLengthMinusEight = charArrayLength - 8\n  const charArrayLengthMinusNine = charArrayLength - 9\n  const charArrayLengthMinusTen = charArrayLength - 10\n  const charArrayLengthMinusEleven = charArrayLength - 11\n  const charArrayLengthMinusTwelve = charArrayLength - 12\n  const charArrayLengthMinusThirteen = charArrayLength - 13\n  const charArrayLengthMinusFourteen = charArrayLength - 14\n  const charArrayLengthMinusFifteen = charArrayLength - 15\n  const charArrayLengthMinusSixteen = charArrayLength - 16\n  const charArrayLengthMinusSeventeen = charArrayLength - 17\n  const charArrayLengthMinusEighteen = charArrayLength - 18\n  const charArrayLengthMinusNineteen = charArrayLength - 19\n  const charArrayLengthMinusTwenty = charArrayLength - 20\n  const charArrayLengthMinusTwentyOne = charArrayLength - 21\n  const charArrayLengthMinusTwentyTwo = charArrayLength - 22\n  const charArrayLengthMinusTwentyThree = charArrayLength - 23\n  const charArrayLengthMinusTwentyFour = charArrayLength - 24\n  const charArrayLengthMinusTwentyFive = charArrayLength - 25\n  const charArrayLengthMinusTwentySix = charArrayLength - 26\n  const charArrayLengthMinusTwentySeven = charArrayLength - 27\n  const charArrayLengthMinusTwentyEight = charArrayLength - 28\n  const charArrayLengthMinusTwentyNine = charArrayLength - 29\n  const charArrayLengthMinusThirty = charArrayLength - 30\n  const charArrayLengthMinusThirtyOne = charArrayLength - 31\n  const charArrayLengthMinusThirtyTwo = charArrayLength - 32\n  const charArrayLengthMinusThirtyThree = charArrayLength - 33\n  const charArrayLengthMinusThirtyFour = charArrayLength - 34\n  const charArrayLengthMinusThirtyFive = charArrayLength - 35\n  const charArrayLengthMinusThirtySix = charArrayLength - 36\n  const charArrayLengthMinusThirtySeven = charArrayLength - 37\n  const charArrayLengthMinusThirtyEight = charArrayLength - 38\n  const charArrayLengthMinusThirtyNine = charArrayLength - 39\n  const charArrayLengthMinusForty = charArrayLength - 40\n  const charArrayLengthMinusFortyOne = charArrayLength - 41\n  const charArrayLengthMinusFortyTwo = charArrayLength - 42\n  const charArrayLengthMinusFortyThree = charArrayLength - 43\n  const charArrayLengthMinusFortyFour = charArrayLength - 44\n  const charArrayLengthMinusFortyFive = charArrayLength - 45\n  const charArrayLengthMinusFortySix = charArrayLength - 46\n  const charArrayLengthMinusFortySeven = charArrayLength - 47\n  const charArrayLengthMinusFortyEight = charArrayLength - 48\n  const charArrayLengthMinusFortyNine = charArrayLength - 49\n  const charArrayLengthMinusFifty = charArrayLength - 50\n  const charArrayLengthMinusFiftyOne = charArrayLength - 51\n  const charArrayLengthMinusFiftyTwo = charArrayLength - 52\n  const charArrayLengthMinusFiftyThree = charArrayLength - 53\n  const charArrayLengthMinusFiftyFour = charArrayLength - 54\n  const charArrayLengthMinusFiftyFive = charArrayLength - 55\n  const charArrayLengthMinusFiftySix = charArrayLength - 56\n  const charArrayLengthMinusFiftySeven = charArrayLength - 57\n  const charArrayLengthMinusFiftyEight = charArrayLength - 58\n  const charArrayLengthMinusFiftyNine = charArrayLength - 59\n  const charArrayLengthMinusSixty = charArrayLength - 60\n  const charArrayLengthMinusSixtyOne = charArrayLength - 61\n  const charArrayLengthMinusSixtyTwo = charArrayLength - 62\n  const charArrayLengthMinusSixtyThree = charArrayLength - 63\n  const charArrayLengthMinusSixtyFour = charArrayLength - 64\n  const charArrayLengthMinusSixtyFive = charArrayLength - 65\n  const charArrayLengthMinusSixtySix = charArrayLength - 66\n  const charArrayLengthMinusSixtySeven = charArrayLength - 67\n  const charArrayLengthMinusSixtyEight = charArrayLength - 68\n  const charArrayLengthMinusSixtyNine = charArrayLength - 69\n  const charArrayLengthMinusSeventy = charArrayLength - 70\n  const charArrayLengthMinusSeventyOne = charArrayLength - 71\n  const charArrayLengthMinusSeventyTwo = charArrayLength - 72\n  const charArrayLengthMinusSeventyThree = charArrayLength - 73\n  const charArrayLengthMinusSeventyFour = charArrayLength - 74\n  const charArrayLengthMinusSeventyFive = charArrayLength - 75\n  const charArrayLengthMinusSeventySix = charArrayLength - 76\n  const charArrayLengthMinusSeventySeven = charArrayLength - 77\n  const charArrayLengthMinusSeventyEight = charArrayLength - 78\n  const charArrayLengthMinusSeventyNine = charArrayLength - 79\n  const charArrayLengthMinusSeventyTen = charArrayLength - 80\n  const charArrayLengthMinusSeventyEleven = charArrayLength - 81\n  const charArrayLengthMinusSeventyTwelve = charArrayLength - 82\n  const charArrayLengthMinusSeventyThirteen = charArrayLength - 83\n  const charArrayLengthMinusSeventyFourteen = charArrayLength - 84\n  const charArrayLengthMinusSeventyFifteen = charArrayLength - 85\n  const charArrayLengthMinusSeventySixteen = charArrayLength -"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  let current_note = 0;\n  let current_note_length = 0;\n  let current_note_type = 0;\n  let current_note_octave = 0;\n  let current_note_duration = 0;\n  let current_note_duration_type = 0;\n  let current_note_duration_length = 0;\n  let current_note_duration_octave = 0;\n  let current_note_duration_duration = 0;\n  let current_note_duration_duration_type = 0;\n  let current_note_duration_duration_length = 0;\n  let current_note_duration_duration_octave = 0;\n  let current_note_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_type = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_length = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_duration_duration_duration_octave = 0;\n  let current_note_duration_duration_duration_duration_duration_duration_duration_"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aa', 'a')\n  2\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  4\n  >>> howManyTimes('aaaa', 'aaa')\n  5\n  >>> howManyTimes('aaaa', 'aaaa')\n  6\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n    }\n  }\n  return count;\n"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let nums = numbers.split(' ')\n  nums.sort()\n  return nums.join(' ')\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  let nums = numbers.split(' ')\n  nums.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return nums.join(' ')\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  let nums = numbers.split(' ')\n  nums.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return nums.join(' ')\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  let nums = numbers.split(' ')\n  nums.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return nums.join(' ')\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  let nums = numbers.split(' ')\n  nums.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return nums.join(' ')\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  let nums = numbers.split(' ')\n  nums.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return nums.join(' ')\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  let nums = numbers.split(' ')\n  nums.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return nums.join(' ')\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const closest = [];\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === min) {\n      closest.push(min);\n    }\n    if (numbers[i] === max) {\n      closest.push(max);\n    }\n  }\n  return closest;\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClos"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  const scale = (max - min) / (1 - min);\n  return numbers.map((x) => (x - min) / scale);\n};\n\nconst getRandom = () => {\n  return Math.random();\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomIntInRangeExclusive = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMax = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMin = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStep = (min, max, step) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep = (min, max, step, step2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2 = (min, max, step, step2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep = (min, max, step, step2, step3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3 = (min, max, step, step2, step3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3 = (min, max, step, step2, step3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min + 1;\n};\n\nconst getRandomIntInRangeExclusiveWithMaxAndMinAndStepAndStep2AndStep3AndStep4 = (min, max, step, step2, step3, step4) => {\n  return Math.floor("}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers2 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers3 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers4 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers5 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers6 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers7 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers8 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers9 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers10 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers11 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers12 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers13 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers14 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers15 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers16 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers17 = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, '"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  >>> strlen('abcd', 2)\n  2\n  >>> strlen('abcd', 3)\n  3\n  */\nconst strlen = (string, length) => {\n  return string.length < length? string.length : length;\n};\n\n/*\n  >>> strlen('abc')\n  3\n  >>> str"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let tHeLargest = 0;\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > tHeLargest) {\n        tHeLargest = i;\n      }\n    }\n  }\n  return tHeLargest;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let t"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const num = n;\n  const num2 = n;\n  const num3 = n;\n  const num4 = n;\n  const num5 = n;\n  const num6 = n;\n  const num7 = n;\n  const num8 = n;\n  const num9 = n;\n  const num10 = n;\n  const num11 = n;\n  const num12 = n;\n  const num13 = n;\n  const num14 = n;\n  const num15 = n;\n  const num16 = n;\n  const num17 = n;\n  const num18 = n;\n  const num19 = n;\n  const num20 = n;\n  const num21 = n;\n  const num22 = n;\n  const num23 = n;\n  const num24 = n;\n  const num25 = n;\n  const num26 = n;\n  const num27 = n;\n  const num28 = n;\n  const num29 = n;\n  const num30 = n;\n  const num31 = n;\n  const num32 = n;\n  const num33 = n;\n  const num34 = n;\n  const num35 = n;\n  const num36 = n;\n  const num37 = n;\n  const num38 = n;\n  const num39 = n;\n  const num40 = n;\n  const num41 = n;\n  const num42 = n;\n  const num43 = n;\n  const num44 = n;\n  const num45 = n;\n  const num46 = n;\n  const num47 = n;\n  const num48 = n;\n  const num49 = n;\n  const num50 = n;\n  const num51 = n;\n  const num52 = n;\n  const num53 = n;\n  const num54 = n;\n  const num55 = n;\n  const num56 = n;\n  const num57 = n;\n  const num58 = n;\n  const num59 = n;\n  const num60 = n;\n  const num61 = n;\n  const num62 = n;\n  const num63 = n;\n  const num64 = n;\n  const num65 = n;\n  const num66 = n;\n  const num67 = n;\n  const num68 = n;\n  const num69 = n;\n  const num70 = n;\n  const num71 = n;\n  const num72 = n;\n  const num73 = n;\n  const num74 = n;\n  const num75 = n;\n  const num76 = n;\n  const num77 = n;\n  const num78 = n;\n  const num79 = n;\n  const num80 = n;\n  const num81 = n;\n  const num82 = n;\n  const num83 = n;\n  const num84 = n;\n  const num85 = n;\n  const num86 = n;\n  const num87 = n;\n  const num88 = n;\n  const num89 = n;\n  const num90 = n;\n  const num91 = n;\n  const num92 = n;\n  const num93 = n;\n  const num94 = n;\n  const num95 = n;\n  const num96 = n;\n  const num97 = n;\n  const num98 = n;\n  const num99 = n;\n  const num100 = n;\n  const num101 = n;\n  const num102 = n;\n  const num103 = n;\n  const num104 = n;\n  const num105 = n;\n  const num106 = n;\n  const num107 = n;\n  const num108 = n;\n  const num109 = n;\n  const num110 = n;\n  const num111 = n;\n  const num112 = n;\n  const num113 = n;\n  const num114 = n;\n  const num115 = n;\n  const num116 = n;\n  const num117 = n;\n  const num118 = n;\n  const num119 = n;\n  const num120 = n;\n  const num121 = n;\n  const num122 = n;\n  const num123 = n;\n  const num124 = n;\n  const num125 = n;\n  const num126 = n;\n  const num127 = n;\n  const num128 = n;\n  const num129 = n;\n  const num130 = n;\n  const num131 = n;\n  const num132 = n;\n  const num133 = n;\n  const num134 = n;\n  const num135 = n;\n  const num136 = n;\n  const num137 = n;\n  const num138 = n;\n  const num139 = n;\n  const num140 = n;\n  const num141 = n;\n  const num142 = n;\n  const num143 = n;\n  const num144 = n;\n  const num145 = n;\n  const num146 = n;\n  const num147 = n;\n  const num148 = n;\n  const num149 = n;\n  const num150 = n;\n  const num151 = n;\n  const num152 = n;\n  const num153 = n;\n  const num154 = n;\n  const num155 = n;\n  const num156 = n;\n  const num157 = n;\n  const num158 = n;\n  const num159 = n;\n  const num160 = n;\n  const num161 = n;\n  const num162 = n;\n  const num163 = n;\n  const num164 = n;\n  const num165 = n;\n  const num166 = n;\n  const num167 = n;\n  const num168 = n;\n  const num169 = n;\n  const num170 ="}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates9 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates10 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates11 = (numbers) => {\n  const uniqueNumbers = [];\n  const numberSet = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!numberSet.has(numbers[i])) {\n      numberSet.add(numbers[i]);\n      uniqueNumbers.push(numbers[i]);\n    }\n  }\n  return uniqueNumbers;\n};\n\n/*"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\W+/g, '');\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.replace(/\\W+/g, '').toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toLowerCase().toUpperCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toLowerCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n  return string.replace(/\\W+/g, '').toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toUpperCase().toLowerCase();\n};"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3], '-')\n  '1-2-3'\n  >>> concatenate([1, 2, 3], '-', '.')\n  '1.2.3'\n  >>> concatenate([1, 2, 3], '-', '.','')\n  '1 2 3'\n  >>> concatenate([1, 2, 3], '-', '.','', '*')\n  '1 2 3 *'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','')\n  '1 2 3 * '\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#')\n  '1 2 3 * #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','')\n  '1 2 3 * # '\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#')\n  '1 2 3 * # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','')\n  '1 2 3 * # # '\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#')\n  '1 2 3 * # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','')\n  '1 2 3 * # # # '\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#')\n  '1 2 3 * # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','')\n  '1 2 3 * # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#')\n  '1 2 3 * # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','')\n  '1 2 3 * # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#')\n  '1 2 3 * # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','')\n  '1 2 3 * # # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','', '#')\n  '1 2 3 * # # # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','', '#','')\n  '1 2 3 * # # # # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#')\n  '1 2 3 * # # # # # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#','')\n  '1 2 3 * # # # # # # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#')\n  '1 2 3 * # # # # # # # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#','')\n  '1 2 3 * # # # # # # # # # # # # # # #'\n  >>> concatenate([1, 2, 3], '-', '.','', '*','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#','', '#')\n  '1 2 3 * # # # # # # # # # # # # # # # #'\n"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['bcd', 'cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'd')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  "}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6]\n"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  true\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  true\n  >>> isPrime(10)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  true\n  >>> isPrime(13)\n  true\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(16)\n  true\n  >>> isPrime(17)\n  true\n  >>> isPrime(18)\n  true\n  >>> isPrime(19)\n  true\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  true\n  >>> isPrime(22)\n  true\n  >>> isPrime(23)\n  true\n  >>> isPrime(24)\n  true\n  >>> isPrime(25)\n  true\n  >>> isPrime(26)\n  true\n  >>> isPrime(27)\n  true\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  true\n  >>> isPrime(30)\n  true\n  >>> isPrime(31)\n  true\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  true\n  >>> isPrime(34)\n  true\n  >>> isPrime(35)\n  true\n  >>> isPrime(36)\n  true\n  >>> isPrime(37)\n  true\n  >>> isPrime(38)\n  true\n  >>> isPrime(39)\n  true\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  true\n  >>> isPrime(42)\n  true\n  >>> isPrime(43)\n  true\n  >>> isPrime(44)\n  true\n  >>> isPrime(45)\n  true\n  >>> isPrime(46)\n  true\n  >>> isPrime(47)\n  true\n  >>> isPrime(48)\n  true\n  >>> isPrime(49)\n  true\n  >>> isPrime(50)\n  true\n  >>> isPrime(51)\n  true\n  >>> isPrime(52)\n  true\n  >>> isPrime(53)\n  true\n  >>> isPrime(54)\n  true\n  >>> isPrime(55)\n  true\n  >>> isPrime(56)\n  true\n  >>> isPrime(57)\n  true\n  >>> isPrime(58)\n  true\n  >>> isPrime(59)\n  true\n  >>> isPrime(60)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(62)\n  true\n  >>> isPrime(63)\n  true\n  >>> isPrime(64)\n  true\n  >>> isPrime(65)\n  true\n  >>> isPrime(66)\n  true\n  >>> isPrime(67)\n  true\n  >>> isPrime(68)\n  true\n  >>> isPrime(69)\n  true\n  >>> isPrime(70)\n  true\n  >>> isPrime(71)\n  true\n  >>> isPrime(72)\n  true\n  >>> isPrime(73)\n  true\n  >>> isPrime(74)\n  true\n  >>> isPrime(75)\n  true\n  >>> isPrime(76)\n  true\n  >>> isPrime(77)\n  true\n  >>> isPrime(78)\n  true\n  >>> isPrime(79)\n  true\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  true\n  >>> isPrime(82)\n  true\n  >>> isPrime(83)\n  true\n  >>> isPrime(84)\n  true\n  >>> isPrime(85)\n  true\n  >>> isPrime(86)\n  true\n  >>> isPrime(87)\n  true\n  >>> isPrime(88)\n  true\n  >>> isPrime(89)\n  true\n  >>> isPrime(90)\n  true\n  >>> isPrime(91)\n  true\n  >>> isPrime(92)\n  true\n  >>> isPrime(93)\n  true\n  >>> isPrime(94)\n  true\n  >>> isPrime(95)\n  true\n  >>> isPrime(96)\n  true\n  >>> isPrime(97)\n  true\n  >>> isPrime(98)\n  true\n  >>> isPrime(99)\n  true\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(102)\n  true\n  >>> isPrime(103)\n  true\n  >>> isPrime(104)\n  true\n  >>> isPrime(105)\n  true\n  >>> isPrime(106)\n  true\n  >>> isPrime(107)\n  true\n  >>> isPrime(108)\n  true\n  >>> isPrime(109)\n  true\n  >>> isPrime(110)\n  true\n  >>> isPrime(111)\n  true\n  >>> isPrime(112)\n  true\n  >>> isPrime(113)\n  true\n  >>> isPrime(114)\n  true\n  >>> isPrime(115)\n  true\n  >>> isPrime(116)\n  true\n  >>> isPrime(117)\n  true\n  >>> isPrime(118)\n  true\n  >>> isPrime(119)\n  true\n  >>> isPrime"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const max = Math.max(...xs);\n  const min = Math.min(...xs);\n  const diff = max - min;\n  const n = xs.length;\n  const coefs = xs.map((x) => x - min);\n  const coefsLength = coefs.length;\n  const coefsSum = coefs.reduce((prev, item, index) => prev + item, 0);\n  const coefsDiff = coefsSum - coefsLength * diff;\n  const coefsDiffSum = coefsDiff.reduce((prev, item, index) => prev + item, 0);\n  const coefsDiffSumSquare = coefsDiffSum * coefsDiffSum;\n  const coefsDiffSumSquareRoot = Math.sqrt(coefsDiffSumSquare);\n  const coefsDiffSumSquareRootSquare = coefsDiffSumSquareRoot * coefsDiffSumSquareRoot;\n  const coefsDiffSumSquareRootSquareRoot = coefsDiffSumSquareRootSquare * coefsDiffSumSquareRootSquare;\n  const coefsDiffSumSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRoot * coefsDiffSumSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRoot = coefsDiffSumSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquare;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRoot * coefsDiffSumSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRoot = coefsDiffSumSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquare;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRoot * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare * coefsDiffSumSquareRootSquareRootSquareRootSquareRoot;\n  const coefsDiffSumSquareRootSquareRootSquareRootSquareRootSquare = coefsDiffSum"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [];\n  const sortedList = [];\n  const list = l;\n  const listLength = l.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  while (i < listLength) {\n    if (list[i] % 3 === 0) {\n      sorted.push(list[i]);\n    }\n    i++;\n  }\n  while (j < sorted.length) {\n    while (k < sorted.length) {\n      if (sorted[j] % 3 === 0) {\n        sortedList.push(sorted[j]);\n      }\n      j++;\n    }\n    k = 0;\n    while (k < sortedList.length) {\n      if (sortedList[k] % 3 === 0) {\n        sortedList.splice(k, 1);\n      }\n      k++;\n    }\n  }\n  return sortedList;\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let num = n;\n  let fizz = 0;\n  let buzz = 0;\n  let fizzbuzz = 0;\n  while (num > 0) {\n    if (num % 3 === 0 && num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'fizzbuzz';\n    } else if (num % 3 === 0) {\n      fizzbuzz = fizzbuzz + 'fizz';\n      fizz = fizz + 1;\n    } else if (num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'buzz';\n      buzz = buzz + 1;\n    } else {\n      fizzbuzz = fizzbuzz + num;\n    }\n    num = num - 1;\n  }\n  return fizzbuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz2 = (n) => {\n  let num = n;\n  let fizz = 0;\n  let buzz = 0;\n  let fizzbuzz = 0;\n  while (num > 0) {\n    if (num % 3 === 0 && num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'fizzbuzz';\n    } else if (num % 3 === 0) {\n      fizzbuzz = fizzbuzz + 'fizz';\n      fizz = fizz + 1;\n    } else if (num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'buzz';\n      buzz = buzz + 1;\n    } else {\n      fizzbuzz = fizzbuzz + num;\n    }\n    num = num - 1;\n  }\n  return fizzbuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz3 = (n) => {\n  let num = n;\n  let fizz = 0;\n  let buzz = 0;\n  let fizzbuzz = 0;\n  while (num > 0) {\n    if (num % 3 === 0 && num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'fizzbuzz';\n    } else if (num % 3 === 0) {\n      fizzbuzz = fizzbuzz + 'fizz';\n      fizz = fizz + 1;\n    } else if (num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'buzz';\n      buzz = buzz + 1;\n    } else {\n      fizzbuzz = fizzbuzz + num;\n    }\n    num = num - 1;\n  }\n  return fizzbuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz4 = (n) => {\n  let num = n;\n  let fizz = 0;\n  let buzz = 0;\n  let fizzbuzz = 0;\n  while (num > 0) {\n    if (num % 3 === 0 && num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'fizzbuzz';\n    } else if (num % 3 === 0) {\n      fizzbuzz = fizzbuzz + 'fizz';\n      fizz = fizz + 1;\n    } else if (num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'buzz';\n      buzz = buzz + 1;\n    } else {\n      fizzbuzz = fizzbuzz + num;\n    }\n    num = num - 1;\n  }\n  return fizzbuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz5 = (n) => {\n  let num = n;\n  let fizz = 0;\n  let buzz = 0;\n  let fizzbuzz = 0;\n  while (num > 0) {\n    if (num % 3 === 0 && num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'fizzbuzz';\n    } else if (num % 3 === 0) {\n      fizzbuzz = fizzbuzz + 'fizz';\n      fizz = fizz + 1;\n    } else if (num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'buzz';\n      buzz = buzz + 1;\n    } else {\n      fizzbuzz = fizzbuzz + num;\n    }\n    num = num - 1;\n  }\n  return fizzbuzz;\n};\n\n/*\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz6 = (n) => {\n  let num = n;\n  let fizz = 0;\n  let buzz = 0;\n  let fizzbuzz = 0;\n  while (num > 0) {\n    if (num % 3 === 0 && num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'fizzbuzz';\n    } else if (num % 3 === 0) {\n      fizzbuzz = fizzbuzz + 'fizz';\n      fizz = fizz + 1;\n    } else if (num % 5 === 0) {\n      fizzbuzz = fizzbuzz + 'buzz';\n      buzz = buzz + 1;\n    } else {\n      fizzbuzz = fizzbuzz + num;\n    }\n    num = num - 1;\n  }\n  return fizzbuzz;"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i] === l[i + 1]) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return even.concat(odd);\n};\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT encodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT encodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT encodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT encodeCyclic = (s) => {\n  const groups = [], groups2 = [];"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  for (let i = 0; i < n; i++) {\n    fib = fib + prime;\n    prime = prime * prime;\n  }\n  return fib;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 1\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 2\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 3\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToFour = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 4\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToFive = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 5\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToSix = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  const car1 = {\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    w: 0,\n    h: 0,\n    color: '#000',\n    size: 0,\n    speed: 0,\n    x0: 0,\n    y0: 0,\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    x3: 0,\n    y3: 0,\n    x4: 0,\n    y4: 0,\n    x5: 0,\n    y5: 0,\n    x6: 0,\n    y6: 0,\n    x7: 0,\n    y7: 0,\n    x8: 0,\n    y8: 0,\n    x9: 0,\n    y9: 0,\n    x10: 0,\n    y10: 0,\n    x11: 0,\n    y11: 0,\n    x12: 0,\n    y12: 0,\n    x13: 0,\n    y13: 0,\n    x14: 0,\n    y14: 0,\n    x15: 0,\n    y15: 0,\n    x16: 0,\n    y16: 0,\n    x17: 0,\n    y17: 0,\n    x18: 0,\n    y18: 0,\n    x19: 0,\n    y19: 0,\n    x20: 0,\n    y20: 0,\n    x21: 0,\n    y21: 0,\n    x22: 0,\n    y22: 0,\n    x23: 0,\n    y23: 0,\n    x24: 0,\n    y24: 0,\n    x25: 0,\n    y25: 0,\n    x26: 0,\n    y26: 0,\n    x27: 0,\n    y27: 0,\n    x28: 0,\n    y28: 0,\n    x29: 0,\n    y29: 0,\n    x30: 0,\n    y30: 0,\n    x31: 0,\n    y31: 0,\n    x32: 0,\n    y32: 0,\n    x33: 0,\n    y33: 0,\n    x34: 0,\n    y34: 0,\n    x35: 0,\n    y35: 0,\n    x36: 0,\n    y36: 0,\n    x37: 0,\n    y37: 0,\n    x38: 0,\n    y38: 0,\n    x39: 0,\n    y39: 0,\n    x40: 0,\n    y40: 0,\n    x41: 0,\n    y41: 0,\n    x42: 0,\n    y42: 0,\n    x43: 0,\n    y43: 0,\n    x44: 0,\n    y44: 0,\n    x45: 0,\n    y45: 0,\n    x46: 0,\n    y46: 0,\n    x47: 0,\n    y47: 0,\n    x48: 0,\n    y48: 0,\n    x49: 0,\n    y49: 0,\n    x50: 0,\n    y50: 0,\n    x51: 0,\n    y51: 0,\n    x52: 0,\n    y52: 0,\n    x53: 0,\n    y53: 0,\n    x54: 0,\n    y54: 0,\n    x55: 0,\n    y55: 0,\n    x56: 0,\n    y56: 0,\n    x57: 0,\n    y57: 0,\n    x58: 0,\n    y58: 0,\n    x59: 0,\n    y59: 0,\n    x60: 0,\n    y60: 0,\n    x61: 0,\n    y61: 0,\n    x62: 0,\n    y62: 0,\n    x63: 0,\n    y63: 0,\n    x64: 0,\n    y64: 0,\n    x65: 0,\n    y65: 0,\n    x66: 0,\n    y66: 0,\n    x67: 0,\n    y67: 0,\n    x68: 0,\n    y68: 0,\n    x69: 0,\n    y69: 0,\n    x70: 0,\n    y70: 0,\n    x71: 0,\n    y71: 0,\n    x72: 0,\n    y72: 0,\n    x73: 0,\n    y73: 0,\n    x74: 0,\n    y74: 0,\n    x75: 0,\n    y75: 0,\n    x76: 0,\n    y76: 0,\n    x77: 0,\n    y77: 0,\n    x78: 0,\n    y78: 0,\n    x79: 0,\n    y79: 0,\n    x80: 0,\n    y80: 0,\n    x81: 0,\n    y81: 0,\n    x82: 0,\n    y82: 0,\n    x83: 0,\n    y83: 0,\n    x84: 0,\n    y"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i] = newList[i] + 1;\n  }\n  return newList;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length;"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\n/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero3 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero4 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero5 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero6 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero7 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero8 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero9 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero10 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero11 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero12 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero13 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero14 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero15 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero16 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero17 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero18 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero19 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero20 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero21 = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum === 0\n}\n\nconst pairsSumToZero22 = (l)"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = x;\n  if (base === 2) {\n    res = x.replace(/\\d/g, '0');\n  }\n  if (base === 8) {\n    res = x.replace(/\\d/g, '0');\n    if (res.length % 2 === 1) {\n      res = '0' + res;\n    }\n  }\n  if (base === 16) {\n    res = x.replace(/\\d/g, '0');\n    if (res.length % 4 === 1) {\n      res = '0' + res;\n    }\n  }\n  return res;\n};\n\nconst convert = (num, base, baseTo) => {\n  let res = '';\n  if (base === 16) {\n    res = num.toString(16);\n  }\n  if (base === 2) {\n    res = num.toString(2);\n  }\n  if (base === 8) {\n    res = num.toString(8);\n  }\n  if (baseTo === 16) {\n    res = res.toUpperCase();\n  }\n  if (baseTo === 2) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n  }\n  if (baseTo === 8) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n    if (res.length % 2 === 1) {\n      res = '0' + res;\n    }\n  }\n  return res;\n};\n\nconst convertBase = (num, base, baseTo) => {\n  let res = '';\n  if (base === 16) {\n    res = num.toString(16);\n  }\n  if (base === 2) {\n    res = num.toString(2);\n  }\n  if (base === 8) {\n    res = num.toString(8);\n  }\n  if (baseTo === 16) {\n    res = res.toUpperCase();\n  }\n  if (baseTo === 2) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n  }\n  if (baseTo === 8) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n    if (res.length % 2 === 1) {\n      res = '0' + res;\n    }\n  }\n  return res;\n};\n\nconst convertBaseTo = (num, base, baseTo) => {\n  let res = '';\n  if (base === 16) {\n    res = num.toString(16);\n  }\n  if (base === 2) {\n    res = num.toString(2);\n  }\n  if (base === 8) {\n    res = num.toString(8);\n  }\n  if (baseTo === 16) {\n    res = res.toUpperCase();\n  }\n  if (baseTo === 2) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n  }\n  if (baseTo === 8) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n    if (res.length % 2 === 1) {\n      res = '0' + res;\n    }\n  }\n  return res;\n};\n\nconst convertBaseToBase = (num, base, baseTo) => {\n  let res = '';\n  if (base === 16) {\n    res = num.toString(16);\n  }\n  if (base === 2) {\n    res = num.toString(2);\n  }\n  if (base === 8) {\n    res = num.toString(8);\n  }\n  if (baseTo === 16) {\n    res = res.toUpperCase();\n  }\n  if (baseTo === 2) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n  }\n  if (baseTo === 8) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n    if (res.length % 2 === 1) {\n      res = '0' + res;\n    }\n  }\n  return res;\n};\n\nconst convertBaseToBase = (num, base, baseTo) => {\n  let res = '';\n  if (base === 16) {\n    res = num.toString(16);\n  }\n  if (base === 2) {\n    res = num.toString(2);\n  }\n  if (base === 8) {\n    res = num.toString(8);\n  }\n  if (baseTo === 16) {\n    res = res.toUpperCase();\n  }\n  if (baseTo === 2) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n  }\n  if (baseTo === 8) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n    if (res.length % 2 === 1) {\n      res = '0' + res;\n    }\n  }\n  return res;\n};\n\nconst convertBaseToBase = (num, base, baseTo) => {\n  let res = '';\n  if (base === 16) {\n    res = num.toString(16);\n  }\n  if (base === 2) {\n    res = num.toString(2);\n  }\n  if (base === 8) {\n    res = num.toString(8);\n  }\n  if (baseTo === 16) {\n    res = res.toUpperCase();\n  }\n  if (baseTo === 2) {\n    res = res.toUpperCase().replace(/\\d/g, '0');\n  }\n  if (baseTo === 8) {\n    res = res.toUpperCase"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * (a - h) * (2 * a - h)) / 2;\n};\n\n/*\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(5, 4)\n  9.0\n  >>> triangleArea(5, 5)\n  12.5\n  >>> triangleArea(5, 6)\n  15.0\n  >>> triangleArea(5, 7)\n  18.0\n  >>> triangleArea(5, 8)\n  21.0\n  >>> triangleArea(5, 9)\n  24.0\n  >>> triangleArea(5, 10)\n  27.0\n  >>> triangleArea(5, 11)\n  30.0\n  >>> triangleArea(5, 12)\n  33.0\n  >>> triangleArea(5, 13)\n  36.0\n  >>> triangleArea(5, 14)\n  39.0\n  >>> triangleArea(5, 15)\n  42.0\n  >>> triangleArea(5, 16)\n  45.0\n  >>> triangleArea(5, 17)\n  48.0\n  >>> triangleArea(5, 18)\n  51.0\n  >>> triangleArea(5, 19)\n  54.0\n  >>> triangleArea(5, 20)\n  57.0\n  >>> triangleArea(5, 21)\n  60.0\n  >>> triangleArea(5, 22)\n  63.0\n  >>> triangleArea(5, 23)\n  66.0\n  >>> triangleArea(5, 24)\n  69.0\n  >>> triangleArea(5, 25)\n  72.0\n  >>> triangleArea(5, 26)\n  75.0\n  >>> triangleArea(5, 27)\n  78.0\n  >>> triangleArea(5, 28)\n  81.0\n  >>> triangleArea(5, 29)\n  84.0\n  >>> triangleArea(5, 30)\n  87.0\n  >>> triangleArea(5, 31)\n  90.0\n  >>> triangleArea(5, 32)\n  93.0\n  >>> triangleArea(5, 33)\n  96.0\n  >>> triangleArea(5, 34)\n  99.0\n  >>> triangleArea(5, 35)\n  102.0\n  >>> triangleArea(5, 36)\n  105.0\n  >>> triangleArea(5, 37)\n  108.0\n  >>> triangleArea(5, 38)\n  111.0\n  >>> triangleArea(5, 39)\n  114.0\n  >>> triangleArea(5, 40)\n  117.0\n  >>> triangleArea(5, 41)\n  120.0\n  >>> triangleArea(5, 42)\n  123.0\n  >>> triangleArea(5, 43)\n  126.0\n  >>> triangleArea(5, 44)\n  129.0\n  >>> triangleArea(5, 45)\n  132.0\n  >>> triangleArea(5, 46)\n  135.0\n  >>> triangleArea(5, 47)\n  138.0\n  >>> triangleArea(5, 48)\n  141.0\n  >>> triangleArea(5, 49)\n  144.0\n  >>> triangleArea(5, 50)\n  147.0\n  >>> triangleArea(5, 51)\n  150.0\n  >>> triangleArea(5, 52)\n  153.0\n  >>> triangleArea(5, 53)\n  156.0\n  >>> triangleArea(5, 54)\n  159.0\n  >>> triangleArea(5, 55)\n  162.0\n  >>> triangleArea(5, 56)\n  165.0\n  >>> triangleArea(5, 57)\n  168.0\n  >>> triangleArea(5, 58)\n  171.0\n  >>> triangleArea(5, 59)\n  174.0\n  >>> triangleArea(5, 60)\n  177.0\n  >>> triangleArea(5, 61)\n  180.0\n  >>> triangleArea(5, 62)\n  183.0\n  >>> triangleArea(5, 63)\n  186.0\n  >>> triangleArea(5, 64)\n  189.0\n  >>> triangleArea(5, 65)\n  192.0\n  >>> triangleArea(5, 66)\n  195.0\n  >>> triangleArea(5, 67)\n  198.0\n  >>> triangleArea(5, 68)\n  201.0\n  >>> triangleArea(5, 69)\n  204.0\n  >>> triangleArea(5, 70)\n  207.0\n  >>> triangleArea(5, 71)\n  210.0\n  >>> triangleArea(5, 72)\n  213.0\n  >>> triangleArea(5, 73)\n  216.0\n  >>> triangleArea(5, 74)\n  219.0\n  >>> triangleArea(5, 75)\n  222.0\n  >>> triangleArea(5, 76)\n  225.0\n  >>> triangleArea(5, 77)\n  228.0\n  >>> triangleArea(5, 78)\n  231.0\n  >>> triangleArea(5, 79)\n  234.0\n  >>> triangleArea(5, 80)\n  237.0\n  >>> triangleArea(5, 81)\n  240.0\n  >>> triangleArea(5, 82)\n  243.0\n  >>> triangleArea(5, 83)\n  246.0\n  >>> triangleArea(5, 84)\n  249.0\n  >>> triangleArea(5, 85)\n  252.0\n  >>> triangleArea(5, 86)\n  255.0\n  >>> triangleArea(5, 87)\n  258.0\n  >>> triangleArea(5, 88)\n  261.0\n  >>> triangleArea(5, 89)\n  264.0\n  >>> triangleArea(5, 90)\n  267.0\n  >>> triangleArea(5, 91)\n  270.0\n  >>> triangleArea(5, 92)\n  273.0\n  >>> triangleArea(5, 93)\n  276.0\n  >>> triangleArea(5, 94)\n  279.0\n  >>> triangleArea(5, 95)\n  282.0\n  >>> triangleArea(5, 96)\n  285.0\n  >>> triangleArea(5, 97)\n  288.0\n  >>> triangleArea(5, 98)\n  291.0\n  >>> triangleArea(5, 99)"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = l.sort();\n  let half = Math.floor(sorted.length / 2);\n  let middle = sorted[half];\n  if (sorted.length % 2) {\n    return middle;\n  } else {\n    return (middle + sorted[half - 1]) / 2;\n  }\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome3 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome4 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome5 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome6 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome7 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome8 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome9 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome10 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome11 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length;\n    let i = 0;\n    let j = textArrayLength - 1;\n    while (i < textArrayLength / 2) {\n        if (textArray[i]!== textArray[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nconst isPalindrome12 = (text) => {\n    let textLength = text.length;\n    let textArray = text.split('');\n    let textArrayLength = textArray.length"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp14 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp15 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp16 = (n, p) => {\n  return n % p;\n};\n\n/*\n  >>> modp(3, 5"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return encodeShift(encodeShift(s));\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decode = (s) => {\n  return decodeShift(decodeShift(s));\n}\n\nconst encode_decode = (s) => {\n  return encode(decode(s));\n}\n\nconst encode_decode_encode = (s) => {\n  return encode(decode(encode(s)));\n}\n\nconst encode_decode_decode = (s) => {\n  return decode(decode(encode(s)));\n}\n\nconst encode_decode_decode_encode = (s) => {\n  return encode(decode(decode(encode(s))));\n}\n\nconst encode_decode_decode_decode = (s) => {\n  return decode(decode(decode(encode(s))));\n}\n\nconst encode_decode_decode_decode_encode = (s) => {\n  return encode(decode(decode(decode(encode(s)))));\n}\n\nconst encode_decode_decode_decode_decode_encode = (s) => {\n  return decode(decode(decode(decode(encode(s)))));\n}\n\nconst encode_decode_decode_decode_decode_decode_encode = (s) => {\n  return encode(decode(decode(decode(decode(encode(s))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return decode(decode(decode(decode(decode(encode(s))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return encode(decode(decode(decode(decode(decode(encode(s)))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return decode(decode(decode(decode(decode(decode(encode(s)))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return encode(decode(decode(decode(decode(decode(decode(encode(s))))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return decode(decode(decode(decode(decode(decode(decode(encode(s))))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return encode(decode(decode(decode(decode(decode(decode(decode(encode(s)))))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return decode(decode(decode(decode(decode(decode(decode(decode(encode(s)))))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return encode(decode(decode(decode(decode(decode(decode(decode(decode(encode(s))))))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return decode(decode(decode(decode(decode(decode(decode(decode(decode(encode(s))))))))));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s) => {\n  return encode(decode(decode(decode(decode(decode(decode(decode(decode(decode(encode(s)))))))))\n  ));\n}\n\nconst encode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_decode_encode = (s"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const newText = text.toLowerCase();\n  const newTextArray = newText.split('');\n  const newTextArrayLength = newTextArray.length;\n  let newTextArrayIndex = 0;\n  let newTextArrayIndex2 = 0;\n  let newTextArrayIndex3 = 0;\n  let newTextArrayIndex4 = 0;\n  let newTextArrayIndex5 = 0;\n  let newTextArrayIndex6 = 0;\n  let newTextArrayIndex7 = 0;\n  let newTextArrayIndex8 = 0;\n  let newTextArrayIndex9 = 0;\n  let newTextArrayIndex10 = 0;\n  let newTextArrayIndex11 = 0;\n  let newTextArrayIndex12 = 0;\n  let newTextArrayIndex13 = 0;\n  let newTextArrayIndex14 = 0;\n  let newTextArrayIndex15 = 0;\n  let newTextArrayIndex16 = 0;\n  let newTextArrayIndex17 = 0;\n  let newTextArrayIndex18 = 0;\n  let newTextArrayIndex19 = 0;\n  let newTextArrayIndex20 = 0;\n  let newTextArrayIndex21 = 0;\n  let newTextArrayIndex22 = 0;\n  let newTextArrayIndex23 = 0;\n  let newTextArrayIndex24 = 0;\n  let newTextArrayIndex25 = 0;\n  let newTextArrayIndex26 = 0;\n  let newTextArrayIndex27 = 0;\n  let newTextArrayIndex28 = 0;\n  let newTextArrayIndex29 = 0;\n  let newTextArrayIndex30 = 0;\n  let newTextArrayIndex31 = 0;\n  let newTextArrayIndex32 = 0;\n  let newTextArrayIndex33 = 0;\n  let newTextArrayIndex34 = 0;\n  let newTextArrayIndex35 = 0;\n  let newTextArrayIndex36 = 0;\n  let newTextArrayIndex37 = 0;\n  let newTextArrayIndex38 = 0;\n  let newTextArrayIndex39 = 0;\n  let newTextArrayIndex40 = 0;\n  let newTextArrayIndex41 = 0;\n  let newTextArrayIndex42 = 0;\n  let newTextArrayIndex43 = 0;\n  let newTextArrayIndex44 = 0;\n  let newTextArrayIndex45 = 0;\n  let newTextArrayIndex46 = 0;\n  let newTextArrayIndex47 = 0;\n  let newTextArrayIndex48 = 0;\n  let newTextArrayIndex49 = 0;\n  let newTextArrayIndex50 = 0;\n  let newTextArrayIndex51 = 0;\n  let newTextArrayIndex52 = 0;\n  let newTextArrayIndex53 = 0;\n  let newTextArrayIndex54 = 0;\n  let newTextArrayIndex55 = 0;\n  let newTextArrayIndex56 = 0;\n  let newTextArrayIndex57 = 0;\n  let newTextArrayIndex58 = 0;\n  let newTextArrayIndex59 = 0;\n  let newTextArrayIndex60 = 0;\n  let newTextArrayIndex61 = 0;\n  let newTextArrayIndex62 = 0;\n  let newTextArrayIndex63 = 0;\n  let newTextArrayIndex64 = 0;\n  let newTextArrayIndex65 = 0;\n  let newTextArrayIndex66 = 0;\n  let newTextArrayIndex67 = 0;\n  let newTextArrayIndex68 = 0;\n  let newTextArrayIndex69 = 0;\n  let newTextArrayIndex70 = 0;\n  let newTextArrayIndex71 = 0;\n  let newTextArrayIndex72 = 0;\n  let newTextArrayIndex73 = 0;\n  let newTextArrayIndex74 = 0;\n  let newTextArrayIndex75 = 0;\n  let newTextArrayIndex76 = 0;\n  let newTextArrayIndex77 = 0;\n  let newTextArrayIndex78 = 0;\n  let newTextArrayIndex79 = 0;\n  let newTextArrayIndex80 = 0;\n  let newTextArrayIndex81 = 0;\n  let newTextArrayIndex82 = 0;\n  let newTextArrayIndex83 = 0;\n  let newTextArrayIndex84 = 0;\n  let newTextArrayIndex85 = 0;\n  let newTextArrayIndex86 = 0;\n  let newTextArrayIndex87 = 0;\n  let newTextArrayIndex88 = 0;\n  let newTextArrayIndex89 = 0;\n  let newTextArrayIndex90 = 0;\n  let newTextArrayIndex91 = 0;\n  let newTextArrayIndex92 = 0;\n  let newTextArrayIndex93 = 0;\n  let newTextArrayIndex94 = 0;\n  let newTextArrayIndex95 = 0;\n  let newTextArrayIndex96 = 0;\n  let newTextArrayIndex97 = 0;\n  let newTextArrayIndex98 = 0;\n  let newTextArrayIndex99 = 0;\n  let newTextArrayIndex100 = 0;\n  let newTextArrayIndex101 = 0;\n  let newTextArrayIndex102 = 0;\n  let newTextArrayIndex103 = 0;\n  let newTextArrayIndex104 = 0;\n  let newTextArrayIndex105 = 0;\n  let newTextArrayIndex106 = 0;\n  let newTextArrayIndex107 = 0;\n  let newTextArrayIndex108 = 0;\n  let newTextArrayIndex109 = 0;\n  let newTextArrayIndex110 = 0;\n  let newTextArrayIndex111 = 0;\n  let newTextArrayIndex112 = 0;\n  let newTextArrayIndex113 = 0;\n  let newTextArrayIndex114 = 0;\n  let newTextArrayIndex115 = 0;\n  let newTextArrayIndex116 = 0;\n  let newTextArrayIndex117 = 0;\n  let newTextArrayIndex118 = 0;\n  let"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold2 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold3 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold4 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold5 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold6 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold7 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold8 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold9 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold10 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold11 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold12 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold13 = (l, t) => {\n  const len = l.length\n  if (len < t) {\n    return false\n  }\n  const sum = l.reduce((a, b) => a + b, 0)\n  return sum < t\n}\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n}"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  CheCk if Two woRds Have tHe same characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabc')\n  false\n  >>> sameChars('dddddddabc', 'abcd')\n  false\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars2 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  CheCk if Two woRds Have tHe same characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars3 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  CheCk if Two woRds Have tHe same characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars4 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  CheCk if Two woRds Have tHe same characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars5 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  CheCk if Two woRds Have tHe same characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars6 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  CheCk if Two woRds Have tHe same characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCh"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsArray = brackets.split(\"\")\n  const bracketsArrayLength = bracketsArray.length\n  const bracketsArrayIndex = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex2 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex3 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex4 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex5 = bracketsArray.indexOf(\"<<>>\")\n  const bracketsArrayIndex6 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex7 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex8 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex9 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex10 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex11 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex12 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex13 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex14 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex15 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex16 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex17 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex18 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex19 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex20 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex21 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex22 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex23 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex24 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex25 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex26 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex27 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex28 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex29 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex30 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex31 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex32 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex33 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex34 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex35 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex36 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex37 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex38 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex39 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex40 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex41 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex42 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex43 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex44 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex45 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex46 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex47 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex48 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex49 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex50 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex51 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex52 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex53 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex54 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex55 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex56 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex57 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex58 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex59 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex60 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex61 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex62 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex63 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex64 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex65 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex66 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex67 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex68 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex69 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex70 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex71 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex72 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex73 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex74 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex75 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex76 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex77 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex78 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex79 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex80 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex81 = bracketsArray.indexOf(\"<>\")\n  const bracketsArrayIndex82 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex83 = bracketsArray.indexOf(\"<\")\n  const bracketsArrayIndex84 = bracketsArray.indexOf(\">\")\n  const bracketsArrayIndex85 = bracketsArray.indexOf(\"<>\")\n"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = 0;\n  let m = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let j1 = 0;\n  let k1 = 0;\n  let l1 = 0;\n  let m1 = 0;\n  let n1 = 0;\n  let o1 = 0;\n  let p1 = 0;\n  let q1 = 0;\n  let r1 = 0;\n  let s1 = 0;\n  let t1 = 0;\n  let u1 = 0;\n  let v1 = 0;\n  let w1 = 0;\n  let x1 = 0;\n  let y1 = 0;\n  let z1 = 0;\n  let a1 = 0;\n  let b1 = 0;\n  let c1 = 0;\n  let d1 = 0;\n  let e1 = 0;\n  let f1 = 0;\n  let g1 = 0;\n  let h1 = 0;\n  let i2 = 0;\n  let j2 = 0;\n  let k2 = 0;\n  let l2 = 0;\n  let m2 = 0;\n  let n2 = 0;\n  let o2 = 0;\n  let p2 = 0;\n  let q2 = 0;\n  let r2 = 0;\n  let s2 = 0;\n  let t2 = 0;\n  let u2 = 0;\n  let v2 = 0;\n  let w2 = 0;\n  let x2 = 0;\n  let y2 = 0;\n  let z2 = 0;\n  let a2 = 0;\n  let b2 = 0;\n  let c2 = 0;\n  let d2 = 0;\n  let e2 = 0;\n  let f2 = 0;\n  let g2 = 0;\n  let h2 = 0;\n  let i3 = 0;\n  let j3 = 0;\n  let k3 = 0;\n  let l3 = 0;\n  let m3 = 0;\n  let n3 = 0;\n  let o3 = 0;\n  let p3 = 0;\n  let q3 = 0;\n  let r3 = 0;\n  let s3 = 0;\n  let t3 = 0;\n  let u3 = 0;\n  let v3 = 0;\n  let w3 = 0;\n  let x3 = 0;\n  let y3 = 0;\n  let z3 = 0;\n  let a3 = 0;\n  let b3 = 0;\n  let c3 = 0;\n  let d3 = 0;\n  let e3 = 0;\n  let f3 = 0;\n  let g3 = 0;\n  let h3 = 0;\n  let i4 = 0;\n  let j4 = 0;\n  let k4 = 0;\n  let l4 = 0;\n  let m4 = 0;\n  let n4 = 0;\n  let o4 = 0;\n  let p4 = 0;\n  let q4 = 0;\n  let r4 = 0;\n  let s4 = 0;\n  let t4 = 0;\n  let u4 = 0;\n  let v4 = 0;\n  let w4 = 0;\n  let x4 = 0;\n  let y4 = 0;\n  let z4 = 0;\n  let a4 = 0;\n  let b4 = 0;\n  let c4 = 0;\n  let d4 = 0;\n  let e4 = 0;\n  let f4 = 0;\n  let g4 = 0;\n  let h4 = 0;\n  let i5 = 0;\n  let j5 = 0;\n  let k5 = 0;\n  let l5 = 0;\n  let m5 = 0;\n  let n5 = 0;\n  let o5 = 0;\n  let p5 = 0;\n  let q5 = 0;\n  let r5 = 0;\n  let s5 = 0;\n  let t5 = 0;\n  let u5 = 0;\n  let v5 = 0;\n  let w5 = 0;\n  let x5 = 0;\n  let y5 = 0;\n  let z5 = 0;\n  let a5 = 0;\n  let b5 = 0;\n  let c5 = 0;\n  let d5 = 0;\n  let e5 = 0;\n  let f5 = 0;\n  let g5 = 0;\n  let h5 = 0;\n  let i6 = 0;\n  let j6 = 0;\n  let k6 = 0;\n  let l6 = 0;\n  let m6 = 0;\n  let n6 = 0;\n  let o6 = 0;\n  let p6 = 0;\n  let q6 = 0;\n  let r6 = 0;\n  let s6 = 0;\n  let t6 = 0;\n  let u6 = 0;\n  let v6 = 0;\n  let w6 = 0;\n  let x6 = 0;\n  let y6 = 0;\n  let z6 = 0;\n  let a6 = 0;\n  let b6 = 0;\n  let c6 = 0;\n  let d6 = 0;\n  let e6 = 0;\n  let f6 = 0;\n  let g6 = 0;\n  let h6 = 0;\n  let i7 = 0;\n  let j7 = 0;\n  let k7 = 0;\n  let l7 = 0;\n  let m7 = 0;\n  let"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const common = [];\n  for (let i = 0; i < l1.length; i++) {\n    const element = l1[i];\n    const index = l2.indexOf(element);\n    if (index!== -1) {\n      common.push(element);\n    }\n  }\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n)\n  }\n  return primeFactors.sort((a, b) => a - b)[0]\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  let primeFactors = []\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      primeFactors.push(i)\n      n = n / i\n    } else {\n      i++\n    }\n  }\n  if (n > 1) {\n    primeFactors"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.split(\"\")\n  const bracketsLength = brackets.length\n  const bracketsStack = []\n  let bracketsStackLength = 0\n  let bracketsStackIndex = 0\n  let bracketsStackIndex2 = 0\n  let bracketsStackIndex3 = 0\n  let bracketsStackIndex4 = 0\n  let bracketsStackIndex5 = 0\n  let bracketsStackIndex6 = 0\n  let bracketsStackIndex7 = 0\n  let bracketsStackIndex8 = 0\n  let bracketsStackIndex9 = 0\n  let bracketsStackIndex10 = 0\n  let bracketsStackIndex11 = 0\n  let bracketsStackIndex12 = 0\n  let bracketsStackIndex13 = 0\n  let bracketsStackIndex14 = 0\n  let bracketsStackIndex15 = 0\n  let bracketsStackIndex16 = 0\n  let bracketsStackIndex17 = 0\n  let bracketsStackIndex18 = 0\n  let bracketsStackIndex19 = 0\n  let bracketsStackIndex20 = 0\n  let bracketsStackIndex21 = 0\n  let bracketsStackIndex22 = 0\n  let bracketsStackIndex23 = 0\n  let bracketsStackIndex24 = 0\n  let bracketsStackIndex25 = 0\n  let bracketsStackIndex26 = 0\n  let bracketsStackIndex27 = 0\n  let bracketsStackIndex28 = 0\n  let bracketsStackIndex29 = 0\n  let bracketsStackIndex30 = 0\n  let bracketsStackIndex31 = 0\n  let bracketsStackIndex32 = 0\n  let bracketsStackIndex33 = 0\n  let bracketsStackIndex34 = 0\n  let bracketsStackIndex35 = 0\n  let bracketsStackIndex36 = 0\n  let bracketsStackIndex37 = 0\n  let bracketsStackIndex38 = 0\n  let bracketsStackIndex39 = 0\n  let bracketsStackIndex40 = 0\n  let bracketsStackIndex41 = 0\n  let bracketsStackIndex42 = 0\n  let bracketsStackIndex43 = 0\n  let bracketsStackIndex44 = 0\n  let bracketsStackIndex45 = 0\n  let bracketsStackIndex46 = 0\n  let bracketsStackIndex47 = 0\n  let bracketsStackIndex48 = 0\n  let bracketsStackIndex49 = 0\n  let bracketsStackIndex50 = 0\n  let bracketsStackIndex51 = 0\n  let bracketsStackIndex52 = 0\n  let bracketsStackIndex53 = 0\n  let bracketsStackIndex54 = 0\n  let bracketsStackIndex55 = 0\n  let bracketsStackIndex56 = 0\n  let bracketsStackIndex57 = 0\n  let bracketsStackIndex58 = 0\n  let bracketsStackIndex59 = 0\n  let bracketsStackIndex60 = 0\n  let bracketsStackIndex61 = 0\n  let bracketsStackIndex62 = 0\n  let bracketsStackIndex63 = 0\n  let bracketsStackIndex64 = 0\n  let bracketsStackIndex65 = 0\n  let bracketsStackIndex66 = 0\n  let bracketsStackIndex67 = 0\n  let bracketsStackIndex68 = 0\n  let bracketsStackIndex69 = 0\n  let bracketsStackIndex70 = 0\n  let bracketsStackIndex71 = 0\n  let bracketsStackIndex72 = 0\n  let bracketsStackIndex73 = 0\n  let bracketsStackIndex74 = 0\n  let bracketsStackIndex75 = 0\n  let bracketsStackIndex76 = 0\n  let bracketsStackIndex77 = 0\n  let bracketsStackIndex78 = 0\n  let bracketsStackIndex79 = 0\n  let bracketsStackIndex80 = 0\n  let bracketsStackIndex81 = 0\n  let bracketsStackIndex82 = 0\n  let bracketsStackIndex83 = 0\n  let bracketsStackIndex84 = 0\n  let bracketsStackIndex85 = 0\n  let bracketsStackIndex86 = 0\n  let bracketsStackIndex87 = 0\n  let bracketsStackIndex88 = 0\n  let bracketsStackIndex89 = 0\n  let bracketsStackIndex90 = 0\n  let bracketsStackIndex91 = 0\n  let bracketsStackIndex92 = 0\n  let bracketsStackIndex93 = 0\n  let bracketsStackIndex94 = 0\n  let bracketsStackIndex95 = 0\n  let bracketsStackIndex96 = 0\n  let bracketsStackIndex97 = 0\n  let bracketsStackIndex98 = 0\n  let bracketsStackIndex99 = 0\n  let bracketsStackIndex100 = 0\n  let bracketsStackIndex101 = 0\n  let bracketsStackIndex102 = 0\n  let bracketsStackIndex103 = 0\n  let bracketsStackIndex104 = 0\n  let bracketsStackIndex105 = 0\n  let bracketsStackIndex106 = 0\n  let bracketsStackIndex107 = 0\n  let bracketsStackIndex108 = 0\n  let bracketsStackIndex109 = 0\n  let bracketsStackIndex110 = 0\n  let bracketsStackIndex111 = 0\n  let bracketsStackIndex112 = 0\n  let bracketsStackIndex113 = 0\n  let bracketsStackIndex114 = 0\n  let bracketsStackIndex115 = 0\n  let bracketsStackIndex116 = 0\n  let bracketsStackIndex117 = 0\n  let bracketsStackIndex118 = 0\n  let bracketsStackIndex119 = 0\n  let bracketsStackIndex120 = 0\n  let bracketsStackIndex121 = 0\n  let bracketsStackIndex122 = 0\n  let bracketsStackIndex123 = 0\n  let bracketsStackIndex124 = 0\n  let bracketsStackIndex125 = 0\n  let bracketsStackIndex126 = 0\n  let bracketsStackIndex127 = 0\n  let bracketsStackIndex128 = 0\n  let bracketsStackIndex129 = 0\n  let bracketsStackIndex130 = 0\n  let bracketsStackIndex131 = 0\n  let bracketsStackIndex132 = 0\n  let bracketsStackIndex133 = 0\n  let bracketsStackIndex134 = 0\n  let bracketsStackIndex135 = 0\n  let bracketsStackIndex136 = 0\n  let bracketsStackIndex137 = 0\n  let bracketsStackIndex138 = 0\n  let bracketsStackIndex139 = 0\n  let bracketsStackIndex140 = 0\n  let bracketsStackIndex141 = 0\n  let bracketsStackIndex142 = 0\n  let bracketsStackIndex143 = 0\n  let bracketsStackIndex144 = 0\n  let bracketsStackIndex145 = 0\n  let bracketsStackIndex146 = 0\n  let bracketsStackIndex147 = 0\n  let bracketsStackIndex148 = 0\n  let bracketsStackIndex149 = 0\n  let bracketsStackIndex150 = 0\n  let bracketsStackIndex151 = 0\n  let bracketsStackIndex152 = 0\n  let bracketsStackIndex153 = 0\n  let bracketsStackIndex154 = 0\n"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative2 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative3 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative4 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative5 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative6 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative7 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative8 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative9 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative10 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative11 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative12 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative13 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative14 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d[n] = f\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f * (n - i)\n  }\n  return d\n}\n\nconst derivative15 = (xs) => {\n  const len = xs.length\n  const d = new Array(len)\n  const n = len - 1\n  const f = xs[n]\n  d"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  ExamPle:\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"\")\n  0\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowelsCount(\"a\")\n  1\n  >>> vowels"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(i + shift) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverse = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = length - 1; i >= 0; i--) {\n    newDigits.push(digits[i])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits2 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits3 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits4 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits5 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits6 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits7 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits8 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits9 = (x) => {\n  const digits = x.toString().split('')\n  const length = digits.length\n  const newDigits = []\n  for (let i = 0; i < length; i++) {\n    newDigits.push(digits[(length - i) % length])\n  }\n  return newDigits.join('')\n}\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst reverseDigits10 = (x) => {\n  const digits = x.toString().split('')\n  const"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n    const appleCount = n % 5;\n    const orangeCount = n - appleCount;\n    const fruitCount = n - appleCount - orangeCount;\n    return fruitCount;\n};\n\nfruitDistribution(\"5 apples aNd 6 orAnges\", 19);\nfruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3);\nfruitDistribution(\"2 applEs anD 3 oRANGeS\", 100);\nfruitDistribution(\"100 APples aND 1 oRANGeS\",120);\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [smallest, index] = findSmallest(arr)\n  return [smallest, index]\n}\n\nconst findSmallest = (arr) => {\n  const [smallest, index] = [Infinity, -1]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < smallest) {\n      smallest = arr[i]\n      index = i\n    }\n  }\n  return [smallest, index]\n}\n\nexport default pluck\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let result = -1;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (lst[mid] > 0) {\n      j = mid - 1;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (i < lst.length) {\n    result = i;\n  }\n  return result;\n};\n\n/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteGER that is GREATER THAN\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search2 = (lst) => {\n  let result = -1;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (lst[mid] > 0) {\n      j = mid - 1;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (i < lst.length) {\n    result = i;\n  }\n  return result;\n};\n\n/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteGER that is GREATER THAN\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search3 = (lst) => {\n  let result = -1;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (lst[mid] > 0) {\n      j = mid - 1;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (i < lst.length) {\n    result = i;\n  }\n  return result;\n};\n\n/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteGER that is GREATER THAN\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search4 = (lst) => {\n  let result = -1;\n  let i = 0;\n  let j = lst.length - 1;\n  while (i <= j) {\n    let mid = Math.floor((i + j) / 2);\n    if (lst[mid] > 0) {\n      j = mid - 1;\n    } else {\n      i = mid + 1;\n    }\n  }\n  if (i < lst.length) {\n    result = i;\n  }\n  return result;\n};\n\n/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteGER that is GREATER THAN\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search5 = (lst)"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  const sorted = lst.slice()\n  let min = sorted[0]\n  let max = sorted[len - 1]\n  let minIndex = 0\n  let maxIndex = len - 1\n\n  for (let i = 1; i < len; i++) {\n    if (sorted[i] < min) {\n      min = sorted[i]\n      minIndex = i\n    }\n    if (sorted[i] > max) {\n      max = sorted[i]\n      maxIndex = i\n    }\n  }\n\n  const sortedList = []\n  for (let i = minIndex; i <= maxIndex; i++) {\n    sortedList.push(sorted[i])\n  }\n\n  return sortedList\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s1 = (b - a) * (c - a)\n  const s2 = (c - a) * (a - b)\n  const s3 = (a - b) * (b - c)\n  const area = (s1 + s2 + s3) / 2\n  return area.toFixed(2)\n}\n\n/*\n  GivEn thE lengthOfThe Sides Of A TriAngle. retURn The length of\n  tHE longest side of the triangle.\n  Example:\n  triangleLength(3, 4, 5) == 5.00\n  triangleLength(1, 2, 10) == 10.00\n  */\nconst triangleLength = (a, b, c) => {\n  const s1 = (b - a) * (c - a)\n  const s2 = (c - a) * (a - b)\n  const s3 = (a - b) * (b - c)\n  const length = Math.max(s1, s2, s3)\n  return length\n}\n\n/*\n  GivEn thE perimeterOfThe TrianGle. retURn The perimeter of\n  tHE triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15.00\n  trianglePerimeter(1, 2, 10) == 20.00\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const s1 = (b - a) * (c - a)\n  const s2 = (c - a) * (a - b)\n  const s3 = (a - b) * (b - c)\n  const perimeter = s1 + s2 + s3\n  return perimeter\n}\n\n/*\n  GivEn thE areaOfThe TrianGle. retURn The area of\n  tHE triangle.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s1 = (b - a) * (c - a)\n  const s2 = (c - a) * (a - b)\n  const s3 = (a - b) * (b - c)\n  const area = (s1 + s2 + s3) / 2\n  return area.toFixed(2)\n}\n\n/*\n  GivEn thE lengthOfThe Sides Of A TrianglE. retURn The length of\n  tHE longest side of the triangle.\n  Example:\n  triangleLength(3, 4, 5) == 5.00\n  triangleLength(1, 2, 10) == 10.00\n  */\nconst triangleLength = (a, b, c) => {\n  const s1 = (b - a) * (c - a)\n  const s2 = (c - a) * (a - b)\n  const s3 = (a - b) * (b - c)\n  const length = Math.max(s1, s2, s3)\n  return length\n}\n\n/*\n  GivEn thE perimeterOfThe TrianGle. retURn The perimeter of\n  tHE triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15.00\n  trianglePerimeter(1, 2, 10) == 20.00\n  */\nconst trianglePerimeter = (a, b, c) => {\n  const s1 = (b - a) * (c - a)\n  const s2 = (c - a) * (a - b)\n  const s3 = (a - b) * (b - c)\n  const perimeter = s1 + s2 + s3\n  return perimeter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false\n  const max = Math.max(...q)\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && q.every(q => q <= max)\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  if (q.length === 0) return false\n  const max = Math.max(...q)\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && q.every(q => q <= max)\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  if (q.length === 0) return false\n  const max = Math.max(...q)\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && q.every(q => q <= max)\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly4 = (q, w) => {\n  if (q.length === 0) return false\n  const max = Math.max(...q)\n  const sum = q.reduce((a, b) => a + b, 0)\n  return sum <= w && q.every(q => q <= max)\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  let temp = arr[minIndex];\n  arr[minIndex] = arr[0];\n  arr[0] = temp;\n  return min;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2,"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch3 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch4 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch5 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch6 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch7 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch8 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch9 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch10 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  for (let i = 0; i < total; i++) {\n    if (lst1[i] === lst2[i]) {\n      match.push(lst1[i]);\n    }\n  }\n  return match;\n};\n\nconst totalMatch11 = (lst1, lst2) => {\n  const total = lst1.length + lst2.length;\n  const match = [];\n  "}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime2 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime3 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime4 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime5 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime6 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime7 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime8 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  let i = 3\n  while (i * i <= a) {\n    if (a % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime9 = (a) => {\n  if (a % 2 === 0) {\n    return false"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower(x / n, n);\n};\n\nconst isSimplePower2 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower2(x / n, n);\n};\n\nconst isSimplePower3 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower3(x / n, n);\n};\n\nconst isSimplePower4 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower4(x / n, n);\n};\n\nconst isSimplePower5 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower5(x / n, n);\n};\n\nconst isSimplePower6 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower6(x / n, n);\n};\n\nconst isSimplePower7 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower7(x / n, n);\n};\n\nconst isSimplePower8 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower8(x / n, n);\n};\n\nconst isSimplePower9 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower9(x / n, n);\n};\n\nconst isSimplePower10 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower10(x / n, n);\n};\n\nconst isSimplePower11 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower11(x / n, n);\n};\n\nconst isSimplePower12 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower12(x / n, n);\n};\n\nconst isSimplePower13 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower13(x / n, n);\n};\n\nconst isSimplePower14 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower14(x / n, n);\n};\n\nconst isSimplePower15 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower15(x / n, n);\n};\n\nconst isSimplePower16 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower16(x / n, n);\n};\n\nconst isSimplePower17 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower17(x / n, n);\n};\n\nconst isSimplePower18 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower18(x / n, n);\n};\n\nconst isSimplePower19 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower19(x / n, n);\n};\n\nconst isSimplePower20 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower20(x / n, n);\n};\n\nconst isSimplePower21 = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePower21(x / n, n);\n};\n\nconst isSimplePower22 = (x"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (Math.pow(a, 3) === a);\n};\n\nconst ispandigital = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().length === 9);\n};\n\nconst ispalindrome = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_2 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_3 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_4 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_5 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_6 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_7 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_8 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_9 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_10 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_11 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_12 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_13 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_14 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_15 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_16 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_17 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_18 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_19 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic_20 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').reverse().join('') === a.toString());\n};\n\nconst ispalindromic_21 = (a) => {\n  if (a < 0) {\n    return false;\n  }\n  return (a.toString().split('').join('') === a.toString());\n};\n\nconst ispalindromic"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    result += parseInt(num.charAt(i), 16);\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime2 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime3 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime4 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime5 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime6 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime7 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime8 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime9 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime10 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime11 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime12 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime13 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime14 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst isPrime15 = (num) => {\n  let result = false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      result = false"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\"\n  while (decimal > 0) {\n    let digit = decimal % 2\n    decimal = Math.floor(decimal / 2)\n    binary = digit + binary\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  while (binary.length > 0) {\n    let digit = binary.charAt(0)\n    decimal += digit * Math.pow(2, binary.length - 1)\n    binary = binary.substring(1)\n  }\n  return decimal\n}\n\nconst convert = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertBinary = (decimal, binary) => {\n  return binaryToDecimal(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertBinaryToDecimal = (decimal, binary) => {\n  return binaryToDecimal(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimal = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDecimal(binary)\n}\n\nconst convertDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinaryToDecimalToBinary = (decimal, binary) => {\n  return decimalToBinary(decimal) + binaryToDec"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0\n  let len = s.length\n  let sum = 0\n  while (i < len) {\n    sum += s[i]\n    i += 1\n  }\n  return sum % 2 === 0\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade;\n  });\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map(grade => {\n    const letterGrade = grade.toFixed(2);\n    const letterGrade = letterGrade.replace(/\\./g, '');\n    return letterGrade"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0\n  let prime = 0\n  let primeLength = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      primeLength++\n    } else {\n      break\n    }\n    i++\n  }\n  return primeLength\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let i = 0\n  let prime = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  let i = 0\n  let prime = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber2 = (string) => {\n  let i = 0\n  let prime = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber3 = (string) => {\n  let i = 0\n  let prime = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber4 = (string) => {\n  let i = 0\n  let prime = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber5 = (string) => {\n  let i = 0\n  let prime = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber6 = (string) => {\n  let i = 0\n  let prime = 0\n  while (i < string.length) {\n    prime = string.charCodeAt(i)\n    if (prime <= 57) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrimeNumber7 = (string) => {"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds13 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds14 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      count += 1;\n    } else if (i % 2 === 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds15 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count += 1;\n    } else if (i === n) {\n      "}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let result = '';\n  for (let i = 1; i <= N; i++) {\n    result += (Math.pow(2, i - 1) - 1).toString(2);\n  }\n  return result;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      add"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle2 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle3 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle4 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle5 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle6 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle7 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle8 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle9 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle10 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle11 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle12 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle13 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle14 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle15 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle16 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle17 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join('');\n};\n\nconst shuffle18 = (s) => {\n  const s = s.toLowerCase();\n  const r = [];\n  for (let i = 0; i < s.length; i++) {\n    r.push(s[i]);\n  }\n  return r.join"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return row\n}\n\nconst getCol = (lst, x) => {\n  const len = lst.length\n  const col = []\n  for (let i = 0; i < len; i++) {\n    col.push(lst[i][x])\n  }\n  return col\n}\n\nconst getRowCol = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCol(lst, x)]\n}\n\nconst getRowCols = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols(lst, x)]\n}\n\nconst getRowCols2 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols2(lst, x)]\n}\n\nconst getRowCols3 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols3(lst, x)]\n}\n\nconst getRowCols4 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols4(lst, x)]\n}\n\nconst getRowCols5 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols5(lst, x)]\n}\n\nconst getRowCols6 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols6(lst, x)]\n}\n\nconst getRowCols7 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols7(lst, x)]\n}\n\nconst getRowCols8 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols8(lst, x)]\n}\n\nconst getRowCols9 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols9(lst, x)]\n}\n\nconst getRowCols10 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols10(lst, x)]\n}\n\nconst getRowCols11 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols11(lst, x)]\n}\n\nconst getRowCols12 = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    row.push(lst[i][x])\n  }\n  return [row, getCols12(l"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let temp = 0;\n  let temp2 = 0;\n  while (i < j) {\n    while (i < sortedArrayLength && sortedArray[i] < sortedArray[i + 1]) {\n      i++;\n    }\n    while (j > 0 && sortedArray[j] > sortedArray[j - 1]) {\n      j--;\n    }\n    if (i < j) {\n      temp = sortedArray[i];\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = temp;\n      i++;\n      j--;\n    }\n  }\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r + (m * 26) + (n * 26 * 26));\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r - (m * 26) - (n * 26 * 26));\n  }\n  return result;\n};\n\nconst encrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r + (m * 26) + (n * 26 * 26));\n  }\n  return result;\n};\n\nconst decrypt2 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r - (m * 26) - (n * 26 * 26));\n  }\n  return result;\n};\n\nconst encrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r + (m * 26) + (n * 26 * 26));\n  }\n  return result;\n};\n\nconst decrypt3 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r - (m * 26) - (n * 26 * 26));\n  }\n  return result;\n};\n\nconst encrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r + (m * 26) + (n * 26 * 26));\n  }\n  return result;\n};\n\nconst decrypt4 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r - (m * 26) - (n * 26 * 26));\n  }\n  return result;\n};\n\nconst encrypt5 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r + (m * 26) + (n * 26 * 26));\n  }\n  return result;\n};\n\nconst decrypt5 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r - (m * 26) - (n * 26 * 26));\n  }\n  return result;\n};\n\nconst encrypt6 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r + (m * 26) + (n * 26 * 26));\n  }\n  return result;\n};\n\nconst decrypt6 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let c = s.charCodeAt(i);\n    let r = c % 26;\n    let m = c % 26;\n    let n = c % 26;\n    result += String.fromCharCode(r - (m * 26) - (n * 26 * 26));\n  }\n  return result;\n};\n\nconst encrypt7 = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    let"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const min = lst[0]\n  const max = lst[len - 1]\n  let i = 1\n  while (i < len && lst[i] <= min) i++\n  if (i === len) return null\n  let j = len - 1\n  while (j >= 0 && lst[j] >= max) j--\n  if (j === -1) return null\n  return lst[i + j]\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextLargest() that RetURN tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == nUll\n  nextLargest([1, 1]) == 1\n  */\nCOnSt nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  const min = lst[len - 1]\n  let i = 1\n  while (i < len && lst[i] <= max) i++\n  if (i === len) return null\n  let j = len - 1\n  while (j >= 0 && lst[j] >= min) j--\n  if (j === -1) return null\n  return lst[i + j]\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextLargest() that RetURN tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == nUll\n  nextLargest([1, 1]) == 1\n  */\nCOnSt nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  const min = lst[len - 1]\n  let i = 1\n  while (i < len && lst[i] <= max) i++\n  if (i === len) return null\n  let j = len - 1\n  while (j >= 0 && lst[j] >= min) j--\n  if (j === -1) return null\n  return lst[i + j]\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextLargest() that RetURN tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == nUll\n  nextLargest([1, 1]) == 1\n  */\nCOnSt nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  const min = lst[len - 1]\n  let i = 1\n  while (i < len && lst[i] <= max) i++\n  if (i === len) return null\n  let j = len - 1\n  while (j >= 0 && lst[j] >= min) j--\n  if (j === -1) return null\n  return lst[i + j]\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextLargest() that RetURN tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == nUll\n  nextLargest([1, 1]) == 1\n  */\nCOnSt nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst[0]\n  const min = lst[len - 1]\n  let i = 1\n  while (i < len && lst[i] <= max) i++\n  if (i === len) return null\n  let j = len - 1\n  while (j >= 0 && lst[j] >= min) j--\n  if (j === -1) return null\n  return lst[i + j]\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextLargest() that RetURN tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == nUll\n  nextLargest([1, 1]) == 1\n  */\nCOnSt nextLargest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  const max = lst["}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  return numBoredom.length === numWords\n}\n\n/*\n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(' ')\n  const numWords = words.length\n  const numBoredom = words.filter((w) => w.startsWith('i'))\n  "}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt21 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt22 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt23 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt24 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt25 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt26 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt27 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt28 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt29 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt30 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt31 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt32 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt33 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt34 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt35 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt36 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt37 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt38 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt39 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt40 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt41 = (x, y, z) => {\n  return x + y + z === x + y + z;\n};\n\nconst anyInt42 = (x, y, z) => {\n  return x + y + z === x + y + z;\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let encoded = '';\n    let char;\n    for (let i = 0; i < message.length; i++) {\n        char = message[i];\n        if (char.match(/[a-zA-Z]/)) {\n            encoded += char;\n        } else if (char.match(/[A-Z]/)) {\n            encoded += char.toUpperCase();\n        } else if (char.match(/[0-9]/)) {\n            encoded += char.toUpperCase();\n        } else if (char.match(/[^a-zA-Z0-9]/)) {\n            encoded += char.toUpperCase();\n        }\n    }\n    return encoded;\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> decode('TGST')\n  'test'\n  >>> decode('tHKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n    let decoded = '';\n    let char;\n    for (let i = 0; i < message.length; i++) {\n        char = message[i];\n        if (char.match(/[a-zA-Z]/)) {\n            decoded += char;\n        } else if (char.match(/[A-Z]/)) {\n            decoded += char.toUpperCase();\n        } else if (char.match(/[0-9]/)) {\n            decoded += char.toUpperCase();\n        } else if (char.match(/[^a-zA-Z0-9]/)) {\n            decoded += char.toUpperCase();\n        }\n    }\n    return decoded;\n};\n\nmodule.exports = {\n    encode,\n    decode\n};<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [0,81,12,3,1,21];\nconsole.log(skjkasdkd(lst));\n\nconst lst = [0,8,1,2,1,7];\nconsole.log(skjkasdkd(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  let isEmpTy = true\n  for (let i = 0; i < len; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      isEmpTy = false\n      break\n    }\n  }\n  return isEmpTy\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  let isEmpTy = true\n  for (let i = 0; i < len; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      isEmpTy = false\n      break\n    }\n  }\n  return isEmpTy\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  let isEmpTy = true\n  for (let i = 0; i < len; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      isEmpTy = false\n      break\n    }\n  }\n  return isEmpTy\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  let isEmpTy = true\n  for (let i = 0; i < len; i++) {\n    if (typeof dict[keys[i]]!=='string') {\n      isEmpTy = false\n      break\n    }\n  }\n  return isEmpTy\n}\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const len = keys.length\n  let isEmpTy = true\n  for (let i = 0; i < len; i++) {\n    if (typeof dict[keys[i]]!=='string')"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  const result = []\n  for (let i = 0; i < primes.length; i++) {\n    const prime = primes[i]\n    const divisor = prime * prime\n    while (n >= divisor) {\n      result.push(prime)\n      n -= divisor\n    }\n  }\n  return result\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply2 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply3 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply4 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply5 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply6 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply7 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply8 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }\n    a--;\n  }\n  while (b > 0) {\n    result += b;\n    b--;\n  }\n  return result;\n};\n\nconst multiply9 = (a, b) => {\n  if (a === 0) {\n    return 0;\n  }\n  if (b === 0) {\n    return 0;\n  }\n  if (a < 0) {\n    a = -a;\n  }\n  if (b < 0) {\n    b = -b;\n  }\n  let result = 0;\n  while (a > 0) {\n    if (b > 0) {\n      result += a;\n      b--;\n    }"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (punctuation.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countWhitespace = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (whitespace.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countAll = (s) => {\n  return countUpper(s) + countLower(s) + countVowels(s) + countConsonants(s) + countPunctuation(s) + countWhitespace(s);\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countAllUpper = (s) => {\n  return countUpper(s);\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countAllLower = (s) => {\n  return countLower(s);\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countAllVowels = (s) => {\n  return countVowels(s);\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countAllConsonants = (s) => {\n  return countConsonants(s);\n};\n\n/*\n  GivEn a sTring s, CouNt the Numbe"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseInt(value);\n  let closest = num;\n  let diff = Math.abs(num);\n  for (let i = 1; i < 10; i++) {\n    let test = num + i;\n    if (Math.abs(test) < diff) {\n      closest = test;\n      diff = Math.abs(test);\n    }\n  }\n  return closest;\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in lowercase.\n  exAMpLes\n  >>> toLowerCase(\"THIS IS A TEST\")\n  'this is a test'\n  */\nconst toLowerCase = (value) => {\n  return value.toLowerCase();\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in uppercase.\n  exAMpLes\n  >>> toUpperCase(\"THIS IS A TEST\")\n  'THIS IS A TEST'\n  */\nconst toUpperCase = (value) => {\n  return value.toUpperCase();\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in titlecase.\n  exAMpLes\n  >>> toTitleCase(\"THIS IS A TEST\")\n  'This Is A Test'\n  */\nconst toTitleCase = (value) => {\n  return value.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverse(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverse = (value) => {\n  return value.split('').reverse().join('');\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverse(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseWords = (value) => {\n  return value.split(' ').reverse().join(' ');\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverseWords(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseSentence = (value) => {\n  let words = value.split(' ');\n  let reversed = words.reverse();\n  let sentence = reversed.join(' ');\n  return sentence;\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverseSentence(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseSentenceWords = (value) => {\n  let words = value.split(' ');\n  let reversed = words.reverse();\n  let sentence = reversed.join(' ');\n  return sentence;\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverseSentenceWords(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseSentenceWordsWithSpaces = (value) => {\n  let words = value.split(' ');\n  let reversed = words.reverse();\n  let sentence = reversed.join(' ');\n  return sentence;\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverseSentenceWordsWithSpaces(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseSentenceWordsWithSpacesAndPunctuation = (value) => {\n  let words = value.split(' ');\n  let reversed = words.reverse();\n  let sentence = reversed.join(' ');\n  return sentence;\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverseSentenceWordsWithSpacesAndPunctuation(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseSentenceWordsWithSpacesAndPunctuation = (value) => {\n  let words = value.split(' ');\n  let reversed = words.reverse();\n  let sentence = reversed.join(' ');\n  return sentence;\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverseSentenceWordsWithSpacesAndPunctuation(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseSentenceWordsWithSpacesAndPunctuationAndDashes = (value) => {\n  let words = value.split(' ');\n  let reversed = words.reverse();\n  let sentence = reversed.join(' ');\n  return sentence;\n};\n\n/*\n  Create a function that takes a string and returns the string with all the\n  characters in reversed.\n  exAMpLes\n  >>> reverseSentenceWordsWithSpacesAndPunctuationAndDashes(\"THIS IS A TEST\")\n  'test is a THIS'\n  */\nconst reverseSentenceWordsWithSpacesAndPunctuationAndDashes = (value) => {\n  let words = value.split(' ');\n  let reversed = words.reverse();\n  let sentence = reversed.join(' ');\n  return sentence;\n};\n\n/*\n  Create a"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS o"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum19 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst chooseNum20 = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = 1;\n  for (let i = x; i <= y"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = n - m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueDigits2 = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueDigits3 = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueDigits4 = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueDigits5 = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueDigits6 = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueDigits7 = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst uniqueDigits8 = (x) => {\n  let digits = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i.toString());\n    if (digits.indexOf(num) === -1) {\n      digits.push(num);\n    }\n  }\n  return digits;\n};\n\n/*\n  Given a list of IntegErs, return a list of the Digits.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n      result.push(arr[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\nconst byLength2 = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n      result.push(arr[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\nconst byLength3 = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n      result.push(arr[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\nconst byLength4 = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n      result.push(arr[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\nconst byLength5 = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n      result.push(arr[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\nconst byLength6 = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n      result.push(arr[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\nconst byLength7 = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n      result.push(arr[i])\n      i++\n    } else {\n      j++\n    }\n  }\n  return result\n}\n\nconst byLength8 = (arr) => {\n  const arrLength = arr.length\n  const reverseArr = arr.slice().reverse()\n  const reverseArrLength = reverseArr.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arrLength) {\n    if (arr[i] === reverseArr[j]) {\n      result.push(arr[i])\n      j++\n    } else if (arr[i] < reverseArr[j]) {\n"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (n) => {\n    return (n === 1)? 1 : n * factorial(n - 1);\n  };\n  const sum = (n) => {\n    return n * (n + 1) / 2;\n  };\n  const isEven = (n) => {\n    return n % 2 === 0;\n  };\n  const isOdd = (n) => {\n    return n % 2!== 0;\n  };\n  const sumOfEven = (n) => {\n    return sum(n) - sum(n - isEven(n));\n  };\n  const sumOfOdd = (n) => {\n    return sum(n) - sum(n - isOdd(n));\n  };\n  return [factorial(n), sum(n), sumOfEven(n), sumOfOdd(n)];\n};\n\nconst result = f(5);\n\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0;\n  let even = 0;\n  let i = 1;\n  while (i <= n) {\n    let j = n - i + 1;\n    while (j <= n) {\n      if (isPalindrome(i, j)) {\n        if (isEven(i)) {\n          even++;\n        } else {\n          odd++;\n        }\n      }\n      j++;\n    }\n    i++;\n  }\n  return (odd, even);\n};\n\nconst isPalindrome = (a, b) => {\n  return a === b;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst test = [\n  [3, (1, 2)],\n  [12, (4, 6)],\n];\n\nfor (let [n, expected] of test) {\n  console.log(`${n} -> ${expected}`);\n  console.log(`${evenOddPalindrome(n)}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\n/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\n/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums17 = (arr)"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let flag = 0\n  let temp = 0\n  let temp1 = 0\n  let temp2 = 0\n  let temp3 = 0\n  let temp4 = 0\n  let temp5 = 0\n  let temp6 = 0\n  let temp7 = 0\n  let temp8 = 0\n  let temp9 = 0\n  let temp10 = 0\n  let temp11 = 0\n  let temp12 = 0\n  let temp13 = 0\n  let temp14 = 0\n  let temp15 = 0\n  let temp16 = 0\n  let temp17 = 0\n  let temp18 = 0\n  let temp19 = 0\n  let temp20 = 0\n  let temp21 = 0\n  let temp22 = 0\n  let temp23 = 0\n  let temp24 = 0\n  let temp25 = 0\n  let temp26 = 0\n  let temp27 = 0\n  let temp28 = 0\n  let temp29 = 0\n  let temp30 = 0\n  let temp31 = 0\n  let temp32 = 0\n  let temp33 = 0\n  let temp34 = 0\n  let temp35 = 0\n  let temp36 = 0\n  let temp37 = 0\n  let temp38 = 0\n  let temp39 = 0\n  let temp40 = 0\n  let temp41 = 0\n  let temp42 = 0\n  let temp43 = 0\n  let temp44 = 0\n  let temp45 = 0\n  let temp46 = 0\n  let temp47 = 0\n  let temp48 = 0\n  let temp49 = 0\n  let temp50 = 0\n  let temp51 = 0\n  let temp52 = 0\n  let temp53 = 0\n  let temp54 = 0\n  let temp55 = 0\n  let temp56 = 0\n  let temp57 = 0\n  let temp58 = 0\n  let temp59 = 0\n  let temp60 = 0\n  let temp61 = 0\n  let temp62 = 0\n  let temp63 = 0\n  let temp64 = 0\n  let temp65 = 0\n  let temp66 = 0\n  let temp67 = 0\n  let temp68 = 0\n  let temp69 = 0\n  let temp70 = 0\n  let temp71 = 0\n  let temp72 = 0\n  let temp73 = 0\n  let temp74 = 0\n  let temp75 = 0\n  let temp76 = 0\n  let temp77 = 0\n  let temp78 = 0\n  let temp79 = 0\n  let temp80 = 0\n  let temp81 = 0\n  let temp82 = 0\n  let temp83 = 0\n  let temp84 = 0\n  let temp85 = 0\n  let temp86 = 0\n  let temp87 = 0\n  let temp88 = 0\n  let temp89 = 0\n  let temp90 = 0\n  let temp91 = 0\n  let temp92 = 0\n  let temp93 = 0\n  let temp94 = 0\n  let temp95 = 0\n  let temp96 = 0\n  let temp97 = 0\n  let temp98 = 0\n  let temp99 = 0\n  let temp100 = 0\n  let temp101 = 0\n  let temp102 = 0\n  let temp103 = 0\n  let temp104 = 0\n  let temp105 = 0\n  let temp106 = 0\n  let temp107 = 0\n  let temp108 = 0\n  let temp109 = 0\n  let temp110 = 0\n  let temp111 = 0\n  let temp112 = 0\n  let temp113 = 0\n  let temp114 = 0\n  let temp115 = 0\n  let temp116 = 0\n  let temp117 = 0\n  let temp118 = 0\n  let temp119 = 0\n  let temp120 = 0\n  let temp121 = 0\n  let temp122 = 0\n  let temp123 = 0\n  let temp124 = 0\n  let temp125 = 0\n  let temp126 = 0\n  let temp127 = 0\n  let temp128 = 0\n  let temp129 = 0\n  let temp130 = 0\n  let temp131 = 0\n  let temp132 = 0\n  let temp133 = 0\n  let temp134 = 0\n  let temp135 = 0\n  let temp136 = 0\n  let temp137 = 0\n  let temp138 = 0\n  let temp139 = 0\n  let temp140 = 0\n  let temp141 = 0\n  let temp142 = 0\n  let temp143 = 0\n  let temp144 = 0\n  let temp145 = 0\n  let temp146 = 0\n  let"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  if (len1!== len2) {\n    return 'NO';\n  }\n  const i = 0;\n  const j = 0;\n  const k = 0;\n  while (i < len1 && j < len2) {\n    if (lst1[i] < lst2[j]) {\n      lst1[k] = lst1[i];\n      i++;\n    } else if (lst1[i] > lst2[j]) {\n      lst1[k] = lst2[j];\n      j++;\n    } else {\n      lst1[k] = lst1[i];\n      i++;\n      j++;\n    }\n    k++;\n  }\n  while (i < len1) {\n    lst1[k] = lst1[i];\n    i++;\n    k++;\n  }\n  while (j < len2) {\n    lst1[k] = lst2[j];\n    j++;\n    k++;\n  }\n  return 'YES';\n};\n\nexports.exchange = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testString = test.toLowerCase()\n  const testStringLength = testString.length\n  const testStringArray = testString.split('')\n  const testStringArrayLength = testStringArray.length\n  const testStringArrayLengthMinusOne = testStringArrayLength - 1\n  const testStringArrayLengthMinusTwo = testStringArrayLength - 2\n  const testStringArrayLengthMinusThree = testStringArrayLength - 3\n  const testStringArrayLengthMinusFour = testStringArrayLength - 4\n  const testStringArrayLengthMinusFive = testStringArrayLength - 5\n  const testStringArrayLengthMinusSix = testStringArrayLength - 6\n  const testStringArrayLengthMinusSeven = testStringArrayLength - 7\n  const testStringArrayLengthMinusEight = testStringArrayLength - 8\n  const testStringArrayLengthMinusNine = testStringArrayLength - 9\n  const testStringArrayLengthMinusTen = testStringArrayLength - 10\n  const testStringArrayLengthMinusEleven = testStringArrayLength - 11\n  const testStringArrayLengthMinusTwelve = testStringArrayLength - 12\n  const testStringArrayLengthMinusThirteen = testStringArrayLength - 13\n  const testStringArrayLengthMinusFourteen = testStringArrayLength - 14\n  const testStringArrayLengthMinusFifteen = testStringArrayLength - 15\n  const testStringArrayLengthMinusSixteen = testStringArrayLength - 16\n  const testStringArrayLengthMinusSeventeen = testStringArrayLength - 17\n  const testStringArrayLengthMinusEighteen = testStringArrayLength - 18\n  const testStringArrayLengthMinusNineteen = testStringArrayLength - 19\n  const testStringArrayLengthMinusTwenty = testStringArrayLength - 20\n  const testStringArrayLengthMinusTwentyOne = testStringArrayLength - 21\n  const testStringArrayLengthMinusTwentyTwo = testStringArrayLength - 22\n  const testStringArrayLengthMinusTwentyThree = testStringArrayLength - 23\n  const testStringArrayLengthMinusTwentyFour = testStringArrayLength - 24\n  const testStringArrayLengthMinusTwentyFive = testStringArrayLength - 25\n  const testStringArrayLengthMinusTwentySix = testStringArrayLength - 26\n  const testStringArrayLengthMinusTwentySeven = testStringArrayLength - 27\n  const testStringArrayLengthMinusTwentyEight = testStringArrayLength - 28\n  const testStringArrayLengthMinusTwentyNine = testStringArrayLength - 29\n  const testStringArrayLengthMinusThirty = testStringArrayLength - 30\n  const testStringArrayLengthMinusThirtyOne = testStringArrayLength - 31\n  const testStringArrayLengthMinusThirtyTwo = testStringArrayLength - 32\n  const testStringArrayLengthMinusThirtyThree = testStringArrayLength - 33\n  const testStringArrayLengthMinusThirtyFour = testStringArrayLength - 34\n  const testStringArrayLengthMinusThirtyFive = testStringArrayLength - 35\n  const testStringArrayLengthMinusThirtySix = testStringArrayLength - 36\n  const testStringArrayLengthMinusThirtySeven = testStringArrayLength - 37\n  const testStringArrayLengthMinusThirtyEight = testStringArrayLength - 38\n  const testStringArrayLengthMinusThirtyNine = testStringArrayLength - 39\n  const testStringArrayLengthMinusFourty = testStringArrayLength - 40\n  const testStringArrayLengthMinusFourtyOne = testStringArrayLength - 41\n  const testStringArrayLengthMinusFourtyTwo = testStringArrayLength - 42\n  const testStringArrayLengthMinusFourtyThree = testStringArrayLength - 43\n  const testStringArrayLengthMinusFourtyFour = testStringArrayLength - 44\n  const testStringArrayLengthMinusFourtyFive = testStringArrayLength - 45\n  const testStringArrayLengthMinusFourtySix = testStringArrayLength - 46\n  const testStringArrayLengthMinusFourtySeven = testStringArrayLength - 47\n  const testStringArrayLengthMinusFourtyEight = testStringArrayLength - 48\n  const testStringArrayLengthMinusFourtyNine = testStringArrayLength - 49\n  const testStringArrayLengthMinusFifty = testStringArrayLength - 50\n  const testStringArrayLengthMinusFiftyOne = testStringArrayLength - 51\n  const testStringArrayLengthMinusFiftyTwo = testStringArrayLength - 52\n  const testStringArrayLengthMinusFiftyThree = testStringArrayLength - 53\n  const testStringArrayLengthMinusFiftyFour = testStringArrayLength - 54\n  const testStringArrayLengthMinusFiftyFive = testStringArrayLength - 55\n  const testStringArrayLengthMinusFiftySix = testStringArrayLength - 56\n  const testStringArrayLengthMinusFiftySeven = testStringArrayLength - 57\n  const testStringArrayLengthMinusFiftyEight = testStringArrayLength - 58\n  const testStringArrayLengthMinusFiftyNine = testStringArrayLength - 59\n  const testStringArrayLengthMinusSixty = testStringArrayLength - 60\n  const testStringArrayLengthMinusSixtyOne = testStringArrayLength - 61\n  const testStringArrayLengthMinusSixtyTwo = testStringArrayLength - 62\n  const testStringArrayLengthMinusSixtyThree = testStringArrayLength - 63\n  const testStringArrayLengthMinusSixtyFour = testStringArrayLength - 64\n  const testStringArrayLengthMinusSixtyFive = testStringArrayLength - 65\n  const testStringArrayLengthMinusSixtySix = testStringArrayLength - 66\n  const testStringArrayLengthMinusSixtySeven = testStringArrayLength - 67\n  const testStringArrayLengthMinusSixtyEight = testStringArrayLength - 68\n  const testStringArrayLengthMinusSixtyNine = testStringArrayLength - 69\n  const testString"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  let flag = false\n  while (i < len) {\n    if (s[i] === c[j]) {\n      if (j === c.length - 1) {\n        flag = true\n      }\n      j++\n    } else {\n      result.push(s[i])\n      i++\n    }\n  }\n  return result, flag\n}\n\nconst isPalindrome = (s) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nconst main = () => {\n  const s = \"abcdef\"\n  const c = \"ae\"\n  const [result, flag] = reverseDelete(s, c)\n  console.log(result)\n  console.log(flag)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = [];\n  for (let i = 0; i < lst.length; i++) {\n    const str = lst[i];\n    const strLen = str.length;\n    const odd = [];\n    for (let j = 0; j < strLen; j++) {\n      if (str[j] % 2 === 1) {\n        odd.push(str[j]);\n      }\n    }\n    count.push(odd.length + 'n the str' + (strLen + 1) +'of the'+ (i + 1) + 'put.');\n  }\n  return count;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] === 0) {\n      continue;\n    }\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < minSum) {\n        minSum = sum;\n        minIndex = j;\n      }\n    }\n  }\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let res = 0;\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 1) {\n                res += Math.min(capacity, grid[i][j]);\n            }\n        }\n    }\n    return res;\n};\n\nconst main = () => {\n    let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n    let capacity = 1;\n    console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArray = arr.slice().sort((a, b) => a - b);\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length >= n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\n  Given a string s, return a list of all the words in the string.\n  A word is defined as a string of non-space characters.\n  Example:\n  Given s = \"Hello World\",\n  return [\"Hello\", \"World\"].\n  */\nconst words = (s) => {\n  const words = s.split(\" \")\n  return words\n}\n\n/*\n  Given a string s, return the number of words in the string.\n  A word is defined as a string of non-space characters.\n  Example:\n  Given s = \"Hello World\",\n  return 5.\n  */\nconst countWords = (s) => {\n  const words = s.split(\" \")\n  return words.length\n}\n\n/*\n  Given a string s, return the number of characters in the string.\n  A space is counted as a character.\n  Example:\n  Given s = \"Hello World\",\n  return 15.\n  */\nconst countCharacters = (s) => {\n  const words = s.split(\" \")\n  return words.reduce((a, b) => a + b.length, 0)\n}\n\n/*\n  Given a string s, return the number of words in the string.\n  A word is defined as a string of non-space characters.\n  Example:\n  Given s = \"Hello World\",\n  return 2.\n  */\nconst countWordsInString = (s) => {\n  const words = s.split(\" \")\n  return words.length\n}\n\n/*\n  Given a string s, return the number of characters in the string.\n  A space is counted as a character.\n  Example:\n  Given s = \"Hello World\",\n  return 11.\n  */\nconst countCharactersInString = (s) => {\n  const words = s.split(\" \")\n  return words.reduce((a, b) => a + b.length, 0)\n}\n\n/*\n  Given a string s, return the number of words in the string.\n  A word is defined as a string of non-space characters.\n  Example:\n  Given s = \"Hello World\",\n  return 2.\n  */\nconst countWordsInString = (s) => {\n  const words = s.split(\" \")\n  return words.length\n}\n\n/*\n  Given a string s, return the number of characters in the string.\n  A space is counted as a character.\n  Example:\n  Given s = \"Hello World\",\n  return 11.\n  */\nconst countCharactersInString = (s) => {\n  const words = s.split(\" \")\n  return words.reduce((a, b) => a + b.length, 0)\n}\n\n/*\n  Given a string s, return the number of words in the string.\n  A word is defined as a string of non-space characters.\n  Example:\n  Given s = \"Hello World\",\n  return 2.\n  */\nconst countWordsInString = (s) => {\n  const words = s.split(\" \")\n  return words.length\n}\n\n/*\n  Given a string s, return the number of characters in the string.\n  A space is counted as a character.\n  Example:\n  Given s = \"Hello World\",\n  return 11.\n  */\nconst countCharactersInString = (s) => {\n  const words = s.split(\" \")\n  return words.reduce((a, b) => a + b.length, 0)\n}\n\n/*\n  Given a string s, return the number of words in the string.\n  A word is defined as a string of non-space characters.\n  Example:\n  Given s = \"Hello World\",\n  return 2.\n  */\nconst countWordsInString = (s) => {\n  const words = s.split(\" \")\n  return words.length\n}\n\n/*\n  Given a string s, return the number of characters in the string.\n  A space is counted as a character.\n  Example:\n  Given s = \"Hello World\",\n  return 11.\n  */\nconst countCharactersInString = (s) => {\n  const words = s.split(\" \")\n  return words.reduce((a, b) => a + b.length, 0)\n}\n\n/*\n  Given a string s, return the number of words in the string.\n  A word is defined as a string of non-space characters.\n  Example:\n  Given s = \"Hello World\",\n  return 2.\n  */\nconst countWordsInString = (s) => {\n  const words = s.split(\" \")\n  return words.length\n}\n\n/*\n  Given a string s, return the number of characters in the string.\n  A space is counted as a character.\n  Example:\n  Given s = \"Hello World\",\n  return 11.\n  */\nconst countCharactersInString = (s) => {\n  const words = s.split(\" \")\n  return words.reduce((a, b) => a + b.length, 0)\n}\n\n/*\n  Given a string s, return the number of words in the string.\n  A word is defined as a"}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = wordStart.toLowerCase()\n  const vowelEnd = wordEnd.toLowerCase()\n  const vowel = vowels.find(v => v.toLowerCase() === vowelStart)\n  if (vowel) {\n    return vowel\n  }\n  const vowel2 = vowels.find(v => v.toLowerCase() === vowelEnd)\n  if (vowel2) {\n    return vowel2\n  }\n  return ''\n}\n\n/*\n  getClosestVowel(\"yogurt\") ==> \"y\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = wordStart.toLowerCase()\n  const vowelEnd = wordEnd.toLowerCase()\n  const vowel = vowels.find(v => v.toLowerCase() === vowelStart)\n  if (vowel) {\n    return vowel\n  }\n  const vowel2 = vowels.find(v => v.toLowerCase() === vowelEnd)\n  if (vowel2) {\n    return vowel2\n  }\n  return ''\n}\n\nconst getClosestVowel3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = wordStart.toLowerCase()\n  const vowelEnd = wordEnd.toLowerCase()\n  const vowel = vowels.find(v => v.toLowerCase() === vowelStart)\n  if (vowel) {\n    return vowel\n  }\n  const vowel2 = vowels.find(v => v.toLowerCase() === vowelEnd)\n  if (vowel2) {\n    return vowel2\n  }\n  return ''\n}\n\nconst getClosestVowel4 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = wordStart.toLowerCase()\n  const vowelEnd = wordEnd.toLowerCase()\n  const vowel = vowels.find(v => v.toLowerCase() === vowelStart)\n  if (vowel) {\n    return vowel\n  }\n  const vowel2 = vowels.find(v => v.toLowerCase() === vowelEnd)\n  if (vowel2) {\n    return vowel2\n  }\n  return ''\n}\n\nconst getClosestVowel5 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = wordStart.toLowerCase()\n  const vowelEnd = wordEnd.toLowerCase()\n  const vowel = vowels.find(v => v.toLowerCase() === vowelStart)\n  if (vowel) {\n    return vowel\n  }\n  const vowel2 = vowels.find(v => v.toLowerCase() === vowelEnd)\n  if (vowel2) {\n    return vowel2\n  }\n  return ''\n}\n\nconst getClosestVowel6 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y']\n  const wordLength = word.length\n  const wordStart = word.charAt(0)\n  const wordEnd = word.charAt(wordLength - 1)\n  const vowelStart = wordStart.toLowerCase()\n  const vowelEnd = wordEnd.toLowerCase()\n  const vowel = vowels.find(v => v.toLowerCase() === vowelStart)\n  if (vowel) {\n    return vowel\n  }\n  const vowel2 = vowels.find(v => v.toLowerCase() === vowelEnd)\n  if (vowel2) {\n    return vowel2"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length\n  if (len === 0) return 'No'\n  if (len === 1) return 'Yes'\n  if (lst[0] === '(' && lst[len - 1] === ')') return 'Yes'\n  if (lst[0] === ')' && lst[len - 1] === '(') return 'No'\n  return 'No'\n}\n\n/*\n  matchParens(['()', ')']) == 'No'\n  matchParens(['(', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'No'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == 'Yes'\n  matchParens(['(', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')', ')']) == '"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let result = [];\n    let max = arr[0];\n    let index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            index = i;\n        }\n    }\n    for (let i = 0; i < k; i++) {\n        result.push(arr[index]);\n        index = index + 1;\n    }\n    return result;\n};\n\nconst test = () => {\n    let arr = [-3, -4, 5];\n    let k = 3;\n    console.log(maximum(arr, k));\n    arr = [4, -4, 4];\n    k = 2;\n    console.log(maximum(arr, k));\n    arr = [-3, 2, 1, 2, -1, -2, 1];\n    k = 1;\n    console.log(maximum(arr, k));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements20 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements21 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements22 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements23 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements24 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements25 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements26 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  "}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) return [1];\n    const odd = getOddCollatz(n / 2);\n    const even = getOddCollatz(n - n / 2);\n    const oddLen = odd.length;\n    const evenLen = even.length;\n    const oddList = odd.concat(even);\n    const oddListLen = oddList.length;\n    const oddListSorted = oddList.sort((a, b) => a - b);\n    const oddListSortedLen = oddListSorted.length;\n    const oddListSortedSorted = oddListSorted.sort((a, b) => b - a);\n    const oddListSortedSortedLen = oddListSortedSorted.length;\n    const oddListSortedSortedSorted = oddListSortedSorted.sort((a, b) => a - b);\n    const oddListSortedSortedSortedLen = oddListSortedSortedSorted.length;\n    const oddListSortedSortedSortedSorted = oddListSortedSortedSorted.sort((a, b) => b - a);\n    const oddListSortedSortedSortedSortedLen = oddListSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSorted = oddListSortedSortedSortedSorted.sort((a, b) => a - b);\n    const oddListSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSorted.sort((a, b) => b - a);\n    const oddListSortedSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSortedSorted.sort((a, b) => a - b);\n    const oddListSortedSortedSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => b - a);\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => a - b);\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => b - a);\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => a - b);\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => a - b);\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedLen = oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.length;\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted = oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.sort((a, b) => a - b);\n    const oddListSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedLen = oddListSortedS"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayLengthMinusOne = dateArrayLength - 1;\n  const dateArrayLengthMinusTwo = dateArrayLength - 2;\n  const dateArrayLengthMinusThree = dateArrayLength - 3;\n  const dateArrayLengthMinusFour = dateArrayLength - 4;\n  const dateArrayLengthMinusFive = dateArrayLength - 5;\n  const dateArrayLengthMinusSix = dateArrayLength - 6;\n  const dateArrayLengthMinusSeven = dateArrayLength - 7;\n  const dateArrayLengthMinusEight = dateArrayLength - 8;\n  const dateArrayLengthMinusNine = dateArrayLength - 9;\n  const dateArrayLengthMinusTen = dateArrayLength - 10;\n  const dateArrayLengthMinusEleven = dateArrayLength - 11;\n  const dateArrayLengthMinusTwelve = dateArrayLength - 12;\n  const dateArrayLengthMinusThirteen = dateArrayLength - 13;\n  const dateArrayLengthMinusFourteen = dateArrayLength - 14;\n  const dateArrayLengthMinusFifteen = dateArrayLength - 15;\n  const dateArrayLengthMinusSixteen = dateArrayLength - 16;\n  const dateArrayLengthMinusSeventeen = dateArrayLength - 17;\n  const dateArrayLengthMinusEighteen = dateArrayLength - 18;\n  const dateArrayLengthMinusNineteen = dateArrayLength - 19;\n  const dateArrayLengthMinusTwenty = dateArrayLength - 20;\n  const dateArrayLengthMinusTwentyOne = dateArrayLength - 21;\n  const dateArrayLengthMinusTwentyTwo = dateArrayLength - 22;\n  const dateArrayLengthMinusTwentyThree = dateArrayLength - 23;\n  const dateArrayLengthMinusTwentyFour = dateArrayLength - 24;\n  const dateArrayLengthMinusTwentyFive = dateArrayLength - 25;\n  const dateArrayLengthMinusTwentySix = dateArrayLength - 26;\n  const dateArrayLengthMinusTwentySeven = dateArrayLength - 27;\n  const dateArrayLengthMinusTwentyEight = dateArrayLength - 28;\n  const dateArrayLengthMinusTwentyNine = dateArrayLength - 29;\n  const dateArrayLengthMinusThirty = dateArrayLength - 30;\n  const dateArrayLengthMinusThirtyOne = dateArrayLength - 31;\n  const dateArrayLengthMinusThirtyTwo = dateArrayLength - 32;\n  const dateArrayLengthMinusThirtyThree = dateArrayLength - 33;\n  const dateArrayLengthMinusThirtyFour = dateArrayLength - 34;\n  const dateArrayLengthMinusThirtyFive = dateArrayLength - 35;\n  const dateArrayLengthMinusThirtySix = dateArrayLength - 36;\n  const dateArrayLengthMinusThirtySeven = dateArrayLength - 37;\n  const dateArrayLengthMinusThirtyEight = dateArrayLength - 38;\n  const dateArrayLengthMinusThirtyNine = dateArrayLength - 39;\n  const dateArrayLengthMinusForty = dateArrayLength - 40;\n  const dateArrayLengthMinusFortyOne = dateArrayLength - 41;\n  const dateArrayLengthMinusFortyTwo = dateArrayLength - 42;\n  const dateArrayLengthMinusFortyThree = dateArrayLength - 43;\n  const dateArrayLengthMinusFortyFour = dateArrayLength - 44;\n  const dateArrayLengthMinusFortyFive = dateArrayLength - 45;\n  const dateArrayLengthMinusFortySix = dateArrayLength - 46;\n  const dateArrayLengthMinusFortySeven = dateArrayLength - 47;\n  const dateArrayLengthMinusFortyEight = dateArrayLength - 48;\n  const dateArrayLengthMinusFortyNine = dateArrayLength - 49;\n  const dateArrayLengthMinusFifty = dateArrayLength - 50;\n  const dateArrayLengthMinusFiftyOne = dateArrayLength - 51;\n  const dateArrayLengthMinusFiftyTwo = dateArrayLength - 52;\n  const dateArrayLengthMinusFiftyThree = dateArrayLength - 53;\n  const dateArrayLengthMinusFiftyFour = dateArrayLength - 54;\n  const dateArrayLengthMinusFiftyFive = dateArrayLength - 55;\n  const dateArrayLengthMinusFiftySix = dateArrayLength - 56;\n  const dateArrayLengthMinusFiftySeven = dateArrayLength - 57;\n  const dateArrayLengthMinusFiftyEight = dateArrayLength - 58;\n  const dateArrayLengthMinusFiftyNine = dateArrayLength - 59;\n  const dateArrayLengthMinusSixty = dateArrayLength - 60;\n  const dateArrayLengthMinusSixtyOne = dateArrayLength - 61;\n  const dateArrayLengthMinusSixtyTwo = dateArrayLength - 62;\n  const dateArrayLengthMinusSixtyThree = dateArrayLength - 63;\n  const dateArrayLengthMinusSixtyFour = dateArrayLength - 64;\n  const dateArrayLengthMinusSixtyFive = dateArrayLength - 65;\n  const dateArrayLengthMinusSixtySix = dateArrayLength - 66;\n  const dateArrayLengthMinusSixtySeven = dateArrayLength - 67;\n  const dateArray"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const wordsLengthWithoutWhitespaces = wordsLength - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommas = wordsLengthWithoutWhitespaces - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriods = wordsLengthWithoutWhitespacesWithoutCommas - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriods - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotes - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotes - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotes - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotes - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotes - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotes - 1;\n  const wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotes = wordsLengthWithoutWhitespacesWithoutCommasWithoutPeriodsWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithoutQuotesWithout"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let k = 0\n  let num = 0\n  let isSorted = true\n  while (i < len && j < len) {\n    if (lst[i] < lst[j]) {\n      i++\n    } else if (lst[i] > lst[j]) {\n      j++\n    } else {\n      num = lst[i]\n      i++\n      j++\n      k++\n      while (k < len && lst[k] === num) {\n        k++\n      }\n      if (k === len) {\n        isSorted = false\n        break\n      }\n    }\n  }\n  return isSorted\n}\n\nmodule.exports = isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n  const length = end - start;\n  if (length === 0) {\n    return \"NO\";\n  }\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (isPrime(length)) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.sign(arr[i]);\n  }\n  return sum;\n};\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const nk = n * k\n  const nk2 = nk * 2\n  const nk3 = nk * 3\n  const nk4 = nk * 4\n  const nk5 = nk * 5\n  const nk6 = nk * 6\n  const nk7 = nk * 7\n  const nk8 = nk * 8\n  const nk9 = nk * 9\n  const nk10 = nk * 10\n  const nk11 = nk * 11\n  const nk12 = nk * 12\n  const nk13 = nk * 13\n  const nk14 = nk * 14\n  const nk15 = nk * 15\n  const nk16 = nk * 16\n  const nk17 = nk * 17\n  const nk18 = nk * 18\n  const nk19 = nk * 19\n  const nk20 = nk * 20\n  const nk21 = nk * 21\n  const nk22 = nk * 22\n  const nk23 = nk * 23\n  const nk24 = nk * 24\n  const nk25 = nk * 25\n  const nk26 = nk * 26\n  const nk27 = nk * 27\n  const nk28 = nk * 28\n  const nk29 = nk * 29\n  const nk30 = nk * 30\n  const nk31 = nk * 31\n  const nk32 = nk * 32\n  const nk33 = nk * 33\n  const nk34 = nk * 34\n  const nk35 = nk * 35\n  const nk36 = nk * 36\n  const nk37 = nk * 37\n  const nk38 = nk * 38\n  const nk39 = nk * 39\n  const nk40 = nk * 40\n  const nk41 = nk * 41\n  const nk42 = nk * 42\n  const nk43 = nk * 43\n  const nk44 = nk * 44\n  const nk45 = nk * 45\n  const nk46 = nk * 46\n  const nk47 = nk * 47\n  const nk48 = nk * 48\n  const nk49 = nk * 49\n  const nk50 = nk * 50\n  const nk51 = nk * 51\n  const nk52 = nk * 52\n  const nk53 = nk * 53\n  const nk54 = nk * 54\n  const nk55 = nk * 55\n  const nk56 = nk * 56\n  const nk57 = nk * 57\n  const nk58 = nk * 58\n  const nk59 = nk * 59\n  const nk60 = nk * 60\n  const nk61 = nk * 61\n  const nk62 = nk * 62\n  const nk63 = nk * 63\n  const nk64 = nk * 64\n  const nk65 = nk * 65\n  const nk66 = nk * 66\n  const nk67 = nk * 67\n  const nk68 = nk * 68\n  const nk69 = nk * 69\n  const nk70 = nk * 70\n  const nk71 = nk * 71\n  const nk72 = nk * 72\n  const nk73 = nk * 73\n  const nk74 = nk * 74\n  const nk75 = nk * 75\n  const nk76 = nk * 76\n  const nk77 = nk * 77\n  const nk78 = nk * 78\n  const nk79 = nk * 79\n  const nk80 = nk * 80\n  const nk81 = n"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  let i = 1\n  while (i <= n) {\n    result.push(1)\n    let j = 1\n    while (j <= i) {\n      result.push(result[j - 1] + result[j - 2] + result[j + 1])\n      j++\n    }\n    i++\n  }\n  return result\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let odd = n % 2\n  let even = n - odd\n  return odd? even : odd\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n / 10\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 10\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 100\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 1000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 10000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 100000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 1000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 10000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 100000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 1000000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 100000000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 1000000000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 10000000000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\nconst digits = (n) => {\n  let count = 0\n  while (n) {\n    n = n % 100000000000000\n    count++\n  }\n  return count\n}\n\n/*\n  Given a number, return the number of digits in the number.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 1\n  digits(235) == 3\n  */\n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n  const len = string.length\n  const stack = []\n  let i = 0\n  while (i < len) {\n    if (string[i] === '[') {\n      stack.push(string[i])\n      i++\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n      i++\n    } else if (string[i] === '[' && stack.length === 0) {\n      return false\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    } else if (string[i] === '[' && stack.length === 1) {\n      return false\n    }\n    i++\n  }\n  return stack.length === 0\n}\n\n/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested2 = (string) => {\n  const len = string.length\n  const stack = []\n  let i = 0\n  while (i < len) {\n    if (string[i] === '[') {\n      stack.push(string[i])\n      i++\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n      i++\n    } else if (string[i] === '[' && stack.length === 1) {\n      return false\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    } else if (string[i] === '[' && stack.length === 2) {\n      return false\n    }\n    i++\n  }\n  return stack.length === 0\n}\n\n/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONST isNested3 = (string) => {\n  const len = string.length\n  const stack = []\n  let i = 0\n  while (i < len) {\n    if (string[i] === '[') {\n      stack.push(string[i])\n      i++\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n      i++\n    } else if (string[i] === '[' && stack.length === 1) {\n      return false\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    } else if (string[i] === '[' && stack.length === 2) {\n      return false\n    }\n    i++\n  }\n  return stack.length === 0\n}\n\n/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONST isNested4 = (string) => {\n  const len = string.length\n  const stack = []\n  let i = 0\n  while (i < len) {\n    if (string[i] === '[') {\n      stack.push(string[i])\n      i++\n    } else if (string[i] === ']')"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum);\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  const isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\n/*\n  Create a function that returns true if the given string is a\n  valid email address.\n  Examples:\n  isValidEmailAddress(\"\") ➞ false\n  isValidEmailAddress(\"a\") ➞ false\n  isValidEmailAddress(\"a@b.com\") ➞ true\n  isValidEmailAddress(\"a@b.c\") ➞ false\n  isValidEmailAddress(\"a@b.c.d\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.A\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.A.B\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.A.B.C\") ➞ false\n  isValidEmailAddress(\"a@b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z.A.B.C.D\") ➞ false\n"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) return -1\n  let max = arr[0]\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] > max) max = arr[i]\n  }\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] === max) return i\n  }\n  return -1\n}\n\n/*\n  Given an array of integers, return the index of the smallest element in the\n  array. If there is no smallest element, return -1.\n\n  Examples:\n  smallestIndex([1,2,3,4,5]) = 1\n  smallestIndex([1,2,3,4,5,6]) = -1\n  smallestIndex([1,2,3,4,5,6,7]) = 3\n  smallestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst smallestIndex = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) return -1\n  let min = arr[0]\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] < min) min = arr[i]\n  }\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] === min) return i\n  }\n  return -1\n}\n\n/*\n  Given an array of integers, return the index of the largest element in the\n  array. If there is no largest element, return -1.\n\n  Examples:\n  largestIndex([1,2,3,4,5]) = 5\n  largestIndex([1,2,3,4,5,6]) = 6\n  largestIndex([1,2,3,4,5,6,7]) = 7\n  largestIndex([1,2,3,4,5,6,7,8]) = 8\n  */\nconst largestIndex = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) return -1\n  let max = arr[0]\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] > max) max = arr[i]\n  }\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] === max) return i\n  }\n  return -1\n}\n\n/*\n  Given an array of integers, return the index of the largest element in the\n  array. If there is no largest element, return -1.\n\n  Examples:\n  largestIndex([1,2,3,4,5]) = 5\n  largestIndex([1,2,3,4,5,6]) = 6\n  largestIndex([1,2,3,4,5,6,7]) = 7\n  largestIndex([1,2,3,4,5,6,7,8]) = 8\n  */\nconst largestIndex2 = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) return -1\n  let max = arr[0]\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] > max) max = arr[i]\n  }\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] === max) return i\n  }\n  return -1\n}\n\n/*\n  Given an array of integers, return the index of the smallest element in the\n  array. If there is no smallest element, return -1.\n\n  Examples:\n  smallestIndex([1,2,3,4,5]) = 1\n  smallestIndex([1,2,3,4,5,6]) = -1\n  smallestIndex([1,2,3,4,5,6,7]) = 3\n  smallestIndex([1,2,3,4,5,6,7,8]) = -1\n  */\nconst smallestIndex2 = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) return -1\n  let min = arr[0]\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] < min) min = arr[i]\n  }\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] === min) return i\n  }\n  return -1\n}\n\n/*\n  Given an array of integers, return the index of the largest element in the\n  array. If there is no largest element, return -1.\n\n  Examples:\n  largestIndex([1,2,3,4,5]) = 5\n  largestIndex([1,2,3,4,5,6]) = 6\n  largestIndex([1,2,3,4,5,6,7]) = 7\n  largestIndex([1,2,3,4,5,6,7,8]) = 8\n  */\nconst largestIndex3 = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) return -1\n  let max = arr[0]\n  for (let i = 1; i < arrLen; i++) {\n    if (arr[i] > max) max = arr[i]\n  }\n  for (let i = 0; i < arrLen; i++) {\n    if (arr[i] === max) return i\n  }\n  return -1\n}\n\n/*\n  Given an array of integers, return the index of the smallest element in the\n  array. If there is no smallest element, return -1.\n\n  Examples:\n  smallestIndex([1,2,3,4,5]) = 1\n  smallestIndex([1,2"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  const lstLength = lst.length;\n  const lstLengthMinusOne = lstLength - 1;\n  const lstLengthMinusTwo = lstLength - 2;\n  const lstLengthMinusThree = lstLength - 3;\n  const lstLengthMinusFour = lstLength - 4;\n  const lstLengthMinusFive = lstLength - 5;\n  const lstLengthMinusSix = lstLength - 6;\n  const lstLengthMinusSeven = lstLength - 7;\n  const lstLengthMinusEight = lstLength - 8;\n  const lstLengthMinusNine = lstLength - 9;\n  const lstLengthMinusTen = lstLength - 10;\n  const lstLengthMinusEleven = lstLength - 11;\n  const lstLengthMinusTwelve = lstLength - 12;\n  const lstLengthMinusThirteen = lstLength - 13;\n  const lstLengthMinusFourteen = lstLength - 14;\n  const lstLengthMinusFifteen = lstLength - 15;\n  const lstLengthMinusSixteen = lstLength - 16;\n  const lstLengthMinusSeventeen = lstLength - 17;\n  const lstLengthMinusEighteen = lstLength - 18;\n  const lstLengthMinusNineteen = lstLength - 19;\n  const lstLengthMinusTwenty = lstLength - 20;\n  const lstLengthMinusTwentyOne = lstLength - 21;\n  const lstLengthMinusTwentyTwo = lstLength - 22;\n  const lstLengthMinusTwentyThree = lstLength - 23;\n  const lstLengthMinusTwentyFour = lstLength - 24;\n  const lstLengthMinusTwentyFive = lstLength - 25;\n  const lstLengthMinusTwentySix = lstLength - 26;\n  const lstLengthMinusTwentySeven = lstLength - 27;\n  const lstLengthMinusTwentyEight = lstLength - 28;\n  const lstLengthMinusTwentyNine = lstLength - 29;\n  const lstLengthMinusThirty = lstLength - 30;\n  const lstLengthMinusThirtyOne = lstLength - 31;\n  const lstLengthMinusThirtyTwo = lstLength - 32;\n  const lstLengthMinusThirtyThree = lstLength - 33;\n  const lstLengthMinusThirtyFour = lstLength - 34;\n  const lstLengthMinusThirtyFive = lstLength - 35;\n  const lstLengthMinusThirtySix = lstLength - 36;\n  const lstLengthMinusThirtySeven = lstLength - 37;\n  const lstLengthMinusThirtyEight = lstLength - 38;\n  const lstLengthMinusThirtyNine = lstLength - 39;\n  const lstLengthMinusFourty = lstLength - 40;\n  const lstLengthMinusFourtyOne = lstLength - 41;\n  const lstLengthMinusFourtyTwo = lstLength - 42;\n  const lstLengthMinusFourtyThree = lstLength - 43;\n  const lstLengthMinusFourtyFour = lstLength - 44;\n  const lstLengthMinusFourtyFive = lstLength - 45;\n  const lstLengthMinusFourtySix = lstLength - 46;\n  const lstLengthMinusFourtySeven = lstLength - 47;\n  const lstLengthMinusFourtyEight = lstLength - 48;\n  const lstLengthMinusFourtyNine = lstLength - 49;\n  const lstLengthMinusFifty = lstLength - 50;\n  const lstLengthMinusFiftyOne = lstLength - 51;\n  const lstLengthMinusFiftyTwo = lstLength - 52;\n  const lstLengthMinusFiftyThree = lstLength - 53;\n  const lstLengthMinusFiftyFour = lstLength - 54;\n  const lstLengthMinusFiftyFive = lstLength - 55;\n  const lstLengthMinusFiftySix = lstLength - 56;\n  const lstLengthMinusFiftySeven = lstLength - 57;\n  const lstLengthMinusFiftyEight = lstLength - 58;\n  const lstLengthMinusFiftyNine = lstLength - 59;\n  const lstLengthMinusSixty = lstLength - 60;\n  const lstLengthMinusSixtyOne = lstLength - 61;\n  const lstLengthMinusSixtyTwo = lstLength - 62;\n  const lstLengthMinusSixtyThree = lstLength - 63;\n  const lstLengthMinusSixtyFour = lstLength - 64;\n  const lstLengthMinusSixtyFive = lstLength - 65;\n  const lstLengthMinusSixtySix = lstLength - 66;\n  const lstLengthMinusSixtySeven = lstLength - 67;\n  const lstLengthMinusSixtyEight = lstLength - 68;\n  const lstLengthMinusSixtyNine = lstLength - 69;\n  const lstLengthMinusSeventy = lstLength - 70;\n  const lstLengthMinusSeventyOne = lstLength - 71;\n  const lstLengthMinusSeventyTwo = lstLength - 72;\n  const lstLengthMinusSeventyThree = lstLength - 73;\n  const lstLengthMinusSeventyFour = lstLength - 74;\n  const lstLengthMinusSeventyFive = lstLength - 75;\n  const lstLengthMinusSeventySix = lstLength - 76;\n  const lst"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  return a;\n};\n\nconSt compareTwo = (a, b) => {\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  return a;\n};\n\nconSt compareThree = (a, b) => {\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  return a;\n};\n\nconSt compareFour = (a, b) => {\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  return a;\n};\n\nconSt compareFive = (a, b) => {\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a === b) return a;\n    if (a === undefined) return b;\n    if (b === undefined) return a;\n    if (a < b) return a;\n    if (b < a) return b;\n    return a;\n  }\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  return a;\n};\n\nconSt compareSix = (a, b) => {\n  if (a === b) return a;\n  if (a === undefined) return b;\n  if (b === undefined) return a;\n  if (typeof a === 'number' && typeof b === 'number') {\n    if"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEven(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2!== 0) {\n    return isEqualToSumOdd(n - 1)\n  }\n  return isEqualToSumOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEven = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEvenOrOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEvenOrOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEvenOrOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEvenOrOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEvenOrOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEvenOrOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOrOddOrEvenOrOdd = (n) => {\n  if (n === 0) {\n    return true\n  }\n  if (n === 1) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return isEqualToSumEven(n - 1)\n  }\n  return isEqualToSumEvenOrOdd(n - 1)\n}\n\n/*\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualTo"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial2(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial3(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial4(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial5(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial6(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial7(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial8(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial9(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial10(n - 1)\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrI"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcluding = (min, max, exclude) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMax = (min, max, exclude, maxExclude) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMin = (min, max, exclude, maxExclude, minExclude) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3, minExclude3) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3, minExclude3, maxExclude4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3, minExclude3, maxExclude4, minExclude4) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3, minExclude3, maxExclude4, minExclude4, maxExclude5) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3, minExclude3, maxExclude4, minExclude4, maxExclude5, minExclude5) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3, minExclude3, maxExclude4, minExclude4, maxExclude5, minExclude5, maxExclude6) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2, minExclude2, maxExclude3, minExclude3, maxExclude4, minExclude4, maxExclude5, minExclude5, maxExclude6, minExclude6) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getRandomIntInRangeExcludingWithMaxAndMinAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExcludeAndMaxExcludeAndMinExclude = (min, max, exclude, maxExclude, minExclude, maxExclude2"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z0-9_\\s\\.\\-]+$/;\n  if (file_name_regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const file_name_regex = /^[a-zA-Z0-9_\\s\\.\\-]+$/;\n  if (file_name_regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfORE thE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  const file_name_regex = /^[a-zA-Z0-9_\\s\\.\\-]+$/;\n  if (file_name_regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfORE thE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n  const file_name_regex = /^[a-zA-Z0-9_\\s\\.\\-]+$/;\n  if (file_name_regex.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const newSentence = words.map(word => word.toUpperCase())\n  return newSentence.join(' ')\n}\n\nconst test = (sentence, expected) => {\n  const actual = wordsInSentence(sentence)\n  console.log(`The new sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is: ${expected}`)\n  console.log(`The actual sentence is: ${actual}`)\n  console.log(`The expected sentence is"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n  const num = x.toString().split(\"/\").pop();\n  const den = n.toString().split(\"/\").pop();\n  if (num.length === 0) {\n    return false;\n  }\n  if (den.length === 0) {\n    return false;\n  }\n  if (num.length > den.length) {\n    return false;\n  }\n  if (num.length === den.length) {\n    if (num.length === 1) {\n      return num === den;\n    }\n    if (num[0] === den[0]) {\n      return num.slice(1).every(x => x === den.slice(1).every(x => x === \"1\"));\n    }\n    return false;\n  }\n  return false;\n};\n\nconst test = () => {\n  const test1 = [\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n  ];\n  const test2 = [\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \"5/1\",\n    \"1/6\",\n    \"2/1\",\n    \"7/10\",\n    \"10/2\",\n    \"1/5\",\n    \""}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.sum();\n    const bSum = b.sum();\n    if (aSum < bSum) {\n      return -1;\n    }\n    if (aSum > bSum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGITS,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderBySum = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.sum();\n    const bSum = b.sum();\n    if (aSum < bSum) {\n      return -1;\n    }\n    if (aSum > bSum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGITS,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderBySum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderBySum([]) == []\n  */\nconst orderByDigits = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.sum();\n    const bSum = b.sum();\n    if (aSum < bSum) {\n      return -1;\n    }\n    if (aSum > bSum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst orderBy = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.sum();\n    const bSum = b.sum();\n    if (aSum < bSum) {\n      return -1;\n    }\n    if (aSum > bSum) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nconst main = () => {\n  const nums = [\n    { sum: 1, digits: [1, 2, 3] },\n    { sum: 2, digits: [1, 2, 3] },\n    { sum: 3, digits: [1, 2, 3] },\n    { sum: 4, digits: [1, 2, 3] },\n    { sum: 5, digits: [1, 2, 3] },\n    { sum: 6, digits: [1, 2, 3] },\n    { sum: 7, digits: [1, 2, 3] },\n    { sum: 8, digits: [1, 2, 3] },\n    { sum: 9, digits: [1, 2, 3] },\n    { sum: 10, digits: [1, 2, 3] },\n    { sum: 11, digits: [1, 2, 3] },\n    { sum: 12, digits: [1, 2, 3] },\n    { sum: 13, digits: [1, 2, 3] },\n    { sum: 14, digits: [1, 2, 3] },\n    { sum: 15, digits: [1, 2, 3] },\n    { sum: 16, digits: [1, 2, 3] },\n    { sum: 17, digits: [1, 2, 3] },\n    { sum: 18, digits: [1, 2, 3] },\n    { sum: 19, digits: [1, 2, 3] },\n    { sum: 20, digits: [1, 2, 3] },\n    { sum: 21, digits: [1, 2, 3] },\n    { sum: 22, digits: [1, 2, 3] },\n    { sum: 23, digits: [1, 2, 3] },\n    { sum: 24, digits: [1, 2, 3] },\n    { sum: 25, digits: [1, 2, 3] },\n    { sum: 26, digits: [1, 2, 3] },\n    { sum: 27, digits: [1, 2, 3] },\n    { sum: 28, digits: [1, 2, 3] },\n    { sum: 29, digits: [1, 2, 3] },\n    { sum: 30, digits: [1, 2, 3] },\n    { sum: 31, digits: [1, 2, 3] },\n    { sum: 32, digits: [1, 2, 3] },\n    { sum: 33, digits: [1, 2, 3] },\n    { sum: 34, digits: [1, 2, 3] },\n    { sum: 35, digits: [1, 2, 3] },\n    { sum: 36, digits: [1, 2, 3] },\n    "}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let numsLength = nums.length;\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let n = 0;\n  let temp = 0;\n  let temp2 = 0;\n  let temp3 = 0;\n  let temp4 = 0;\n  let temp5 = 0;\n  let temp6 = 0;\n  let temp7 = 0;\n  let temp8 = 0;\n  let temp9 = 0;\n  let temp10 = 0;\n  let temp11 = 0;\n  let temp12 = 0;\n  let temp13 = 0;\n  let temp14 = 0;\n  let temp15 = 0;\n  let temp16 = 0;\n  let temp17 = 0;\n  let temp18 = 0;\n  let temp19 = 0;\n  let temp20 = 0;\n  let temp21 = 0;\n  let temp22 = 0;\n  let temp23 = 0;\n  let temp24 = 0;\n  let temp25 = 0;\n  let temp26 = 0;\n  let temp27 = 0;\n  let temp28 = 0;\n  let temp29 = 0;\n  let temp30 = 0;\n  let temp31 = 0;\n  let temp32 = 0;\n  let temp33 = 0;\n  let temp34 = 0;\n  let temp35 = 0;\n  let temp36 = 0;\n  let temp37 = 0;\n  let temp38 = 0;\n  let temp39 = 0;\n  let temp40 = 0;\n  let temp41 = 0;\n  let temp42 = 0;\n  let temp43 = 0;\n  let temp44 = 0;\n  let temp45 = 0;\n  let temp46 = 0;\n  let temp47 = 0;\n  let temp48 = 0;\n  let temp49 = 0;\n  let temp50 = 0;\n  let temp51 = 0;\n  let temp52 = 0;\n  let temp53 = 0;\n  let temp54 = 0;\n  let temp55 = 0;\n  let temp56 = 0;\n  let temp57 = 0;\n  let temp58 = 0;\n  let temp59 = 0;\n  let temp60 = 0;\n  let temp61 = 0;\n  let temp62 = 0;\n  let temp63 = 0;\n  let temp64 = 0;\n  let temp65 = 0;\n  let temp66 = 0;\n  let temp67 = 0;\n  let temp68 = 0;\n  let temp69 = 0;\n  let temp70 = 0;\n  let temp71 = 0;\n  let temp72 = 0;\n  let temp73 = 0;\n  let temp74 = 0;\n  let temp75 = 0;\n  let temp76 = 0;\n  let temp77 = 0;\n  let temp78 = 0;\n  let temp79 = 0;\n  let temp80 = 0;\n  let temp81 = 0;\n  let temp82 = 0;\n  let temp83 = 0;\n  let temp84 = 0;\n  let temp85 = 0;\n  let temp86 = 0;\n  let temp87 = 0;\n  let temp88 = 0;\n  let temp89 = 0;\n  let temp90 = 0;\n  let temp91 = 0;\n  let temp92 = 0;\n  let temp93 = 0;\n  let temp94 = 0;\n  let temp95 = 0;\n  let temp96 = 0;\n  let temp97 = 0;\n  let temp98 = 0;\n  let temp99 = 0;\n  let temp100 = 0;\n  let temp101 = 0;\n  let temp102 = 0;\n  let temp103 = 0;\n  let temp104 = 0;\n  let temp105 = 0;\n  let temp106 = 0;\n  let temp107 = 0;\n  let temp108 = 0;\n  let temp109 = 0;\n  let temp110 = 0;\n  let temp111 = 0;\n  let temp112 = 0;\n  let temp113 = 0;\n  let temp114 = 0;\n  let temp115 = 0;\n  let temp116 = 0;\n  let temp117 = 0;\n  let temp118 = 0;\n  let temp119 = 0;\n  let temp120 = 0;\n  let temp121 = 0;\n  let temp122 = 0;\n  let temp123 = 0;\n  let temp124 = 0;\n  let temp125 = 0;\n  let temp126 = 0;\n  let temp127 = 0;\n  let temp128 = 0;\n  let temp129 = 0;\n  let temp130 = 0;\n  let temp131 = 0;\n  let temp132 = 0;\n  let temp133 = 0;\n  let temp134 = 0;\n  let temp135 = 0;\n  let temp136 = 0;\n  let temp137 = 0;\n  let temp138 = 0;\n  let temp139 = 0;\n  let temp140 = 0;\n  let temp141 = 0;\n  let temp142 = 0;\n  let temp143 = 0;\n  let temp144 = 0;\n  let temp145 = 0;\n  let temp146 = 0;\n  let temp147 = 0;\n  let temp148 = 0;\n  let temp149 = 0;\n  let temp150 = 0;\n  let temp151 = 0;\n  let temp152 = 0;\n  let temp153 = 0;\n  let temp154 = 0;\n  let temp155 = 0;\n  let temp156 = 0;\n  let temp157 = 0;\n  let temp158 = 0;\n  let temp159 = 0;\n  let temp160 = 0;\n  let temp161 = 0;\n  let temp162 = 0;\n  let temp163 = 0;\n  let temp164 = 0;\n  let temp165 = 0;\n  let temp166 = 0;\n  let temp167 = 0;\n  let temp"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from({length: n}, (x, i) => i * i - i + 1);\n  const A = Array.from({length: n}, (x, i) => x + i);\n  const B = Array.from({length: n}, (x, i) => x + i + 1);\n  const C = Array.from({length: n}, (x, i) => x + i + 2);\n  const D = Array.from({length: n}, (x, i) => x + i + 3);\n  const E = Array.from({length: n}, (x, i) => x + i + 4);\n  const F = Array.from({length: n}, (x, i) => x + i + 5);\n  const G = Array.from({length: n}, (x, i) => x + i + 6);\n  const H = Array.from({length: n}, (x, i) => x + i + 7);\n  const I = Array.from({length: n}, (x, i) => x + i + 8);\n  const J = Array.from({length: n}, (x, i) => x + i + 9);\n  const K = Array.from({length: n}, (x, i) => x + i + 10);\n  const L = Array.from({length: n}, (x, i) => x + i + 11);\n  const M = Array.from({length: n}, (x, i) => x + i + 12);\n  const N = Array.from({length: n}, (x, i) => x + i + 13);\n  const O = Array.from({length: n}, (x, i) => x + i + 14);\n  const P = Array.from({length: n}, (x, i) => x + i + 15);\n  const Q = Array.from({length: n}, (x, i) => x + i + 16);\n  const R = Array.from({length: n}, (x, i) => x + i + 17);\n  const S = Array.from({length: n}, (x, i) => x + i + 18);\n  const T = Array.from({length: n}, (x, i) => x + i + 19);\n  const U = Array.from({length: n}, (x, i) => x + i + 20);\n  const V = Array.from({length: n}, (x, i) => x + i + 21);\n  const W = Array.from({length: n}, (x, i) => x + i + 22);\n  const X = Array.from({length: n}, (x, i) => x + i + 23);\n  const Y = Array.from({length: n}, (x, i) => x + i + 24);\n  const Z = Array.from({length: n}, (x, i) => x + i + 25);\n  const a1 = a.filter((x, i) => i < J);\n  const a2 = a.filter((x, i) => i < K);\n  const a3 = a.filter((x, i) => i < L);\n  const a4 = a.filter((x, i) => i < M);\n  const a5 = a.filter((x, i) => i < N);\n  const a6 = a.filter((x, i) => i < O);\n  const a7 = a.filter((x, i) => i < P);\n  const a8 = a.filter((x, i) => i < Q);\n  const a9 = a.filter((x, i) => i < R);\n  const a10 = a.filter((x, i) => i < S);\n  const a11 = a.filter((x, i) => i < T);\n  const a12 = a.filter((x, i) => i < U);\n  const a13 = a.filter((x, i) => i < V);\n  const a14 = a.filter((x, i) => i < W);\n  const a15 = a.filter((x, i) => i < X);\n  const a16 = a.filter((x, i) => i < Y);\n  const a17 = a.filter((x, i) => i < Z);\n  const a18 = a.filter((x, i) => i < a1);\n  const a19 = a.filter((x, i) => i < a2);\n  const a20 = a.filter((x, i) => i < a3);\n  const a21 = a.filter((x, i) => i < a4);\n  const a22 = a.filter((x, i) => i < a5);\n  const a23 = a.filter((x, i) => i < a6);\n  const a24 = a.filter((x, i) => i < a7);\n  const a25 = a.filter((x, i) => i < a8);\n  const a26 = a.filter((x, i) => i < a9);\n  const a27 = a.filter((x, i) => i < a10);\n  const a28 = a.filter((x, i) => i < a11);\n  const a29 = a.filter((x, i) => i < a12);\n  const a30 = a.filter((x, i) => i < a13);\n  const a31 = a.filter((x, i) => i < a14);\n  const a32 = a.filter((x, i) => i < a15);\n  const a33 = a.filter((x, i) => i < a16);\n  const a34 = a.filter((x, i) => i < a17"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = getOrbit(planet1)\n  const planet2Orbit = getOrbit(planet2)\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet1)\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet2)\n  const planet1OrbitLengthDifference = planet1OrbitLength - planet2OrbitLength\n  const planet2OrbitLengthDifference = planet2OrbitLength - planet1OrbitLength\n  const planet1OrbitLengthDifferenceIndex = planet1Orbit.indexOf(planet1)\n  const planet2OrbitLengthDifferenceIndex = planet2Orbit.indexOf(planet2)\n  const planet1OrbitLengthDifferenceIndexPlusOne = planet1OrbitLengthDifferenceIndex + 1\n  const planet2OrbitLengthDifferenceIndexPlusOne = planet2OrbitLengthDifferenceIndex + 1\n  const planet1OrbitLengthDifferenceIndexPlusTwo = planet1OrbitLengthDifferenceIndex + 2\n  const planet2OrbitLengthDifferenceIndexPlusTwo = planet2OrbitLengthDifferenceIndex + 2\n  const planet1OrbitLengthDifferenceIndexPlusThree = planet1OrbitLengthDifferenceIndex + 3\n  const planet2OrbitLengthDifferenceIndexPlusThree = planet2OrbitLengthDifferenceIndex + 3\n  const planet1OrbitLengthDifferenceIndexPlusFour = planet1OrbitLengthDifferenceIndex + 4\n  const planet2OrbitLengthDifferenceIndexPlusFour = planet2OrbitLengthDifferenceIndex + 4\n  const planet1OrbitLengthDifferenceIndexPlusFive = planet1OrbitLengthDifferenceIndex + 5\n  const planet2OrbitLengthDifferenceIndexPlusFive = planet2OrbitLengthDifferenceIndex + 5\n  const planet1OrbitLengthDifferenceIndexPlusSix = planet1OrbitLengthDifferenceIndex + 6\n  const planet2OrbitLengthDifferenceIndexPlusSix = planet2OrbitLengthDifferenceIndex + 6\n  const planet1OrbitLengthDifferenceIndexPlusSeven = planet1OrbitLengthDifferenceIndex + 7\n  const planet2OrbitLengthDifferenceIndexPlusSeven = planet2OrbitLengthDifferenceIndex + 7\n  const planet1OrbitLengthDifferenceIndexPlusEight = planet1OrbitLengthDifferenceIndex + 8\n  const planet2OrbitLengthDifferenceIndexPlusEight = planet2OrbitLengthDifferenceIndex + 8\n  const planet1OrbitLengthDifferenceIndexPlusNine = planet1OrbitLengthDifferenceIndex + 9\n  const planet2OrbitLengthDifferenceIndexPlusNine = planet2OrbitLengthDifferenceIndex + 9\n  const planet1OrbitLengthDifferenceIndexPlusTen = planet1OrbitLengthDifferenceIndex + 10\n  const planet2OrbitLengthDifferenceIndexPlusTen = planet2OrbitLengthDifferenceIndex + 10\n  const planet1OrbitLengthDifferenceIndexPlusEleven = planet1OrbitLengthDifferenceIndex + 11\n  const planet2OrbitLengthDifferenceIndexPlusEleven = planet2OrbitLengthDifferenceIndex + 11\n  const planet1OrbitLengthDifferenceIndexPlusTwelve = planet1OrbitLengthDifferenceIndex + 12\n  const planet2OrbitLengthDifferenceIndexPlusTwelve = planet2OrbitLengthDifferenceIndex + 12\n  const planet1OrbitLengthDifferenceIndexPlusThirteen = planet1OrbitLengthDifferenceIndex + 13\n  const planet2OrbitLengthDifferenceIndexPlusThirteen = planet2OrbitLengthDifferenceIndex + 13\n  const planet1OrbitLengthDifferenceIndexPlusFourteen = planet1OrbitLengthDifferenceIndex + 14\n  const planet2OrbitLengthDifferenceIndexPlusFourteen = planet2OrbitLengthDifferenceIndex + 14\n  const planet1OrbitLengthDifferenceIndexPlusFifteen = planet1OrbitLengthDifferenceIndex + 15\n  const planet2OrbitLengthDifferenceIndexPlusFifteen = planet2OrbitLengthDifferenceIndex + 15\n  const planet1OrbitLengthDifferenceIndexPlusSixteen = planet1OrbitLengthDifferenceIndex + 16\n  const planet2OrbitLengthDifferenceIndexPlusSixteen = planet2OrbitLengthDifferenceIndex + 16\n  const planet1OrbitLengthDifferenceIndexPlusSeventeen = planet1OrbitLengthDifferenceIndex + 17\n  const planet2OrbitLengthDifferenceIndexPlusSeventeen = planet2OrbitLengthDifferenceIndex + 17\n  const planet1OrbitLengthDifferenceIndexPlusEighteen = planet1OrbitLengthDifferenceIndex + 18\n  const planet2OrbitLengthDifferenceIndexPlusEighteen = planet2OrbitLengthDifferenceIndex + 18\n  const planet1OrbitLengthDifferenceIndexPlusNineteen = planet1OrbitLengthDifferenceIndex + 19\n  const planet2OrbitLengthDifferenceIndexPlusNineteen = planet2OrbitLengthDifferenceIndex + 19\n  const planet1OrbitLengthDifferenceIndexPlusTwenty = planet1OrbitLengthDifferenceIndex + 20\n  const planet2OrbitLengthDifferenceIndexPlusTwenty = planet2OrbitLengthDifferenceIndex + 20\n  const planet1OrbitLengthDifferenceIndexPlusTwentyOne = planet1OrbitLengthDifferenceIndex + 21\n  const planet2OrbitLengthDifferenceIndexPlusTwentyOne = planet2OrbitLengthDifferenceIndex + 21\n  const planet1"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted;\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted;\n};\n\nconst list_sort_by_length = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_desc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_desc_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_desc_reverse_desc = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_desc_reverse_desc_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_desc_reverse_desc_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_desc_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n  return sorted;\n};\n\nconst list_sort_by_length_reverse_reverse_reverse_reverse_reverse = (lst) => {\n  const sorted = lst.sort((a, b) => b.length - a.length, (a, b) => a - b, (a, b) => b - a);\n"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY2 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY3 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY4 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY5 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY6 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY7 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY8 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY9 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY10 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY11 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY12 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY13 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY14 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY15 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY16 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY17 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY18 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY19 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY20 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY21 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY22 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY23 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY24 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY25 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY26 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY27 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY28 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY29 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY30 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY31 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY32 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY33 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY34 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY35 = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n}\n\nconst xOrY36 = (n"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      result += Math.pow(lst[i], 2);\n    }\n  }\n  return result;\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let [game_array, guess_array] = [game, guess].map(Number);\n  let [game_length, guess_length] = [game_array.length, guess_array.length];\n  let [game_max, guess_max] = [Math.max(game_array), Math.max(guess_array)];\n  let [game_min, guess_min] = [Math.min(game_array), Math.min(guess_array)];\n  let [game_sum, guess_sum] = [0, 0];\n  for (let i = 0; i < game_length; i++) {\n    game_sum += game_array[i];\n    guess_sum += guess_array[i];\n  }\n  let [game_diff, guess_diff] = [game_sum - game_max, guess_sum - guess_max];\n  let [game_diff_2, guess_diff_2] = [game_diff * 2, guess_diff * 2];\n  let [game_diff_3, guess_diff_3] = [game_diff * 3, guess_diff * 3];\n  let [game_diff_4, guess_diff_4] = [game_diff * 4, guess_diff * 4];\n  let [game_diff_5, guess_diff_5] = [game_diff * 5, guess_diff * 5];\n  let [game_diff_6, guess_diff_6] = [game_diff * 6, guess_diff * 6];\n  let [game_diff_7, guess_diff_7] = [game_diff * 7, guess_diff * 7];\n  let [game_diff_8, guess_diff_8] = [game_diff * 8, guess_diff * 8];\n  let [game_diff_9, guess_diff_9] = [game_diff * 9, guess_diff * 9];\n  let [game_diff_10, guess_diff_10] = [game_diff * 10, guess_diff * 10];\n  let [game_diff_11, guess_diff_11] = [game_diff * 11, guess_diff * 11];\n  let [game_diff_12, guess_diff_12] = [game_diff * 12, guess_diff * 12];\n  let [game_diff_13, guess_diff_13] = [game_diff * 13, guess_diff * 13];\n  let [game_diff_14, guess_diff_14] = [game_diff * 14, guess_diff * 14];\n  let [game_diff_15, guess_diff_15] = [game_diff * 15, guess_diff * 15];\n  let [game_diff_16, guess_diff_16] = [game_diff * 16, guess_diff * 16];\n  let [game_diff_17, guess_diff_17] = [game_diff * 17, guess_diff * 17];\n  let [game_diff_18, guess_diff_18] = [game_diff * 18, guess_diff * 18];\n  let [game_diff_19, guess_diff_19] = [game_diff * 19, guess_diff * 19];\n  let [game_diff_20, guess_diff_20] = [game_diff * 20, guess_diff * 20];\n  let [game_diff_21, guess_diff_21] = [game_diff * 21, guess_diff * 21];\n  let [game_diff_22, guess_diff_22] = [game_diff * 22, guess_diff * 22];\n  let [game_diff_23, guess_diff_23] = [game_diff * 23, guess_diff * 23];\n  let [game_diff_24, guess_diff_24] = [game_diff * 24, guess_diff * 24];\n  let [game_diff_25, guess_diff_25] = [game_diff * 25, guess_diff * 25];\n  let [game_diff_26, guess_diff_26] = [game_diff * 26, guess_diff * 26];\n  let [game_diff_27, guess_diff_27] = [game_diff * 27, guess_diff * 27];\n  let [game_diff_28, guess_diff_28] = [game_diff * 28, guess_diff * 28];\n  let [game_diff_29, guess_diff_29] = [game_diff * 29, guess_diff * 29];\n  let [game_diff_30, guess_diff_30] = [game_diff * 30, guess_diff * 30];\n  let [game_diff_31, guess_diff_31] = [game_diff * 31, guess_diff * 31];\n  let [game_diff_32, guess_diff_32] = [game_diff * 32, guess_diff * 32];\n  let [game_diff_33, guess_diff_33] = [game_diff * 33, guess_diff *"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const ext_names = extensions.map(ext => ext.toLowerCase());\n  const strength = {};\n  extensions.forEach(ext => {\n    const ext_name = ext.toLowerCase();\n    if (strength[ext_name] === undefined) {\n      strength[ext_name] = strength[ext_name] || 0;\n    }\n    strength[ext_name] += 1;\n  });\n  const strongest = Object.keys(strength).reduce((prev, curr) => {\n    if (strength[curr] > strength[prev]) {\n      return curr;\n    }\n    return prev;\n  }, class_name);\n  return class_name + '.' + strongest;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  const a_length = a.length\n  const b_length = b.length\n  if (a_length!== b_length) return false\n  for (let i = 0; i < a_length; i++) {\n    if (a[i]!== b[i]) return false\n  }\n  return true\n}\n\n/*\n  const a = \"abcd\"\n  const b = \"abd\"\n  const c = \"abcd\"\n  const d = \"abd\"\n  const e = \"abcd\"\n  const f = \"abd\"\n  const g = \"abcd\"\n  const h = \"abd\"\n  const i = \"abcd\"\n  const j = \"abd\"\n  const k = \"abcd\"\n  const l = \"abd\"\n  const m = \"abcd\"\n  const n = \"abd\"\n  const o = \"abcd\"\n  const p = \"abd\"\n  const q = \"abcd\"\n  const r = \"abd\"\n  const s = \"abcd\"\n  const t = \"abd\"\n  const u = \"abcd\"\n  const v = \"abd\"\n  const w = \"abcd\"\n  const x = \"abd\"\n  const y = \"abcd\"\n  const z = \"abd\"\n  const aa = \"abcd\"\n  const bb = \"abd\"\n  const cc = \"abcd\"\n  const dd = \"abd\"\n  const ee = \"abcd\"\n  const ff = \"abd\"\n  const gg = \"abcd\"\n  const hh = \"abd\"\n  const ii = \"abcd\"\n  const jj = \"abd\"\n  const kk = \"abcd\"\n  const ll = \"abd\"\n  const mm = \"abcd\"\n  const nn = \"abd\"\n  const oo = \"abcd\"\n  const pp = \"abd\"\n  const qq = \"abcd\"\n  const rr = \"abd\"\n  const ss = \"abcd\"\n  const tt = \"abd\"\n  const uu = \"abcd\"\n  const vv = \"abd\"\n  const ww = \"abcd\"\n  const xx = \"abd\"\n  const yy = \"abcd\"\n  const zz = \"abd\"\n  const aaa = \"abcd\"\n  const bbb = \"abd\"\n  const ccc = \"abcd\"\n  const ddd = \"abd\"\n  const eee = \"abcd\"\n  const fff = \"abd\"\n  const ggg = \"abcd\"\n  const hhh = \"abd\"\n  const iii = \"abcd\"\n  const jjj = \"abd\"\n  const kkk = \"abcd\"\n  const lll = \"abd\"\n  const mmm = \"abcd\"\n  const nnn = \"abd\"\n  const ooo = \"abcd\"\n  const ppp = \"abd\"\n  const qqq = \"abcd\"\n  const rrr = \"abd\"\n  const sss = \"abcd\"\n  const ttt = \"abd\"\n  const uuu = \"abcd\"\n  const vvv = \"abd\"\n  const www = \"abcd\"\n  const xxx = \"abd\"\n  const yyy = \"abcd\"\n  const zzz = \"abd\"\n  const aaaa = \"abcd\"\n  const bbbb = \"abd\"\n  const cccc = \"abcd\"\n  const dddd = \"abd\"\n  const eeee = \"abcd\"\n  const ffff = \"abd\"\n  const gggg = \"abcd\"\n  const hhhh = \"abd\"\n  const iiii = \"abcd\"\n  const jjjj = \"abd\"\n  const kkkk = \"abcd\"\n  const llll = \"abd\"\n  const mmmm = \"abcd\"\n  const nnnn = \"abd\"\n  const oooo = \"abcd\"\n  const pppp = \"abd\"\n  const qqqq = \"abcd\"\n  const rrrr = \"abd\"\n  const ssss = \"abcd\"\n  const tttt = \"abd\"\n  const uuuu = \"abcd\"\n  const vvvv = \"abd\"\n  const wwww = \"abcd\"\n  const xxxxx = \"abd\"\n  const yyyyy = \"abcd\"\n  const zzzzz = \"abd\"\n  const aaaaa = \"abcd\"\n  const bbbbb = \"abd\"\n  const ccccc = \"abcd\"\n  const ddddd = \"abd\"\n  const eeeee = \"abcd\"\n  const fffff = \"abd\"\n  const ggggg = \"abcd\"\n  const hhhhh = \"abd\"\n  const iiiii = \"abcd\"\n  const jjjjj = \"abd\"\n  const kkkkk = \"abcd\"\n  const lllll = \"abd\"\n  const mmmmm = \"abcd\"\n  const nnnnn = \"abd\"\n  const ooooo = \"abcd\"\n  const ppppp = \"abd\"\n  const qqqqq = \"abcd\"\n  const rrrrr = \"abd\"\n  const sssss = \"abcd\"\n  const ttttt = \"abd\"\n  const uuuuu = \"abcd\"\n  const vvvvv = \"abd\"\n  const wwwww = \"abcd\"\n  const xxxxxx = \"abd\"\n  const yyyyyy = \"abcd\"\n  const z"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (odd, even);\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num / 10;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount2 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 10;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount3 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 100;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount4 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 1000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount5 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 10000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount6 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 100000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount7 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 1000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount8 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 10000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount9 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 100000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount10 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 1000000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount11 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 10000000000;\n  }\n  return count;\n};\n\n/*\n  Given a number, return the number of digits in the number.\n  Example:\n      digitCount(123) ==> 3\n      digitCount(12) ==> 2\n      digitCount(1) ==> 1\n      digitCount(0) ==> 0\n  */\nconst digitCount12 = (num) => {\n  let count = 0;\n  while (num > 0) {\n    count++;\n    num = num % 100000000000;\n  }\n  return count;\n};\n"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = number;\n  const low = ['i', 'x', 'c', 'l', 'v', 'd','m'];\n  const high = ['I', 'X', 'C', 'L', 'V', 'D', 'M'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    if (num % 10 === 0) {\n      result.push(low[i]);\n      num = num / 10;\n    } else {\n      result.push(high[i]);\n      num = num - num % 10;\n    }\n    i++;\n  }\n  return result.reverse().join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\n/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGLE in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\n/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGLE in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\n/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGLE in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle5 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle6 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle7 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle8 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle9 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle10 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle11 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle12 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle13 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle14 = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  const abc = ab + ac + bc;\n  return abc === 0;\n};\n\nconst rightAngleTriangle15 = (a, b,"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  const unique = words.filter((word, index, arr) => {\n    return arr.indexOf(word) === index;\n  });\n  return unique.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n};\n\nconsole.log(findMax([\"name\", \"of\", \"stRiNG\"]));\nconsole.log(findMax([\"name\", \"Enam\", \"gAme\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bB\",\"Cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, 0];\n  }\n  if (remaining >= need) {\n    return [number, remaining];\n  }\n  return [number, need - remaining];\n}\n\nconst main = () => {\n  const [number, remaining] = eat(5, 6, 10);\n  console.log(`You have eaten ${number} carrots.\n  You still have ${remaining} left.`);\n  const [number, remaining] = eat(4, 8, 9);\n  console.log(`You have eaten ${number} carrots.\n  You still have ${remaining} left.`);\n  const [number, remaining] = eat(1, 10, 10);\n  console.log(`You have eaten ${number} carrots.\n  You still have ${remaining} left.`);\n  const [number, remaining] = eat(2, 11, 5);\n  console.log(`You have eaten ${number} carrots.\n  You still have ${remaining} left.`);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i1 = 0;\n  let i2 = 0;\n  let i3 = 0;\n  let i4 = 0;\n  let i5 = 0;\n  let i6 = 0;\n  let i7 = 0;\n  let i8 = 0;\n  let i9 = 0;\n  let i10 = 0;\n  let i11 = 0;\n  let i12 = 0;\n  let i13 = 0;\n  let i14 = 0;\n  let i15 = 0;\n  let i16 = 0;\n  let i17 = 0;\n  let i18 = 0;\n  let i19 = 0;\n  let i20 = 0;\n  let i21 = 0;\n  let i22 = 0;\n  let i23 = 0;\n  let i24 = 0;\n  let i25 = 0;\n  let i26 = 0;\n  let i27 = 0;\n  let i28 = 0;\n  let i29 = 0;\n  let i30 = 0;\n  let i31 = 0;\n  let i32 = 0;\n  let i33 = 0;\n  let i34 = 0;\n  let i35 = 0;\n  let i36 = 0;\n  let i37 = 0;\n  let i38 = 0;\n  let i39 = 0;\n  let i40 = 0;\n  let i41 = 0;\n  let i42 = 0;\n  let i43 = 0;\n  let i44 = 0;\n  let i45 = 0;\n  let i46 = 0;\n  let i47 = 0;\n  let i48 = 0;\n  let i49 = 0;\n  let i50 = 0;\n  let i51 = 0;\n  let i52 = 0;\n  let i53 = 0;\n  let i54 = 0;\n  let i55 = 0;\n  let i56 = 0;\n  let i57 = 0;\n  let i58 = 0;\n  let i59 = 0;\n  let i60 = 0;\n  let i61 = 0;\n  let i62 = 0;\n  let i63 = 0;\n  let i64 = 0;\n  let i65 = 0;\n  let i66 = 0;\n  let i67 = 0;\n  let i68 = 0;\n  let i69 = 0;\n  let i70 = 0;\n  let i71 = 0;\n  let i72 = 0;\n  let i73 = 0;\n  let i74 = 0;\n  let i75 = 0;\n  let i76 = 0;\n  let i77 = 0;\n  let i78 = 0;\n  let i79 = 0;\n  let i80 = 0;\n  let i81 = 0;\n  let i82 = 0;\n  let i83 = 0;\n  let i84 = 0;\n  let i85 = 0;\n  let i86 = 0;\n  let i87 = 0;\n  let i88 = 0;\n  let i89 = 0;\n  let i90 = 0;\n  let i91 = 0;\n  let i92 = 0;\n  let i93 = 0;\n  let i94 = 0;\n  let i95 = 0;\n  let i96 = 0;\n  let i97 = 0;\n  let i98 = 0;\n  let i99 = 0;\n  let i100 = 0;\n  let i101 = 0;\n  let i102 = 0;\n  let i103 = 0;\n  let i104 = 0;\n  let i105 = 0;\n  let i106 = 0;\n  let i107 = 0;\n  let i108 = 0;\n  let i109 = 0;\n  let i110 = 0;\n  let i111 = 0;\n  let i112 = 0;\n  let i113 = 0;\n  let i114 = 0;\n  let i115 = 0;\n  let i116 = 0;\n  let i117 = 0;\n  let i118 = 0;\n  let i119 = 0;\n  let i120 = 0;\n  let i121 = 0;\n  let i122 = 0;\n  let i123 = 0;\n  let i124 = 0;\n  let i125 = 0;\n  let i126 = 0;\n  let i127 = 0;\n  let i128 = 0;\n  let i129 = 0;\n  let i130 = 0;\n  let i131 ="}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const str = s.split('')\n  const len = str.length\n  let result = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (str[i] === '#') {\n      if (str[i + 1] === '#') {\n        result += str[j]\n        i += 2\n        j += 1\n      } else {\n        result += str[j]\n        i += 1\n        j += 1\n      }\n    } else if (str[i] === '@') {\n      if (str[i + 1] === '@') {\n        result += str[j]\n        i += 2\n        j += 1\n      } else {\n        result += str[j]\n        i += 1\n        j += 1\n      }\n    } else if (str[i] === 'A') {\n      if (str[i + 1] === 'B') {\n        result += str[j]\n        i += 2\n        j += 1\n      } else {\n        result += str[j]\n        i += 1\n        j += 1\n      }\n    } else if (str[i] === 'B') {\n      if (str[i + 1] === 'A') {\n        result += str[j]\n        i += 2\n        j += 1\n      } else {\n        result += str[j]\n        i += 1\n        j += 1\n      }\n    } else {\n      result += str[j]\n      i += 1\n      j += 1\n    }\n  }\n  return result\n}\n\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@'))\nconsole.log(solve('#@"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  GivEn a sTring 'text', return Its sha1 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToSha1('Hello world') == '5b5d18b0b0a6f7b9d6e8c0d7a7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e8c0d7a9d6e"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRange = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRangeInclusive = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRangeExclusive = (a, b) => {\n  let result = [];\n  for (let i = a; i < b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRangeInclusiveExclusive = (a, b) => {\n  let result = [];\n  for (let i = a; i < b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRangeInclusiveExclusive = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRangeInclusiveExclusive = (a, b) => {\n  let result = [];\n  for (let i = a; i < b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRangeInclusiveExclusive = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 14]\n  */\nconst generateIntegersInRangeInclusiveExclusive = ("}
