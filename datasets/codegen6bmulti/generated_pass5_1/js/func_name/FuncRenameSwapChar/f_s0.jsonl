{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diffs = []\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const diff = Math.abs(numbers[i] - numbers[j])\n      if (diff < threshold) {\n        diffs.push(diff)\n      }\n    }\n  }\n  return diffs.length > 0\n}\n\n/*\n  Given a list of numbers, return the median of the list.\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([1, 2, 3, 4, 5, 6])\n  4\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  6\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  7\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  8\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  9\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  10\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  11\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  12\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  13\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  14\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  15\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  16\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  17\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  18\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  20\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  21\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  22\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  23\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  24\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  25\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  26\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  27\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  28\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  29\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  30\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  31\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const stack = [];\n  let current_paren = '';\n  let current_group = '';\n  let current_group_index = 0;\n  let current_group_length = 0;\n  let current_group_open = false;\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i] === '(') {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        stack.push(current_group);\n        current_group = '';\n        current_group_open = true;\n      }\n    } else if (paren_list[i] === ')') {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        current_group_open = false;\n        current_group_length = current_group.length;\n        current_group_index = stack.length - 1;\n        current_group = stack[current_group_index];\n        stack.pop();\n      }\n    } else {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        current_group = current_group + paren_list[i];\n      }\n    }\n  }\n  if (current_group_open) {\n    stack.push(current_group);\n  }\n  return stack;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()']\n  */\nconst separateParens = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const stack = [];\n  let current_paren = '';\n  let current_group = '';\n  let current_group_index = 0;\n  let current_group_length = 0;\n  let current_group_open = false;\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i] === '(') {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        stack.push(current_group);\n        current_group = '';\n        current_group_open = true;\n      }\n    } else if (paren_list[i] === ')') {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        current_group_open = false;\n        current_group_length = current_group.length;\n        current_group_index = stack.length - 1;\n        current_group = stack[current_group_index];\n        stack.pop();\n      }\n    } else {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        current_group = current_group + paren_list[i];\n      }\n    }\n  }\n  if (current_group_open) {\n    stack.push(current_group);\n  }\n  return stack;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()']\n  */\nconst separateParens2 = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const stack = [];\n  let current_paren = '';\n  let current_group = '';\n  let current_group_index = 0;\n  let current_group_length = 0;\n  let current_group_open = false;\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i] === '(') {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        stack.push(current_group);\n        current_group = '';\n        current_group_open = true;\n      }\n    } else if (paren_list[i] === ')') {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        current_group_open = false;\n        current_group_length = current_group.length;\n        current_group_index = stack.length - 1;\n        current_group = stack[current_group_index];\n        stack.pop();\n      }\n    } else {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        current_group = current_group + paren_list[i];\n      }\n    }\n  }\n  if (current_group_open) {\n    stack.push(current_group);\n  }\n  return stack;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()']\n  */\nconst separateParens3 = (paren_string) => {\n  const paren_list = paren_string.split('');\n  const stack = [];\n  let current_paren = '';\n  let current_group = '';\n  let current_group_index = 0;\n  let current_group_length = 0;\n  let current_group_open = false;\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i] === '(') {\n      if (current_group_open) {\n        current_group += paren_list[i];\n      } else {\n        stack.push(current_group);\n        current_group = '';\n        current_group_open = true;\n      }\n    "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal2 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal3 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal4 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal5 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal6 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal7 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal8 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal9 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal10 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimal11 = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number)"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const sum = operations.reduce((acc, curr) => acc + curr, 0);\n  return sum < 0;\n};\n\nexport default belowZeor;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  deviations from the mean:\n  SQRT(average | (x - x_mean)^2 |)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse2 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse3 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse4 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse5 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse6 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse7 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse8 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse9 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse10 = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_length = paren_stack.length;\n  const paren_stack_index = paren_stack.length - 1;\n  const paren_string_length = paren_string.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let current_paren_level = 0;\n  let current_paren_index = paren_stack_index;\n  let current_paren = paren_stack[current_paren_index];\n  let current_paren_string = paren_string[i];\n  while (i < paren_string_length) {\n    if (current_paren_string === '(') {\n      paren_stack.push(current_paren_string);\n      current_paren_level++;\n      current_paren_index++;\n      if (current_paren_index === paren_stack_length) {\n        paren_stack.push(current_paren_string);\n        current_paren_level++;\n        current_paren_index++;\n      }\n    } else if (current_paren_string === ')') {\n      current_paren_level--;\n      if (current_paren_level === 0) {\n        current_paren_index--;\n        current_paren = paren_stack[current_paren_index];\n        paren_stack.pop();\n      }\n    } else if (current_paren_string === '(') {\n      current_paren_level++;\n      current_paren_index++;\n      if (current_paren_index === paren_stack_length) {\n        paren_stack.push(current_paren_string);\n        current_paren_level++;\n        current_paren_index++;\n      }\n    }\n    i++;\n    current_paren_string = paren_string[i];\n  }\n  return paren_stack;\n};\n\nmodule.exports = parseNetsedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', '"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the sum of each number in the list.\n  >>> sumList([1, 2, 3, 4])\n  [1, 3, 6, 10]\n  >>> sumList([1, 2, 3, 4, 5])\n  [1, 3, 6, 10, 15]\n  >>> sumList([1, 2, 3, 4, 5, 6])\n  [1, 3, 6, 10, 15, 21]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7])\n  [1, 3, 6, 10, 15, 21, 28]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 3, 6, 10, 15, 21, 28, 36]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171]\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 3, 6, 10, 15, 21, 28, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180]"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i);\n  postfix = string.substring(i, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i);\n  postfix = string.substring(i, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i);\n  postfix = string.substring(i, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i);\n  postfix = string.substring(i, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i);\n  postfix = string.substring(i, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string."}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strinAnd('010', '110')\n  '00'\n  */\nconst strinAnd = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(a[i] & b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strinOr('010', '110')\n  '110'\n  */\nconst strinOr = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(a[i] | b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010')\n  '101'\n  */\nconst strinNot = (a) => {\n  const a_len = a.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(~a[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> strinAndNot('010', '110')\n  '00'\n  */\nconst strinAndNot = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(~(a[i] & b[i]));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XORNOT on these inputs and return result also as a string.\n  >>> strinXnor('010', '110')\n  '100'\n  */\nconst strinXnor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(~(a[i] ^ b[i]));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ORNOT on these inputs and return result also as a string.\n  >>> strinOrNot('010', '110')\n  '110'\n  */\nconst strinOrNot = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(~(a[i] | b[i]));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strinNot('010')\n  '101'\n  */\nconst strinNot = (a) => {\n  const a_len = a.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(~a[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> strinAndNot('010', '110')\n  '00'\n  */\nconst strinAndNot = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(~(a[i] & b[i]));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XORNOT on these inputs and return result also as a string.\n  >>> strinXnor('010', '110')\n  '100'\n  */\nconst strinXnor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(~(a[i] ^ b[i]));\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ORNOT on these inputs and return result also as a string.\n  >>> strinOrNot('010', '110')\n  '110'\n  */\nconst strinOrNot = (a, b) => {\n  const a_len = a.length;"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor(b, a);\n  }\n  let t = a;\n  a = b;\n  b = t;\n  while (b!== 0) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor2(b, a);\n  }\n  let t = a;\n  a = b;\n  b = t;\n  while (b!== 0) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor3(b, a);\n  }\n  let t = a;\n  a = b;\n  b = t;\n  while (b!== 0) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor4(b, a);\n  }\n  let t = a;\n  a = b;\n  b = t;\n  while (b!== 0) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor5(b, a);\n  }\n  let t = a;\n  a = b;\n  b = t;\n  while (b!== 0) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor6 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor6(b, a);\n  }\n  let t = a;\n  a = b;\n  b = t;\n  while (b!== 0) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor7 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor7(b, a);\n  }\n  let t = a;\n  a = b;\n  b = t;\n  while (b!== 0) {\n    t = a;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/* Return a greatest common divisor of two integers a and b\n  >>> rge"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.split('')\n  for (let i = 0; i < prefix.length; i++) {\n    for (let j = i; j < prefix.length; j++) {\n      prefixes.push(prefix.slice(0, j + 1).join(''))\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'bac', 'cab', 'cba']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    for (let j = i; j < suffix.length; j++) {\n      suffixes.push(suffix.slice(0, j + 1).join(''))\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = (string) => {\n  const permutations = []\n  const permutation = []\n  const permutationString = string.split('')\n  for (let i = 0; i < permutationString.length; i++) {\n    permutation.push(permutationString.slice(0, i + 1).join(''))\n  }\n  for (let i = 0; i < permutation.length; i++) {\n    for (let j = i + 1; j < permutation.length; j++) {\n      permutation.push(permutation.slice(0, j + 1).join(''))\n    }\n    permutations.push(permutation)\n    permutation = permutation.slice(0, i + 1).join('')\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = (string) => {\n  const permutations = []\n  const permutation = []\n  const permutationString = string.split('')\n  for (let i = 0; i < permutationString.length; i++) {\n    permutation.push(permutationString.slice(0, i + 1).join(''))\n  }\n  for (let i = 0; i < permutation.length; i++) {\n    for (let j = i + 1; j < permutation.length; j++) {\n      permutation.push(permutation.slice(0, j + 1).join(''))\n    }\n    permutations.push(permutation)\n    permutation = permutation.slice(0, i + 1).join('')\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = (string) => {\n  const permutations = []\n  const permutation = []\n  const permutationString = string.split('')\n  for (let i = 0; i < permutationString.length; i++) {\n    permutation.push(permutationString.slice(0, i + 1).join(''))\n  }\n  for (let i = 0; i < permutation.length; i++) {\n    for (let j = i + 1; j < permutation.length; j++) {\n      permutation.push(permutation.slice(0, j + 1).join(''))\n    }\n    permutations.push(permutation)\n    permutation = permutation.slice(0, i + 1).join('')\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = (string) => {\n  const permutations = []\n  const permutation = []\n  const permutationString = string.split('')\n  for (let i = 0; i < permutationString.length; i++) {\n    permutation.push(permutationString.slice(0, i + 1).join(''))\n  }\n  for (let i = 0; i < permutation.length; i++) {\n    for (let j = i + 1; j < permutation.length; j++) {\n      permutation.push(permutation.slice(0, j + 1).join(''))\n    }\n    permutations.push(permutation)\n    permutation = permutation.slice(0, i + 1).join('')\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst allPermutations = ("}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-')\n  '0-1-2'\n  >>> stringSequence(5, 3, '-')\n  '0-1-2-3-4-5'\n  */\nconst stringSequence = (n, n2, delimiter) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','')\n  '0 1 2'\n  >>> stringSequence(5, 3, '-','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','','')\n  '0 1 2'\n  >>> stringSequence(5, 3, '-','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','','','')\n  '0 1 2'\n  >>> stringSequence(5, 3, '-','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3, delimiter4) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','','','','')\n  '0 1 2'\n  >>> stringSequence(5, 3, '-','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3, delimiter4, delimiter5) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','','','','','')\n  '0 1 2'\n  >>> stringSequence(5, 3, '-','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, '-','','','','','','')\n  '0 1 2'\n  >>> stringSequence(5, 3, '-','','','','','','')\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, delimiter, delimiter2, delimiter3, delimiter4, delimiter5, delimiter6, delimiter7) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  for (let i = n; i < n2;"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i]);\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters2 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters3 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters4 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters5 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters6 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters7 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase().toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters8 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase().toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters9 = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    charSet.add(string[i].toLowerCase());\n    charSet.add(string[i].toUpperCase());\n    charSet.add(string[i].toLowerCase().toUpperCase());\n    charSet.add(string[i].toUpperCase().toLowerCase());\n    charSet.add(string[i].toLowerCase().toUpperCase().toLowerCase());\n    charSet.add(string[i].toUpperCase().toLowerCase().toUpperCase());\n  }\n  return charSet.size;\n};\n\n/* Given a string, find out how many distinct"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains only\n  characters in the given set of characters.\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y'})\n  'abcdefg'\n  >>> longestSubstring('abcdefg', {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', '"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverseReverseReverse('nine eight seven')\n  'eight seven nine'\n  */\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i]))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.reverse().reverse().reverse().reverse().join(' ')\n}\n\n/*\n  Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverseReverseReverseReverse('nine eight"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = sort(numbers);\n  const first = sortedNumbers[0];\n  const second = sortedNumbers[1];\n  const firstDifference = Math.abs(first - second);\n  const secondDifference = Math.abs(first - second);\n  const closest = first;\n  let closestDifference = firstDifference;\n  for (let i = 2; i < sortedNumbers.length; i++) {\n    const current = sortedNumbers[i];\n    const currentDifference = Math.abs(current - second);\n    if (currentDifference < closestDifference) {\n      closest = current;\n      closestDifference = currentDifference;\n    }\n  }\n  return [closest, second];\n};\n\nexport default findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers, return the average of those numbers */\nconst average = (numbers) => {\n  return numbers.reduce((a, b) => a + b) / numbers.length\n}\n\n/* Given a list of numbers, return the median of those numbers */\nconst median = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  return sorted[half]\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode = (numbers) => {\n  const modes = []\n  const sorted = sortedArray(numbers)\n  for (let i = 0; i < sorted.length; i++) {\n    const count = 1\n    const current = sorted[i]\n    const currentIndex = i\n    while (i + count < sorted.length && sorted[i + count] === current) {\n      count++\n    }\n    modes.push({\n      index: currentIndex,\n      count\n    })\n  }\n  return modes[Math.floor(modes.length / 2)]\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode2 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode3 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode4 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode5 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode6 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode7 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode8 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode9 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    count\n  }\n}\n\n/* Given a list of numbers, return the mode of those numbers */\nconst mode10 = (numbers) => {\n  const sorted = sortedArray(numbers)\n  const half = Math.floor(sorted.length / 2)\n  const mode = sorted[half]\n  const count = 1\n  const currentIndex = half\n  while (half + count < sorted.length && sorted[half + count] === mode) {\n    count++\n  }\n  return {\n    index: currentIndex,\n    "}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter(v => typeof v === 'number' || typeof v ==='string' || typeof v === 'boolean')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for integers\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  * @returns {string}\n  * @description\n  * Filter given string only for floats\n  */\nconst filetrItnegers = (value) => {\n  return value.replace(/[^0-9.]/g, '')\n}\n\n/**\n  * @name filetrItnegers\n  * @param {string} value\n  *"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return the character at the given index\n  *\n  * @param {string} string\n  * @param {number} index\n  * @return {string}\n  * @example\n  *\n  *   strchar('')\n  *   // ''\n  *   strchar('abc')\n  *   // 'a'\n  *   strchar('abc', 0)\n  *   // 'a'\n  *   strchar('abc', 2)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', -1)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', -2)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', -3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', 3.5)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3')\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5')\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 0)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 2)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 0)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 2)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 0)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 2)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 0)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 2)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 0)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 2)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 3.5)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 3.5, 0)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 3.5, 2)\n  *   // 'c'\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 3.5, 3)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 3.5, 3.5)\n  *   // ''\n  *\n  * @example\n  *\n  *   strchar('abc', '3.5', 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 0)\n  *   // 'c'\n  "}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (isPrime(i)) {\n      while (n % i === 0) {\n        factors.push(i)\n        n = n / i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/* Return the number of prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst numberOfFactors = (n) => {\n  const factors = factorize(n)\n  return factors.length\n}\n\n/* Return the largest prime factor of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = factorize(n)\n  return factors[factors.length - 1]\n}\n\n/* Return the smallest prime factor of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  const factors = factorize(n)\n  return factors[0]\n}\n\n/* Return the product of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst productOfPrimeFactors = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a * b)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfPrimeFactors = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a + b)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfAllFactors = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((a, b) => a + b)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfAllFactors2 = (n) => {\n  const factors = factorize(n)\n  return sumOfAllFactors(n)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfAllFactors3 = (n) => {\n  const factors = factorize(n)\n  return sumOfAllFactors(n)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfAllFactors4 = (n) => {\n  const factors = factorize(n)\n  return sumOfAllFactors(n)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfAllFactors5 = (n) => {\n  const factors = factorize(n)\n  return sumOfAllFactors(n)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfAllFactors6 = (n) => {\n  const factors = factorize(n)\n  return sumOfAllFactors(n)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sumOfAllFactors7 = (n) => {\n  const factors = factorize(n)\n  return sumOfAllFactors(n)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  5\n  >>> factorize(70)\n  2\n  */\nconst sum"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const duplicates = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n    } else {\n      duplicates.push(numbers[i]);\n    }\n  }\n  return unique.concat(duplicates);\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  For a given string, return the string with all spaces removed.\n  >>> removeSpaces('Hello World')\n  'HelloWorld'\n  */\nconst removeSpaces = (string) => {\n  return string.replace(/\\s+/g, '');\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  uppercase characters converted to lowercase.\n  >>> toLowerCase('Hello World')\n  'hello world'\n  */\nconst toLowerCase = (string) => {\n  return removeSpaces(flipCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toUpperCase('Hello World')\n  'HELLO WORLD'\n  */\nconst toUpperCase = (string) => {\n  return removeSpaces(string.toUpperCase());\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  uppercase characters converted to lowercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toLowerCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with all spaces removed and all\n  lowercase characters converted to uppercase.\n  >>> toTitleCase('Hello World')\n  'Hello World'\n  */\nconst toTitleCase = (string) => {\n  return removeSpaces(toUpperCase(string));\n};\n\n/*\n  For a given string, return the string with"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> is_palindrome('abc')\n  True\n  >>> is_palindrome('abcd')\n  False\n  >>> is_palindrome('ab')\n  True\n  >>> is_palindrome('abcd')\n  False\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')\n  True\n  >>> is_palindrome('abcd')"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  const negative = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      negative.push(l[i]);\n    }\n  }\n  return negative;\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5])\n  [2, 4]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8])\n  [2, 4, 6, 8]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8, 9]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 9, 10]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 9, 10, 11]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 9, 10, 11, 12]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> siPrimeCount(1)\n  0\n  >>> siPrimeCount(2)\n  1\n  >>> siPrimeCount(3)\n  2\n  >>> siPrimeCount(4)\n  3\n  >>> siPrimeCount(5)\n  4\n  >>> siPrimeCount(6)\n  5\n  >>> siPrimeCount(7)\n  6\n  >>> siPrimeCount(8)\n  7\n  >>> siPrimeCount(9)\n  8\n  >>> siPrimeCount(10)\n  9\n  >>> siPrimeCount(11)\n  10\n  >>> siPrimeCount(12)\n  11\n  >>> siPrimeCount(13)\n  12\n  >>> siPrimeCount(14)\n  13\n  >>> siPrimeCount(15)\n  14\n  >>> siPrimeCount(16)\n  15\n  >>> siPrimeCount(17)\n  16\n  >>> siPrimeCount(18)\n  17\n  >>> siPrimeCount(19)\n  18\n  >>> siPrimeCount(20)\n  19\n  >>> siPrimeCount(21)\n  20\n  >>> siPrimeCount(22)\n  21\n  >>> siPrimeCount(23)\n  22\n  >>> siPrimeCount(24)\n  23\n  >>> siPrimeCount(25)\n  24\n  >>> siPrimeCount(26)\n  25\n  >>> siPrimeCount(27)\n  26\n  >>> siPrimeCount(28)\n  27\n  >>> siPrimeCount(29)\n  28\n  >>> siPrimeCount(30)\n  29\n  >>> siPrimeCount(31)\n  30\n  >>> siPrimeCount(32)\n  31\n  >>> siPrimeCount(33)\n  32\n  >>> siPrimeCount(34)\n  33\n  >>> siPrimeCount(35)\n  34\n  >>> siPrimeCount(36)\n  35\n  >>> siPrimeCount(37)\n  36\n  >>> siPrimeCount(38)\n  37\n  >>> siPrimeCount(39)\n  38\n  >>> siPrimeCount(40)\n  39\n  >>> siPrimeCount(41)\n  40\n  >>> siPrimeCount(42)\n  41\n  >>> siPrimeCount(43)\n  42\n  >>> siPrimeCount(44)\n  43\n  >>> siPrimeCount(45)\n  44\n  >>> siPrimeCount(46)\n  45\n  >>> siPrimeCount(47)\n  46\n  >>> siPrimeCount(48)\n  47\n  >>> siPrimeCount(49)\n  48\n  >>> siPrimeCount(50)\n  49\n  >>> siPrimeCount(51)\n  50\n  >>> siPrimeCount(52)\n  51\n  >>> siPrimeCount(53)\n  52\n  >>> siPrimeCount(54)\n  53\n  >>> siPrimeCount(55)\n  54\n  >>> siPrimeCount(56)\n  55\n  >>> siPrimeCount(57)\n  56\n  >>> siPrimeCount(58)\n  57\n  >>> siPrimeCount(59)\n  58\n  >>> siPrimeCount(60)\n  59\n  >>> siPrimeCount(61)\n  60\n  >>> siPrimeCount(62)\n  61\n  >>> siPrimeCount(63)\n  62\n  >>> siPrimeCount(64)\n  63\n  >>> siPrimeCount(65)\n  64\n  >>> siPrimeCount(66)\n  65\n  >>> siPrimeCount(67)\n  66\n  >>> siPrimeCount(68)\n  67\n  >>> siPrimeCount(69)\n  68\n  >>> siPrimeCount(70)\n  69\n  >>> siPrimeCount(71)\n  70\n  >>> siPrimeCount(72)\n  71\n  >>> siPrimeCount(73)\n  72\n  >>> siPrimeCount(74)\n  73\n  >>> siPrimeCount(75)\n  74\n  >>> siPrimeCount(76)\n  75\n  >>> siPrimeCount(77)\n  76\n  >>> siPrimeCount(78)\n  77\n  >>> siPrimeCount(79)\n  78\n  >>> siPrimeCount(80)\n  79\n  >>> siPrimeCount(81)\n  80\n  >>> siPrimeCount(82)\n  81\n  >>> siPrimeCount(83)\n  82\n  >>> siPrimeCount(84)\n  83\n  >>> siPrimeCount(85)\n  84\n  >>> siPrimeCount(86)\n  85\n  >>> siPrimeCount(87)\n  86\n  >>> siPrimeCount(88)\n  87\n  >>> siPrimeCount(89)\n  88\n  >>> siPrimeCount(90)\n  89\n  >>> siPrimeCount(91)\n  90\n  >>> siPrimeCount(92)\n  91\n  >>> siPrimeCount(93)\n  92\n  >>> siPrimeCount(94)\n  93\n  >>> siPrimeCount(95)\n  94\n  >>> siPrimeCount(96)\n  95\n  >>> siPrimeCount(97)\n  96\n  >>> siPrimeCount(98)\n  97\n  >>> siPrimeCount(99)\n  98\n  >>> siPrimeCount(100)\n  99\n  >>> siPrimeCount(101)\n  100\n  >>> siPrimeCount(102)\n  101\n  >>> siPrimeCount(103)\n  102\n  >>> siPrimeCount(104)\n  103\n  >>> siPrimeCount(105)\n  104\n  >>> siPrimeCount(106)\n  105\n  >>> siPrimeCount(107)\n  106\n  >>> siPrimeCount(108)\n  107\n  >>> siPrimeCount(109)\n  108\n  >>> siPrimeCount(110)\n  109\n  >>> siPrimeCount(111)\n  110\n  >>> siPrimeCount(112"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    const f = poly(xs, x);\n    if (f === 0) {\n      return x;\n    }\n  }\n  return findZero(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero2 find x such that poly(x) = 0.\n  findZero2 returns only only zero point, even if there are many.\n  Moreover, findZero2 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero2([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero2([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    const f = poly2(xs, x);\n    if (f === 0) {\n      return x;\n    }\n  }\n  return findZero2(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero3 find x such that poly(x) = 0.\n  findZero3 returns only only zero point, even if there are many.\n  Moreover, findZero3 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero3([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero3([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    const f = poly3(xs, x);\n    if (f === 0) {\n      return x;\n    }\n  }\n  return findZero3(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero4 find x such that poly(x) = 0.\n  findZero4 returns only only zero point, even if there are many.\n  Moreover, findZero4 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero4([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero4([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    const f = poly4(xs, x);\n    if (f === 0) {\n      return x;\n    }\n  }\n  return findZero4(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3 - b % 3);\n  const sorted2 = [...l].sort((a, b) => a - b);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  */\nconst sortFifth = (l) => {\n  const sorted = [...l].sort((a, b) => a % 5 - b % 5);\n  const sorted2 = [...l].sort((a, b) => a - b);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortTenth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  */\nconst sortTenth = (l) => {\n  const sorted = [...l].sort((a, b) => a % 10 - b % 10);\n  const sorted2 = [...l].sort((a, b) => a - b);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> sortTwenty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  */\nconst sortTwenty = (l) => {\n  const sorted = [...l].sort((a, b) => a % 20 - b % 20);\n  const sorted2 = [...l].sort((a, b) => a - b);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by thirty, while its values at the indicies that are divisible by thirty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThirty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  >>> sortThirty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n  */\nconst sortThirty = (l) => {\n  const sorted = [...l].sort((a, b) => a % 30 - b % 30);\n  const sorted2 = [...l].sort((a, b) => a - b);\n  return [...sorted,...sorted2];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by sixty, while its values at the indicies that are divisible by sixty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSixty([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique = (l) => {\n  return unique(l).length;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique2 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique3 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique4 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique5 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique6 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique7 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique8 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique9 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique10 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique11 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique12 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique13 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push(b);\n    }\n    return a;\n  }, []);\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique14 = (l) => {\n  return l.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a.push"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst median = (l) => {\n  let middle = Math.floor(l.length / 2);\n  let sorted = l.slice(0, middle).sort();\n  let median = sorted[Math.floor(sorted.length / 2)];\n  return median;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l[maxIndex];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  let max = -Infinity;\n  let maxIndex = -1;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return l"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109)\n  9\n  >>> fizzBuzz(110)\n  10\n  >>> fizzBuzz(111)\n  11\n  >>> fizzBuzz(112)\n  12\n  >>> fizzBuzz(113)\n  13\n  >>> fizzBuzz(114)\n  14\n  >>> fizzBuzz(115)\n  15\n  >>> fizzBuzz(116)\n  16\n  >>> fizzBuzz(117)\n  17\n  >>> fizzBuzz(118)\n  18\n  >>> fizzBuzz(119)\n  19\n  >>> fizzBuzz(120)\n  20\n  >>> fizzBuzz(121)\n  21\n  >>> fizzBuzz(122)\n  22\n  >>> fizzBuzz(123)\n  23\n  >>> fizzBuzz(124)\n  24\n  >>> fizzBuzz(125)\n  25\n  >>> fizzBuzz(126)\n  26\n  >>> fizzBuzz(127)\n  27\n  >>> fizzBuzz(128)\n  28\n  >>> fizzBuzz(129)\n  29\n  >>> fizzBuzz(130)\n  30\n  >>> fizzBuzz(131)\n  31\n  >>> fizzBuzz(132)\n  32\n  >>> fizzBuzz(133)\n  33\n  >>> fizzBuzz(134)\n  34\n  >>> fizzBuzz(135)\n  35\n  >>> fizzBuzz(136)\n  36\n  >>> fizzBuzz(137)\n  37\n  >>> fizzBuzz(138)\n  38\n  >>> fizzBuzz(139)\n  39\n  >>> fizzBuzz(140)\n  40\n  >>> fizzBuzz(141)\n  41\n  >>> fizzBuzz(142)\n  42\n  >>> fizzBuzz(143)\n  43\n  >>> fizzBuzz(144)\n  44\n  >>> fizzBuzz(145)\n  45\n  >>> fizzBuzz(146)\n  46\n  >>> fizzBuzz(147)\n  47\n  >>> fizzBuzz(148)\n  48\n  >>> fizzBuzz(149)\n  49\n  >>> fizzBuzz(150)\n  50\n  >>> fizzBuzz(151)\n  51\n  >>> fizzBuzz(152)\n  52\n  >>> fizzBuzz(153)\n  53\n  >>> fizzBuzz(154)\n  54\n  >>> fizzBuzz(155)\n  55\n  >>> fizzBuzz(156)\n  56\n  >>> fizzBuzz(157)\n  57\n  >>> fizzBuzz(158)\n  58\n  >>> fizzBuzz(159)\n  59\n  >>> fizzBuzz(160)\n  60\n  >>> fizzBuzz(161)\n  61\n  >>> fizzBuzz(162)\n  62\n  >>> fizzBuzz(163)\n  63\n  >>> fizzBuzz(164)\n  64\n  >>> fizzBuzz(165)\n  65\n  >>> fizzBuzz(166)\n  66\n  >>> fizzBuzz(167)\n  67\n  >>> fizzBuzz(168)\n  68\n  >>> fizzBuzz(169)\n  69\n  >>> fizzBuzz(170)\n  70\n  >>> fizzBuzz(171)\n  71\n  >>> fizzBuzz(172)\n  72\n  >>> fizzBuzz(173)\n  73\n  >>> fizzBuzz(174)\n  74\n  >>> fizzBuzz(175)\n  75\n  >>> fizzBuzz(176)\n  76\n  >>> fizzBuzz(177)\n  77\n  >>> fizzBuzz(178)\n  78\n  >>> fizzBuzz(179)\n  79\n  >>> fizzBuzz(180)\n  80\n  >>> fizzBuzz(181)\n  81\n  >>> fizzBuzz(182)\n  82\n  >>> fizzBuzz(183)\n  83\n  >>> fizzBuzz(184)\n  84\n  >>> fizzBuzz(185)\n  85\n  >>> fizzBuzz(186)\n  86\n  >>> fizzBuzz(187)\n  87\n  >>> fizzBuzz(188)\n  88\n  >>> fizzBuzz(189)\n  89\n  >>> fizzBuzz(190)\n  90\n  >>> fizzBuzz(191)\n  91\n  >>> fizzBuzz(192)\n  92\n  >>> fizzBuzz(193)\n  93\n  >>> fizzBuzz(194)\n  94\n  >>> fizzBuzz(195)\n  95\n  >>> fizzBuzz(196)\n  96\n  >>> fizzBuzz(197)\n  97\n  >>> fizzBuzz(198)\n  98\n  >>> fizzBuzz(199)\n  99\n  >>> fizzBuzz(200)\n  100\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> fizzBuzz(100)\n  0\n  >>> fizzBuzz(101)\n  1\n  >>> fizzBuzz(102)\n  2\n  >>> fizzBuzz(103)\n  3\n  >>> fizzBuzz(104)\n  4\n  >>> fizzBuzz(105)\n  5\n  >>> fizzBuzz(106)\n  6\n  >>> fizzBuzz(107)\n  7\n  >>> fizzBuzz(108)\n  8\n  >>> fizzBuzz(109"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...even,...odd];\n};\n\nexport default sotrEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns dec"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, ww = 1, xx = 1, yy = 1, zz = 1, aaa = 1, bbb = 1, ccc = 1, ddd = 1, eee = 1, fff = 1, ggg = 1, hhh = 1, iii = 1, jjj = 1, kkk = 1, lll = 1, mmm = 1, nnn = 1, ooo = 1, ppp = 1, qqq = 1, rrr = 1, sss = 1, ttt = 1, uuu = 1, vvv = 1, www = 1, xxx = 1, yyy = 1, zzz = 1;\n  return (n + 1) * (n + 2) / 2;\n};\n\nexport default primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const last = sorted.pop();\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0 && sorted.length === 3;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let cars = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i] < cars[j]) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nconsole.log(acrRacelColision(3));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 1);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 6, 4, 4, 4, 12, 1, 124]\n  */\nconst multList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 2);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.5, 2, 2.5, 2, 2.5, 2, 9, 0, 122]\n  */\nconst divList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 2);\n  }\n  return result;\n};\n\n/*Return list with elements added by 3.\n  >>> addList([1, 2, 3])\n  [3, 4, 5]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst addList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 3);\n  }\n  return result;\n};\n\n/*Return list with elements subtracted by 3.\n  >>> subList([1, 2, 3])\n  [0, 1, 2]\n  >>> subList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst subList = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 3);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> multList([1, 2, 3])\n  [3, 6, 9]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 9, 6, 9, 6, 15, 1, 124]\n  */\nconst multList2 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] * 3);\n  }\n  return result;\n};\n\n/*Return list with elements divided by 3.\n  >>> divList([1, 2, 3])\n  [0.333, 0.667, 1.0]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 9.0, 0.0, 122.0]\n  */\nconst divList2 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] / 3);\n  }\n  return result;\n};\n\n/*Return list with elements added by 3.\n  >>> addList([1, 2, 3])\n  [3, 4, 5]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst addList2 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 3);\n  }\n  return result;\n};\n\n/*Return list with elements subtracted by 3.\n  >>> subList([1, 2, 3])\n  [0, 1, 2]\n  >>> subList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst subList2 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] - 3);\n  }\n  return result;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> multList([1, 2, 3])\n  [3, 6, 9]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 9, 6, 9, 6, 15, 1, 124]\n  */\nconst multList3 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x === sum);\n};\n\n/*\n  apirSsumoTOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to one, and false otherwise.\n  >>> apirSsumoTOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTOne([1])\n  false\n  */\nconst apirSsumoTOne = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x === sum);\n};\n\n/*\n  apirSsumoTNegative takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to negative, and false otherwise.\n  >>> apirSsumoTNegative([1, 3, 5, 0])\n  false\n  >>> apirSsumoTNegative([1, 3, -2, 1])\n  false\n  >>> apirSsumoTNegative([1, 2, 3, 7])\n  false\n  >>> apirSsumoTNegative([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTNegative([1])\n  false\n  */\nconst apirSsumoTNegative = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x === -sum);\n};\n\n/*\n  apirSsumoTEven takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to an even number, and false otherwise.\n  >>> apirSsumoTEven([1, 3, 5, 0])\n  false\n  >>> apirSsumoTEven([1, 3, -2, 1])\n  false\n  >>> apirSsumoTEven([1, 2, 3, 7])\n  false\n  >>> apirSsumoTEven([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTEven([1])\n  false\n  */\nconst apirSsumoTEven = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x === sum && x % 2 === 0);\n};\n\n/*\n  apirSsumoTOdd takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to an odd number, and false otherwise.\n  >>> apirSsumoTOdd([1, 3, 5, 0])\n  false\n  >>> apirSsumoTOdd([1, 3, -2, 1])\n  false\n  >>> apirSsumoTOdd([1, 2, 3, 7])\n  false\n  >>> apirSsumoTOdd([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTOdd([1])\n  false\n  */\nconst apirSsumoTOdd = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x === sum && x % 2!== 0);\n};\n\n/*\n  apirSsumoTZeroOrOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero or one, and false otherwise.\n  >>> apirSsumoTZeroOrOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZeroOrOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZeroOrOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZeroOrOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZeroOrOne([1])\n  false\n  */\nconst apirSsumoTZeroOrOne = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return l.some((x) => x === sum || x === -sum);\n};\n\n/*\n  apirSsumoTNegativeOrOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to negative or one, and false otherwise.\n  >>> apirSsumoTNegativeOrOne([1, 3, 5, 0])\n  false\n  >>> apirSsumoTNegativeOrOne([1, 3, -2, 1])\n  false\n  >>> apirSsumoTNegativeOrOne([1, 2, 3, 7])\n  false\n  >>> apirSsumoTNegativeOrOne([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTNegativeOrOne([1])\n  false\n  */\nconst apirSsumoTNegativeOrOne = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < 0) {\n    return '-' + changeBase(-x, base);\n  }\n  const num = x.toString(base);\n  const res = '';\n  for (let i = num.length - 1; i >= 0; i--) {\n    res = num[i] + res;\n  }\n  return res;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('12345')\n  5\n  >>> length('123')\n  3\n  >>> length('1234')\n  4\n  >>> length('1234567')\n  7\n  >>> length('123456789')\n  9\n  >>> length('12345678901')\n  10\n  >>> length('1234567890123')\n  11\n  >>> length('123456789012345')\n  12\n  >>> length('12345678901234567')\n  13\n  >>> length('1234567890123456789')\n  14\n  >>> length('123456789012345678901')\n  15\n  >>> length('12345678901234567890123')\n  16\n  >>> length('123456789012345678901234')\n  17\n  >>> length('1234567890123456789012345')\n  18\n  >>> length('12345678901234567890123456')\n  19\n  >>> length('123456789012345678901234567')\n  20\n  >>> length('1234567890123456789012345678')\n  21\n  >>> length('12345678901234567890123456789')\n  22\n  >>> length('1234567890123456789012345678901')\n  23\n  >>> length('12345678901234567890123456789012')\n  24\n  >>> length('123456789012345678901234567890123')\n  25\n  >>> length('1234567890123456789012345678901234')\n  26\n  >>> length('12345678901234567890123456789012345')\n  27\n  >>> length('123456789012345678901234567890123456')\n  28\n  >>> length('1234567890123456789012345678901234567')\n  29\n  >>> length('12345678901234567890123456789012345678')\n  30\n  >>> length('123456789012345678901234567890123456789')\n  31\n  >>> length('12345678901234567890123456789012345678901')\n  32\n  >>> length('123456789012345678901234567890123456789012')\n  33\n  >>> length('1234567890123456789012345678901234567890123')\n  34\n  >>> length('12345678901234567890123456789012345678901234')\n  35\n  >>> length('123456789012345678901234567890123456789012345')\n  36\n  >>> length('1234567890123456789012345678901234567890123456')\n  37\n  >>> length('12345678901234567890123456789012345678901234567')\n  38\n  >>> length('123456789012345678901234567890123456789012345678')\n  39\n  >>> length('1234567890123456789012345678901234567890123456789')\n  40\n  >>> length('123456789012345678901234567890123456789012345678901')\n  41\n  >>> length('1234567890123456789012345678901234567890123456789012')\n  42\n  >>> length('12345678901234567890123456789012345678901234567890123')\n  43\n  >>> length('123456789012345678901234567890123456789012345678901234')\n  44\n  >>> length('1234567890123456789012345678901234567890123456789012345')\n  45\n  >>> length('12345678901234567890123456789012345678901234567890123456')\n  46\n  >>> length('123456789012345678901234567890123456789012345678901234567')\n  47\n  >>> length('1234567890123456789012345678901234567890123456789012345678')\n  48\n  >>> length('12345678901234567890123456789012345678901234567890123456789')\n  49\n  >>> length('1234567890123456789012345678901234567890123456789012345678901')\n  50\n  >>> length('12345678901234567890123456789012345678901234567890123456789012')\n  51\n  >>> length('123456789012345678901234567890123456789012345678901234567890123')\n  52\n  >>> length('1234567890123456789012345678901234567890123456789012345678901234')\n  53\n  >>> length('12345678901234567890123456789012345678901234567890123456789012345')\n  54\n  >>> length('1234567"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea23 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea24 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea25 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea26 = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median2 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median3 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median4 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median5 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median6 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median7 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median8 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median9 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median10 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median11 = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  const right = sorted[half + 1];\n  if (mid > right) {\n    return mid;\n  } else {\n    return right;\n  }\n};\n\n/*Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\n"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome14 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome15 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return reversed === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst is"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return a random number in [0, n).\n  >>> rand(3)\n  0\n  >>> rand(3)\n  1\n  >>> rand(3)\n  2\n  >>> rand(3)\n  0\n  >>> rand(3)\n  1\n  >>> rand(3)\n  2\n  */\nconst rand = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp(3)\n  0\n  >>> randp(3)\n  1\n  >>> randp(3)\n  2\n  >>> randp(3)\n  0\n  >>> randp(3)\n  1\n  >>> randp(3)\n  2\n  */\nconst randp = (n) => {\n  return modp(n, rand(n));\n};\n\n/*Return a random number in [0, n).\n  >>> randp(3)\n  0\n  >>> randp(3)\n  1\n  >>> randp(3)\n  2\n  >>> randp(3)\n  0\n  >>> randp(3)\n  1\n  >>> randp(3)\n  2\n  */\nconst randp2 = (n) => {\n  return modp(randp(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp2(3)\n  0\n  >>> randp2(3)\n  1\n  >>> randp2(3)\n  2\n  >>> randp2(3)\n  0\n  >>> randp2(3)\n  1\n  >>> randp2(3)\n  2\n  */\nconst randp3 = (n) => {\n  return modp(randp2(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp3(3)\n  0\n  >>> randp3(3)\n  1\n  >>> randp3(3)\n  2\n  >>> randp3(3)\n  0\n  >>> randp3(3)\n  1\n  >>> randp3(3)\n  2\n  */\nconst randp4 = (n) => {\n  return modp(randp3(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp4(3)\n  0\n  >>> randp4(3)\n  1\n  >>> randp4(3)\n  2\n  >>> randp4(3)\n  0\n  >>> randp4(3)\n  1\n  >>> randp4(3)\n  2\n  */\nconst randp5 = (n) => {\n  return modp(randp4(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp5(3)\n  0\n  >>> randp5(3)\n  1\n  >>> randp5(3)\n  2\n  >>> randp5(3)\n  0\n  >>> randp5(3)\n  1\n  >>> randp5(3)\n  2\n  */\nconst randp6 = (n) => {\n  return modp(randp5(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp6(3)\n  0\n  >>> randp6(3)\n  1\n  >>> randp6(3)\n  2\n  >>> randp6(3)\n  0\n  >>> randp6(3)\n  1\n  >>> randp6(3)\n  2\n  */\nconst randp7 = (n) => {\n  return modp(randp6(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp7(3)\n  0\n  >>> randp7(3)\n  1\n  >>> randp7(3)\n  2\n  >>> randp7(3)\n  0\n  >>> randp7(3)\n  1\n  >>> randp7(3)\n  2\n  */\nconst randp8 = (n) => {\n  return modp(randp7(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp8(3)\n  0\n  >>> randp8(3)\n  1\n  >>> randp8(3)\n  2\n  >>> randp8(3)\n  0\n  >>> randp8(3)\n  1\n  >>> randp8(3)\n  2\n  */\nconst randp9 = (n) => {\n  return modp(randp8(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp9(3)\n  0\n  >>> randp9(3)\n  1\n  >>> randp9(3)\n  2\n  >>> randp9(3)\n  0\n  >>> randp9(3)\n  1\n  >>> randp9(3)\n  2\n  */\nconst randp10 = (n) => {\n  return modp(randp9(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp10(3)\n  0\n  >>> randp10(3)\n  1\n  >>> randp10(3)\n  2\n  >>> randp10(3)\n  0\n  >>> randp10(3)\n  1\n  >>> randp10(3)\n  2\n  */\nconst randp11 = (n) => {\n  return modp(randp10(n), n);\n};\n\n/*Return a random number in [0, n).\n  >>> randp11(3)\n  0\n  >>> randp11(3)\n  1\n  >>> randp11(3)\n  2\n  >>> randp11(3)\n  0\n  >>> randp11(3)\n  1\n  "}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\""}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowelsLength = vowels.length;\n  let textLength = text.length;\n  let i = 0;\n  let j = 0;\n  let result = '';\n  while (i < textLength) {\n    if (vowels.indexOf(text[i]) === -1) {\n      result += text[i];\n    } else {\n      j = i;\n      while (j < textLength) {\n        if (vowels.indexOf(text[j]) === -1) {\n          result += text[j];\n          break;\n        }\n        j++;\n      }\n      i = j;\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = remoevVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t1 || l[i] > t2) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i]!== t) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are not equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] === t) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst lessThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst lessThanEqualThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  false\n  */\nconst greaterThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] < t) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than or equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 100)\n  true\n  */\nconst greaterThanEqualThreshold = (l, t) => {\n  const len = l.length\n  if (len === 0) return false\n  let i = 0\n  while (i < len) {\n    if (l[i] > t) return false\n    i++\n  }\n  return true\n}\n\nmodule.exports = {\n  belowThreshold,\n  aboveThreshold,\n  betweenThresholds,\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  *\n  * > sum(1..n)\n  * 45\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) {\n    return false;\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWord('eabcd', 'dddddddabc')\n  true\n  >>> sameWord('eabcd', 'dddddddabce')\n  false\n  >>> sameWord('eabcd', 'ddddddd')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz')\n  false\n  >>> sameWord('eabcd', 'dddddddzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ==="}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const bracketsLength = brackets.length\n  const bracketsStack = []\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] === \"<\") {\n      bracketsStack.push(\"<\")\n    } else if (brackets[i] === \">\") {\n      if (bracketsStack.length === 0) {\n        return false\n      }\n      if (bracketsStack[bracketsStack.length - 1]!== \">\") {\n        return false\n      }\n      bracketsStack.pop()\n    }\n  }\n  return bracketsStack.length === 0\n}\n\nmodule.exports = correctBracketnig\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic2 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic3 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic4 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic5 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic6 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic7 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic8 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] < l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] > l[j]) {\n      j--\n    }\n    i++\n  }\n  return isMonotonic\n}\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic9 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let isMonotonic = true\n  while (i < j) {\n    if (l[i] > l[j]) {\n      isMonotonic = false\n      break\n    }\n    if (l[i] < l[j]) {\n"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sortedL1 = l1.sort();\n  const sortedL2 = l2.sort();\n  const intersection = sortedL1.filter(x => sortedL2.indexOf(x) > -1);\n  return intersection.sort();\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string of brackets, return a string with the brackets removed.\n  The brackets must be balanced.\n\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets(\"(()())\")\n  \"(()())\"\n  >>> removeBrackets"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i]\n    for (let j = i; j < len; j++) {\n      d[i] += xs[j] * (j - i)\n    }\n  }\n  return d\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n  210\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7])\n  495\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8])\n  1020\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  3045\n  */\nconst sumOfSquares = (xs) => {\n  const len = xs.length\n  const sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n  210\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7])\n  495\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8])\n  1020\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  3045\n  */\nconst sumOfSquares = (xs) => {\n  const len = xs.length\n  const sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n  210\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7])\n  495\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8])\n  1020\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  3045\n  */\nconst sumOfSquares = (xs) => {\n  const len = xs.length\n  const sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n  210\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7])\n  495\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8])\n  1020\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  3045\n  */\nconst sumOfSquares = (xs) => {\n  const len = xs.length\n  const sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n  210\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7])\n  495\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8])\n  1020\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  3045\n  */\nconst sumOfSquares = (xs) => {\n  const len = xs.length\n  const sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([1, 2, 3, 4, 5])\n  45\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n  210\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7])\n  495\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8])\n  1020\n  >>> sumOfSquares([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  3045"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nmodule.exports = vowelsConut;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = result.substr(1, result.length - 1);\n    }\n  } else {\n    for (let i = 0; i > shift; i--) {\n      result = result.substr(0, result.length - 1);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count2 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count3 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count4 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count5 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count6 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count7 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count8 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count9 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n  1\n  >>> count(\"\")\n  0\n  */\nconst count10 = (str) => {\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  input.\n  >>> count(\"abcabc\")\n  3\n  >>> count(\"abc\")\n"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruits = s.split(\" \")\n  const apples = fruits.filter(fruit => fruit.startsWith(\"apple\"))\n  const oranges = fruits.filter(fruit => fruit.startsWith(\"orange\"))\n  const mango = fruits.filter(fruit => fruit.startsWith(\"mango\"))\n  const totalApples = apples.length\n  const totalOranges = oranges.length\n  const totalMango = mango.length\n  const totalFruit = totalApples + totalOranges + totalMango\n  return n - totalFruit\n}\n\nexport default fruitDistribution\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const min = arr.reduce((a, b) => a < b? a : b, Infinity)\n  const min_index = arr.findIndex((x) => x === min)\n  return [min, min_index]\n}\n\nconst test = (actual, expected) => {\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual:   ${actual}`)\n  console.log(`Message:  ${JSON.stringify(actual)}`)\n  assert.deepEqual(actual, expected)\n}\n\ntest(pluck([4,2,3]), [2, 1])\ntest(pluck([1,2,3]), [2, 1])\ntest(pluck([5, 0, 3, 0, 4, 2]), [0, 1])\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nexport default search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = lst.slice()\n  sorted.sort((a, b) => a - b)\n  const sortedLen = sorted.length\n  const result = []\n  let i = 0\n  let j = sortedLen - 1\n  while (i < j) {\n    const min = sorted[i]\n    const max = sorted[j]\n    if (min < max) {\n      result.push(min)\n      i++\n    } else {\n      result.push(max)\n      j--\n    }\n  }\n  result.push(sorted[i])\n  return result\n}\n\nexport default stranegoSrtList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2);\n};\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qs = q.slice();\n  const sum = qs.reduce((a, b) => a + b, 0);\n  return sum <= w && qs.every((x, i) => x === qs[i + 1 - i]);\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([3], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return min;\n};\n\nconsole.log(msallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst1;\n  }\n  if (lst2.length === 0) {\n    return lst2;\n  }\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  let result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    let lst1Str = lst1[i];\n    let lst2Str = lst2[i];\n    if (lst1Str.length > lst2Str.length) {\n      result.push(lst1Str);\n    } else if (lst1Str.length < lst2Str.length) {\n      result.push(lst2Str);\n    } else {\n      result.push(lst1Str);\n    }\n  }\n  return result;\n};\n\nmodule.exports = ottalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    if (a % prime[i] === 0) {\n      result.push(prime[i]);\n      a = a / prime[i];\n    }\n  }\n  return a === 1 && result.length === 3;\n};\n\nconsole.log(isMultiplyPirme(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return isSimplePwoer(x / n, n);\n};\n\nconsole.log(isSimplePwoer(1, 4));\nconsole.log(isSimplePwoer(2, 2));\nconsole.log(isSimplePwoer(8, 2));\nconsole.log(isSimplePwoer(3, 2));\nconsole.log(isSimplePwoer(3, 1));\nconsole.log(isSimplePwoer(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a % 3 === 0) return iscube(a / 3)\n  return false\n}\n\nexport default iscube\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = num.split('');\n  const prime = [2, 3, 5, 7, 11, 13, 17];\n  const result = 0;\n  for (let i = 0; i < hex.length; i++) {\n    const digit = parseInt(hex[i], 16);\n    if (prime.indexOf(digit)!== -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(hexKey('AB'));\nconsole.log(hexKey('1077E'));\nconsole.log(hexKey('ABED1A33'));\nconsole.log(hexKey('123456789ABCDEF0'));\nconsole.log(hexKey('2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return 'db' + binary + 'db';\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal2 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal3 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal4 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal5 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal6 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal7 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal8 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal9 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal10 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal11 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal12 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal13 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal14 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal15 = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal;\n};\n\nconst binaryToDecimal16 = (binary) => {\n  const decimal = [];\n"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    let num = parseInt(s[i]);\n    if (isNaN(num)) {\n      return false;\n    }\n    sum += num;\n    if (sum > 9) {\n      sum -= 9;\n    }\n    if (sum < 0) {\n      sum += 9;\n    }\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count >= 3;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = grades.sort((a, b) => a - b)\n  const gradesLength = gradesArray.length\n  const gradesLengthHalf = gradesLength / 2\n  const gradesLengthQuarter = gradesLength / 4\n  const gradesLengthThird = gradesLength / 3\n  const gradesLengthTwo = gradesLength / 2\n  const gradesLengthOne = gradesLength / 1\n  const gradesLengthZero = gradesLength\n\n  let gradesArrayHalf = gradesArray.slice(0, gradesLengthHalf)\n  let gradesArrayQuarter = gradesArray.slice(gradesLengthHalf, gradesLengthQuarter)\n  let gradesArrayThird = gradesArray.slice(gradesLengthQuarter, gradesLengthThird)\n  let gradesArrayTwo = gradesArray.slice(gradesLengthThird, gradesLengthTwo)\n  let gradesArrayOne = gradesArray.slice(gradesLengthTwo, gradesLengthOne)\n  let gradesArrayZero = gradesArray.slice(gradesLengthOne, gradesLengthZero)\n\n  let gradesArrayHalfLength = gradesArrayHalf.length\n  let gradesArrayQuarterLength = gradesArrayQuarter.length\n  let gradesArrayThirdLength = gradesArrayThird.length\n  let gradesArrayTwoLength = gradesArrayTwo.length\n  let gradesArrayOneLength = gradesArrayOne.length\n  let gradesArrayZeroLength = gradesArrayZero.length\n\n  let gradesArrayHalfSum = 0\n  let gradesArrayQuarterSum = 0\n  let gradesArrayThirdSum = 0\n  let gradesArrayTwoSum = 0\n  let gradesArrayOneSum = 0\n  let gradesArrayZeroSum = 0\n\n  for (let i = 0; i < gradesArrayHalfLength; i++) {\n    gradesArrayHalfSum += gradesArrayHalf[i]\n  }\n\n  for (let i = 0; i < gradesArrayQuarterLength; i++) {\n    gradesArrayQuarterSum += gradesArrayQuarter[i]\n  }\n\n  for (let i = 0; i < gradesArrayThirdLength; i++) {\n    gradesArrayThirdSum += gradesArrayThird[i]\n  }\n\n  for (let i = 0; i < gradesArrayTwoLength; i++) {\n    gradesArrayTwoSum += gradesArrayTwo[i]\n  }\n\n  for (let i = 0; i < gradesArrayOneLength; i++) {\n    gradesArrayOneSum += gradesArrayOne[i]\n  }\n\n  for (let i = 0; i < gradesArrayZeroLength; i++) {\n    gradesArrayZeroSum += gradesArrayZero[i]\n  }\n\n  let gradesArraySum = gradesArrayHalfSum + gradesArrayQuarterSum + gradesArrayThirdSum + gradesArrayTwoSum + gradesArrayOneSum + gradesArrayZeroSum\n\n  let gradesArraySumHalf = gradesArraySum / gradesArrayHalfLength\n  let gradesArraySumQuarter = gradesArraySum / gradesArrayQuarterLength\n  let gradesArraySumThird = gradesArraySum / gradesArrayThirdLength\n  let gradesArraySumTwo = gradesArraySum / gradesArrayTwoLength\n  let gradesArraySumOne = gradesArraySum / gradesArrayOneLength\n  let gradesArraySumZero = gradesArraySum / gradesArrayZeroLength\n\n  let gradesArraySumHalfLength = gradesArraySumHalf.length\n  let gradesArraySumQuarterLength = gradesArraySumQuarter.length\n  let gradesArraySumThirdLength = gradesArraySumThird.length\n  let gradesArraySumTwoLength = gradesArraySumTwo.length\n  let gradesArraySumOneLength = gradesArraySumOne.length\n  let gradesArraySumZeroLength = gradesArraySumZero.length\n\n  let gradesArraySumHalfSum = 0\n  let gradesArraySumQuarterSum = 0\n  let gradesArraySumThirdSum = 0\n  let gradesArraySumTwoSum = 0\n  let gradesArraySumOneSum = 0\n  let gradesArraySumZeroSum = 0\n\n  for (let i = 0; i < gradesArraySumHalfLength; i++) {\n    gradesArraySumHalfSum += gradesArraySumHalf[i]\n  }\n\n  for (let i = 0; i < gradesArraySumQuarterLength; i++) {\n    gradesArraySumQuarterSum += gradesArraySumQuarter[i]\n  }\n\n  for (let i = 0; i < gradesArraySumThirdLength; i++) {\n    gradesArraySumThirdSum += gradesArraySumThird[i]\n  }\n\n  for (let i = 0; i < gradesArraySumTwoLength; i++) {\n    gradesArraySumTwoSum += gradesArraySumTwo[i]\n  }\n\n  for (let i = 0; i < gradesArraySumOneLength; i++) {\n    gradesArraySumOneSum += gradesArraySumOne[i]\n  }\n\n  for (let i = 0; i < gradesArraySumZeroLength; i++) {\n    gradesArraySumZeroSum += gradesArraySumZero[i]\n  }\n\n  let gradesArraySumHalfSum = gradesArraySumHalfSum + gradesArraySumQuarterSum + gradesArraySumThirdSum + gradesArraySumTwoSum + gradesArraySumOneSum + gradesArraySumZeroSum\n\n  let gradesArraySumHalfLength = gradesArraySumHalfSum.length\n  let gradesArraySumQuarterLength = gradesArraySumQuarterSum.length\n  let gradesArraySumThirdLength = gradesArraySumThirdSum.length\n  let gradesArraySumTwoLength = gradesArraySumTwoSum.length\n  let gradesArraySumOneLength = gradesArraySumOneSum.length\n  let gradesArraySumZeroLength = gradesArraySumZeroSum.length\n\n  let gradesArraySumHalfSumLength = gradesArraySumHalfSum.length\n  let gradesArraySumQuarterSumLength = gradesArraySumQuarterSum.length\n  let"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  const isPrime = (number) => {\n    return prime.test(number) && number.length === 1 && number!== 2;\n  };\n  const isPrimeLength = (length) => {\n    return isPrime(length) && length > 1;\n  };\n  return isPrimeLength(string.length);\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (i === 1) {\n      count++\n    } else if (i === n) {\n      count++\n    } else if (i % 10 === 1) {\n      count++\n    }\n  }\n  return count\n}\n\nconsole.log(startsOneEnds(10))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const words = s.split(' ')\n  const sortedWords = words.sort((a, b) => {\n    const aChar = a.charCodeAt(0)\n    const bChar = b.charCodeAt(0)\n    return aChar - bChar\n  })\n  return sortedWords.join(' ')\n}\n\nconsole.log(antSihuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0] - b[0])\n  const rowsSortedReverse = rowsSorted.reverse()\n  const row = rowsSortedReverse.find(row => row[x] === x)\n  return row? [row[0], row[x]] : []\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.slice())\n  const rowsSorted = rows.sort((a, b) => a[0]"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  const sortedArrayLength = sortedArray.length;\n  let i = 0;\n  let j = sortedArrayLength - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sortedArray[i] + sortedArray[j];\n    if (sum % 2 === 0) {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum;\n      j--;\n    } else {\n      sortedArray[i] = sortedArray[j];\n      sortedArray[j] = sum;\n      i++;\n    }\n  }\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rot = (x, y) => {\n    const a = alphabet.charAt(x)\n    const b = alphabet.charAt(y)\n    return a + b\n  }\n  const rotate = (s, n) => {\n    const len = s.length\n    const rot = (x, y) => {\n      const a = alphabet.charAt(x)\n      const b = alphabet.charAt(y)\n      return a + b\n    }\n    const result = ''\n    for (let i = 0; i < len; i++) {\n      result += rot(i, n)\n    }\n    return result\n  }\n  return rotate(s, 2)\n}\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'asdfghjkl'\n  */\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rot = (x, y) => {\n    const a = alphabet.charAt(x)\n    const b = alphabet.charAt(y)\n    return a + b\n  }\n  const rotate = (s, n) => {\n    const len = s.length\n    const rot = (x, y) => {\n      const a = alphabet.charAt(x)\n      const b = alphabet.charAt(y)\n      return a + b\n    }\n    const result = ''\n    for (let i = 0; i < len; i++) {\n      result += rot(i, n)\n    }\n    return result\n  }\n  return rotate(s, 2)\n}\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rot = (x, y) => {\n    const a = alphabet.charAt(x)\n    const b = alphabet.charAt(y)\n    return a + b\n  }\n  const rotate = (s, n) => {\n    const len = s.length\n    const rot = (x, y) => {\n      const a = alphabet.charAt(x)\n      const b = alphabet.charAt(y)\n      return a + b\n    }\n    const result = ''\n    for (let i = 0; i < len; i++) {\n      result += rot(i, n)\n    }\n    return result\n  }\n  return rotate(s, 2)\n}\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'asdfghjkl'\n  */\nconst decrypt2 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rot = (x, y) => {\n    const a = alphabet.charAt(x)\n    const b = alphabet.charAt(y)\n    return a + b\n  }\n  const rotate = (s, n) => {\n    const len = s.length\n    const rot = (x, y) => {\n      const a = alphabet.charAt(x)\n      const b = alphabet.charAt(y)\n      return a + b\n    }\n    const result = ''\n    for (let i = 0; i < len; i++) {\n      result += rot(i, n)\n    }\n    return result\n  }\n  return rotate(s, 2)\n}\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt3 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rot = (x, y) => {\n    const a = alphabet.charAt(x)\n    const b = alphabet.charAt(y)\n    return a + b\n  }\n  const rotate = (s, n) => {\n    const len = s.length\n    const rot = (x, y) => {\n      const a = alphabet.charAt(x)\n      const b = alphabet.charAt(y)\n      return a + b\n    }\n    const result = ''\n    for (let i = 0; i < len; i++) {\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconsole.log(nextSmallset([1, 2, 3, 4, 5]));\nconsole.log(nextSmallset([5, 1, 4, 3, 2]));\nconsole.log(nextSmallset([]));\nconsole.log(nextSmallset([1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring2 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring3 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring4 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring5 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring6 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring words. A boring word is a word that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoring(\"Hello world\")\n  0\n  >>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoring7 = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (x === y - z) || (x === z - y);\n};\n\n/*\n  Create a function that takes 3 numbers.\n  Returns true if one"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let nextLetter = message[i + 1];\n    let nextNextLetter = message[i + 2];\n    if (letter === nextLetter) {\n      encoded += letter;\n    } else if (letter === nextNextLetter) {\n      encoded += letter.toUpperCase();\n    } else if (letter === nextLetter.toUpperCase()) {\n      encoded += letter.toLowerCase();\n    } else if (letter === nextLetter.toLowerCase()) {\n      encoded += letter.toUpperCase();\n    } else {\n      encoded += letter.toLowerCase();\n    }\n  }\n  return encoded;\n};\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const max = (a, b) => {\n    return a > b? a : b;\n  };\n  const sum = (a, b) => {\n    return a + b;\n  };\n  const maxPrime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (prime(i)) {\n        return i;\n      }\n      i++;\n    }\n    return 1;\n  };\n  const maxSum = (lst) => {\n    let maxPrime = 1;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (prime(lst[i])) {\n        maxPrime = maxPrime * lst[i];\n      } else {\n        sum += lst[i];\n      }\n    }\n    return maxPrime + sum;\n  };\n  return maxSum(lst);\n};\n\nconsole.log(ksjkasddk([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(ksjkasddk([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(ksjkasddk([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(ksjkasddk([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(ksjkasddk([0,81,12,3,1,21]));\nconsole.log(ksjkasddk([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  let isAllLower = true\n  let isAllUpper = true\n  for (let i = 0; i < keys.length; i++) {\n    if (keys[i].length === 1) {\n      if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n        isAllLower = false\n      }\n    } else {\n      if (keys[i].toLowerCase()!== keys[i].toUpperCase()) {\n        isAllUpper = false\n      }\n    }\n  }\n  return isAllLower && isAllUpper\n}\n\n/*\n  Given a string, return true if the string is a palindrome, \n  else return false.\n  Examples:\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return true.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n  isPalindrome(\"A man, a plan,"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = primes.indexOf(i)\n    if (index === -1) {\n      break\n    }\n    result.push(i)\n  }\n  return result\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_unit = a.toString().split('').map(x => parseInt(x));\n  let b_unit = b.toString().split('').map(x => parseInt(x));\n  let product = 0;\n  for (let i = 0; i < a_unit.length; i++) {\n    for (let j = 0; j < b_unit.length; j++) {\n      product += a_unit[i] * b_unit[j];\n    }\n  }\n  return product;\n};\n\n// Test Cases\nconst testCases = [\n  { a: 148, b: 412, expected: 16 },\n  { a: 19, b: 28, expected: 72 },\n  { a: 2020, b: 1851, expected: 0 },\n  { a: 14, b: -15, expected: 20 }\n];\n\n// Run Tests\ntestCases.forEach(({ a, b, expected }) => {\n  console.log(`${a} * ${b} = ${multiply(a, b)}`);\n  console.log(`Expected: ${expected}`);\n  console.log(`Actual:   ${multiply(a, b)}`);\n  console.log(`---`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 2\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 1\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 2\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants3 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 1\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 2\n  countVowels('dBBE') returns 0\n  */\nconst countVowels3 = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 1\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const num = parseInt(value, 10);\n  const abs = Math.abs(num);\n  const absInt = Math.floor(abs);\n  const absFrac = abs - absInt;\n  const frac = Math.round(absFrac * 10);\n  const int = num + frac;\n  return int;\n};\n\nexport default closestInetger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst makeAPile2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile10 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile11 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile12 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile13 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile14 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile15 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile16 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile17 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile18 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n  }\n  return pile\n}\n\nconst makeAPile19 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i)\n    }\n"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString9 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString10 = (s) => {\n  const words = s.split(/[\\s,]+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") =="}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum16 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum17 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst chooseNum18 = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  let i = x;\n  while (i <= y) {\n    if (i % 2 === 0) {\n      "}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.round(avg)\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  const result = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    if (num % 2 === 0) {\n      continue;\n    }\n    result.push(num);\n  }\n  return result;\n};\n\nexport default uniqueDigtis;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  return arr.length;\n}\n\nconst ybSort = (arr) => {\n  let sorted = arr.slice();\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n}\n\nconst ybReverse = (arr) => {\n  let reversed = arr.slice();\n  reversed.reverse();\n  return reversed;\n}\n\nconst ybReplace = (arr) => {\n  let replaced = arr.slice();\n  replaced.forEach((item, index) => {\n    replaced[index] = replace(item);\n  });\n  return replaced;\n}\n\nconst replace = (item) => {\n  if (item < 10) {\n    return `${item}`;\n  } else {\n    return `${item}`;\n  }\n}\n\nconst ybArray = (arr) => {\n  let sorted = ybSort(arr);\n  let reversed = ybReverse(sorted);\n  let replaced = ybReplace(reversed);\n  return replaced;\n}\n\nmodule.exports = ybArray;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n      num = num / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count++;\n    } else {\n      const numDigits = Math.abs(num);\n      for (let j = 0; j < numDigits; j++) {\n        const digit = num % 10;\n        if (digit > 0) {\n          count++;\n        }\n        num = num / 10;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(countNmus([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall3 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall4 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall5 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall6 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall7 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall8 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n    } else {\n      j--;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall9 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return j === i;\n};\n\nconst moveOneBall10 = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const i = 0;\n  const j = 0;\n  const k = 0;\n  const result = [];\n  while (i < len1 && j < len2) {\n    if (lst1[i] % 2 === 0) {\n      result.push(lst1[i]);\n      i++;\n    } else if (lst2[j] % 2 === 0) {\n      result.push(lst2[j]);\n      j++;\n    } else {\n      k = (lst1[i] + lst2[j]) % 2;\n      result.push(k);\n      i++;\n      j++;\n    }\n  }\n  if (i === len1) {\n    while (j < len2) {\n      result.push(lst2[j]);\n      j++;\n    }\n  } else if (j === len2) {\n    while (i < len1) {\n      result.push(lst1[i]);\n      i++;\n    }\n  }\n  return result.length === 0? \"NO\" : \"YES\";\n};\n\nconsole.log(xechange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4, 5], [1, 2, 3, 4]));\nconsole.log(xechange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(xechange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('').map(letter => letter.toLowerCase());\n  const histogram = {};\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split('').map(letter => letter.toLowerCase());\n  const histogram = {};"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = s.split('').reverse().join('');\n  let isPalindrome = result === s;\n  return [result, isPalindrome];\n};\n\nconst test = (s, c) => {\n  const [result, isPalindrome] = reveresDelete(s, c);\n  console.log(`${s} -> ${result}`);\n  console.log(`${s} is ${isPalindrome? 'a palindrome' : 'not a palindrome'}`);\n};\n\ntest('abcdef', 'ae');\ntest('abcdef', 'b');\ntest('abcdedcba', 'ab');\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const oddCount = (str) => {\n      const oddCount = (str) => {\n        const oddCount = (str) => {\n          const oddCount = (str) => {\n            const oddCount = (str) => {\n              const oddCount = (str) => {\n                const oddCount = (str) => {\n                  const oddCount = (str) => {\n                    const oddCount = (str) => {\n                      const oddCount = (str) => {\n                        const oddCount = (str) => {\n                          const oddCount = (str) => {\n                            const oddCount = (str) => {\n                              const oddCount = (str) => {\n                                const oddCount = (str) => {\n                                  const oddCount = (str) => {\n                                    const oddCount = (str) => {\n                                      const oddCount = (str) => {\n                                        const oddCount = (str) => {\n                                          const oddCount = (str) => {\n                                            const oddCount = (str) => {\n                                              const oddCount = (str) => {\n                                                const oddCount = (str) => {\n                                                  const oddCount = (str) => {\n                                                    const oddCount = (str) => {\n                                                      const oddCount = (str) => {\n                                                        const oddCount = (str) => {\n                                                          const oddCount = (str) => {\n                                                           const oddCount = (str) => {\n                                                            const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                                              const oddCount = (str) => {\n                                   "}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = nums.reduce((acc, num) => acc + num, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumIndex = nums.indexOf(minSum)\n  return {\n    minSum,\n    minSumIndex\n  }\n}\n\nexport default minSubArraySum\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = new Array(rows)\n  const count = 0\n  for (let i = 0; i < rows; i++) {\n    buckets[i] = new Array(cols)\n    for (let j = 0; j < cols; j++) {\n      buckets[i][j] = {\n        row: i,\n        col: j,\n        capacity: capacity,\n        count: 0\n      }\n    }\n  }\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j].count++\n      }\n    }\n  }\n  let count = 0\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (buckets[i][j].count === 0) {\n        count++\n        buckets[i][j].count = 0\n      }\n    }\n  }\n  return count\n}\n\nconst test = (grid, capacity) => {\n  console.log(`grid: ${grid}`)\n  console.log(`capacity: ${capacity}`)\n  console.log(`count: ${count}`)\n}\n\ntest([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\ntest([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\ntest([[0,0,0], [0,0,0]], 5)\ntest([[0,0,0], [0,0,0]], 0)\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    if (word.length === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the number of words in the string s that contain exactly \nn consonants.\n\nIf the string s is empty then the function should return 0.\n\nExamples:\nselectWdors(\"Mary had a little lamb\", 4) ==> 1\nselectWdors(\"Mary had a little lamb\", 3) ==> 0\nselectWdors(\"simple white space\", 2) ==> 0\nselectWdors(\"Hello world\", 4) ==> 1\nselectWdors(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  return words.filter(word => word.length === n).length\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the number of words in the string s that contain exactly \nn consonants.\n\nIf the string s is empty then the function should return 0.\n\nExamples:\nselectWdors(\"Mary had a little lamb\", 4) ==> 1\nselectWdors(\"Mary had a little lamb\", 3) ==> 0\nselectWdors(\"simple white space\", 2) ==> 0\nselectWdors(\"Hello world\", 4) ==> 1\nselectWdors(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  return words.filter(word => word.length === n).length\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the number of words in the string s that contain exactly \nn consonants.\n\nIf the string s is empty then the function should return 0.\n\nExamples:\nselectWdors(\"Mary had a little lamb\", 4) ==> 1\nselectWdors(\"Mary had a little lamb\", 3) ==> 0\nselectWdors(\"simple white space\", 2) ==> 0\nselectWdors(\"Hello world\", 4) ==> 1\nselectWdors(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  return words.filter(word => word.length === n).length\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the number of words in the string s that contain exactly \nn consonants.\n\nIf the string s is empty then the function should return 0.\n\nExamples:\nselectWdors(\"Mary had a little lamb\", 4) ==> 1\nselectWdors(\"Mary had a little lamb\", 3) ==> 0\nselectWdors(\"simple white space\", 2) ==> 0\nselectWdors(\"Hello world\", 4) ==> 1\nselectWdors(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  return words.filter(word => word.length === n).length\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the number of words in the string s that contain exactly \nn consonants.\n\nIf the string s is empty then the function should return 0.\n\nExamples:\nselectWdors(\"Mary had a little lamb\", 4) ==> 1\nselectWdors(\"Mary had a little lamb\", 3) ==> 0\nselectWdors(\"simple white space\", 2) ==> 0\nselectWdors(\"Hello world\", 4) ==> 1\nselectWdors(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  return words.filter(word => word.length === n).length\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the number of words in the string s that contain exactly \nn consonants.\n\nIf the string s is empty then the function should return 0.\n\nExamples:\nselectWdors(\"Mary had a little lamb\", 4) ==> 1\nselectWdors(\"Mary had a little lamb\", 3) ==> 0\nselectWdors(\"simple white space\", 2) ==> 0\nselectWdors(\"Hello world\", 4) ==> 1\nselectWdors(\"Uncle sam\", 3) ==> 1\n*/\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  return words.filter(word => word.length === n).length\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the number of words in the string s that contain exactly \nn consonants.\n\nIf the string s is empty then the function should return 0.\n\nExamples:\nselectWdors(\"Mary had a little lamb\", 4) ==> 1\nselectWdors(\"Mary had a little lamb\", 3) ==> 0\nselectWdors(\"simple white space\", 2) ==> 0\nselectWdors(\"Hello world\", 4) ==> 1\nselectWdors(\"Uncle sam\", 3) ==>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const closestVowel = vowels.find(v => {\n    const index = word.lastIndexOf(v);\n    const consonant = consonants.find(c => index > 0 && index < word.length - 1 && word[index - 1] === c);\n    return consonant &&!vowels.includes(word[index + 1]);\n  });\n  return closestVowel? closestVowel : '';\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverse = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString2 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString3 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString4 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString5 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString6 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString7 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString8 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString9 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString10 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString11 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString12 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\nconst reverseString13 = (str) => {\n  return str.split('').reverse().join('');\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"abc\") ==> \"cba\"\n  reverse(\"\") ==> \"\"\n  reverse(\"a\") ==> \"a\"\n  */\n"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium2 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium3 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium4 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium5 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium6 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium7 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium8 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium9 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium10 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return [min, max, arr[index]];\n};\n\nconst maxmium11 = (arr, k) => {\n  let max = arr[0];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nexport default addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz2 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz3 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz4 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz5 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz6 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz7 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz8 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz9 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz10 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz11 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return collatz(n / 2);\n    }\n    odd.push(n);\n    return collatz(3 * n + 1);\n  };\n  return collatz(n);\n};\n\nconst getOddCollatz12 = (n) => {\n  const odd = [];\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd;\n    }\n    if (n % 2 === 0) {\n      odd.push(n);\n      return coll"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 2 && day > 29) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 3 && day > 31) {\n    return false;\n  }\n\n  if (month === 5 && day > 31) {\n    return false;\n  }\n\n  if (month === 7 && day > 31) {\n    return false;\n  }\n\n  if (month === 8 && day > 31) {\n    return false;\n  }\n\n  if (month === 10 && day > 31) {\n    return false;\n  }\n\n  if (month === 12 && day > 31) {\n    return false;\n  }\n\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n\n  return true;\n};\n\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('15-01-2012'));\nconsole.log(validDate('04-0-2040'));\nconsole.log(validDate('06-04-2020'));\nconsole.log(validDate('06/04/2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const lowerCaseLetters = word.toLowerCase().split('');\n    const oddLetters = lowerCaseLetters.filter((letter) => {\n      return letter.charCodeAt(0) % 2 === 1;\n    });\n    result.push(word, oddLetters);\n  }\n  return result;\n};\n\nconst splitWords11 = (txt) => {\n  const words = txt.split("}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let prev = undefined\n  while (i < len) {\n    if (lst[i] < lst[j]) {\n      return false\n    }\n    if (lst[i] > lst[j]) {\n      if (prev === undefined) {\n        prev = lst[i]\n      } else if (prev!== lst[i]) {\n        return false\n      }\n    }\n    i++\n    j++\n  }\n  return true\n}\n\nexport default isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\";\n  }\n\n  const start = Math.max(start1, start2);\n  const end = Math.min(end1, end2);\n\n  const length = end - start;\n\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n};\n\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  const prod = arr.reduce((acc, elem) => acc * elem, 1);\n  const sign = arr.reduce((acc, elem) => acc + elem, 0);\n\n  return sum * prod * sign;\n};\n\nmodule.exports = prodSigsn;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n).fill(0);\n  const visited = new Array(n).fill(0);\n  const dp_row = new Array(m).fill(0);\n  const dp_col = new Array(m).fill(0);\n  const dp_diag = new Array(m).fill(0);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i] = Math.min(dp[i], grid[i][j]);\n      if (i > 0 && j > 0) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + grid[i][j]);\n      }\n      if (i > 0) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + grid[i][j]);\n      }\n      if (j > 0) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + grid[i][j]);\n      }\n      if (i > 0 && j > 0) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + grid[i][j]);\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (dp[i] === k) {\n        visited[i] = 1;\n        break;\n      }\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[i] === 0) {\n        dp_row[j] = Math.min(dp_row[j], dp[i]);\n      }\n      if (visited[i] === 1) {\n        dp_col[j] = Math.min(dp_col[j], dp[i]);\n      }\n      if (i > 0 && j > 0) {\n        dp_diag[j] = Math.min(dp_diag[j], dp[i]);\n      }\n    }\n  }\n\n  let result = [];\n  for (let i = 0; i < m; i++) {\n    result.push(Math.min(dp_row[i], Math.min(dp_col[i], dp_diag[i])));\n  }\n  return result;\n};\n\nconst test = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ],\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\n];\n\nfor (let i = 0; i < test.length; i++) {\n  console.log(minPath(test[i], 3));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  let a = 1, b = 1, c = 1, result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(a + b + c);\n    c = b;\n    b = a + c;\n    a = b + c;\n  }\n  return result;\n};\n\nconsole.log(tir(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      stack.push(string[i])\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  const squaredSum = sum * sum;\n  return squaredSum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter = lastChar.match(/[a-zA-Z]/)\n  return isALetter &&!isALetter.match(/\\b[a-zA-Z]+\\b/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isANumber = lastChar.match(/[0-9]/)\n  return isANumber &&!isANumber.match(/\\b[0-9]+\\b/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAPunctuation(\"apple pie\") ➞ false\n  checkIfLastCharIsAPunctuation(\"apple pi e\") ➞ true\n  checkIfLastCharIsAPunctuation(\"apple pi e \") ➞ false\n  checkIfLastCharIsAPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsAPunctuation = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isAPunctuation = lastChar.match(/[.,;:?!]/)\n  return isAPunctuation &&!isAPunctuation.match(/\\b[.,;:?!]+\\b/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a space and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsASpace(\"apple pie\") ➞ false\n  checkIfLastCharIsASpace(\"apple pi e\") ➞ true\n  checkIfLastCharIsASpace(\"apple pi e \") ➞ false\n  checkIfLastCharIsASpace(\"\") ➞ false\n  */\nconst checkIfLastCharIsASpace = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isASpace = lastChar.match(/\\s/)\n  return isASpace &&!isASpace.match(/\\b[\\s]+\\b/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a whitespace and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAWord(\"apple pie\") ➞ false\n  checkIfLastCharIsAWord(\"apple pi e\") ➞ true\n  checkIfLastCharIsAWord(\"apple pi e \") ➞ false\n  checkIfLastCharIsAWord(\"\") ➞ false\n  */\nconst checkIfLastCharIsAWord = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isAWord = lastChar.match(/\\s/)\n  return isAWord &&!isAWord.match(/\\b[\\s]+\\b/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetterOrANumber = lastChar.match(/[a-zA-Z0-9]/)\n  return isALetterOrANumber &&!isALetterOrANumber.match(/\\b[a-zA-Z0-9]+\\b/)\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetterOrANumber(\"apple pie\") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetterOrANumber(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetterOrANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterOrANumberOrAPunctuation = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetterOrANumberOrAPunctuation = lastChar.match(/[a-zA-Z0-9.,;:?!]/)\n  return isALetterOrANumberOrAPunctuation &&!isALetterOrANumberOrAPunctuation.match(/\\b[a-zA-Z0-9.,;"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (arr[i] > max) {\n        max = arr[i];\n        maxIndex = i;\n      }\n    } else {\n      return maxIndex;\n    }\n  }\n  return -1;\n};\n\n// Test\nconsole.log(canArrange([1,2,4,3,5]));\nconsole.log(canArrange([1,2,3]));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const largestNegativeInt = Math.max.apply(Math, lst.filter(x => x < 0));\n  const smallestPositiveInt = Math.min.apply(Math, lst.filter(x => x > 0));\n  return largestNegativeInt === largestNegativeInt? (null, largestNegativeInt) : (smallestPositiveInt === largestNegativeInt? (null, largestNegativeInt) : (largestNegativeInt, smallestPositiveInt));\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers2 = (lst) => {\n  const largestNegativeInt = Math.max.apply(Math, lst.filter(x => x < 0));\n  const smallestPositiveInt = Math.min.apply(Math, lst.filter(x => x > 0));\n  return largestNegativeInt === largestNegativeInt? (null, largestNegativeInt) : (smallestPositiveInt === largestNegativeInt? (null, largestNegativeInt) : (largestNegativeInt, smallestPositiveInt));\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers3 = (lst) => {\n  const largestNegativeInt = Math.max.apply(Math, lst.filter(x => x < 0));\n  const smallestPositiveInt = Math.min.apply(Math, lst.filter(x => x > 0));\n  return largestNegativeInt === largestNegativeInt? (null, largestNegativeInt) : (smallestPositiveInt === largestNegativeInt? (null, largestNegativeInt) : (largestNegativeInt, smallestPositiveInt));\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers4 = (lst) => {\n  const largestNegativeInt = Math.max.apply(Math, lst.filter(x => x < 0));\n  const smallestPositiveInt = Math.min.apply(Math, lst.filter(x => x > 0));\n  return largestNegativeInt === largestNegativeInt? (null, largestNegativeInt) : (smallestPositiveInt === largestNegativeInt? (null, largestNegativeInt) : (largestNegativeInt, smallestPositiveInt));\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers5 = (lst) => {\n  const largestNegativeInt = Math.max.apply(Math, lst.filter(x => x < 0));\n  const smallestPositiveInt = Math.min.apply(Math, lst.filter(x => x > 0));\n  return largestNegativeInt === largestNegativeInt? (null, largestNegativeInt) : (smallestPositiveInt === largestNegativeInt? (null, largestNegativeInt) : (largestNegativeInt, smallestPositiveInt));\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers6 = (lst) => {\n  const largestNegativeInt = Math.max.apply(Math, lst.filter(x => x < 0));\n  const smallestPositiveInt = Math.min.apply(Math, lst.filter(x => x > 0));\n  return largestNegativeInt === largestNegativeInt? (null, largestNegativeInt) : (smallestPositiveInt === largestNegativeInt? (null, largestNegativeInt) :"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compaerOne(1, 2.5));\nconsole.log(compaerOne(1, \"2,3\"));\nconsole.log(compaerOne(\"5,1\", \"6\"));\nconsole.log(compaerOne(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2!== 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2!== 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOddEven = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2!== 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2!== 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2!== 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOddOddOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumEvenOddOddOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2!== 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOddOddOddOddOdd = (n) => {\n  const sum = n + n + n + n\n  return sum === n && sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  "}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial2(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial3(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial4(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial5(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial6(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial7(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial8(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial9(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial10(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * specialFactorial11(n - 1)\n}\n\n/*The Catalan number is defined as:\n  catalan(n) = n*(n+1)/2 * (n+1) * (n+2) / 6\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  return text.replace(/\\s/g, '_');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores2 = (text) => {\n  return text.replace(/\\s+/g,'');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores3 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores4 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores5 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores6 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores7 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores8 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores9 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example 1\"\n  fixSpacse(\" Example 2\") == \"Example 2\"\n  fixSpacse(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores10 = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_5 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_6 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_7 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_8 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_9 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_10 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_11 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const file_name_regex_12 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.[a-zA"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubesSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresCubesSquaresSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const newSentence = ''\n  words.forEach((word, index) => {\n    const newWord = ''\n    const length = word.length\n    const prime = primes[index]\n    for (let i = 0; i < length; i++) {\n      newWord += word[i]\n      if (newWord.length === prime) {\n        newSentence += newWord\n        newWord = ''\n      }\n    }\n  })\n  return newSentence\n}\n\nconsole.log(wrodsInSentenec('This is a test'))\nconsole.log(wrodsInSentenec('lets go for swimming'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  }\n\n  return false;\n};\n\nconsole.log(simpilfy(\"1/5\", \"5/1\"));\nconsole.log(simpilfy(\"1/6\", \"2/1\"));\nconsole.log(simpilfy(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nmodule.exports = roderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const odd = nums.filter(num => num % 2 === 1)\n  const even = nums.filter(num => num % 2 === 0)\n  return odd.length + even.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.reduce((acc, curr) => {\n    const index = a.indexOf(curr);\n    if (index!== -1) {\n      const next = a[index + 1];\n      const nextIndex = a.indexOf(next);\n      if (nextIndex!== -1) {\n        const nextNext = a[nextIndex + 1];\n        if (nextNext === curr) {\n          acc++;\n        }\n      }\n    }\n    return acc;\n  }, 0);\n  return result;\n};\n\nconsole.log(getMaxTrpiles(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = getOrbit(planet1);\n  const planet2Orbit = getOrbit(planet2);\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet2);\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet1);\n  const planet1OrbitLengthDiff = planet1OrbitLength - planet2OrbitLength;\n  const planet2OrbitLengthDiff = planet2OrbitLength - planet1OrbitLength;\n  const planet1OrbitLengthDiffAbs = Math.abs(planet1OrbitLengthDiff);\n  const planet2OrbitLengthDiffAbs = Math.abs(planet2OrbitLengthDiff);\n  const planet1OrbitLengthDiffAbsMinus1 = planet1OrbitLengthDiffAbs - 1;\n  const planet2OrbitLengthDiffAbsMinus1 = planet2OrbitLengthDiffAbs - 1;\n  const planet1OrbitLengthDiffAbsMinus2 = planet1OrbitLengthDiffAbs - 2;\n  const planet2OrbitLengthDiffAbsMinus2 = planet2OrbitLengthDiffAbs - 2;\n  const planet1OrbitLengthDiffAbsMinus3 = planet1OrbitLengthDiffAbs - 3;\n  const planet2OrbitLengthDiffAbsMinus3 = planet2OrbitLengthDiffAbs - 3;\n  const planet1OrbitLengthDiffAbsMinus4 = planet1OrbitLengthDiffAbs - 4;\n  const planet2OrbitLengthDiffAbsMinus4 = planet2OrbitLengthDiffAbs - 4;\n  const planet1OrbitLengthDiffAbsMinus5 = planet1OrbitLengthDiffAbs - 5;\n  const planet2OrbitLengthDiffAbsMinus5 = planet2OrbitLengthDiffAbs - 5;\n  const planet1OrbitLengthDiffAbsMinus6 = planet1OrbitLengthDiffAbs - 6;\n  const planet2OrbitLengthDiffAbsMinus6 = planet2OrbitLengthDiffAbs - 6;\n  const planet1OrbitLengthDiffAbsMinus7 = planet1OrbitLengthDiffAbs - 7;\n  const planet2OrbitLengthDiffAbsMinus7 = planet2OrbitLengthDiffAbs - 7;\n  const planet1OrbitLengthDiffAbsMinus8 = planet1OrbitLengthDiffAbs - 8;\n  const planet2OrbitLengthDiffAbsMinus8 = planet2OrbitLengthDiffAbs - 8;\n  const planet1OrbitLengthDiffAbsMinus9 = planet1OrbitLengthDiffAbs - 9;\n  const planet2OrbitLengthDiffAbsMinus9 = planet2OrbitLengthDiffAbs - 9;\n  const planet1OrbitLengthDiffAbsMinus10 = planet1OrbitLengthDiffAbs - 10;\n  const planet2OrbitLengthDiffAbsMinus10 = planet2OrbitLengthDiffAbs - 10;\n  const planet1OrbitLengthDiffAbsMinus11 = planet1OrbitLengthDiffAbs - 11;\n  const planet2OrbitLengthDiffAbsMinus11 = planet2OrbitLengthDiffAbs - 11;\n  const planet1OrbitLengthDiffAbsMinus12 = planet1OrbitLengthDiffAbs - 12;\n  const planet2OrbitLengthDiffAbsMinus12 = planet2OrbitLengthDiffAbs - 12;\n  const planet1OrbitLengthDiffAbsMinus13 = planet1OrbitLengthDiffAbs - 13;\n  const planet2OrbitLengthDiffAbsMinus13 = planet2OrbitLengthDiffAbs - 13;\n  const planet1OrbitLengthDiffAbsMinus14 = planet1OrbitLengthDiffAbs - 14;\n  const planet2OrbitLengthDiffAbsMinus14 = planet2OrbitLengthDiffAbs - 14;\n  const planet1OrbitLengthDiffAbsMinus15 = planet1OrbitLengthDiffAbs - 15;\n  const planet2OrbitLengthDiffAbsMinus15 = planet2OrbitLengthDiffAbs - 15;\n  const planet1OrbitLengthDiffAbsMinus16 = planet1OrbitLengthDiffAbs - 16;\n  const planet2OrbitLengthDiffAbsMinus16 = planet2OrbitLengthDiffAbs - 16;\n  const planet1OrbitLengthDiffAbsMinus17 = planet1OrbitLengthDiffAbs - 17;\n  const planet2OrbitLengthDiffAbsMinus17 = planet2OrbitLengthDiffAbs - 17;\n  const planet1OrbitLengthDiffAbsMinus18 = planet1OrbitLengthDiffAbs - 18;\n  const planet2OrbitLengthDiffAbsMinus18 = planet2OrbitLengthDiffAbs - 18;\n  const planet1OrbitLengthDiffAbsMinus19 = planet1OrbitLengthDiffAbs - 19;\n  const planet2OrbitLengthDiffAbsMinus19 = planet2OrbitLengthDiffAbs - 19;\n  const planet1OrbitLengthDiffAbsMinus20 = planet1OrbitLengthDiffAbs - 20;\n  const planet2OrbitLengthDiffAbsMinus20 = planet2OrbitLengthDiffAbs - 20;\n  const planet1OrbitLengthDiffAbsMinus21 = planet1OrbitLengthDiffAbs - 21;\n  const planet2OrbitLengthDiffAbsMinus21 = planet2OrbitLengthDiffAbs - 21;\n  const planet1OrbitLengthDiffAbsMinus22 = planet1OrbitLengthDiffAbs - 22;\n  const planet2OrbitLengthDiffAbsMinus22 = planet2OrbitLengthDiffAbs - 22;\n  const planet1OrbitLengthDiffAbsMinus23 = planet1OrbitLengthDiffAbs - 23;\n  const planet2OrbitLengthDiffAbsMinus23 = planet2OrbitLengthDiffAbs - 23;\n  const planet1OrbitLengthDiffAbsMinus24 = planet1OrbitLengthDiffAbs - 24;\n"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.filter((curr, index) => index % 2 === 0).map(curr => curr.length);\n};\n\nconsole.log(sortedListSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst xOrYPrime = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (isPrime(n)) {\n    "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => {\n    if (num % 2 === 1) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEven = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => {\n    if (num % 2 === 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => {\n    if (num % 2 === 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => {\n    if (num % 2 === 0) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceOddEven = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => {\n    if (num % 2 === 1) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => {\n    if (num % 2 === 1) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceOddEvenOdd = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n  const sum = lst.reduce((acc, num) => {\n    if (num % 2 === 1) {\n      return acc + num * num;\n    }\n    return acc;\n  }, 0);\n  return sum;\n};\n\nexport {\n  doublehTeDifference,\n  doublehTeDifference"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i]);\n    result.push(diff);\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.charAt(0).toUpperCase();\n    const lc = ext.charAt(1).toLowerCase();\n    strength[ext] = strength[ext] || (cap - lc);\n  });\n  const strongest = Object.keys(strength).sort((a, b) => strength[a] - strength[b])[0];\n  return `${class_name}.${strongest}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let a_len = a.length;\n  let b_len = b.length;\n  let i = 0;\n  let j = 0;\n  while (i < a_len && j < b_len) {\n    if (a[i] === b[j]) {\n      i++;\n      j++;\n    } else if (a[i] === b[j] + a[i + 1] && a[i + 1] === b[j + 1]) {\n      i += 2;\n      j += 2;\n    } else if (a[i] === b[j] + a[i + 1] && a[i + 1] === b[j + 1] + a[i + 2]) {\n      i += 3;\n      j += 3;\n    } else if (a[i] === b[j] + a[i + 1] && a[i + 1] === b[j + 1] + a[i + 2] && a[i + 2] === b[j + 2]) {\n      i += 4;\n      j += 4;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(ccypatternChekc(\"abcd\",\"abd\"));\nconsole.log(ccypatternChekc(\"hello\",\"ell\"));\nconsole.log(ccypatternChekc(\"whassup\",\"psus\"));\nconsole.log(ccypatternChekc(\"abab\",\"baa\"));\nconsole.log(ccypatternChekc(\"efef\",\"eeff\"));\nconsole.log(ccypatternChekc(\"himenss\",\"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\nconsole.log(evenOddCount(12345));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  let roman = []\n  let i = 1\n  while (number > 0) {\n    if (number % 10 === 0) {\n      number = number / 10\n      roman.push('x')\n    } else if (number % 5 === 0) {\n      number = number / 5\n      roman.push('v')\n    } else if (number % 3 === 0) {\n      number = number / 3\n      roman.push('c')\n    } else {\n      number = number\n      roman.push('i')\n    }\n    i++\n  }\n  return roman.reverse().join('')\n}\n\nmodule.exports = intToMinRioman\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle2 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle3 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle4 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle5 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle6 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle7 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle8 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle9 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle10 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  } else {\n    return false;\n  }\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  let maxCount = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < words.length; i++) {\n    const count = words[i].length;\n    if (count > maxCount) {\n      maxCount = count;\n      maxIndex = i;\n    }\n  }\n  return words[maxIndex];\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining]\n  }\n  return [number, remaining]\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test28 = [\n  [5, 6,"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2 - 1) {\n    throw new Error('Operator list and operand list are not of equal length.')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op2)\n    } else if (op === '-') {\n      result.push(op3 - op2)\n    } else if (op === '*') {\n      result.push(op3 * op2)\n    } else if (op === '/') {\n      result.push(op3 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined.`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2 - 1) {\n    throw new Error('Operator list and operand list are not of equal length.')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op2)\n    } else if (op === '-') {\n      result.push(op3 - op2)\n    } else if (op === '*') {\n      result.push(op3 * op2)\n    } else if (op === '/') {\n      result.push(op3 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined.`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2 - 1) {\n    throw new Error('Operator list and operand list are not of equal length.')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op2)\n    } else if (op === '-') {\n      result.push(op3 - op2)\n    } else if (op === '*') {\n      result.push(op3 * op2)\n    } else if (op === '/') {\n      result.push(op3 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined.`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2 - 1) {\n    throw new Error('Operator list and operand list are not of equal length.')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op2)\n    } else if (op === '-') {\n      result.push(op3 - op2)\n    } else if (op === '*') {\n      result.push(op3 * op2)\n    } else if (op === '/') {\n      result.push(op3 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op3, op2))\n    } else {\n      throw new Error(`Operator ${op} is not defined.`)\n    }\n  }\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  if (len!== len2 - 1) {\n    throw new Error('Operator list and operand list are not of equal length.')\n  }\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    const op3 = op2\n    if (op === '+') {\n      result.push(op3 + op2)\n    } else if (op === '-') {\n      result.push(op3 - op2)\n    } else if (op === '*') {\n      result.push(op3 * op2)\n    } else if (op === '/') {\n      result.push(op3 / op2)\n"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'd7a8d9b9d9d4c0a9e0a9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9e9f0c9"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result.filter(x => x % 2 === 0);\n};\n\nconst generateIntegers2 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = ("}
