{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) return false\n  const min = numbers[0]\n  const max = numbers[len - 1]\n  for (let i = 1; i < len - 1; i++) {\n    if (Math.abs(min - numbers[i]) < threshold && Math.abs(max - numbers[i]) < threshold) return true\n  }\n  return false\n}\n\n/*\n  Given a list of numbers, return the median of the list.\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  >>> median([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  4.5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  4.5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4.5\n  */\nconst median = (numbers) => {\n  const len = numbers.length\n  if (len < 2) return undefined\n  const sorted = numbers.sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  } else {\n    return sorted[half]\n  }\n}\n\n/*\n  Given a list of numbers, return the mean of the list.\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  >>> mean([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> mean([1, 2, 3, 4, 5, 6, 7])\n  4.5\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8])\n  4.5\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4.5\n  */\nconst mean = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sum = sum(numbers)\n  return sum / len\n}\n\n/*\n  Given a list of numbers, return the sum of the list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  35\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  42\n  */\nconst sum = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += numbers[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the mode of the list.\n  >>> mode([1, 2, 3, 4, 5])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  6\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sorted = numbers.sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  } else {\n    return sorted[half]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the list.\n  >>> mode([1, 2, 3, 4, 5])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  6\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sorted = numbers.sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  } else {\n    return sorted[half]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the list.\n  >>> mode([1, 2, 3, 4, 5])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  6\n  */\nconst mode = (numbers) => {\n  const len = numbers.length\n  if (len < 1) return undefined\n  const sorted = numbers.sort()\n  const half = len / 2\n  if (len % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2\n  } else {\n    return sorted[half]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the list.\n  >>> mode([1, 2, 3, 4, 5])\n  5\n  >>> mode([1, 2, 3", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const stack = []\n  const open_parens = []\n  const close_parens = []\n  const open_brackets = []\n  const close_brackets = []\n  const open_braces = []\n  const close_braces = []\n  const open_curly_braces = []\n  const close_curly_braces = []\n  const open_square_brackets = []\n  const close_square_brackets = []\n  const open_angle_brackets = []\n  const close_angle_brackets = []\n  const open_quotes = []\n  const close_quotes = []\n  const open_quotes_single = []\n  const close_quotes_single = []\n  const open_quotes_double = []\n  const close_quotes_double = []\n  const open_quotes_single_double = []\n  const close_quotes_single_double = []\n  const open_quotes_single_single = []\n  const close_quotes_single_single = []\n  const open_quotes_double_double = []\n  const close_quotes_double_double = []\n  const open_quotes_single_single_double = []\n  const close_quotes_single_single_double = []\n  const open_quotes_single_single_single = []\n  const close_quotes_single_single_single = []\n  const open_quotes_double_single = []\n  const close_quotes_double_single = []\n  const open_quotes_single_double_double = []\n  const close_quotes_single_double_double = []\n  const open_quotes_single_single_double_double = []\n  const close_quotes_single_single_double_double = []\n  const open_quotes_single_single_single_double = []\n  const close_quotes_single_single_single_double = []\n  const open_quotes_single_single_single_single = []\n  const close_quotes_single_single_single_single = []\n  const open_quotes_double_single_double = []\n  const close_quotes_double_single_double = []\n  const open_quotes_single_double_double_double = []\n  const close_quotes_single_double_double_double = []\n  const open_quotes_single_single_double_double_double = []\n  const close_quotes_single_single_double_double_double = []\n  const open_quotes_single_single_single_double_double_double = []\n  const close_quotes_single_single_single_double_double_double = []\n  const open_quotes_double_single_double_double_double = []\n  const close_quotes_double_single_double_double_double = []\n  const open_quotes_single_double_double_double_double = []\n  const close_quotes_single_double_double_double_double = []\n  const open_quotes_single_single_double_double_double_double = []\n  const close_quotes_single_single_double_double_double_double = []\n  const open_quotes_double_single_double_double_double_double = []\n  const close_quotes_double_single_double_double_double_double = []\n  const open_quotes_single_double_double_double_double_double = []\n  const close_quotes_single_double_double_double_double_double = []\n  const open_quotes_double_double_double_double_double = []\n  const close_quotes_double_double_double_double_double = []\n  const open_quotes_single_double_double_double_double_double = []\n  const close_quotes_single_double_double_double_double_double = []\n  const open_quotes_double_double_double_double_double_double = []\n  const close_quotes_double_double_double_double_double_double = []\n  const open_quotes_single_double_double_double_double_double_double = []\n  const close_quotes_single_double_double_double_double_double_double = []\n  const open_quotes_double_double_double_double_double_double_double = []\n  const close_quotes_double_double_double_double_double_double_double = []\n  const open_quotes_single_double_double_double_double_double_double_double = []\n  const close_quotes_single_double_double_double_double_double_double_double = []\n  const open_quotes_double_double_double_double_double_double_double_double = []\n  const close_quotes_double_double_double_double_double_double_double_double = []\n  const open_quotes_single_double_double_double_double_double_double_double_double = []\n  const close_quotes_single_double_double_double_double_double_double_double_double = []\n  const open_quotes_double_double_double_double_double_double_double_double_double = []\n  const close_quotes_double_double_double_double_double_double_double_double_double = []\n  const open_quotes_single_double_double_double_double_double_double_double_double_double = []\n  const close_quotes_single_double_double_double_double_double_double_double_double_double = []\n  const open_quotes_double_double_double_double_double_double_double_double_double_double = []\n  const close_quotes_double_double_double_double_double_double_double_double_double_double = []\n  const open_quotes_single_double_double_double_double_double_double_double_double_double_double = []\n  const close_quotes_single_double_double_double_double_", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const reversed = string.split('').reverse().join('');\n  const prefix = reversed.substring(0, longestPalindrome.length);\n  const suffix = reversed.substring(longestPalindrome.length);\n  return prefix + suffix;\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with the supplied string.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cataa')\n  'cataa'\n  */\nconst longestPalindrome = (string) => {\n  const palindromes = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i + 1);\n    const suffix = string.substring(i + 1);\n    if (isPalindrome(prefix + suffix)) {\n      palindromes.push(prefix + suffix);\n    }\n  }\n  return palindromes.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with the supplied string.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cataa')\n  'cataa'\n  */\nconst longestPalindrome = (string) => {\n  const palindromes = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i + 1);\n    const suffix = string.substring(i + 1);\n    if (isPalindrome(prefix + suffix)) {\n      palindromes.push(prefix + suffix);\n    }\n  }\n  return palindromes.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with the supplied string.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cataa')\n  'cataa'\n  */\nconst longestPalindrome = (string) => {\n  const palindromes = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i + 1);\n    const suffix = string.substring(i + 1);\n    if (isPalindrome(prefix + suffix)) {\n      palindromes.push(prefix + suffix);\n    }\n  }\n  return palindromes.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with the supplied string.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cataa')\n  'cataa'\n  */\nconst longestPalindrome = (string) => {\n  const palindromes = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i + 1);\n    const suffix = string.substring(i + 1);\n    if (isPalindrome(prefix + suffix)) {\n      palindromes.push(prefix + suffix);\n    }\n  }\n  return palindromes.sort((a, b) => {\n    return a.length - b.length;\n  }).pop();\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with the supplied string.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longestPalindrome('cat')\n  'cat'\n  >>> longestPalindrome('cata')\n  'cata'\n  >>> longestPalindrome('cataa')\n  'cataa'\n  */\nconst longestPalindrome = (string) => {\n  const palindromes = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i + 1);\n    const suffix = string.substring(i + 1);\n    if (isPalindrome(prefix + suffix)) {\n      palindromes.push(prefix + suffix);\n    }\n", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nexport default makeAPile;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/g);\n  return words;\n};\n\n/*\n  You will be", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum2(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum3(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum4(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum5(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum6(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum7(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum8(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum9(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum10(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum11(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum12(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum13(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return chooseNum14(y, x);\n  }\n  if (x % 2 === 0) {\n    return x;\n  }\n  if (x % 2 === 1) {\n    return x + 1;\n  }\n  return -1;\n};\n\nconst chooseNum15 = (x, y) => {\n  if (x === y) {\n    return x;", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  return Math.floor(avg)\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst roundedAvg =", "passed": 0}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\nconst uniqueDigtis = (x) => {\n  const uniqueDigtis = [];\n  for (let i = 0; i < x.length; i++) {\n    const num = x[i];\n    const digit = num % 10;\n    if (digit % 2 === 0) {\n      continue;\n    }\n    uniqueDigtis.push(num);\n  }\n  return uniqueDigtis;\n};\n\n", "passed": 0}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  return arr.length;\n}\n\nconst ybSort = (arr) => {\n  let sorted = [];\n  let sortedArr = [];\n  let sortedArrLength = 0;\n  let sortedArrLength2 = 0;\n  let sortedArrLength3 = 0;\n  let sortedArrLength4 = 0;\n  let sortedArrLength5 = 0;\n  let sortedArrLength6 = 0;\n  let sortedArrLength7 = 0;\n  let sortedArrLength8 = 0;\n  let sortedArrLength9 = 0;\n  let sortedArrLength10 = 0;\n  let sortedArrLength11 = 0;\n  let sortedArrLength12 = 0;\n  let sortedArrLength13 = 0;\n  let sortedArrLength14 = 0;\n  let sortedArrLength15 = 0;\n  let sortedArrLength16 = 0;\n  let sortedArrLength17 = 0;\n  let sortedArrLength18 = 0;\n  let sortedArrLength19 = 0;\n  let sortedArrLength20 = 0;\n  let sortedArrLength21 = 0;\n  let sortedArrLength22 = 0;\n  let sortedArrLength23 = 0;\n  let sortedArrLength24 = 0;\n  let sortedArrLength25 = 0;\n  let sortedArrLength26 = 0;\n  let sortedArrLength27 = 0;\n  let sortedArrLength28 = 0;\n  let sortedArrLength29 = 0;\n  let sortedArrLength30 = 0;\n  let sortedArrLength31 = 0;\n  let sortedArrLength32 = 0;\n  let sortedArrLength33 = 0;\n  let sortedArrLength34 = 0;\n  let sortedArrLength35 = 0;\n  let sortedArrLength36 = 0;\n  let sortedArrLength37 = 0;\n  let sortedArrLength38 = 0;\n  let sortedArrLength39 = 0;\n  let sortedArrLength40 = 0;\n  let sortedArrLength41 = 0;\n  let sortedArrLength42 = 0;\n  let sortedArrLength43 = 0;\n  let sortedArrLength44 = 0;\n  let sortedArrLength45 = 0;\n  let sortedArrLength46 = 0;\n  let sortedArrLength47 = 0;\n  let sortedArrLength48 = 0;\n  let sortedArrLength49 = 0;\n  let sortedArrLength50 = 0;\n  let sortedArrLength51 = 0;\n  let sortedArrLength52 = 0;\n  let sortedArrLength53 = 0;\n  let sortedArrLength54 = 0;\n  let sortedArrLength55 = 0;\n  let sortedArrLength56 = 0;\n  let sortedArrLength57 = 0;\n  let sortedArrLength58 = 0;\n  let sortedArrLength59 = 0;\n  let sortedArrLength60 = 0;\n  let sortedArrLength61 = 0;\n  let sortedArrLength62 = 0;\n  let sortedArrLength63 = 0;\n  let sortedArrLength64 = 0;\n  let sortedArrLength65 = 0;\n  let sortedArrLength66 = 0;\n  let sortedArrLength67 = 0;\n  let sortedArrLength68 = 0;\n  let sortedArrLength69 = 0;\n  let sortedArrLength70 = 0;\n  let sortedArrLength71 = 0;\n  let sortedArrLength72 = 0;\n  let sortedArrLength73 = 0;\n  let sortedArrLength74 = 0;\n  let sortedArrLength75 = 0;\n  let sortedArrLength76 = 0;\n  let sortedArrLength77 = 0;\n  let sortedArrLength78 = 0;\n  let sortedArrLength79 = 0;\n  let sortedArrLength80 = 0;\n  let sortedArrLength81 = 0;\n  let sortedArrLength82 = 0;\n  let sortedArrLength83 = 0;\n  let sortedArrLength84 = 0;\n  let sortedArrLength85 = 0;\n  let sortedArrLength86 = 0;\n  let sortedArrLength87 = 0;\n  let sortedArrLength88 = 0;\n  let sortedArrLength89 = 0;\n  let sortedArrLength90 = 0;\n  let sortedArrLength91 = 0;\n  let sortedArrLength92 = 0;\n  let sortedArrLength93 = 0;\n  let sortedArrLength94 = 0;\n  let sortedArrLength95 = 0;\n  let sortedArrLength96 = 0;\n  let sortedArrLength97 = 0;\n  let sortedArrLength98 = 0;\n  let sortedArrLength99 = 0;\n  let sortedArrLength100 = 0;\n  let sortedArrLength101 = 0;\n  let sortedArrLength102 = 0;\n  let sortedArrLength103 = 0;\n  let sortedArrLength104 = 0;\n  let sortedArrLength105 = 0;\n  let sortedArrLength106 = 0;\n  let sortedArrLength107 = 0;\n  let sortedArrLength108 = 0;\n  let sortedArrLength109 = 0;\n  let sortedArrLength110 = 0;\n  let sortedArrLength111 = 0;\n  let sortedArrLength112 = 0;\n  let sorted", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i * f(i - 1));\n    }\n  }\n  return result;\n};\n\nconst f5 = f(5);\nconsole.log(f5);\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n    if (i % 2 === 0) {\n      evenPalindrome.push(i)\n    } else {\n      oddPalindrome.push(i)\n    }\n  }\n  return [even, odd, evenPalindrome, oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n    if (i % 2 === 0) {\n      evenPalindrome.push(i)\n    } else {\n      oddPalindrome.push(i)\n    }\n  }\n  return [even, odd, evenPalindrome, oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n    if (i % 2 === 0) {\n      evenPalindrome.push(i)\n    } else {\n      oddPalindrome.push(i)\n    }\n  }\n  return [even, odd, evenPalindrome, oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n    if (i % 2 === 0) {\n      evenPalindrome.push(i)\n    } else {\n      oddPalindrome.push(i)\n    }\n  }\n  return [even, odd, evenPalindrome, oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n    if (i % 2 === 0) {\n      evenPalindrome.push(i)\n    } else {\n      oddPalindrome.push(i)\n    }\n  }\n  return [even, odd, evenPalindrome, oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n    if (i % 2 === 0) {\n      evenPalindrome.push(i)\n    } else {\n      oddPalindrome.push(i)\n    }\n  }\n  return [even, odd, evenPalindrome, oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      num = num / 2\n    }\n    if (i % 2 === 0) {\n      evenPalindrome.push(i)\n    } else {\n      oddPalindrome.push(i)\n    }\n  }\n  return [even, odd, evenPalindrome, oddPalindrome]\n}\n\nconst evenOddPalindrome = (n) => {\n  const odd = 0\n  const even = 0\n  const oddPalindrome = []\n  const evenPalindrome = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num) {\n      if (num % 2 === 0) {\n        even += 1\n      } else {\n        odd += 1\n      }\n      ", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus2 = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus3 = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus4 = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus5 = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus6 = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus7 = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus8 = (arr) => {\n  const n = arr.length\n  const count = 0\n  for (let i = 0; i < n; i++) {\n    const sum = arr[i]\n    if (sum > 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function countNmus", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let i = 0;\n  let j = arr.length - 1;\n  let k = 0;\n  let flag = false;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      flag = true;\n      k = arr[i];\n      arr[i] = arr[j];\n      arr[j] = k;\n      i++;\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return flag;\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor2 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor3 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor4 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor5 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor6 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor7 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor8 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor9 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor10 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const result = [];\n  for (let i = 0; i < aLen; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor11 = (a,", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  let i = 0;\n  let j = 0;\n  let flag = false;\n  while (i < len1 && j < len2) {\n    if (lst1[i] % 2 === 0) {\n      lst1[i] = lst2[j];\n      j++;\n    } else if (lst2[j] % 2 === 0) {\n      lst2[j] = lst1[i];\n      i++;\n    } else {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nconst test = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n", "passed": 0}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1;\n    } else {\n      histogram[test[i]]++;\n    }\n  }\n  return histogram;\n};\n\nconst test = histogram('a b c a b a b b a b c');\nconsole.log(test);\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = 0\n  let result = ''\n  while (i < len) {\n    if (s[i] === c[j]) {\n      j++\n    } else {\n      result += s[i]\n      i++\n    }\n  }\n  return [result, j === c.length]\n}\n\nconst test = (s, c) => {\n  const [result, isPalindrome] = reveresDelete(s, c)\n  return [result, isPalindrome]\n}\n\nmodule.exports = test\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (str) => {\n    const count = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] % 2 === 1) {\n        count++;\n      }\n    }\n    return count;\n  };\n  return lst.map(oddCount);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum2 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum3 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum4 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum5 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum6 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum7 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum8 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let minSumLengthIndex = 0\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i]\n    if (sum < 0) {\n      sum = 0\n    }\n    if (sum > minSum) {\n      minSum = sum\n      minSumIndex = i\n      minSumLength = 1\n    } else if (sum === minSum) {\n      minSumLength++\n    }\n  }\n  return {\n    minSum,\n    minSumIndex,\n    minSumLength\n  }\n}\n\nconst minSubArraySum9 = (nums) => {\n  let sum = 0\n  let minSum = 0\n  let minSumIndex = 0\n  let minSumLength = 0\n  let", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(m);\n  for (let i = 0; i < m; i++) {\n    buckets[i] = new Array(n);\n    for (let j = 0; j < n; j++) {\n      buckets[i][j] = 0;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[j][i] = 1;\n        count++;\n        if (count === capacity) {\n          return count;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst grid = [\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n];\n\nconst capacity = 1;\n\nconsole.log(maxFill(grid, capacity));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).length;\n    const bInt = b.toString(2).length;\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt > bInt) {\n      return 1;\n    }\n    return a - b;\n  });\n  return sorted;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  const words = s.split(\" \")\n  const result = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const count = word.split(\"\").filter(x => x.length === n).length\n    if (count === n) {\n      result.push(word)\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\nIf the nth word does not exist, return the empty string.\nNote: The word may contain only letters and spaces.\nExamples:\nselectNth(\"Hello world\", 1) ==> \"world\"\nselectNth(\"Hello world\", 2) ==> \"world\"\nselectNth(\"Hello world\", 3) ==> \"\"\nselectNth(\"Hello world\", 4) ==> \"\"\nselectNth(\"Hello world\", 5) ==> \"\"\nselectNth(\"Hello world\", 6) ==> \"world\"\nselectNth(\"Hello world\", 7) ==> \"world\"\nselectNth(\"Hello world\", 8) ==> \"world\"\nselectNth(\"Hello world\", 9) ==> \"world\"\nselectNth(\"Hello world\", 10) ==> \"\"\nselectNth(\"Hello world\", 11) ==> \"\"\nselectNth(\"Hello world\", 12) ==> \"\"\nselectNth(\"Hello world\", 13) ==> \"world\"\nselectNth(\"Hello world\", 14) ==> \"world\"\nselectNth(\"Hello world\", 15) ==> \"world\"\nselectNth(\"Hello world\", 16) ==> \"world\"\nselectNth(\"Hello world\", 17) ==> \"world\"\nselectNth(\"Hello world\", 18) ==> \"world\"\nselectNth(\"Hello world\", 19) ==> \"world\"\nselectNth(\"Hello world\", 20) ==> \"world\"\nselectNth(\"Hello world\", 21) ==> \"world\"\nselectNth(\"Hello world\", 22) ==> \"world\"\nselectNth(\"Hello world\", 23) ==> \"world\"\nselectNth(\"Hello world\", 24) ==> \"world\"\nselectNth(\"Hello world\", 25) ==> \"world\"\nselectNth(\"Hello world\", 26) ==> \"world\"\nselectNth(\"Hello world\", 27) ==> \"world\"\nselectNth(\"Hello world\", 28) ==> \"world\"\nselectNth(\"Hello world\", 29) ==> \"world\"\nselectNth(\"Hello world\", 30) ==> \"world\"\nselectNth(\"Hello world\", 31) ==> \"world\"\nselectNth(\"Hello world\", 32) ==> \"world\"\nselectNth(\"Hello world\", 33) ==> \"world\"\nselectNth(\"Hello world\", 34) ==> \"world\"\nselectNth(\"Hello world\", 35) ==> \"world\"\nselectNth(\"Hello world\", 36) ==> \"world\"\nselectNth(\"Hello world\", 37) ==> \"world\"\nselectNth(\"Hello world\", 38) ==> \"world\"\nselectNth(\"Hello world\", 39) ==> \"world\"\nselectNth(\"Hello world\", 40) ==> \"world\"\nselectNth(\"Hello world\", 41) ==> \"world\"\nselectNth(\"Hello world\", 42) ==> \"world\"\nselectNth(\"Hello world\", 43) ==> \"world\"\nselectNth(\"Hello world\", 44) ==> \"world\"\nselectNth(\"Hello world\", 45) ==> \"world\"\nselectNth(\"Hello world\", 46) ==> \"world\"\nselectNth(\"Hello world\", 47) ==> \"world\"\nselectNth(\"Hello world\", 48) ==> \"world\"\nselectNth(\"Hello world\", 49) ==> \"world\"\nselectNth(\"Hello world\", 50) ==> \"world\"\nselectNth(\"Hello world\", 51) ==> \"world\"\nselectNth(\"Hello world\", 52) ==> \"world\"\nselectNth(\"Hello world\", 53) ==> \"world\"\nselectNth(\"Hello world\", 54) ==> \"world\"\nselectNth(\"Hello world\", 55) ==> \"world\"\nselectNth(\"Hello world\", 56) ==> \"world\"\nselectNth(\"Hello world\", 57) ==> \"world\"\nselectNth(\"Hello world\", 58) ==> \"world\"\nselectNth(\"Hello world\", 59) ==> \"world\"\nselectNth(\"Hello world\", 60) ==> \"world\"\nselectNth(\"Hello world\", 61) ==> \"world\"\nselectNth(\"Hello world\", 62) ==> \"world\"\nselectNth(\"Hello world\", 63) ==> \"world\"\nselectNth(\"Hello world\", 64) ==> \"world\"\nselectNth(\"Hello world\", 65) ==> \"world\"\nselectNth(\"Hello world\", 66) ==> \"world\"\nselectNth(\"Hello world\", 67) ==> \"world\"\nselectNth(\"Hello world\", 68) ==> \"world\"\nselectNth(\"Hello world\", 69) ==> \"world\"\nselectNth(\"Hello world\", 70) ==> \"world\"\nselectNth(\"Hello world\", 71) ==> \"world\"\nselectNth(\"Hello world\", 72) ==> \"world\"\nselectNth(\"Hello world\", 73) ==> \"world\"\nselectNth(\"Hello world\", 74) ==> \"world\"\nselectNth(\"Hello world\", 75) ==> \"world\"\nselectNth(\"Hello world\", 76) ==> \"world\"\nselectNth(\"Hello world\", 77) ==> \"world\"\nselectNth(\"Hello world\", 78) ==> \"world\"\nselectNth(\"Hello world\", 79) ==> \"world\"\nselectNth", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const wordLength = word.length\n  const wordEnd = wordLength - 1\n  let currentVowel = ''\n  let currentConsonant = ''\n  let currentDistance = 0\n  let currentDistanceIndex = 0\n  let currentDistanceIndex2 = 0\n  let currentDistanceIndex3 = 0\n  let currentDistanceIndex4 = 0\n  let currentDistanceIndex5 = 0\n  let currentDistanceIndex6 = 0\n  let currentDistanceIndex7 = 0\n  let currentDistanceIndex8 = 0\n  let currentDistanceIndex9 = 0\n  let currentDistanceIndex10 = 0\n  let currentDistanceIndex11 = 0\n  let currentDistanceIndex12 = 0\n  let currentDistanceIndex13 = 0\n  let currentDistanceIndex14 = 0\n  let currentDistanceIndex15 = 0\n  let currentDistanceIndex16 = 0\n  let currentDistanceIndex17 = 0\n  let currentDistanceIndex18 = 0\n  let currentDistanceIndex19 = 0\n  let currentDistanceIndex20 = 0\n  let currentDistanceIndex21 = 0\n  let currentDistanceIndex22 = 0\n  let currentDistanceIndex23 = 0\n  let currentDistanceIndex24 = 0\n  let currentDistanceIndex25 = 0\n  let currentDistanceIndex26 = 0\n  let currentDistanceIndex27 = 0\n  let currentDistanceIndex28 = 0\n  let currentDistanceIndex29 = 0\n  let currentDistanceIndex30 = 0\n  let currentDistanceIndex31 = 0\n  let currentDistanceIndex32 = 0\n  let currentDistanceIndex33 = 0\n  let currentDistanceIndex34 = 0\n  let currentDistanceIndex35 = 0\n  let currentDistanceIndex36 = 0\n  let currentDistanceIndex37 = 0\n  let currentDistanceIndex38 = 0\n  let currentDistanceIndex39 = 0\n  let currentDistanceIndex40 = 0\n  let currentDistanceIndex41 = 0\n  let currentDistanceIndex42 = 0\n  let currentDistanceIndex43 = 0\n  let currentDistanceIndex44 = 0\n  let currentDistanceIndex45 = 0\n  let currentDistanceIndex46 = 0\n  let currentDistanceIndex47 = 0\n  let currentDistanceIndex48 = 0\n  let currentDistanceIndex49 = 0\n  let currentDistanceIndex50 = 0\n  let currentDistanceIndex51 = 0\n  let currentDistanceIndex52 = 0\n  let currentDistanceIndex53 = 0\n  let currentDistanceIndex54 = 0\n  let currentDistanceIndex55 = 0\n  let currentDistanceIndex56 = 0\n  let currentDistanceIndex57 = 0\n  let currentDistanceIndex58 = 0\n  let currentDistanceIndex59 = 0\n  let currentDistanceIndex60 = 0\n  let currentDistanceIndex61 = 0\n  let currentDistanceIndex62 = 0\n  let currentDistanceIndex63 = 0\n  let currentDistanceIndex64 = 0\n  let currentDistanceIndex65 = 0\n  let currentDistanceIndex66 = 0\n  let currentDistanceIndex67 = 0\n  let currentDistanceIndex68 = 0\n  let currentDistanceIndex69 = 0\n  let currentDistanceIndex70 = 0\n  let currentDistanceIndex71 = 0\n  let currentDistanceIndex72 = 0\n  let currentDistanceIndex73 = 0\n  let currentDistanceIndex74 = 0\n  let currentDistanceIndex75 = 0\n  let currentDistanceIndex76 = 0\n  let currentDistanceIndex77 = 0\n  let currentDistanceIndex78 = 0\n  let currentDistanceIndex79 = 0\n  let currentDistanceIndex80 = 0\n  let currentDistanceIndex81 = 0\n  let currentDistanceIndex82 = 0\n  let currentDistanceIndex83 = 0\n  let currentDistanceIndex84 = 0\n  let currentDistanceIndex85 = 0\n  let currentDistanceIndex86 = 0\n  let currentDistanceIndex87 = 0\n  let currentDistanceIndex88 = 0\n  let currentDistanceIndex89 = 0\n  let currentDistanceIndex90 = 0\n  let currentDistanceIndex91 = 0\n  let currentDistanceIndex92 = 0\n  let currentDistanceIndex93 = 0\n  let currentDistanceIndex94 = 0\n  let currentDistanceIndex95 = 0\n  let currentDistanceIndex96 = 0\n  let currentDistanceIndex97 = 0\n  let currentDistanceIndex98 = 0\n  let currentDistanceIndex99 = 0\n  let currentDistanceIndex100 = 0\n  let currentDistanceIndex101 = 0\n  let currentDistanceIndex102 = 0\n  let currentDistanceIndex103 = 0\n  let currentDistanceIndex104 = 0\n  let currentDistanceIndex105 = 0\n  let currentDistanceIndex106 = 0\n  let currentDistanceIndex107 = 0\n  let currentDistanceIndex108 = 0\n  let currentDistanceIndex109 = 0\n  let currentDistanceIndex110 = 0\n  let currentDistanceIndex111 = 0\n  let currentDistanceIndex112 = 0\n  let currentDistanceIndex113 = 0\n  let currentDistanceIndex114 = 0\n  let currentDistanceIndex115 = 0\n  let currentDistanceIndex116 = 0\n  let currentDistanceIndex117 = 0\n  let currentDistanceIndex118 = 0\n  let currentDistanceIndex119 = 0\n  let currentDistanceIndex120 = 0\n  let currentDistanceIndex121 = 0\n  let currentDistanceIndex122 = 0\n  let currentDistanceIndex123 = 0\n  let currentDistanceIndex124 = 0\n  let currentDistanceIndex125 = 0\n  let currentDistanceIndex126 = 0\n  let currentDistanceIndex127 = 0\n  let currentDistanceIndex128 = 0\n  let currentDistanceIndex129 = 0\n  let currentDistanceIndex130 = 0\n  let currentDistanceIndex131 = 0\n  let currentDistanceIndex132 = 0\n  let currentDistanceIndex133 = 0\n  let currentDistanceIndex134 = 0\n  let currentDistanceIndex135 = 0\n", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  for (const [str, i] of lst) {\n    if (str === '(') {\n      stack.push(i);\n    } else if (str === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      const top = stack.pop();\n      if (top!== i - 1) {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n};\n\n// Test\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens([]));\nconsole.log(matchParens", "passed": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) {\n    return null;\n  }\n  return strings.reduce((prev, curr) => {\n    if (curr.length > prev.length) {\n      return curr;\n    }\n    return prev;\n  }, strings[0]);\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  const arrLength = arr.length\n  const max = arr[arrLength - 1]\n  const min = arr[0]\n  const maxIndex = arrLength - k\n  const minIndex = 0\n\n  const sortedArr = []\n  for (let i = 0; i < maxIndex; i++) {\n    sortedArr.push(arr[i])\n  }\n\n  for (let i = minIndex; i < maxIndex; i++) {\n    sortedArr.push(arr[i])\n  }\n\n  return sortedArr\n}\n\nconst test = (arr, k) => {\n  const sortedArr = maxmium(arr, k)\n  console.log(sortedArr)\n}\n\ntest([-3, -4, 5], 3)\ntest([4, -4, 4], 2)\ntest([-3, 2, 1, 2, -1, -2, 1], 1)\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addElements26 = (arr, k) => {\n  const sum = 0;\n  ", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz2 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz3 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz4 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz5 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz6 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz7 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz8 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz9 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz10 = (n) => {\n  const odd = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return odd\n    }\n    const half = n / 2\n    if (half % 2 === 0) {\n      odd.push(half)\n      return collatz(half)\n    }\n    odd.push(half)\n    odd.push(half * 3 + 1)\n    return collatz(half * 3 + 1)\n  }\n  return collatz(n)\n}\n\nconst getOddCollatz11 = (n) => {\n", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  } else if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (year < 1 || year > 3000) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.length === sorted.length && lst.every(x => x === sorted[0]);\n};\n\nexport { isSorted };\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) {\n    return 'NO';\n  }\n  if (start2 > end1) {\n    return 'NO';\n  }\n  const [start, end] = [start1, end1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end2, start2];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end1, start1];\n  const [end, start] = [end2, start", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null;\n  }\n\n  const sum = arr.reduce((acc, curr) => {\n    if (curr === 0) {\n      return acc;\n    }\n\n    if (curr > 0) {\n      return acc + curr;\n    }\n\n    return acc - curr;\n  }, 0);\n\n  const prod = arr.reduce((acc, curr) => {\n    if (curr === 0) {\n      return acc;\n    }\n\n    if (curr > 0) {\n      return acc * curr;\n    }\n\n    return acc / curr;\n  }, 1);\n\n  return sum * prod;\n};\n\nmodule.exports = prodSigsn;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = grid[i][j]\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp[i][j] = 1\n      } else if (i === 0) {\n        dp[i][j] = dp[i][j - 1] + 1\n      } else if (j === 0) {\n        dp[i][j] = dp[i - 1][j] + 1\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1\n      }\n    }\n  }\n\n  const lst = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      lst.push(dp[i][j])\n    }\n  }\n\n  return lst\n}\n\nconst test = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = grid[i][j]\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp[i][j] = 1\n      } else if (i === 0) {\n        dp[i][j] = dp[i][j - 1] + 1\n      } else if (j === 0) {\n        dp[i][j] = dp[i - 1][j] + 1\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1\n      }\n    }\n  }\n\n  const lst = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      lst.push(dp[i][j])\n    }\n  }\n\n  return lst\n}\n\nconst test2 = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = grid[i][j]\n    }\n  }\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (i === 0 || j === 0) {\n        dp[i][j] = 1\n      } else if (i === 0) {\n        dp[i][j] = dp[i][j - 1] + 1\n      } else if (j === 0) {\n        dp[i][j] = dp[i - 1][j] + 1\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1\n      }\n    }\n  }\n\n  const lst = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      lst.push(dp[i][j])\n    }\n  }\n\n  return lst\n}\n\nconst test3 = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const dp = new Array(n)\n  for (let i = 0; i < n; i++) {\n    dp[i] = new Array(m)\n    for (let j = 0; j < m; j++) {\n      dp[i][j] = grid[i][j]\n    }\n  }\n\n  for (let i = 0; i", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return rgeatestCommonDivisor(b, a);\n  }\n  let d = Math.floor(Math.log(a) / Math.log(b));\n  return a / Math.pow(b, d);\n};\n\n// Return a greatest common divisor of two integers a and b\nconst gcd = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return gcd(b, a);\n  }\n  let d = Math.floor(Math.log(a) / Math.log(b));\n  return a / Math.pow(b, d);\n};\n\n// Return a least common multiple of two integers a and b\nconst lcm = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return lcm(b, a);\n  }\n  return a * Math.pow(b, Math.floor(Math.log(a) / Math.log(b)));\n};\n\n// Return a greatest common divisor of two integers a and b\nconst gcd2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return gcd2(b, a);\n  }\n  let d = Math.floor(Math.log(a) / Math.log(b));\n  return a / Math.pow(b, d);\n};\n\n// Return a least common multiple of two integers a and b\nconst lcm2 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return lcm2(b, a);\n  }\n  return a * Math.pow(b, Math.floor(Math.log(a) / Math.log(b)));\n};\n\n// Return a greatest common divisor of two integers a and b\nconst gcd3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return gcd3(b, a);\n  }\n  let d = Math.floor(Math.log(a) / Math.log(b));\n  return a / Math.pow(b, d);\n};\n\n// Return a least common multiple of two integers a and b\nconst lcm3 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return lcm3(b, a);\n  }\n  return a * Math.pow(b, Math.floor(Math.log(a) / Math.log(b)));\n};\n\n// Return a greatest common divisor of two integers a and b\nconst gcd4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return gcd4(b, a);\n  }\n  let d = Math.floor(Math.log(a) / Math.log(b));\n  return a / Math.pow(b, d);\n};\n\n// Return a least common multiple of two integers a and b\nconst lcm4 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return lcm4(b, a);\n  }\n  return a * Math.pow(b, Math.floor(Math.log(a) / Math.log(b)));\n};\n\n// Return a greatest common divisor of two integers a and b\nconst gcd5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return gcd5(b, a);\n  }\n  let d = Math.floor(Math.log(a) / Math.log(b));\n  return a / Math.pow(b, d);\n};\n\n// Return a least common multiple of two integers a and b\nconst lcm5 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return lcm5(b, a);\n  }\n  return a * Math.pow(b, Math.floor(Math.log(a) / Math.log(b)));\n};\n\n// Return a greatest common divisor of two integers a and b\nconst gcd6 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === b) return a;\n  if (a < b) {\n    return gcd6(b, a);\n  }\n  let d = Math.floor(Math.log(a) / Math.log(b));\n  return a / Math.pow(b, d);\n};\n\n// Return a least common multiple of two integers a and b\nconst lcm6 = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a ===", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  let result = [1];\n  let i = 1;\n  while (i <= n) {\n    let temp = result[i - 1];\n    result.push(temp + (temp + 1) / 2);\n    i++;\n  }\n  return result;\n};\n\nconsole.log(tir(3));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n  const brackets = []\n  const valid = []\n\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i]\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      const top = stack.pop()\n      if (top === '[') {\n        brackets.push(top)\n      } else {\n        brackets.pop()\n      }\n    } else if (stack.length === 0) {\n      valid.push(char)\n    }\n  }\n\n  return brackets.length === 0 && valid.length === string.length\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem * elem, 0);\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares22 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares23 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares24 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares25 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares26 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares27 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares28 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares29 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares30 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem, 0);\n  return sum;\n};\n\nconst sumSquares31 = (lst) => {\n  const sum = lst.reduce((acc, elem) => acc + elem,", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  if (lastChar.match(/[a-zA-Z]/)) {\n    return false\n  }\n  return true\n}\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are both alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n  const lastTwoChars = txt.slice(-2)\n  if (lastTwoChars.match(/[a-zA-Z]/) && lastTwoChars.match(/[a-zA-Z]/)) {\n    return false\n  }\n  return true\n}\n\n/*\n  Create a function that returns true if the last three characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreALetter = (txt) => {\n  const lastThreeChars = txt.slice(-3)\n  if (lastThreeChars.match(/[a-zA-Z]/) && lastThreeChars.match(/[a-zA-Z]/) && lastThreeChars.match(/[a-zA-Z]/)) {\n    return false\n  }\n  return true\n}\n\n/*\n  Create a function that returns true if the last four characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreALetter = (txt) => {\n  const lastFourChars = txt.slice(-4)\n  if (lastFourChars.match(/[a-zA-Z]/) && lastFourChars.match(/[a-zA-Z]/) && lastFourChars.match(/[a-zA-Z]/) && lastFourChars.match(/[a-zA-Z]/)) {\n    return false\n  }\n  return true\n}\n\n/*\n  Create a function that returns true if the last five characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreALetter = (txt) => {\n  const lastFiveChars = txt.slice(-5)\n  if (lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/) && lastFiveChars.match(/[a-zA-Z]/)) {\n    return false\n  }\n  return true\n}\n\n/*\n  Create a function that returns true if the last six characters\n  of a given string are all alphabetical characters and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastSixCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastSixCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastSixCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastSixCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastSixCharsAreALetter = (txt) => {\n  const lastSixChars = txt.slice(-6)\n  if (lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/) && lastSixChars.match(/[a-zA-Z]/)) {\n    return false\n  }\n  return true\n}\n\n/*\n  Create a function that returns true if the last seven characters\n  of a given string are all alphabet", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = Math.floor((i + j) / 2)\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      i = mid + 1\n    } else {\n      j = mid\n    }\n  }\n  return max\n}\n\nexport default canArrange\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 && min > 0) {\n    return [max, min];\n  } else if (max < 0) {\n    return [null, min];\n  } else if (min < 0) {\n    return [max, null];\n  } else {\n    return [max, min];\n  }\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers2 = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max < 0 && min > 0) {\n    return [max, min];\n  } else if (max < 0) {\n    return [null, min];\n  } else if (min < 0) {\n    return [max, null];\n  } else {\n    return [max, min];\n  }\n};\n\nconst lst = [2, 4, 1, 3, 5, 7];\n\nconsole.log(lagrestSmallestIntgeers(lst));\nconsole.log(lagrestSmallestIntgeers2(lst));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(compaerOne(1, 2.5));\nconsole.log(compaerOne(1, \"2,3\"));\nconsole.log(compaerOne(\"5,1\", \"6\"));\nconsole.log(compaerOne(\"1\", 1));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddAndEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0 || i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenAndOddAndEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2!== 0 || i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0 || i % 2 === 0 || i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenAndOddAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2!== 0 || i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddAndEvenAndOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0 || i % 2 === 0 || i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenAndOddAndEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 || i % 2!== 0 || i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOddAndEvenAndEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0 || i % 2 === 0 || i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst fibonacci = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst binomial = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return binomial(n - 1, k - 1) + binomial(n - 1, k);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst triangular = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * triangular(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst pentagonal = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * pentagonal(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst hexagonal = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * hexagonal(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst heptagonal = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * heptagonal(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst octagonal = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * octagonal(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * nonagonals(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals_2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * nonagonals_2(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals_3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * nonagonals_3(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals_4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * nonagonals_4(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals_5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * nonagonals_5(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals_6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * nonagonals_6(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals_7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * nonagonals_7(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst nonagonals_8 = (n) => {\n  if (n === 0) {\n    ", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefix = string.split('')\n  for (let i = 0; i < prefix.length; i++) {\n    const prefixLength = prefix.length - i\n    const prefixString = prefix.slice(0, prefixLength)\n    const prefixStringLength = prefixString.length\n    const prefixStringString = prefixString.join('')\n    const prefixStringStringLength = prefixStringString.length\n    const prefixStringStringString = prefixStringString.join('')\n    prefixes.push(prefixStringStringString)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixLength = suffix.length - i\n    const suffixString = suffix.slice(0, suffixLength)\n    const suffixStringLength = suffixString.length\n    const suffixStringString = suffixString.join('')\n    const suffixStringStringLength = suffixStringString.length\n    const suffixStringStringString = suffixStringString.join('')\n    suffixes.push(suffixStringStringString)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixLength = suffix.length - i\n    const suffixString = suffix.slice(0, suffixLength)\n    const suffixStringLength = suffixString.length\n    const suffixStringString = suffixString.join('')\n    const suffixStringStringLength = suffixStringString.length\n    const suffixStringStringString = suffixStringString.join('')\n    suffixes.push(suffixStringStringString)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixLength = suffix.length - i\n    const suffixString = suffix.slice(0, suffixLength)\n    const suffixStringLength = suffixString.length\n    const suffixStringString = suffixString.join('')\n    const suffixStringStringLength = suffixStringString.length\n    const suffixStringStringString = suffixStringString.join('')\n    suffixes.push(suffixStringStringString)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixLength = suffix.length - i\n    const suffixString = suffix.slice(0, suffixLength)\n    const suffixStringLength = suffixString.length\n    const suffixStringString = suffixString.join('')\n    const suffixStringStringLength = suffixStringString.length\n    const suffixStringStringString = suffixStringString.join('')\n    suffixes.push(suffixStringStringString)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixLength = suffix.length - i\n    const suffixString = suffix.slice(0, suffixLength)\n    const suffixStringLength = suffixString.length\n    const suffixStringString = suffixString.join('')\n    const suffixStringStringLength = suffixStringString.length\n    const suffixStringStringString = suffixStringString.join('')\n    suffixes.push(suffixStringStringString)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixLength = suffix.length - i\n    const suffixString = suffix.slice(0, suffixLength)\n    const suffixStringLength = suffixString.length\n    const suffixStringString = suffixString.join('')\n    const suffixStringStringLength = suffixStringString.length\n    const suffixStringStringString = suffixStringString.join('')\n    suffixes.push(suffixStringStringString)\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffixLength = suffix.length - i\n    const suffixString = suffix.slice(0, suffixLength)\n    const suffixStringLength = suffixString.length\n    const suffixStringString = suffixString.join('')\n    const suffixStringStringLength = suffixStringString.length\n    const suffixStringStringString = suffixStringString.join('')\n    suffixes.", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores2 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores3 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores4 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores5 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores6 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores7 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores8 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnderscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fixUnderscores9 = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example_1\") == \"Example 1\"\n  fixUnderscores(\"_Example_2\") == \"Example 2\"\n  fixUnd", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.dll$/;\n  return regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.dll$/;\n  return regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.txt$/;\n  const regex3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.exe$/;\n  const regex4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z0-9]*\\.dll$/;\n  return regex.test(file_name) && regex2.test(file_name) && regex3.test(file_name) && regex4.test(file_name);\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these:", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([]));\nconsole.log(sumSquares([-1,-5,2,-1,-5]));<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const words = sentence.split(' ')\n  const newWords = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const newWord = getPrimeNumber(word.length)\n    newWords.push(newWord)\n  }\n  return newWords.join(' ')\n}\n\nconst getPrimeNumber = (n) => {\n  let i = 2\n  while (i < n) {\n    if (isPrime(i)) {\n      return i\n    }\n    i++\n  }\n  return null\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  }\n\n  return false;\n};\n\nconsole.log(simpilfy(\"1/5\", \"5/1\"));\nconsole.log(simpilfy(\"1/6\", \"2/1\"));\nconsole.log(simpilfy(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nmodule.exports = roderByPoints;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const odd = nums.filter(n => n % 2 === 1)\n  const even = nums.filter(n => n % 2 === 0)\n  return odd.length + even.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n  return result\n}\n\nconsole.log(getMaxTrpiles(5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"];\n  const planet1Index = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n  const result = [];\n  for (let i = planet1Index; i <= planet2Index; i++) {\n    result.push(planets[i]);\n  }\n  return result;\n};\n\nconst bf = (planet1, planet2) => {\n  const planet1 = planet1.toLowerCase();\n  const planet2 = planet2.toLowerCase();\n  const planets = [\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_2 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_3 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_4 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_5 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_6 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_7 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_8 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_9 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_10 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_11 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_12 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_13 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_14 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_15 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_16 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_17 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_18 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_19 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_20 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_21 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.filter((curr, index) => index % 2 === 0);\n};\n\nconst list_sort_22 = (lst) => {\n  const sorted = lst.sort((a", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3)\n  '0 1 2'\n  >>> stringSequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2)\n  '0 1 2'\n  >>> stringSequence(5, 3, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    str += `${i} `;\n  }\n  for (let i = n2; i < n3; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1)\n  '0 1 2 1'\n  >>> stringSequence(5, 3, 2, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    str += `${i} `;\n  }\n  for (let i = n2; i < n3; i++) {\n    str += `${i} `;\n  }\n  for (let i = n3; i < n4; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0)\n  '0 1 2 1 0'\n  >>> stringSequence(5, 3, 2, 1, 0)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    str += `${i} `;\n  }\n  for (let i = n2; i < n3; i++) {\n    str += `${i} `;\n  }\n  for (let i = n3; i < n4; i++) {\n    str += `${i} `;\n  }\n  for (let i = n4; i < n5; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0, 1)\n  '0 1 2 1 1'\n  >>> stringSequence(5, 3, 2, 1, 0, 1)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5, n6) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    str += `${i} `;\n  }\n  for (let i = n2; i < n3; i++) {\n    str += `${i} `;\n  }\n  for (let i = n3; i < n4; i++) {\n    str += `${i} `;\n  }\n  for (let i = n4; i < n5; i++) {\n    str += `${i} `;\n  }\n  for (let i = n5; i < n6; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 3, 2, 1, 0, 1, 2)\n  '0 1 2 1 2'\n  >>> stringSequence(5, 3, 2, 1, 0, 1, 2)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n, n2, n3, n4, n5, n6, n7) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  for (let i = n; i < n2; i++) {\n    str += `${i} `;\n  }\n  for (let i = n2; i < n3; i++) {\n    str += `${i} `;\n  }\n  for (let i = n3; i < n4; i++) {\n    str += `${i} `;\n  }\n  for (let i = n4; i < n5; i++) {\n    str += `${i} `;\n  }\n  for (let i = n5; i < n6; i++) {\n", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrYPrime29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n", "passed": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEven = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceOdd = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenOdd = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenOddNeg = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceOddNeg = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenOddNeg = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvenOddNegOdd = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceOddNegOdd = (lst) => {\n  const sum = lst.reduce((acc, n) => acc + n * n, 0);\n  return sum;\n};\n\n/* Given a list of numbers", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    result.push(diff)\n  }\n  return result\n}\n\nconst compare2 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare3 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare4 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare5 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare6 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare7 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare8 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare9 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare10 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare11 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare12 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare13 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0)\n    } else {\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nconst compare14 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    let diff = Math.abs(game[i] - guess[i])\n    if (diff === 0) {\n      result.push(0", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/)? extension.length - extension.match(/[a-z]/).length : 0;\n    const sm = extension.match(/[a-z]/)? extension.length - extension.match(/[A-Z]/).length : 0;\n    return acc + (cap - sm);\n  }, -1);\n\n  return `${class_name}.${extensions[0]}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  if (aLen!== bLen) return false;\n  for (let i = 0; i < aLen; i++) {\n    if (a[i] === b[i] || a[i] === b[bLen - 1 - i]) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default ccypatternChekc;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(1234));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const map = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xv',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cc',\n    500: 'd',\n    900:'m',\n  };\n\n  let roman = '';\n  for (let i = 1; i <= number; i++) {\n    let num = number - i;\n    let romanNum = map[num];\n    if (romanNum) {\n      roman += romanNum;\n    } else {\n      roman += 'x';\n    }\n  }\n\n  return roman.toLowerCase();\n};\n\nexport default intToMinRioman;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 14\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 14\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 14\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 14\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 14\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 14\n  perimeterOfTriangle(1, 2, 3) == 0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 12\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeterOfTriangle(3,", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  let maxCount = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < words.length; i++) {\n    const count = words[i].length;\n    if (count > maxCount) {\n      max = words[i];\n      maxCount = count;\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining >= need) {\n    return [need, remaining];\n  }\n  return [number, remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra2 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra3 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra4 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra5 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra6 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra7 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra8 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra9 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra10 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  const operatorIndex = 0\n  const operandIndex = 1\n\n  const result = []\n  while (operatorIndex < operatorLength) {\n    const operatorValue = operator[operatorIndex]\n    const operandValue = operand[operandIndex]\n    const resultValue = operatorValue + operandValue\n    result.push(resultValue)\n    operandIndex++\n  }\n\n  return result\n}\n\nconst doAlgebra11 = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength =", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers26 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers27 = (a, b) => {\n  const result", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  ", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.substr(i, substring.length) === substring) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring without repeating characters.\n  >>> longestSubstring('abcabcbb')\n  'abcabc'\n  >>> longestSubstring('bbbbb')\n  'b'\n  >>> longestSubstring('bb')\n  'b'\n  >>> longestSubstring('a')\n  'a'\n  >>> longestSubstring('aa')\n  'a'\n  >>> longestSubstring('aaa')\n  'a'\n  >>> longestSubstring('aaaa')\n  'a'\n  >>> longestSubstring('aaaaa')\n  'a'\n  >>> longestSubstring('aaaaaa')\n  'a'\n  >>> longestSubstring('aaaaaaaa')\n  'a'\n  >>> longestSubstring('aaaaaaaaa')\n  'a'\n  >>> longestSubstring('aaaaaaaaaa')\n  'a'\n  >>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i], 10))\n  }\n  sortedNumbers.sort((a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i], 10))\n  }\n  sortedNumbers.sort((a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse2 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i], 10))\n  }\n  sortedNumbers.sort((a, b) => a - b, (a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse2('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse3 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i], 10))\n  }\n  sortedNumbers.sort((a, b) => b - a, (a, b) => a - b)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse3('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse4 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i], 10))\n  }\n  sortedNumbers.sort((a, b) => a - b, (a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse4('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse5 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i], 10))\n  }\n  sortedNumbers.sort((a, b) => a - b, (a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse5('nine eight seven')\n  'nine eight seven'\n  */\nconst sortNumbersReverse6 = (numbers) => {\n  const numbersArray = numbers.split(' ')\n  const sortedNumbers = []\n  for (let i = 0; i < numbersArray.length; i++) {\n    sortedNumbers.push(parseInt(numbersArray[i], 10))\n  }\n  sortedNumbers.sort((a, b) => a - b, (a, b) => b - a)\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbersReverse6('nine eight seven')\n  'nine eight seven'\n  */", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimalInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateDecimalDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n  return decimalPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateDecimalIntegerDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateIntegerDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateIntegerDecimalInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateIntegerIntegerDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateIntegerIntegerDecimalInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateIntegerIntegerDecimalDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateIntegerIntegerDecimalInteger = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateIntegerIntegerDecimalIntegerDecimal = (number) => {\n  const integerPart = Math.floor(number);\n  return integerPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNubmer(3.5)\n  3\n  */\nconst truncateIntegerIntegerDecimalIntegerDecimalInteger = (number) => {\n  const integerPart = Math.floor", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const closest = [min, max];\n  const diff = [max - min, min - max];\n  const diffs = [diff[0], diff[1]];\n  const diffsLength = diffs.length;\n  let i = 0;\n  while (i < diffsLength) {\n    const diff = diffs[i];\n    const closestIndex = numbers.indexOf(closest[i]);\n    const closestDiff = Math.abs(closest[i] - numbers[closestIndex]);\n    if (closestDiff < diff) {\n      closest[i] = numbers[closestIndex];\n      diffs[i] = closestDiff;\n    }\n    i++;\n  }\n  return closest;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRange = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeInverseInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeInverseInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToRangeInverseInverseInverseInverseInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map(number => number - min)\n   .map(number => number * scale)\n   .map(number => number + min)\n}\n\n/* Given a list of numbers, return a list of the same length, with the\n  numbers scaled to the range [0, 1]\n  >>> rescaleToRange([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers2 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers3 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers4 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers5 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers6 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers7 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers8 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers9 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers10 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers11 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers12 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';\n  });\n};\n\n/*\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers13 = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string' || typeof value === 'boolean';", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return index of first occurrence of given string\n  * @param {string} string\n  * @param {string} substr\n  * @returns {number}\n  * @example\n  * strindex(abc, 'a')\n  * // => 0\n  * strindex(abc, 'b')\n  * // => 1\n  * strindex(abc, 'c')\n  * // => 2\n  * strindex(abc, 'd')\n  * // => -1\n  * strindex(abc, 'e')\n  * // => -1\n  * strindex(abc, 'f')\n  * // => -1\n  * strindex(abc, 'g')\n  * // => -1\n  * strindex(abc, 'h')\n  * // => -1\n  * strindex(abc, 'i')\n  * // => -1\n  * strindex(abc, 'j')\n  * // => -1\n  * strindex(abc, 'k')\n  * // => -1\n  * strindex(abc, 'l')\n  * // => -1\n  * strindex(abc,'m')\n  * // => -1\n  * strindex(abc, 'n')\n  * // => -1\n  * strindex(abc, 'o')\n  * // => -1\n  * strindex(abc, 'p')\n  * // => -1\n  * strindex(abc, 'q')\n  * // => -1\n  * strindex(abc, 'r')\n  * // => -1\n  * strindex(abc,'s')\n  * // => -1\n  * strindex(abc, 't')\n  * // => -1\n  * strindex(abc, 'u')\n  * // => -1\n  * strindex(abc, 'v')\n  * // => -1\n  * strindex(abc, 'w')\n  * // => -1\n  * strindex(abc, 'x')\n  * // => -1\n  * strindex(abc, 'y')\n  * // => -1\n  * strindex(abc, 'z')\n  * // => -1\n  * strindex(abc, '0')\n  * // => -1\n  * strindex(abc, '1')\n  * // => -1\n  * strindex(abc, '2')\n  * // => -1\n  * strindex(abc, '3')\n  * // => -1\n  * strindex(abc, '4')\n  * // => -1\n  * strindex(abc, '5')\n  * // => -1\n  * strindex(abc, '6')\n  * // => -1\n  * strindex(abc, '7')\n  * // => -1\n  * strindex(abc, '8')\n  * // => -1\n  * strindex(abc, '9')\n  * // => -1\n  * strindex(abc,'')\n  * // => -1\n  * strindex(abc, '\\t')\n  * // => -1\n  * strindex(abc, '\\n')\n  * // => -1\n  * strindex(abc, '\\r')\n  * // => -1\n  * strindex(abc, '\\f')\n  * // => -1\n  * strindex(abc, '\\v')\n  * // => -1\n  * strindex(abc, '\\0')\n  * // => -1\n  * strindex(abc, '\\1')\n  * // => -1\n  * strindex(abc, '\\2')\n  * // => -1\n  * strindex(abc, '\\3')\n  * // => -1\n  * strindex(abc, '\\4')\n  * // => -1\n  * strindex(abc, '\\5')\n  * // => -1\n  * strindex(abc, '\\6')\n  * // => -1\n  * strindex(abc, '\\7')\n  * // => -1\n  * strindex(abc, '\\8')\n  * // => -1\n  * strindex(abc, '\\9')\n  * // => -1\n  * strindex(abc, '\\10')\n  * // => -1\n  * strindex(abc, '\\11')\n  * // => -1\n  * strindex(abc, '\\12')\n  * // => -1\n  * strindex(abc, '\\13')\n  * // => -1\n  * strindex(abc, '\\14')\n  * // => -1\n  * strindex(abc, '\\15')\n  * // => -1\n  * strindex(abc, '\\16')\n  * // => -1\n  * strindex(abc, '\\17')\n  * // => -1\n  * strindex(abc, '\\20')\n  * // => -1\n  * strindex(abc, '\\21')\n  * // => -1\n  * strindex(abc, '\\22')\n  * // => -1\n  * strindex(abc, '\\23')\n  * // => -1\n  * strindex(abc, '\\24')\n  * // => -1\n  * strindex(abc, '\\25')\n  * // => -1\n  * strindex(abc, '\\26')\n  * // => -1\n  * strindex(abc, '\\27')\n  * // => -1\n  * strindex(abc, '\\30')\n  * // => -1\n  * strindex(abc, '\\31')\n  * // => -1\n  * strindex(abc, '\\32')\n  * // => -1\n  * strindex(abc, '\\33')\n  * // => -1\n  * strindex(abc, '\\34')\n  * // => -1\n  * strindex(abc, '\\35')\n  * // => -1\n  * strindex(abc, '\\36')\n  * // => -1\n  * strindex(abc, '\\37')\n  * // => -1\n  * strindex(abc, '\\40')\n  * // => -1\n  * strindex(abc, '\\41')\n  * // =>", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let divisor = 1;\n  while (n % divisor > 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let divisor = 1;\n  while (n % divisor > 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let divisor = 1;\n  while (n % divisor > 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor15 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor16 = (n) => {\n  let divisor = 1;\n  while (n % divisor < 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor17 = (n) => {\n  let divisor = 1;\n  while (n % divis", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor--;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseFactorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor--;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor--;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor--;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor--;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let factor = 2;\n  while (factor * factor <= n) {\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n    }\n    factor--;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\nexport default removeDuplicates;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, (char) => {\n    return char.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> lowerCase('Hello')\n  'hello'\n  */\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> upperCase('Hello')\n  'HELLO'\n  */\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase and\n  all the characters in uppercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase2 = (string) => {\n  return lowerCase(upperCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase3 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase4 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase5 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase6 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase7 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase8 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase9 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase10 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase11 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase12 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase13 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase14 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase15 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase16 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n  'hELLO'\n  */\nconst upperAndLowerCase17 = (string) => {\n  return upperCase(lowerCase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and\n  all the characters in lowercase.\n  >>> upperAndLowerCase('Hello')\n", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> conactenate([1, 2, 3])\n  '123'\n  >>> conactenate([1, 2, 3, 4])\n  '1234'\n  >>> conactenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> conactenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> conactenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstr([], 'a')\n  []\n  >>> iflterByrSubstr(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstr = (strings, substr) => {\n  return strings.filter(s => s.includes(substr));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstr([], 'a')\n  []\n  >>> iflterByrSubstr(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitive = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitive([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitive(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitiveIgnoreCase = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCase([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase = (strings, substr) => {\n  return strings.filter(s => s.toLowerCase().includes(substr.toLowerCase()));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase([], 'a')\n  []\n  >>> iflterByrSubstrCaseInsensitiveIgnoreCaseIgnoreCase(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const operationsLength = operations.length;\n  let balance = 0;\n  let i = 0;\n  while (i < operationsLength) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nexport default belowZeor;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18,", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*Return the number of divisors of a given number.\n  >>> siDivisors(6)\n  3\n  >>> siDivisors(101)\n  10\n  >>> siDivisors(11)\n  2\n  >>> siDivisors(13441)\n  21\n  >>> siDivisors(61)\n  3\n  >>> siDivisors(4)\n  1\n  >>> siDivisors(1)\n  1\n  */\nconst siDivisors = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  let count = 1\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      count += 2\n    }\n  }\n  return count\n}\n\n/*Return the sum of the squares of the first ten natural numbers.\n  >>> siSumOfSquares(1)\n  1\n  >>> siSumOfSquares(10)\n  55\n  >>> siSumOfSquares(100)\n  33550\n  >>> siSumOfSquares(1000)\n  1258601\n  >>> siSumOfSquares(10000)\n  1258601\n  >>> siSumOfSquares(100000)\n  1258601\n  >>> siSumOfSquares(1000000)\n  1258601\n  */\nconst siSumOfSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i\n  }\n  return sum\n}\n\n/*Return the sum of the first ten natural numbers raised to the power of a given number.\n  >>> siSumOfSquares(1)\n  1\n  >>> siSumOfSquares(10)\n  55\n  >>> siSumOfSquares(100)\n  33550\n  >>> siSumOfSquares(1000)\n  1258601\n  >>> siSumOfSquares(10000)\n  1258601\n  >>> siSumOfSquares(100000)\n  1258601\n  >>> siSumOfSquares(1000000)\n  1258601\n  */\nconst siSumOfSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2)\n  }\n  return sum\n}\n\n/*Return the sum of the first ten natural numbers raised to the power of a given number.\n  >>> siSumOfSquares(1)\n  1\n  >>> siSumOfSquares(10)\n  55\n  >>> siSumOfSquares(100)\n  33550\n  >>> siSumOfSquares(1000)\n  1258601\n  >>> siSumOfSquares(10000)\n  1258601\n  >>> siSumOfSquares(100000)\n  1258601\n  >>> siSumOfSquares(1000000)\n  1258601\n  */\nconst siSumOfSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2)\n  }\n  return sum\n}\n\n/*Return the sum of the first ten natural numbers raised to the power of a given number.\n  >>> siSumOfSquares(1)\n  1\n  >>> siSumOfSquares(10)\n  55\n  >>> siSumOfSquares(100)\n  33550\n  >>> siSumOfSquares(1000)\n  1258601\n  >>> siSumOfSquares(10000)\n  1258601\n  >>> siSumOfSquares(100000)\n  1258601\n  >>> siSumOfSquares(1000000)\n  1258601\n  */\nconst siSumOfSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2)\n  }\n  return sum\n}\n\n/*Return the sum of the first ten natural numbers raised to the power of a given number.\n  >>> siSumOfSquares(1)\n  1\n  >>> siSumOfSquares(10)\n  55\n  >>> siSumOfSquares(100)\n  33550\n  >>> siSumOfSquares(1000)\n  1258601\n  >>> siSumOfSquares(10000)\n  1258601\n  >>> siSumOfSquares(100000)\n  1258601\n  >>> siSumOfSquares(1000000)\n  1258601\n  */\nconst siSumOfSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2)\n  }\n  return sum\n}\n\n/*Return the sum of the first ten natural numbers raised to the power of a given number.\n  >>> siSumOfSquares(1)\n  1\n  >>> siSumOfSquares(10)\n  55\n  >>> siSumOfSquares(100)\n  33550\n  >>> siSumOfSquares(1000)\n  1258601\n  >>> siSumOfSquares(10000)\n  1258601\n  >>> siSumOfSquares(100000)\n  1258601\n  >>> siSumOfSquares(1000000)\n  1258601\n  */\nconst siSumOfSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2)\n  }\n  return sum\n}\n\n/*Return the sum of the first ten natural numbers raised to the power of a given number.\n  >>> siSumOfSquares(", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (poly(x) === 0) {\n      return x;\n    }\n  }\n  return findZero(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (poly(x) === 0) {\n      return x;\n    }\n  }\n  return findZero(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (poly(x) === 0) {\n      return x;\n    }\n  }\n  return findZero(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2 === 0) {\n    const x = xs[n / 2];\n    if (poly(x) === 0) {\n      return x;\n    }\n  }\n  return findZero(xs.slice(0, n / 2));\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item *", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = [...l].sort((a, b) => a % 3 - b % 3);\n  const divisible = [...l].filter((i) => i % 3 === 0);\n  return [...divisible,...sorted];\n};\n\nexport default sortThird;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort();\n  if (sorted.length % 2 === 0) {\n    return (sorted[Math.floor(sorted.length / 2)] + sorted[Math.floor(sorted.length / 2) - 1]) / 2;\n  } else {\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const max = maxElement(l);\n  const min = minElement(l);\n  const count = l.length;\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      modeCount++;\n    } else if (l[i] === min) {\n      modeCount++;\n    }\n  }\n  if (modeCount === count) {\n    return max;\n  } else if (modeCount > count / 2) {\n    return max;\n  } else {\n    return min;\n  }\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst median2 = (l) => {\n  const sorted = l.slice().sort();\n  if (sorted.length % 2 === 0) {\n    return (sorted[Math.floor(sorted.length / 2)] + sorted[Math.floor(sorted.length / 2) - 1]) / 2;\n  } else {\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode2 = (l) => {\n  const max = maxElement(l);\n  const min = minElement(l);\n  const count = l.length;\n  let mode = 0;\n  let modeCount = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      modeCount++;\n    } else if (l[i] === min) {\n      modeCount++;\n    }\n  }\n  if (modeCount === count) {\n    return max;\n  } else if (modeCount > count / 2) {\n    return max;\n  } else {\n    return min;\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode3 = (l) => {\n  const sorted = l.slice().sort();\n  if (sorted.length % 2 === 0) {\n    return (sorted[Math.floor(sorted.length / 2)] + sorted[Math.floor(sorted.length / 2) - 1]) / 2;\n  } else {\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode4 = (l) => {\n  const sorted = l.slice().sort();\n  if (sorted.length % 2 === 0) {\n    return (sorted[Math.floor(sorted.length / 2)] + sorted[Math.floor(", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n\nexport default sotrEven;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this\n  dataset.\n  Standard deviation is the square root of the average of the squared deviations\n  from the mean:\n  SD = sqrt(average(x^2 - x_mean^2))\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 2));\n  return Math.sqrt(mean(deviations));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the standard deviation of the squared\n  deviations from the mean:\n  SE = sqrt(SD)\n  >>> standardError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardError = (numbers) => {\n  const standardDeviation = standardDeviation(numbers);\n  return Math.sqrt(standardDeviation);\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  of this dataset.\n  Coefficient of variation is the ratio of the standard deviation to the mean:\n  CV = SD / mean\n  >>> coefficientOfVariation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficientOfVariation = (numbers) => {\n  const standardDeviation = standardDeviation(numbers);\n  return standardDeviation / mean(numbers);\n};\n\n/*\n  For a given list of input numbers, calculate the skewness of this dataset.\n  Skewness is the ratio of the second moment to the mean of the squared\n  deviations from the mean:\n  SK = 2 * (1 / n) * (sum(x^3 - 3 * x * x^2 + x^3) / n)\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 3));\n  return 2 * (1 / numbers.length) * sum(deviations) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis of this dataset.\n  Kurtosis is the ratio of the fourth moment to the mean of the squared\n  deviations from the mean:\n  K = (1 / n) * (sum(x^4 - 4 * x^3 + 3 * x^2 - x^4) / n)\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 4));\n  return (1 / numbers.length) * sum(deviations) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis of this\n  dataset.\n  Excess kurtosis is the ratio of the fourth moment to the mean of the squared\n  deviations from the mean:\n  EK = (1 / n) * (sum(x^4 - 4 * x^3 + 3 * x^2 - x^4) / n)\n  >>> excessKurtosis([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst excessKurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 4));\n  return (1 / numbers.length) * sum(deviations) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis of this\n  dataset.\n  Excess kurtosis is the ratio of the fourth moment to the mean of the squared\n  deviations from the mean:\n  EK = (1 / n) * (sum(x^4 - 4 * x^3 + 3 * x^2 - x^4) / n)\n  >>> excessKurtosis([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst excessKurtosis2 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 4));\n  return (1 / numbers.length) * sum(deviations) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis of this\n  dataset.\n  Excess kurtosis is the ratio of the fourth moment to the mean of the squared\n  deviations from the mean:\n  EK = (1 / n) * (sum(x^4 - 4 * x^3 + 3 * x^2 - x^4) / n)\n  >>> excessKurtosis([1.0, 2.0, 3.0, 4.0])\n  0.0\n  */\nconst excessKurtosis3 = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.pow(number - mean, 4));\n  return (1 / numbers.length) * sum(deviations) / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis of this\n  dataset.\n  Excess kurtosis is the ratio of the", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        const sum = l[i] + l[j] + l[k];\n        if (sum === 0) {\n          set.add(sum);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision2 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision3 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision4 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision5 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision6 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision7 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision8 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision9 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision10 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision11 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision12 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision13 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision14 = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i < j) {\n        collisions += (Math.abs(i - j) + 1);\n      }\n    }\n  }\n  return collisions;\n};\n\nconst acrRacelColision15 = (n) => {\n  let collisions = 0", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] + 1);\n  }\n  return newList;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decrList = (l) => {\n  const newList = [];\n  for (let i = 0; i < l.length; i++) {\n    newList.push(l[i] - 1);\n  }\n  return newList;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const new", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero2 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero3 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero4 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero5 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero6 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero7 = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return l.some(x => x!== sum);\n};\n\n/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoT", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x === 0) {\n    return '0'\n  }\n  if (x < 0) {\n    return '-' + changeBase(-x, base)\n  }\n  let result = ''\n  while (x > 0) {\n    result = (x % base) + result\n    x = Math.floor(x / base)\n  }\n  return result\n}\n\n/*\n  Convert a number to a string in base 10.\n  >>> numberToBase10(8)\n  '8'\n  >>> numberToBase10(8, 2)\n  '1000'\n  >>> numberToBase10(7, 2)\n  '111'\n  >>> numberToBase10(0)\n  '0'\n  >>> numberToBase10(-8)\n  '-8'\n  >>> numberToBase10(-8, 2)\n  '-1000'\n  >>> numberToBase10(-7, 2)\n  '-111'\n  >>> numberToBase10(1, 2)\n  '1'\n  >>> numberToBase10(1, 3)\n  '11'\n  >>> numberToBase10(1, 4)\n  '100'\n  >>> numberToBase10(1, 5)\n  '101'\n  >>> numberToBase10(1, 6)\n  '110'\n  >>> numberToBase10(1, 7)\n  '111'\n  >>> numberToBase10(1, 8)\n  '1000'\n  >>> numberToBase10(1, 9)\n  '1001'\n  >>> numberToBase10(1, 10)\n  '1010'\n  >>> numberToBase10(1, 11)\n  '1011'\n  >>> numberToBase10(1, 12)\n  '1100'\n  >>> numberToBase10(1, 13)\n  '1101'\n  >>> numberToBase10(1, 14)\n  '1110'\n  >>> numberToBase10(1, 15)\n  '1111'\n  >>> numberToBase10(1, 16)\n  '10000'\n  >>> numberToBase10(1, 17)\n  '10001'\n  >>> numberToBase10(1, 18)\n  '10010'\n  >>> numberToBase10(1, 19)\n  '10011'\n  >>> numberToBase10(1, 20)\n  '10100'\n  >>> numberToBase10(1, 21)\n  '10101'\n  >>> numberToBase10(1, 22)\n  '10110'\n  >>> numberToBase10(1, 23)\n  '10111'\n  >>> numberToBase10(1, 24)\n  '11000'\n  >>> numberToBase10(1, 25)\n  '11001'\n  >>> numberToBase10(1, 26)\n  '11010'\n  >>> numberToBase10(1, 27)\n  '11011'\n  >>> numberToBase10(1, 28)\n  '11100'\n  >>> numberToBase10(1, 29)\n  '11101'\n  >>> numberToBase10(1, 30)\n  '11110'\n  >>> numberToBase10(1, 31)\n  '11111'\n  >>> numberToBase10(1, 32)\n  '100000'\n  >>> numberToBase10(1, 33)\n  '100001'\n  >>> numberToBase10(1, 34)\n  '100010'\n  >>> numberToBase10(1, 35)\n  '100011'\n  >>> numberToBase10(1, 36)\n  '100100'\n  >>> numberToBase10(1, 37)\n  '100101'\n  >>> numberToBase10(1, 38)\n  '100110'\n  >>> numberToBase10(1, 39)\n  '100111'\n  >>> numberToBase10(1, 40)\n  '101000'\n  >>> numberToBase10(1, 41)\n  '101001'\n  >>> numberToBase10(1, 42)\n  '101010'\n  >>> numberToBase10(1, 43)\n  '101011'\n  >>> numberToBase10(1, 44)\n  '101100'\n  >>> numberToBase10(1, 45)\n  '101101'\n  >>> numberToBase10(1, 46)\n  '101110'\n  >>> numberToBase10(1, 47)\n  '101111'\n  >>> numberToBase10(1, 48)\n  '110000'\n  >>> numberToBase10(1, 49)\n  '110001'\n  >>> numberToBase10(1, 50)\n  '110010'\n  >>> numberToBase10(1, 51)\n  '110011'\n  >>> numberToBase10(1, 52)\n  '110100'\n  >>> numberToBase10(1, 53)\n  '110101'\n  >>> numberToBase10(1, 54)\n  '110110'\n  >>> numberToBase10(1, 55)\n  '110111'\n  >>> numberToBase10(1, 56)\n  '111000'\n  >>> numberToBase10(1, 57)\n  '111001'\n  >>> numberToBase10(1, 58)\n  '111010'\n  >>> numberToBase10(1, 59)\n  '111011'\n  >>> numberToBase10(1, 60)\n  '111100'\n  >>> numberToBase10(1, 61)\n  '111101'\n  >>> numberToBase10(1, 62)\n  '111110'\n  >>> numberToBase10(1, 63)\n  '111111'\n  >>> numberToBase10(1, 64)\n  '1000000'\n  >>> numberToBase10(1, 65)\n  '1000001'\n  >>> numberToBase10(1, 66)\n  '1000010'\n  >>> numberToBase10(1, 67)\n  '1000011'\n  >>> numberToBase10(1, 68)\n  '1000100'\n  >>> numberToBase10(1, 69)\n  '1000101'\n  >>> numberToBase10(1", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median2 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median3 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median4 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median5 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median6 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median7 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median8 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median9 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median10 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median11 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median12 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median13 = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\n/*\n  Return the median of the elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median14 = (l) => {\n  const sorted", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome11 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome12 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome13 = (text) => {\n    if (!text) {\n        return false;\n    }\n\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p)\n}\n\n/*Return the number of digits in n.\n  >>> digits(1)\n  1\n  >>> digits(10)\n  2\n  >>> digits(100)\n  3\n  >>> digits(1000)\n  4\n  >>> digits(10000)\n  5\n  >>> digits(100000)\n  6\n  >>> digits(1000000)\n  7\n  >>> digits(10000000)\n  8\n  >>> digits(100000000)\n  9\n  >>> digits(1000000000)\n  10\n  >>> digits(10000000000)\n  11\n  >>> digits(100000000000)\n  12\n  >>> digits(1000000000000)\n  13\n  >>> digits(10000000000000)\n  14\n  >>> digits(100000000000000)\n  15\n  >>> digits(1000000000000000)\n  16\n  >>> digits(10000000000000000)\n  17\n  >>> digits(100000000000000000)\n  18\n  >>> digits(1000000000000000000)\n  19\n  >>> digits(10000000000000000000)\n  20\n  >>> digits(100000000000000000000)\n  21\n  >>> digits(1000000000000000000000)\n  22\n  >>> digits(10000000000000000000000)\n  23\n  >>> digits(100000000000000000000000)\n  24\n  >>> digits(1000000000000000000000000)\n  25\n  >>> digits(10000000000000000000000000)\n  26\n  >>> digits(100000000000000000000000000)\n  27\n  >>> digits(1000000000000000000000000000)\n  28\n  >>> digits(10000000000000000000000000000)\n  29\n  >>> digits(100000000000000000000000000000)\n  30\n  >>> digits(1000000000000000000000000000000)\n  31\n  >>> digits(10000000000000000000000000000000)\n  32\n  >>> digits(100000000000000000000000000000000)\n  33\n  >>> digits(10000000000000000000000000000000000)\n  34\n  >>> digits(100000000000000000000000000000000000)\n  35\n  >>> digits(1000000000000000000000000000000000000)\n  36\n  >>> digits(10000000000000000000000000000000000000)\n  37\n  >>> digits(100000000000000000000000000000000000000)\n  38\n  >>> digits(1000000000000000000000000000000000000000)\n  39\n  >>> digits(10000000000000000000000000000000000000000)\n  40\n  >>> digits(100000000000000000000000000000000000000000)\n  41\n  >>> digits(1000000000000000000000000000000000000000000)\n  42\n  >>> digits(10000000000000000000000000000000000000000000)\n  43\n  >>> digits(100000000000000000000000000000000000000000000)\n  44\n  >>> digits(1000000000000000000000000000000000000000000000)\n  45\n  >>> digits(10000000000000000000000000000000000000000000000)\n  46\n  >>> digits(100000000000000000000000000000000000000000000000)\n  47\n  >>> digits(1000000000000000000000000000000000000000000000000)\n  48\n  >>> digits(100000000000000000000000000000000000000000000000000)\n  49\n  >>> digits(1000000000000000000000000000000000000000000000000000)\n  50\n  >>> digits(10000000000000000000000000000000000000000000000000000)\n  51\n  >>> digits(100000000000000000000000000000000000000000000000000000)\n  52\n  >>> digits(1000000000000000000000000000000000000000000000000000000)\n  53\n  >>> digits(10000000000000000000000000000000000000000000000000000000)\n  54\n  >>> digits(100000000000000000000000000000000000000000000000000000000)\n  55\n  >>> digits(1000000000000000000000000000000000000000000000000000000000)\n  56\n  >>> digits(10000000000000000000000000000000000000000000000000000000000)\n  57\n  >>> digits(100000000000000000000000000000000000000000000000000000000000)\n  58\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000)\n  59\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000)\n  60\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000)\n  61\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000)\n  62\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000)\n  63\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000)\n  64\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000)\n  65\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000)\n  66\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000)\n  67\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000)\n  68\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000)\n  69\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  70\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  71\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  72\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  73\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  74\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  75\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  76\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  77\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  78\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  79\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  80\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  81\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  82\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  83\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  84\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  85\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  86\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  87\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  88\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  89\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  90\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  91\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  92\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  93\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  94\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  95\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  96\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  97\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  98\n  >>> digits(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  99\n  >>> digits(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  100\n  >>> digits(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(numbers[i] + delimeter);\n      j++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 4)\n  [1,", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_sehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_sehift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeSehift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_shift_shift_shift_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_shift_shift_shift_shift = (", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  remoevPunctuation is a function that takes string and returns string without punctuation.\n  >>> remoevPunctuation('')\n  ''\n  >>> remoevPunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remoevPunctuation('abcdef')\n  'abcdef'\n  >>> remoevPunctuation('aaaaa')\n  ''\n  >>> remoevPunctuation('aaBAA')\n  'aB'\n  >>> remoevPunctuation('zbcd')\n  'zbcd'\n  */\nconst remoevPunctuation = (text) => {\n  const punctuation = ['.', ',', '?', '!', ';', ':', '-', '_', '\\'', '\"', '\\'s', '\\'S', '\\'\\'', '\\'\\'s', '\\'\\'S', '\\'\\'\\'', '\\'\\'\\'s', '\\'\\'\\'S', '\\'\\'\\'\\'', '\\'\\'\\'\\'s', '\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'\\'\\'\\'\\'\\'\\'\\'S', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'', '\\'\\'\\'\\'\\'\\'\\'\\'\\'\\'s', '\\'\\'", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst betweenThresholds = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst equalThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i]!== t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are not equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  false\n  */\nconst notEqualThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] === t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst lessThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst lessThanEqualThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst greaterThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are greater than or equal to threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  true\n  */\nconst greaterThanEqualThreshold = (l, t) => {\n  const", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.6666666666666666\n  >>> divide(5, 7)\n  2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Return the sum of the squares of the numbers 1 to n\n  *\n  * > sumOfSquares(1, 5)\n  * 15\n  * > sumOfSquares(1, 10)\n  * 55\n  * > sumOfSquares(1, 100)\n  * 225\n  * > sumOfSquares(1, 1000)\n  * 3125\n  * > sumOfSquares(1, 10000)\n  * 32500\n  * > sumOfSquares(1, 100000)\n  * 32500000\n  * > sumOfSquares(1, 1000000)\n  * 320000025\n  * > sumOfSquares(1, 10000000)\n  * 32000000025\n  * > sumOfSquares(1, 100000000)\n  * 32000000000025\n  * > sumOfSquares(1, 1000000000)\n  * 3200000000000025\n  * > sumOfSquares(1, 10000000000000)\n  * 3200000000000000025\n  * > sumOfSquares(1, 10000000000000000)\n  * 32000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000)\n  * 320000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000)\n  * 320000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000)\n  * 3200000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000)\n  * 32000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000)\n  * 320000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 3200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 32000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  * 320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000025\n  * > sumOfSquares(1", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Length = s0.length\n  const s1Length = s1.length\n  if (s0Length!== s1Length) return false\n  for (let i = 0; i < s0Length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same2 = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same3 = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same4 = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same5 = (s0, s1) => {\n  if (s0 === s1) return true\n  if (s0.length!== s1.length) return false\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same('abcd', 'dddddddabc')\n  true\n  >>> same('dddddddabc', 'abcd')\n  true\n  >>> same('eabcd', 'dddddddabc')\n  false\n  >>> same('abcd', 'dddddddabce')\n  false\n  >>> same('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same6", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const len = brackets.length\n  const stack = []\n  for (let i = 0; i < len; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\")\n    } else if (brackets[i] === \">\") {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return the number of opening brackets.\n\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<\")\n  0\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")\n  1\n  >>> countBrackets(\"<>\")", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic2 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return false;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic3 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic4 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return false;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic5 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic6 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return false;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic7 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic8 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return false;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic9 = (l) => {\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic10 = (l) => {\n  let i = 0, j = l.length -", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.values());\n  const intersection_set = new Set(l2_set.values());\n  return intersection_set.values().filter(x => intersection.has(x));\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallestPrimeFactor(13195)\n  29\n  >>> smallestPrimeFactor(2048)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let i", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_length = paren_stack.length;\n  const paren_stack_index = paren_stack.length - 1;\n  const paren_stack_item = paren_stack[paren_stack_index];\n  const paren_stack_item_length = paren_stack_item.length;\n  const paren_stack_item_index = paren_stack_item.length - 1;\n  const paren_stack_item_item = paren_stack_item[paren_stack_item_index];\n  const paren_stack_item_item_length = paren_stack_item_item.length;\n  const paren_stack_item_item_index = paren_stack_item_item.length - 1;\n  const paren_stack_item_item_item = paren_stack_item_item[paren_stack_item_item_index];\n  const paren_stack_item_item_item_length = paren_stack_item_item_item.length;\n  const paren_stack_item_item_item_index = paren_stack_item_item_item.length - 1;\n  const paren_stack_item_item_item_item = paren_stack_item_item_item[paren_stack_item_item_item_index];\n  const paren_stack_item_item_item_item_length = paren_stack_item_item_item_item.length;\n  const paren_stack_item_item_item_item_index = paren_stack_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item = paren_stack_item_item_item_item[paren_stack_item_item_item_item_index];\n  const paren_stack_item_item_item_item_item_length = paren_stack_item_item_item_item_item.length;\n  const paren_stack_item_item_item_item_item_index = paren_stack_item_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item_item = paren_stack_item_item_item_item_item[paren_stack_item_item_item_item_item_index];\n  const paren_stack_item_item_item_item_item_item_length = paren_stack_item_item_item_item_item_item.length;\n  const paren_stack_item_item_item_item_item_item_index = paren_stack_item_item_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item_item_item = paren_stack_item_item_item_item_item_item[paren_stack_item_item_item_item_item_item_index];\n  const paren_stack_item_item_item_item_item_item_item_length = paren_stack_item_item_item_item_item_item_item.length;\n  const paren_stack_item_item_item_item_item_item_index = paren_stack_item_item_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item_item_item = paren_stack_item_item_item_item_item_item[paren_stack_item_item_item_item_item_item_index];\n  const paren_stack_item_item_item_item_item_item_item_length = paren_stack_item_item_item_item_item_item_item.length;\n  const paren_stack_item_item_item_item_item_item_index = paren_stack_item_item_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item_item_item = paren_stack_item_item_item_item_item_item[paren_stack_item_item_item_item_item_item_index];\n  const paren_stack_item_item_item_item_item_item_item_length = paren_stack_item_item_item_item_item_item_item.length;\n  const paren_stack_item_item_item_item_item_item_index = paren_stack_item_item_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item_item_item = paren_stack_item_item_item_item_item_item[paren_stack_item_item_item_item_item_item_index];\n  const paren_stack_item_item_item_item_item_item_item_length = paren_stack_item_item_item_item_item_item_item.length;\n  const paren_stack_item_item_item_item_item_item_index = paren_stack_item_item_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item_item_item = paren_stack_item_item_item_item_item_item[paren_stack_item_item_item_item_item_item_index];\n  const paren_stack_item_item_item_item_item_item_item_length = paren_stack_item_item_item_item_item_item_item.length;\n  const paren_stack_item_item_item_item_item_item_index = paren_stack_item_item_item_item_item_item.length - 1;\n  const paren_stack_item_item_item_item_item_item_item = paren_stack_item_item_item_item_item_item[paren_stack_item_item_item_item_item_item_", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength === 0) {\n    return true\n  }\n  let lastBracket = brackets[bracketsLength - 1]\n  let currentBracket = brackets[0]\n  let bracketsCount = 1\n  while (bracketsCount < bracketsLength) {\n    if (lastBracket === \"(\" && currentBracket === \")\") {\n      bracketsCount++\n    } else if (lastBracket === \")\" && currentBracket === \"(\") {\n      bracketsCount--\n    }\n    lastBracket = currentBracket\n    currentBracket = brackets[bracketsCount]\n  }\n  return bracketsCount === 0\n}\n\nmodule.exports = correctBracketnig\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i] + (i + 1) * xs[i + 1];\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1]\n  */\nconst roots = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      a.push(0);\n    } else {\n      a.push(-(xs[i] - d[i] / xs[i]) / d[i]);\n    }\n  }\n  return a;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1]\n  */\nconst roots2 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      a.push(0);\n    } else {\n      a.push(-(xs[i] - d[i] / xs[i]) / d[i]);\n    }\n  }\n  return a;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1]\n  */\nconst roots3 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      a.push(0);\n    } else {\n      a.push(-(xs[i] - d[i] / xs[i]) / d[i]);\n    }\n  }\n  return a;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1]\n  */\nconst roots4 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      a.push(0);\n    } else {\n      a.push(-(xs[i] - d[i] / xs[i]) / d[i]);\n    }\n  }\n  return a;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1]\n  */\nconst roots5 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const n = d.length;\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    if (d[i] === 0) {\n      a.push(0);\n    } else {\n      a.push(-(xs[i] - d[i] / xs[i]) / d[i]);\n    }\n  }\n  return a;\n};\n\n/*\n  Given a polynomial, return the roots of the polynomial.\n  >>> roots([3, 1, 2, 4, 5])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3])\n  [-1, -1]\n  >>> roots([1, 2, 3, 4])\n  [-1, -1, -1]\n  >>> roots([1, 2, 3, 4, 5])\n  [-1, -1, -1]\n  */\nconst roots6 =", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nconsole.log(vowelsConut(\"abcde\"));\nconsole.log(vowelsConut(\"ACEDY\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  if (shift >= len) {\n    return result.reverse()\n  }\n  const start = len - shift\n  const end = len\n  for (let i = start; i < end; i++) {\n    result[i] = x[i + shift]\n  }\n  return result.reverse()\n}\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"abcdef\")\n  \"fedcba\"\n  >>> reverse(\"abcdefg\")\n  \"gfedcba\"\n  >>> reverse(\"abcdefgh\")\n  \"ghfedcba\"\n  >>> reverse(\"abcdefghi\")\n  \"highfedcba\"\n  >>> reverse(\"abcdefghij\")\n  \"jihgfedcba\"\n  >>> reverse(\"abcdefghijk\")\n  \"kijhgfedcba\"\n  >>> reverse(\"abcdefghijkl\")\n  \"lkijhgfedcba\"\n  >>> reverse(\"abcdefghijklm\")\n  \"mjkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmn\")\n  \"nkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmno\")\n  \"onkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnop\")\n  \"ponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopq\")\n  \"qponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqr\")\n  \"rqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrst\")\n  \"stqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstu\")\n  \"ustqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuv\")\n  \"uvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvw\")\n  \"wvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwx\")\n  \"wxvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxy\")\n  \"xyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyz\")\n  \"zxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyza\")\n  \"azxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzab\")\n  \"aazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabc\")\n  \"aaaazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcde\")\n  \"aaabazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefg\")\n  \"aaaabazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefgh\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghi\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghij\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijk\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijkl\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklm\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmn\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnop\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst\")\n  \"aaabcazxyvstqponkijhgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmn", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const apple = s.split(\" \").filter(x => x.startsWith(\"apple\")).length\n  const orange = s.split(\" \").filter(x => x.startsWith(\"orange\")).length\n  const mango = s.split(\" \").filter(x => x.startsWith(\"mango\")).length\n  return n - apple - orange - mango\n}\n\nexport default fruitDistribution\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < min) {\n        min = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n  return [min, minIndex];\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => Math.max(a, b), 0);\n  const maxIndex = lst.findIndex((x) => x >= 0 && x > max);\n  return maxIndex >= 0? lst[maxIndex] : -1;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiter = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.indexOf(substring)!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseSensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseInsensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseInsensitiveAndCaseSensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseInsensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseInsensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseInsensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseInsensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @returns {string[]}\n  */\nconst filteBrySubstringWithDelimiterAndCaseInsensitiveAndCaseSensitiveAndCaseSensitive = (strings, substring, delimiter) => {\n  if (!strings ||!substring) return [];\n  return strings.filter(s => s.toLowerCase().indexOf(substring.toLowerCase())!== -1).map(s => s.split(delimiter).join(''));\n};\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {string} substring\n  * @param {string} [delimiter ='']\n  * @return", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  let sorted = lst.slice(0);\n  let min = sorted[0];\n  let max = sorted[sorted.length - 1];\n  let i = 0;\n  while (i < sorted.length) {\n    if (sorted[i] < min) {\n      sorted[i] = min;\n      min = sorted[i];\n    } else if (sorted[i] > max) {\n      sorted[i] = max;\n      max = sorted[i];\n    } else {\n      sorted[i] = sorted[i];\n    }\n    i++;\n  }\n  return sorted;\n};\n\nmodule.exports = stranegoSrtList;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a * a + b * b - c * c) / 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n  return Math.abs(Math.sqrt(a", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) return false;\n  if (q.length === 1) return q[0] <= w;\n  if (q.length === 2) return q[0] + q[1] <= w;\n  if (q.length === 3) return q[0] + q[1] + q[2] <= w;\n  if (q.length === 4) return q[0] + q[1] + q[2] + q[3] <= w;\n  if (q.length === 5) return q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n  if (q.length === 6) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] <= w;\n  if (q.length === 7) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w;\n  if (q.length === 8) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] <= w;\n  if (q.length === 9) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w;\n  if (q.length === 10) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] <= w;\n  if (q.length === 11) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] <= w;\n  if (q.length === 12) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] <= w;\n  if (q.length === 13) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] <= w;\n  if (q.length === 14) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] <= w;\n  if (q.length === 15) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] <= w;\n  if (q.length === 16) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] <= w;\n  if (q.length === 17) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] <= w;\n  if (q.length === 18) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] <= w;\n  if (q.length === 19) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[18] <= w;\n  if (q.length === 20) return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] + q[9] + q[10] + q[11] + q[12] + q[13] + q[14] + q[15] + q[16] + q[17] + q[", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let max = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  let temp = 0;\n\n  while (i < len) {\n    min = Math.min(min, i);\n    max = Math.max(max, i);\n    i++;\n  }\n\n  while (j < len) {\n    min = Math.min(min, j);\n    max = Math.max(max, j);\n    j++;\n  }\n\n  while (k < len) {\n    min = Math.min(min, k);\n    max = Math.max(max, k);\n    k++;\n  }\n\n  for (i = min; i <= max; i++) {\n    count = 0;\n    for (j = 0; j < len; j++) {\n      if (arr[j] % 2 === 0) {\n        count++;\n      }\n    }\n\n    if (count === 0) {\n      temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      count = 0;\n      for (j = 0; j < len; j++) {\n        if (arr[j] % 2 === 0) {\n          count++;\n        }\n      }\n\n      if (count === 0) {\n        return i;\n      }\n    }\n  }\n\n  return 0;\n};\n\nconsole.log(msallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) return lst1;\n  if (lst2.length === 0) return lst2;\n  if (lst1.length === 1) return lst1;\n  if (lst2.length === 1) return lst2;\n  if (lst1.length === 2) return lst1;\n  if (lst2.length === 2) return lst2;\n  if (lst1.length === 3) return lst1;\n  if (lst2.length === 3) return lst2;\n  if (lst1.length === 4) return lst1;\n  if (lst2.length === 4) return lst2;\n  if (lst1.length === 5) return lst1;\n  if (lst2.length === 5) return lst2;\n  if (lst1.length === 6) return lst1;\n  if (lst2.length === 6) return lst2;\n  if (lst1.length === 7) return lst1;\n  if (lst2.length === 7) return lst2;\n  if (lst1.length === 8) return lst1;\n  if (lst2.length === 8) return lst2;\n  if (lst1.length === 9) return lst1;\n  if (lst2.length === 9) return lst2;\n  if (lst1.length === 10) return lst1;\n  if (lst2.length === 10) return lst2;\n  if (lst1.length === 11) return lst1;\n  if (lst2.length === 11) return lst2;\n  if (lst1.length === 12) return lst1;\n  if (lst2.length === 12) return lst2;\n  if (lst1.length === 13) return lst1;\n  if (lst2.length === 13) return lst2;\n  if (lst1.length === 14) return lst1;\n  if (lst2.length === 14) return lst2;\n  if (lst1.length === 15) return lst1;\n  if (lst2.length === 15) return lst2;\n  if (lst1.length === 16) return lst1;\n  if (lst2.length === 16) return lst2;\n  if (lst1.length === 17) return lst1;\n  if (lst2.length === 17) return lst2;\n  if (lst1.length === 18) return lst1;\n  if (lst2.length === 18) return lst2;\n  if (lst1.length === 19) return lst1;\n  if (lst2.length === 19) return lst2;\n  if (lst1.length === 20) return lst1;\n  if (lst2.length === 20) return lst2;\n  if (lst1.length === 21) return lst1;\n  if (lst2.length === 21) return lst2;\n  if (lst1.length === 22) return lst1;\n  if (lst2.length === 22) return lst2;\n  if (lst1.length === 23) return lst1;\n  if (lst2.length === 23) return lst2;\n  if (lst1.length === 24) return lst1;\n  if (lst2.length === 24) return lst2;\n  if (lst1.length === 25) return lst1;\n  if (lst2.length === 25) return lst2;\n  if (lst1.length === 26) return lst1;\n  if (lst2.length === 26) return lst2;\n  if (lst1.length === 27) return lst1;\n  if (lst2.length === 27) return lst2;\n  if (lst1.length === 28) return lst1;\n  if (lst2.length === 28) return lst2;\n  if (lst1.length === 29) return lst1;\n  if (lst2.length === 29) return lst2;\n  if (lst1.length === 30) return lst1;\n  if (lst2.length === 30) return lst2;\n  if (lst1.length === 31) return lst1;\n  if (lst2.length === 31) return lst2;\n  if (lst1.length === 32) return lst1;\n  if (lst2.length === 32) return lst2;\n  if (lst1.length === 33) return lst1;\n  if (lst2.length === 33) return lst2;\n  if (lst1.length === 34) return lst1;\n  if (lst2.length === 34) return lst2;\n  if (lst1.length === 35) return lst1;\n  if (lst2.length === 35) return lst2;\n  if (lst1.length === 36) return lst1;\n  if (lst2.length === 36) return lst2;\n  if (lst1.length === 37) return lst1;\n  if (lst2.length === 37) return lst2;\n  if (lst1.length === 38) return lst1;", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 2;\n};\n\nconst isMultiplyPirme2 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 3;\n};\n\nconst isMultiplyPirme3 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 4;\n};\n\nconst isMultiplyPirme4 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 5;\n};\n\nconst isMultiplyPirme5 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 6;\n};\n\nconst isMultiplyPirme6 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 7;\n};\n\nconst isMultiplyPirme7 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 8;\n};\n\nconst isMultiplyPirme8 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 9;\n};\n\nconst isMultiplyPirme9 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 10;\n};\n\nconst isMultiplyPirme10 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 11;\n};\n\nconst isMultiplyPirme11 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0; i < prime.length; i++) {\n    const p = prime[i];\n    const n = a / p;\n    if (n === Math.floor(n)) {\n      result.push(p);\n      if (n > 1) {\n        result.push(n * p);\n      }\n    }\n  }\n  return result.length === 12;\n};\n\nconst isMultiplyPirme12 = (a) => {\n  const prime = [2, 3, 5];\n  const result = [];\n  for (let i = 0;", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer2 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer3 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer4 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer5 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer6 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer7 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer8 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n)))\n}\n\nconst isSimplePwoer9 = (x, n) => {\n  return (x % n === 0) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.pow(n, Math.floor(x / n))) && (x / n === Math.p", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true\n  }\n  if (a === 1) {\n    return true\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a === 3) {\n    return true\n  }\n  if (a === 4) {\n    return true\n  }\n  if (a === 5) {\n    return true\n  }\n  if (a === 6) {\n    return true\n  }\n  if (a === 7) {\n    return true\n  }\n  if (a === 8) {\n    return true\n  }\n  if (a === 9) {\n    return true\n  }\n  if (a === 10) {\n    return true\n  }\n  if (a === 11) {\n    return true\n  }\n  if (a === 12) {\n    return true\n  }\n  if (a === 13) {\n    return true\n  }\n  if (a === 14) {\n    return true\n  }\n  if (a === 15) {\n    return true\n  }\n  if (a === 16) {\n    return true\n  }\n  if (a === 17) {\n    return true\n  }\n  if (a === 18) {\n    return true\n  }\n  if (a === 19) {\n    return true\n  }\n  if (a === 20) {\n    return true\n  }\n  if (a === 21) {\n    return true\n  }\n  if (a === 22) {\n    return true\n  }\n  if (a === 23) {\n    return true\n  }\n  if (a === 24) {\n    return true\n  }\n  if (a === 25) {\n    return true\n  }\n  if (a === 26) {\n    return true\n  }\n  if (a === 27) {\n    return true\n  }\n  if (a === 28) {\n    return true\n  }\n  if (a === 29) {\n    return true\n  }\n  if (a === 30) {\n    return true\n  }\n  if (a === 31) {\n    return true\n  }\n  if (a === 32) {\n    return true\n  }\n  if (a === 33) {\n    return true\n  }\n  if (a === 34) {\n    return true\n  }\n  if (a === 35) {\n    return true\n  }\n  if (a === 36) {\n    return true\n  }\n  if (a === 37) {\n    return true\n  }\n  if (a === 38) {\n    return true\n  }\n  if (a === 39) {\n    return true\n  }\n  if (a === 40) {\n    return true\n  }\n  if (a === 41) {\n    return true\n  }\n  if (a === 42) {\n    return true\n  }\n  if (a === 43) {\n    return true\n  }\n  if (a === 44) {\n    return true\n  }\n  if (a === 45) {\n    return true\n  }\n  if (a === 46) {\n    return true\n  }\n  if (a === 47) {\n    return true\n  }\n  if (a === 48) {\n    return true\n  }\n  if (a === 49) {\n    return true\n  }\n  if (a === 50) {\n    return true\n  }\n  if (a === 51) {\n    return true\n  }\n  if (a === 52) {\n    return true\n  }\n  if (a === 53) {\n    return true\n  }\n  if (a === 54) {\n    return true\n  }\n  if (a === 55) {\n    return true\n  }\n  if (a === 56) {\n    return true\n  }\n  if (a === 57) {\n    return true\n  }\n  if (a === 58) {\n    return true\n  }\n  if (a === 59) {\n    return true\n  }\n  if (a === 60) {\n    return true\n  }\n  if (a === 61) {\n    return true\n  }\n  if (a === 62) {\n    return true\n  }\n  if (a === 63) {\n    return true\n  }\n  if (a === 64) {\n    return true\n  }\n  if (a === 65) {\n    return true\n  }\n  if (a === 66) {\n    return true\n  }\n  if (a === 67) {\n    return true\n  }\n  if (a === 68) {\n    return true\n  }\n  if (a === 69) {\n    return true\n  }\n  if (a === 70) {\n    return true\n  }\n  if (a === 71) {\n    return true\n  }\n  if (a === 72) {\n    return true\n  }\n  if (a === 73) {\n    return true\n  }\n  if (a === 74) {\n    return true\n  }\n  if (a === 75) {\n    return true\n  }\n  if (a === 76) {\n    return true\n  }\n  if (a === 77) {\n    return true\n  }\n  if (a === 78) {\n    return true\n  }\n  if (a === 79) {\n    return true\n  }\n  if (a === 80) {\n    return true\n  }\n  if (a === 81) {\n    return true\n  }\n  if (a === 82) {\n    return true\n  }\n  if (a === 83) {\n    return true\n  }\n  if (a === 84) {\n    return true\n  }\n  if (a === 85) {\n    return true\n  }\n  if (a === 86) {\n    return true\n  }\n  if (a === 87) {\n    return true\n  }\n  if (a === 88) {\n", "passed": 0}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  const numDigits = num.length;\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let count = 0;\n  for (let i = 0; i < numDigits; i++) {\n    const digit = num.charAt(i);\n    const index = hexDigits.indexOf(digit);\n    if (index > -1) {\n      count++;\n    }\n  }\n  for (let i = 0; i < numDigits; i++) {\n    const digit = num.charAt(i);\n    const index = primeNumbers.indexOf(digit);\n    if (index > -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  let i = 0;\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = decimal / 2;\n    i++;\n  }\n  return `db${binary}db`;\n};\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  let i = 0;\n  while (binary.length > 0) {\n    decimal += (binary.charAt(i) === '1')? 1 : 0;\n    i++;\n  }\n  return decimal;\n};\n\nconst main = () => {\n  const testCases = [\n    [15, 'db1111db'],\n    [32, 'db100000db'],\n  ];\n  testCases.forEach(([decimal, binary]) => {\n    console.log(`Decimal: ${decimal}`);\n    console.log(`Binary: ${binary}`);\n    console.log(`Decimal: ${decimalToBinary(decimal)}`);\n    console.log(`Binary: ${binaryToDecimal(binary)}`);\n  });\n};\n\nmain();\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0)\n  const product = numbers.reduce((product, number) => product * number, 1)\n  return (sum, product)\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductList = (numbers) => {\n  return numbers.map(sumProduct)\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArray = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList = (numbers) => {\n  return numbers.map(sumProduct)\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList2 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList3 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList4 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList5 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList6 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList7 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList8 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList9 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList10 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList11 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sumProduct([1, 2, 3, 4])\n  [(10, 24), (15, 48)]\n  */\nconst sumProductArrayList12 = (numbers) => {\n  return numbers.reduce((sum, number) => [sum, number], [0, 1])\n}\n\n/*\n  Given a list of numbers, return a list of tuples consisting of the sum and product of the numbers in the list.\n  >>> sum", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 0;\n  let prev = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s[i] === s[i + 1] && s[i + 1] === s[i + 2]? 1 : 0;\n    if (count > 2) {\n      return false;\n    }\n    prev = s[i];\n  }\n  return count > 2;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  const gradesArrayLength = gradesArray.length;\n  const gradesArrayLengthMinusOne = gradesArrayLength - 1;\n  const gradesArrayLengthMinusTwo = gradesArrayLength - 2;\n  const gradesArrayLengthMinusThree = gradesArrayLength - 3;\n  const gradesArrayLengthMinusFour = gradesArrayLength - 4;\n  const gradesArrayLengthMinusFive = gradesArrayLength - 5;\n  const gradesArrayLengthMinusSix = gradesArrayLength - 6;\n  const gradesArrayLengthMinusSeven = gradesArrayLength - 7;\n  const gradesArrayLengthMinusEight = gradesArrayLength - 8;\n  const gradesArrayLengthMinusNine = gradesArrayLength - 9;\n  const gradesArrayLengthMinusTen = gradesArrayLength - 10;\n  const gradesArrayLengthMinusEleven = gradesArrayLength - 11;\n  const gradesArrayLengthMinusTwelve = gradesArrayLength - 12;\n  const gradesArrayLengthMinusThirteen = gradesArrayLength - 13;\n  const gradesArrayLengthMinusFourteen = gradesArrayLength - 14;\n  const gradesArrayLengthMinusFifteen = gradesArrayLength - 15;\n  const gradesArrayLengthMinusSixteen = gradesArrayLength - 16;\n  const gradesArrayLengthMinusSeventeen = gradesArrayLength - 17;\n  const gradesArrayLengthMinusEighteen = gradesArrayLength - 18;\n  const gradesArrayLengthMinusNineteen = gradesArrayLength - 19;\n  const gradesArrayLengthMinusTwenty = gradesArrayLength - 20;\n  const gradesArrayLengthMinusTwentyOne = gradesArrayLength - 21;\n  const gradesArrayLengthMinusTwentyTwo = gradesArrayLength - 22;\n  const gradesArrayLengthMinusTwentyThree = gradesArrayLength - 23;\n  const gradesArrayLengthMinusTwentyFour = gradesArrayLength - 24;\n  const gradesArrayLengthMinusTwentyFive = gradesArrayLength - 25;\n  const gradesArrayLengthMinusTwentySix = gradesArrayLength - 26;\n  const gradesArrayLengthMinusTwentySeven = gradesArrayLength - 27;\n  const gradesArrayLengthMinusTwentyEight = gradesArrayLength - 28;\n  const gradesArrayLengthMinusTwentyNine = gradesArrayLength - 29;\n  const gradesArrayLengthMinusThirty = gradesArrayLength - 30;\n  const gradesArrayLengthMinusThirtyOne = gradesArrayLength - 31;\n  const gradesArrayLengthMinusThirtyTwo = gradesArrayLength - 32;\n  const gradesArrayLengthMinusThirtyThree = gradesArrayLength - 33;\n  const gradesArrayLengthMinusThirtyFour = gradesArrayLength - 34;\n  const gradesArrayLengthMinusThirtyFive = gradesArrayLength - 35;\n  const gradesArrayLengthMinusThirtySix = gradesArrayLength - 36;\n  const gradesArrayLengthMinusThirtySeven = gradesArrayLength - 37;\n  const gradesArrayLengthMinusThirtyEight = gradesArrayLength - 38;\n  const gradesArrayLengthMinusThirtyNine = gradesArrayLength - 39;\n  const gradesArrayLengthMinusForty = gradesArrayLength - 40;\n  const gradesArrayLengthMinusFortyOne = gradesArrayLength - 41;\n  const gradesArrayLengthMinusFortyTwo = gradesArrayLength - 42;\n  const gradesArrayLengthMinusFortyThree = gradesArrayLength - 43;\n  const gradesArrayLengthMinusFortyFour = gradesArrayLength - 44;\n  const gradesArrayLengthMinusFortyFive = gradesArrayLength - 45;\n  const gradesArrayLengthMinusFortySix = gradesArrayLength - 46;\n  const gradesArrayLengthMinusFortySeven = gradesArrayLength - 47;\n  const gradesArrayLengthMinusFortyEight = gradesArrayLength - 48;\n  const gradesArrayLengthMinusFortyNine = gradesArrayLength - 49;\n  const gradesArrayLengthMinusFifty = gradesArrayLength - 50;\n  const gradesArrayLengthMinusFiftyOne = gradesArrayLength - 51;\n  const gradesArrayLengthMinusFiftyTwo = gradesArrayLength - 52;\n  const gradesArrayLengthMinusFiftyThree = gradesArrayLength - 53;\n  const gradesArrayLengthMinusFiftyFour = gradesArrayLength - 54;\n  const gradesArrayLengthMinusFiftyFive = gradesArrayLength - 55;\n  const gradesArrayLengthMinusFiftySix = gradesArrayLength - 56;\n  const gradesArrayLengthMinusFiftySeven = gradesArrayLength - 57;\n  const gradesArrayLengthMinusFiftyEight = gradesArrayLength - 58;\n  const gradesArrayLengthMinusFiftyNine = gradesArrayLength - 59;\n  const gradesArrayLengthMinusSixty = gradesArrayLength - 60;\n  const gradesArrayLengthMinusSixtyOne = gradesArrayLength - 61;\n  const gradesArrayLengthMinusSixtyTwo = gradesArrayLength - 62;\n  const gradesArrayLengthMinusSixtyThree = gradesArrayLength - 63;\n  const gradesArrayLengthMinusSixtyFour = gradesArrayLength - 64;\n  const gradesArrayLengthMinusSixtyFive = gradesArrayLength - 65;\n  const gradesArrayLengthMinusSixtySix = gradesArrayLength - 66;\n  const gradesArrayLengthMinusSixtySeven = gradesArrayLength - 67;\n  const gradesArrayLengthMinusSixtyEight = gradesArrayLength - 68;\n  const gradesArrayLengthMinusSixtyNine = gradesArrayLength - 69;\n  const gradesArrayLengthMinusSeventy = gradesArrayLength - 70;\n  const gradesArrayLengthMinusSeventyOne = gradesArrayLength - 71;\n  const gradesArrayLengthMinusSeventyTwo = grades", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[0-9]+$/;\n  const isPrime = (number) => {\n    return number > 1 && prime.test(number);\n  };\n  const isPrimeLength = (string) => {\n    const length = string.length;\n    for (let i = 2; i < length; i++) {\n      if (!isPrime(i)) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return isPrimeLength(string);\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds10 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds11 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().join('');\n    if (digits.length === n) {\n      if (digits.charAt(0) === '1') {\n        count++;\n      }\n      if (digits.charAt(n - 1) === '1') {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst startsOneEnds12 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = i.toString().split('').reverse().", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const words = s.split(' ')\n  const sortedWords = words.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0))\n  return sortedWords.join(' ')\n}\n\nconsole.log(antSihuffle('Hello World!!!'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b) => b[0] - a[0]))\n  return sortedCols.map(row => [row[0], row[row.length - 1]])\n}\n\nconst getRow = (lst, x) => {\n  const rows = lst.map(row => row.map(x => x))\n  const sortedRows = rows.sort((a, b) => a[0] - b[0])\n  const sortedCols = sortedRows.map(row => row.sort((a, b)", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0);\n  sortedArray.sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 1) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    encrypted += alphabet.charAt(index + 2);\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let letter = alphabet.charAt(i);\n    let index = alphabet.indexOf(s.charAt(i));\n    decrypted += alphabet.charAt(index - 2);\n  }\n  return decrypted;\n};\n\n/*\n  Create a function rotate that takes a string as an argument and\n  returns a string with the alphabet rotated.\n  For example:\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihgfedcba'\n  rotate('abcdefghijklmnopqrstuvwxyz') returns 'zyxwvutsrqponmlkjihg", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxLength = 1;\n  const maxLengthIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxLength = 1;\n      maxLengthIndex = 0;\n    } else if (numbers[i] === max) {\n      maxLength++;\n      maxLengthIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + maxLength, numbers.length)];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const second = sorted[1];\n  return second;\n};\n\nconsole.log(nextSmallset([1, 2, 3, 4, 5]));\nconsole.log(nextSmallset([5, 1, 4, 3, 2]));\nconsole.log(nextSmallset([]));\nconsole.log(nextSmallset([1, 1]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  const words = S.split(' ')\n  const count = words.reduce((acc, word) => {\n    if (word === 'I') {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return count\n}\n\nconsole.log(isBoerd(\"Hello world\"))\nconsole.log(isBoerd(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(isBoerd(\"I love this weather\"))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt2 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt3 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt4 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt5 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt6 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt7 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt8 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt9 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt10 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt11 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt12 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt13 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt14 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt15 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt16 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt17 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt18 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt19 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt20 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt21 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt22 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt23 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt24 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt25 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt26 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt27 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt28 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt29 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt30 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt31 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt32 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt33 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt34 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt35 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt36 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt37 = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nconst anyInt38 = (x, y, z) => {\n", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const consonantsLength = consonants.length;\n  const vowelsLength = vowels.length;\n  const consonantsIndex = consonants.indexOf(message[0]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const vowelsIndex = vowels.indexOf(message[1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.indexOf(message[consonantsLength - 1]);\n  const consonantsLengthIndex = consonants.", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const max = Math.max(...lst);\n  const maxDigits = max.toString(10).length;\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum + maxDigits;\n};\n\nconsole.log(ksjkasddk([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(ksjkasddk([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(ksjkasddk([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(ksjkasddk([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(ksjkasddk([0,81,12,3,1,21]));\nconsole.log(ksjkasddk([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    if (typeof dict[key]!== \"string\") {\n      result = false;\n      break;\n    }\n    if (dict[key].toUpperCase()!== dict[key].toLowerCase()) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\n/*\n  Given a string, return true if the string contains only lower case letters,\n  else return false.\n  Examples:\n  checkStringCase(\"abc\") should return true.\n  checkStringCase(\"ABC\") should return false.\n  checkStringCase(\"aBc\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBcD\") should return false.\n  checkStringCase(\"aBc", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n  }\n  return result\n}\n\nconst countUpTo2 = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * primes.length)\n    result.push(primes[index])\n  }\n  return result\n}\n\nconst countUpTo3 = (n) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 9", "passed": 0}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_2 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_3 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_4 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_5 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_6 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_7 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_8 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_9 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_10 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_11 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_12 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_13 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_14 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  while (a_unit > 0) {\n    result += a_unit * b_unit;\n    a_unit = a_unit / 10;\n    b_unit = b_unit / 10;\n  }\n  return result;\n};\n\nconst multiply_15 = (a, b) => {\n  let result = 0;\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  ", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const num = parseInt(value, 10);\n  const absNum = Math.abs(num);\n  const absNumFloor = Math.floor(absNum);\n  const absNumCeil = Math.ceil(absNum);\n  const absNumFloorCeil = Math.min(absNumFloor, absNumCeil);\n  const diff = Math.abs(absNumFloorCeil - absNum);\n  const diffFloor = Math.abs(absNumFloor - num);\n  const diffCeil = Math.abs(absNumCeil - num);\n  if (diffFloor < diffCeil) {\n    return absNumFloor;\n  } else {\n    return absNumCeil;\n  }\n};\n\nexport default closestInetger;\n<|endoftext|>", "passed": 0}
