{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n/*\n  Given a list of numbers, return the median of the list.\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([1, 2, 3, 4, 5, 6])\n  4\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  6\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  7\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  8\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  9\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  10\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  11\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  12\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  13\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  14\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  15\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  16\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  17\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  18\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  20\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  21\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  22\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  23\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  24\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  25\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  26\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  27\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  28\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  29\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  30\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  31\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const stack = [];\n  const result = [];\n  let current_paren = '';\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(current_paren);\n      current_paren = char;\n    } else if (char === ')') {\n      current_paren = stack.pop();\n    } else if (char ==='') {\n      // do nothing\n    } else {\n      current_paren += char;\n    }\n  });\n  return result;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()', '()()()()']\n  */\nconst sepwrateParenGroups2 = (paren_string) => {\n  const stack = [];\n  const result = [];\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        result.push(char);\n      } else {\n        stack.pop();\n        if (stack.length === 0) {\n          result.push(char);\n        } else {\n          result.push(stack.pop() + char);\n        }\n      }\n    } else if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      stack.pop();\n    } else if (char ==='') {\n      // do nothing\n    } else {\n      stack.push(char);\n    }\n  });\n  return result;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()', '()()()()']\n  */\nconst sepwrateParenGroups3 = (paren_string) => {\n  const stack = [];\n  const result = [];\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        result.push(char);\n      } else {\n        stack.pop();\n        if (stack.length === 0) {\n          result.push(char);\n        } else {\n          stack.pop();\n          if (stack.length === 0) {\n            result.push(char);\n          } else {\n            stack.pop();\n            result.push(stack.pop() + char);\n          }\n        }\n      }\n    } else if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      stack.pop();\n    } else if (char ==='') {\n      // do nothing\n    } else {\n      stack.push(char);\n    }\n  });\n  return result;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()', '()()()()']\n  */\nconst sepwrateParenGroups4 = (paren_string) => {\n  const stack = [];\n  const result = [];\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        result.push(char);\n      } else {\n        stack.pop();\n        if (stack.length === 0) {\n          result.push(char);\n        } else {\n          stack.pop();\n          if (stack.length === 0) {\n            result.push(char);\n          } else {\n            stack.pop();\n            result.push(stack.pop() + char);\n          }\n        }\n      }\n    } else if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      stack.pop();\n    } else if (char ==='') {\n      // do nothing\n    } else {\n      stack.push(char);\n    }\n  });\n  return result;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()', '()()()()']\n  */\nconst sepwrateParenGroups5 = (paren_string) => {\n  const stack = [];\n  const result = [];\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        result.push(char);\n      } else {\n        stack.pop();\n        if (stack.length === 0) {\n          result.push(char);\n        } else {\n          stack.pop();\n          if (stack.length === 0) {\n            result.push(char);\n          } else {\n            stack.pop();\n            result.push(stack.pop() + char);\n          }\n        }\n      }\n    } else if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      stack.pop();\n    } else if (char ==='') {\n      // do nothing\n    } else {\n      stack.push(char);\n    }\n  });\n  return result;\n};\n\n/*\n  Input:\n  '(((())))'\n  Output:\n  ['()()', '()()()', '()()()()']\n  */\nconst sepwrateParenGroups6 = (paren_string) => {\n  const stack = [];\n  const result = [];\n  paren_string.split('').forEach(char => {\n    if (char === '(')", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const suffixLen = suffix.length;\n  const prefixLen = prefix.length;\n  const postfixLen = suffixLen - prefixLen;\n  const postfix = suffix.substring(0, postfixLen);\n  const prefix = prefix.substring(0, prefixLen);\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const suffixLen = suffix.length;\n  const prefixLen = prefix.length;\n  const postfixLen = suffixLen - prefixLen;\n  const postfix = suffix.substring(0, postfixLen);\n  const prefix = prefix.substring(0, prefixLen);\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const suffixLen = suffix.length;\n  const prefixLen = prefix.length;\n  const postfixLen = suffixLen - prefixLen;\n  const postfix = suffix.substring(0, postfixLen);\n  const prefix = prefix.substring(0, prefixLen);\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const suffixLen = suffix.length;\n  const prefixLen = prefix.length;\n  const postfixLen = suffixLen - prefixLen;\n  const postfix = suffix.substring(0, postfixLen);\n  const prefix = prefix.substring(0, prefixLen);\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const suffixLen = suffix.length;\n  const prefixLen = prefix.length;\n  const postfixLen = suffixLen - prefixLen;\n  const postfix = suffix.substring(0, postfixLen);\n  const prefix = prefix.substring(0, prefixLen);\n  return prefix + postfix;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makfAPile2 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 2 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile3 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 3 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile4 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 4 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile5 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 5 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile6 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 6 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile7 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 7 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile8 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 8 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile9 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 9 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile10 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 10 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile11 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 11 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile12 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 12 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile13 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 13 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile14 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 14 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile15 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 15 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile16 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 16 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile17 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 17 === 0) {\n      pile.push(i + 1);\n    }\n  }\n  return pile;\n};\n\nconst makfAPile18 = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n    if (i % 18 === 0) {\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/\\s|,/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum(x, mid - 1);\n};\n\nconst cholseNum2 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum2(x, mid - 1);\n};\n\nconst cholseNum3 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum3(x, mid - 1);\n};\n\nconst cholseNum4 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum4(x, mid - 1);\n};\n\nconst cholseNum5 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum5(x, mid - 1);\n};\n\nconst cholseNum6 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum6(x, mid - 1);\n};\n\nconst cholseNum7 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum7(x, mid - 1);\n};\n\nconst cholseNum8 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum8(x, mid - 1);\n};\n\nconst cholseNum9 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum9(x, mid - 1);\n};\n\nconst cholseNum10 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum10(x, mid - 1);\n};\n\nconst cholseNum11 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum11(x, mid - 1);\n};\n\nconst cholseNum12 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum12(x, mid - 1);\n};\n\nconst cholseNum13 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum13(x, mid - 1);\n};\n\nconst cholseNum14 = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x > y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return cholseNum14(x, mid - 1);\n};\n\nconst cholseNum15 = (x,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const n_m = n + m;\n  const n_m_1 = n_m - 1;\n  const n_m_2 = n_m - 2;\n  const n_m_3 = n_m - 3;\n  const n_m_4 = n_m - 4;\n  const n_m_5 = n_m - 5;\n  const n_m_6 = n_m - 6;\n  const n_m_7 = n_m - 7;\n  const n_m_8 = n_m - 8;\n  const n_m_9 = n_m - 9;\n  const n_m_10 = n_m - 10;\n  const n_m_11 = n_m - 11;\n  const n_m_12 = n_m - 12;\n  const n_m_13 = n_m - 13;\n  const n_m_14 = n_m - 14;\n  const n_m_15 = n_m - 15;\n  const n_m_16 = n_m - 16;\n  const n_m_17 = n_m - 17;\n  const n_m_18 = n_m - 18;\n  const n_m_19 = n_m - 19;\n  const n_m_20 = n_m - 20;\n  const n_m_21 = n_m - 21;\n  const n_m_22 = n_m - 22;\n  const n_m_23 = n_m - 23;\n  const n_m_24 = n_m - 24;\n  const n_m_25 = n_m - 25;\n  const n_m_26 = n_m - 26;\n  const n_m_27 = n_m - 27;\n  const n_m_28 = n_m - 28;\n  const n_m_29 = n_m - 29;\n  const n_m_30 = n_m - 30;\n  const n_m_31 = n_m - 31;\n  const n_m_32 = n_m - 32;\n  const n_m_33 = n_m - 33;\n  const n_m_34 = n_m - 34;\n  const n_m_35 = n_m - 35;\n  const n_m_36 = n_m - 36;\n  const n_m_37 = n_m - 37;\n  const n_m_38 = n_m - 38;\n  const n_m_39 = n_m - 39;\n  const n_m_40 = n_m - 40;\n  const n_m_41 = n_m - 41;\n  const n_m_42 = n_m - 42;\n  const n_m_43 = n_m - 43;\n  const n_m_44 = n_m - 44;\n  const n_m_45 = n_m - 45;\n  const n_m_46 = n_m - 46;\n  const n_m_47 = n_m - 47;\n  const n_m_48 = n_m - 48;\n  const n_m_49 = n_m - 49;\n  const n_m_50 = n_m - 50;\n  const n_m_51 = n_m - 51;\n  const n_m_52 = n_m - 52;\n  const n_m_53 = n_m - 53;\n  const n_m_54 = n_m - 54;\n  const n_m_55 = n_m - 55;\n  const n_m_56 = n_m - 56;\n  const n_m_57 = n_m - 57;\n  const n_m_58 = n_m - 58;\n  const n_m_59 = n_m - 59;\n  const n_m_60 = n_m - 60;\n  const n_m_61 = n_m - 61;\n  const n_m_62 = n_m - 62;\n  const n_m_63 = n_m - 63;\n  const n_m_64 = n_m - 64;\n  const n_m_65 = n_m - 65;\n  const n_m_66 = n_m - 66;\n  const n_m_67 = n_m - 67;\n  const n_m_68 = n_m - 68;\n  const n_m_69 = n_m - 69;\n  const n_m_70 = n_m - 70;\n  const n_m_71 = n_m - 71;\n  const n_m_72 = n_m - 72;\n  const n_m_73 = n_m - 73;\n  const n_m_74 = n_m - 74;\n  const n_m_75 = n_m - 75;\n  const n_m_76 = n_m - 76;\n  const n_m_77 = n_m - 77;\n  const n_m_78 = n_m - 78;\n  const n_m_79 = n_m - 79;\n  const n_m_80 = n_m - 80;\n  const n_m_81 = n_m - 81;\n  const n_m_82 = n_m - 82;\n  const n_m_83 = n_m - 83;\n  const n_m_84 = n_m - 84;\n  const n_m_85 = n_m - 85;\n  const n_m_86 = n_m - 86;\n  const n_m_87 = n_m - 87;\n  const n_m_88 = n_m - 88;\n  const n_m_89 = n_m - 89;\n  const n_m_90 = n_m - 90;\n  const n_m_91 = n_m - 91;\n  const n_m_92 = n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x; i++) {\n    let num = parseInt(i);\n    if (num % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result.sort();\n};\n\nconsole.log(unieueDigits([15, 33, 1422, 1]));\nconsole.log(unieueDigits([152, 323, 1422, 10]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byName = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameLfngth = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameLfngthDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameDigitLfngth = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameLfngthDigitLfngth = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameDigitLfngthDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameLfngthDigitLfngthDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameDigitLfngthDigitLfngth = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameLfngthDigitLfngthDigitLfngth = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameDigitLfngthDigitLfngthDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameLfngthDigitLfngthDigitLfngthDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameDigitLfngthDigitLfngthDigitLfngth = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >= 1 && num <= 9) return `${num}`\n    return `${num}`\n  })\n}\n\nconst byNameLfngthDigitLfngthDigitLfngthDigit = (arr) => {\n  if (!arr) return []\n  return arr.sort((a, b) => a - b).reverse().map((num) => {\n    if (num >=", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f2 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f3 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f4 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f5 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f6 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f7 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f8 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f9 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f10 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f11 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f12 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f13 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f14 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f15 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f16 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f17 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f18 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f19 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f20 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f21 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f22 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f23 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f24 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f25 = (n) => {\n  const factorials = []\n  for (let i = 1; i <= n; i++) {\n    factorials.push(i)\n  }\n  return factorials\n}\n\nconst f26 = (n) => {\n  const factorials = []\n  for (let i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j > 0) {\n      if (i % j === 0) {\n        if (j % 2 === 0) {\n          even++;\n        } else {\n          odd++;\n        }\n      }\n      j = j / 2;\n    }\n  }\n  return [even, odd];\n};\n\nexport default evejOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  const sum = arr.reduce((acc, num) => acc + num, 0);\n  return arr.filter(num => num > 0).length;\n};\n\nconsole.log(coujtNums([-1, 11, -11]));\nconsole.log(coujtNums([1, 1, 2]));\nconsole.log(coujtNumspassed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = arr.length - 1;\n  let j = i;\n  while (i > 0) {\n    if (arr[i] < arr[j]) {\n      arr[i] = arr[i] + 1;\n      i--;\n    } else {\n      arr[j] = arr[j] - 1;\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst movfOneBallTest = () => {\n  const arr = [3, 4, 5, 1, 2];\n  console.log(movfOneBall(arr));\n};\n\nmovfOneBallTest();\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('abcdefg')\n  'gfedcba'\n  */\nconst strReverse = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in lowercase.\n  >>> strToLower('ABC')\n  'abc'\n  >>> strToLower('abc')\n  'abc'\n  >>> strToLower('ABC')\n  'abc'\n  */\nconst strToLower = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    result.push(str[i].toLowerCase());\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in uppercase.\n  >>> strToUpper('abc')\n  'ABC'\n  >>> strToUpper('abc')\n  'ABC'\n  >>> strToUpper('ABC')\n  'ABC'\n  */\nconst strToUpper = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    result.push(str[i].toUpperCase());\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in title case.\n  >>> strToTitle('abc')\n  'ABC'\n  >>> strToTitle('abc')\n  'ABC'\n  >>> strToTitle('ABC')\n  'ABC'\n  */\nconst strToTitle = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = 0; i < length; i++) {\n    result.push(str[i].toUpperCase());\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in reversed.\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('ABC')\n  'CBA'\n  */\nconst strReverse = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in reversed.\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('ABC')\n  'CBA'\n  */\nconst strReverse = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in reversed.\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('ABC')\n  'CBA'\n  */\nconst strReverse = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in reversed.\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('ABC')\n  'CBA'\n  */\nconst strReverse = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in reversed.\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('ABC')\n  'CBA'\n  */\nconst strReverse = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in reversed.\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('abc')\n  'cba'\n  >>> strReverse('ABC')\n  'CBA'\n  */\nconst strReverse = (str) => {\n  const length = str.length;\n  const result = [];\n  for (let i = length - 1; i >= 0; i--) {\n    result.push(str[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the string with all the characters in", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  const lst1Even = lst1.every(x => x % 2 === 0);\n  const lst2Even = lst2.every(x => x % 2 === 0);\n  if (lst1Length === 0 || lst2Length === 0) {\n    return \"NO\";\n  }\n  if (lst1Even && lst2Even) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(excjange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split('')\n  const dict = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (dict[letters[i]] === undefined) {\n      dict[letters[i]] = 1\n    } else {\n      dict[letters[i]]++\n    }\n  }\n  return dict\n}\n\nconsole.log(hishogram('a b c'))\nconsole.log(hishogram('a b b a'))\nconsole.log(hishogram('b b b b a'))\nconsole.log(hishogram(''))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest2 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest3 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest4 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest5 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest6 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest7 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest8 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest9 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest10 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest11 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest12 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest13 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest14 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest15 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest16 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [result, s === result];\n};\n\nconst revfrseDeleteTest17 = (s, c) => {\n  const rev = s.split('').reverse().join('');\n  const result = rev.split('').filter((x) => c.indexOf(x) === -1).join('');\n  return [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  const odd = (str) => {\n    const digits = str.split('').filter(digit => digit.charCodeAt(0) % 2 === 1);\n    return digits.length;\n  };\n  return lst.map(odd);\n};\n\nmodule.exports = oddFount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  const sum = nums.reduce((a, b) => a + b, 0)\n  const minSum = Math.min(sum, 0)\n  const minSumIndex = nums.findIndex(n => n > 0)\n  const minSumLength = minSumIndex + 1\n  const minSumLengthIndex = minSumLength - 1\n  const minSumLengthSum = nums[minSumLengthIndex]\n  const minSumLengthSumIndex = minSumLengthSum - 1\n  const minSumLengthSumIndex2 = minSumLengthSumIndex + 1\n  const minSumLengthSumIndex3 = minSumLengthSumIndex2 + 1\n  const minSumLengthSumIndex4 = minSumLengthSumIndex3 + 1\n  const minSumLengthSumIndex5 = minSumLengthSumIndex4 + 1\n  const minSumLengthSumIndex6 = minSumLengthSumIndex5 + 1\n  const minSumLengthSumIndex7 = minSumLengthSumIndex6 + 1\n  const minSumLengthSumIndex8 = minSumLengthSumIndex7 + 1\n  const minSumLengthSumIndex9 = minSumLengthSumIndex8 + 1\n  const minSumLengthSumIndex10 = minSumLengthSumIndex9 + 1\n  const minSumLengthSumIndex11 = minSumLengthSumIndex10 + 1\n  const minSumLengthSumIndex12 = minSumLengthSumIndex11 + 1\n  const minSumLengthSumIndex13 = minSumLengthSumIndex12 + 1\n  const minSumLengthSumIndex14 = minSumLengthSumIndex13 + 1\n  const minSumLengthSumIndex15 = minSumLengthSumIndex14 + 1\n  const minSumLengthSumIndex16 = minSumLengthSumIndex15 + 1\n  const minSumLengthSumIndex17 = minSumLengthSumIndex16 + 1\n  const minSumLengthSumIndex18 = minSumLengthSumIndex17 + 1\n  const minSumLengthSumIndex19 = minSumLengthSumIndex18 + 1\n  const minSumLengthSumIndex20 = minSumLengthSumIndex19 + 1\n  const minSumLengthSumIndex21 = minSumLengthSumIndex20 + 1\n  const minSumLengthSumIndex22 = minSumLengthSumIndex21 + 1\n  const minSumLengthSumIndex23 = minSumLengthSumIndex22 + 1\n  const minSumLengthSumIndex24 = minSumLengthSumIndex23 + 1\n  const minSumLengthSumIndex25 = minSumLengthSumIndex24 + 1\n  const minSumLengthSumIndex26 = minSumLengthSumIndex25 + 1\n  const minSumLengthSumIndex27 = minSumLengthSumIndex26 + 1\n  const minSumLengthSumIndex28 = minSumLengthSumIndex27 + 1\n  const minSumLengthSumIndex29 = minSumLengthSumIndex28 + 1\n  const minSumLengthSumIndex30 = minSumLengthSumIndex29 + 1\n  const minSumLengthSumIndex31 = minSumLengthSumIndex30 + 1\n  const minSumLengthSumIndex32 = minSumLengthSumIndex31 + 1\n  const minSumLengthSumIndex33 = minSumLengthSumIndex32 + 1\n  const minSumLengthSumIndex34 = minSumLengthSumIndex33 + 1\n  const minSumLengthSumIndex35 = minSumLengthSumIndex34 + 1\n  const minSumLengthSumIndex36 = minSumLengthSumIndex35 + 1\n  const minSumLengthSumIndex37 = minSumLengthSumIndex36 + 1\n  const minSumLengthSumIndex38 = minSumLengthSumIndex37 + 1\n  const minSumLengthSumIndex39 = minSumLengthSumIndex38 + 1\n  const minSumLengthSumIndex40 = minSumLengthSumIndex39 + 1\n  const minSumLengthSumIndex41 = minSumLengthSumIndex40 + 1\n  const minSumLengthSumIndex42 = minSumLengthSumIndex41 + 1\n  const minSumLengthSumIndex43 = minSumLengthSumIndex42 + 1\n  const minSumLengthSumIndex44 = minSumLengthSumIndex43 + 1\n  const minSumLengthSumIndex45 = minSumLengthSumIndex44 + 1\n  const minSumLengthSumIndex46 = minSumLengthSumIndex45 + 1\n  const minSumLengthSumIndex47 = minSumLengthSumIndex46 + 1\n  const minSumLengthSumIndex48 = minSumLengthSumIndex47 + 1\n  const minSumLengthSumIndex49 = minSumLengthSumIndex48 + 1\n  const minSumLengthSumIndex50 = minSumLengthSumIndex49 + 1\n  const minSumLengthSumIndex51 = minSumLengthSumIndex50 + 1\n  const minSumLengthSumIndex52 = minSumLengthSumIndex51 + 1\n  const minSumLengthSumIndex53 = minSumLengthSumIndex52 + 1\n  const minSumLengthSumIndex54 = minSumLengthSumIndex53 + 1\n  const minSumLengthSumIndex55 = minSumLengthSumIndex54 + 1\n  const minSumLengthSumIndex56 = minSumLengthSumIndex55 + 1\n  const minSumLengthSumIndex57 = minSumLengthSumIndex56 + 1\n  const minSumLengthSumIndex58 = minSumLengthSumIndex57 + 1\n  const minSumLengthSumIndex59 = minSumLengthSumIndex58 + 1\n  const minSumLengthSumIndex60 = minSumLengthSumIndex59 + 1\n  const minSumLengthSumIndex61 = minSumLengthSumIndex60 + 1\n  const minSumLengthSumIndex62 = minSumLengthSumIndex61 + 1\n  const minSumLengthSumIndex63 = minSumLengthSumIndex62 + 1\n  const minSumLengthSumIndex64 = minSumLengthSumIndex63 + 1\n  const minSumLengthSumIndex65 = minSumLengthSumIndex64 + 1\n  const minSumLengthSumIndex66 = minSumLengthSumIndex65 + 1\n  const minSumLengthSumIndex67 = minSumLengthSumIndex66 + 1\n  const minSumLengthSumIndex68 = minSumLengthSumIndex67 + 1\n  const minSumLengthSumIndex69 = minSumLengthSumIndex68 + 1\n  const minSumLengthSumIndex70 = minSumLengthSumIndex69 + 1\n  const minSumLengthSumIndex71 = minSumLengthSumIndex70 + 1\n  const minSumLengthSumIndex72 = minSumLengthSumIndex71 + 1\n  const minSumLengthSumIndex73 = minSumLengthSumIndex72 + 1\n  const minSumLengthSumIndex74 = minSumLengthSumIndex73 + 1\n  const minSumLengthSumIndex75 = minSumLengthSumIndex74 + 1\n  const minSumLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row, col] = grid[0].length;\n  const [row_sum, col_sum] = [0, 0];\n  const [row_max, col_max] = [0, 0];\n  const [row_min, col_min] = [0, 0];\n  const [row_avg, col_avg] = [0, 0];\n  const [row_avg_sum, col_avg_sum] = [0, 0];\n  const [row_avg_max, col_avg_max] = [0, 0];\n  const [row_avg_min, col_avg_min] = [0, 0];\n  const [row_avg_avg, col_avg_avg] = [0, 0];\n  const [row_avg_avg_sum, col_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_max, col_avg_avg_max] = [0, 0];\n  const [row_avg_avg_min, col_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg, col_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_sum, col_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_max, col_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_min, col_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_avg, col_avg_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_avg_sum, col_avg_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_avg_max, col_avg_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_avg_min, col_avg_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_avg_avg, col_avg_avg_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_sum, col_avg_avg_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_max, col_avg_avg_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_min, col_avg_avg_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg, col_avg_avg_avg_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_sum, col_avg_avg_avg_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_max, col_avg_avg_avg_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_min, col_avg_avg_avg_avg_avg_avg_min] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_avg, col_avg_avg_avg_avg_avg_avg_avg] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_avg_sum, col_avg_avg_avg_avg_avg_avg_avg_sum] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_avg_max, col_avg_avg_avg_avg_avg_avg_avg_max] = [0, 0];\n  const [row_avg_avg_avg_avg_avg_avg_avg_min, col_avg_avg", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nmodule.exports = sorhArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const words = []\n  const chars = []\n  for (let i = 0; i < s.length; i++) {\n    chars.push(s[i])\n  }\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] ==='') {\n      continue\n    }\n    if (chars.indexOf(chars[i + 1]) === -1) {\n      words.push(chars.slice(i, i + 1))\n    }\n  }\n  return words.filter((x, i) => {\n    return x.length === n\n  })\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\n\nIf the string s is empty then the function should return an empty string.\n\nExamples:\nselfctWords(\"Mary had a little lamb\", 4) ==> \"little\"\nselfctWords(\"Mary had a little lamb\", 3) ==> \"Mary\"\nselfctWords(\"simple white space\", 2) ==> \"\"\nselfctWords(\"Hello world\", 4) ==> \"world\"\nselfctWords(\"Uncle sam\", 3) ==> \"Uncle\"\n*/\nconst selfctWords = (s, n) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  const words = []\n  for (let i = 0; i < s.length; i++) {\n    if (i === n) {\n      return s[i]\n    }\n    if (s[i] ==='') {\n      continue\n    }\n    if (s.indexOf(s[i + 1]) === -1) {\n      words.push(s[i])\n    }\n  }\n  return words[n]\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\n\nIf the string s is empty then the function should return an empty string.\n\nExamples:\nselfctWords(\"Mary had a little lamb\", 4) ==> \"little\"\nselfctWords(\"Mary had a little lamb\", 3) ==> \"Mary\"\nselfctWords(\"simple white space\", 2) ==> \"\"\nselfctWords(\"Hello world\", 4) ==> \"world\"\nselfctWords(\"Uncle sam\", 3) ==> \"Uncle\"\n*/\nconst selfctWords = (s, n) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  const words = []\n  for (let i = 0; i < s.length; i++) {\n    if (i === n) {\n      return s[i]\n    }\n    if (s[i] ==='') {\n      continue\n    }\n    if (s.indexOf(s[i + 1]) === -1) {\n      words.push(s[i])\n    }\n  }\n  return words[n]\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\n\nIf the string s is empty then the function should return an empty string.\n\nExamples:\nselfctWords(\"Mary had a little lamb\", 4) ==> \"little\"\nselfctWords(\"Mary had a little lamb\", 3) ==> \"Mary\"\nselfctWords(\"simple white space\", 2) ==> \"\"\nselfctWords(\"Hello world\", 4) ==> \"world\"\nselfctWords(\"Uncle sam\", 3) ==> \"Uncle\"\n*/\nconst selfctWords = (s, n) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  const words = []\n  for (let i = 0; i < s.length; i++) {\n    if (i === n) {\n      return s[i]\n    }\n    if (s[i] ==='') {\n      continue\n    }\n    if (s.indexOf(s[i + 1]) === -1) {\n      words.push(s[i])\n    }\n  }\n  return words[n]\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\n\nIf the string s is empty then the function should return an empty string.\n\nExamples:\nselfctWords(\"Mary had a little lamb\", 4) ==> \"little\"\nselfctWords(\"Mary had a little lamb\", 3) ==> \"Mary\"\nselfctWords(\"simple white space\", 2) ==> \"\"\nselfctWords(\"Hello world\", 4) ==> \"world\"\nselfctWords(\"Uncle sam\", 3) ==> \"Uncle\"\n*/\nconst selfctWords = (s, n) => {\n  if (s.length === 0) {\n    return \"\"\n  }\n  const words = []\n  for (let i = 0; i < s.length; i++) {\n    if (i === n) {\n      return s[i]\n    }\n    if (s[i] ==='') {\n      continue\n    }\n    if (s.indexOf(s[i + 1]) === -1) {\n      words.push(s[i])\n    }\n  }\n  return words[n]\n}\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\n\nIf the string s is empty then the function should return an empty string.\n\nExamples:\nselfctWords(\"Mary had a little lamb\", 4)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y'];\n  const index = {};\n  const len = vowels.length;\n  const wordLen = word.length;\n  for (let i = 0; i < len; i++) {\n    index[vowels[i]] = i;\n  }\n  for (let i = 0; i < wordLen; i++) {\n    if (index[word[i]]!== undefined) {\n      if (i === wordLen - 1) {\n        return word[i];\n      }\n      if (i === wordLen - 2) {\n        return word[i];\n      }\n      if (index[word[i + 1]]!== undefined) {\n        return word[i];\n      }\n    }\n  }\n  return '';\n};\n\n/*\n  Given a string, return the string reversed.\n\n  Example:\n  reverse(\"Hello\") ==> \"olleH\"\n  reverse(\"Hello\") ==> \"olleH\"\n  reverse(\"Hello\") ==> \"olleH\"\n  reverse(\"Hello\") ==> \"olleH\"\n  */\nconst reverse = (str) => {\n  const len = str.length;\n  const reversed = [];\n  for (let i = 0; i < len; i++) {\n    reversed.push(str[len - i - 1]);\n  }\n  return reversed.join('');\n};\n\n/*\n  Given a string, return the string with all the vowels removed.\n\n  Example:\n  removeVowels(\"Hello\") ==> \"Hll\"\n  removeVowels(\"Hello\") ==> \"Hll\"\n  removeVowels(\"Hello\") ==> \"Hll\"\n  removeVowels(\"Hello\") ==> \"Hll\"\n  */\nconst removeVowels = (str) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const len = str.length;\n  const reversed = [];\n  for (let i = 0; i < len; i++) {\n    if (vowels.indexOf(str[i])!== -1) {\n      reversed.push(str[i]);\n    }\n  }\n  return reversed.join('');\n};\n\n/*\n  Given a string, return the string with all the consonants removed.\n\n  Example:\n  removeConsonants(\"Hello\") ==> \"ll\"\n  removeConsonants(\"Hello\") ==> \"ll\"\n  removeConsonants(\"Hello\") ==> \"ll\"\n  removeConsonants(\"Hello\") ==> \"ll\"\n  */\nconst removeConsonants = (str) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y'];\n  const len = str.length;\n  const reversed = [];\n  for (let i = 0; i < len; i++) {\n    if (consonants.indexOf(str[i])!== -1) {\n      reversed.push(str[i]);\n    }\n  }\n  return reversed.join('');\n};\n\n/*\n  Given a string, return the string with all the vowels and consonants removed.\n\n  Example:\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  */\nconst removeVowelsAndConsonants = (str) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y'];\n  const len = str.length;\n  const reversed = [];\n  for (let i = 0; i < len; i++) {\n    if (vowels.indexOf(str[i])!== -1 && consonants.indexOf(str[i])!== -1) {\n      reversed.push(str[i]);\n    }\n  }\n  return reversed.join('');\n};\n\n/*\n  Given a string, return the string with all the vowels and consonants removed.\n\n  Example:\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  removeVowelsAndConsonants(\"Hello\") ==> \"ll\"\n  */\nconst removeVowelsAndConsonants = (str) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens2 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens3 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens4 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens5 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens6 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens7 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens8 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens9 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens10 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens11 = (lst) => {\n  const stack = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      stack.pop();\n    }\n  }\n  return 'Yes';\n};\n\nconst matfhParens12", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst lonhest2 = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonhest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  */\nconst lonhest3 = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b'])\n  'a'\n  >>> lonhest(['a'])\n  'a'\n  */\nconst lonhest4 = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b'])\n  'a'\n  >>> lonhest(['a'])\n  'a'\n  */\nconst lonhest5 = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b'])\n  'a'\n  >>> lonhest(['a'])\n  'a'\n  */\nconst lonhest6 = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b'])\n  'a'\n  >>> lonhest(['a'])\n  'a'\n  */\nconst lonhest7 = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b'])\n  'a'\n  >>> lonhest(['a'])\n  'a'\n  */\nconst lonhest8 = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length\n      maxString = s\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonhest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonhest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'b'])\n  'a'\n  >>>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const max = sorted[k - 1];\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(max);\n  }\n  return result;\n};\n\nconst test = [\n  [-3, -4, 5],\n  [4, -4, 4],\n  [-3, 2, 1, 2, -1, -2, 1],\n];\n\ntest.forEach(t => {\n  console.log(maxlmum(t[0], t[1]));\n});\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solktion([5, 8, 7, 1]))\nconsole.log(solktion([3, 3, 3, 3, 3]))\nconsole.log(solktion([30, 13, 24, 321]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements2 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements3 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements4 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements5 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements6 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements7 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements8 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements9 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements10 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements11 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements12 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements13 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements14 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements15 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements16 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addFlements17 = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  for (let i = k; i < arr.length;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(even);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz2 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(even);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz3 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz4 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz5 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz6 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz7 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz8 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz9 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz10 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz11 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz12 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz13 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const odd = n % 2;\n    const even = n - odd;\n    const next = collatz(odd);\n    next.unshift(odd);\n    return next;\n  };\n  return collatz(n);\n};\n\nconst getLddCollatz14 = (n) => {\n  const collatz = (n) => {\n    if (n === 1) {\n      return [", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[1], 10);\n  const day = parseInt(dateArray[2], 10);\n  const year = parseInt(dateArray[0], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month == 3 || month == 5 || month == 7 || month == 8 || month == 10) {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = valldDate;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map((w) => w.toLowerCase());\n};\n\n/* Given a string of words, return a list of words split on whitespace", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const last = sorted[sorted.length - 1];\n  const isSorted = sorted.every(x => x === last);\n  return isSorted;\n};\n\nmodule.exports = isSlrted;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n  const length = end - start;\n  if (length % 2 === 0) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconst intfrsection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns2 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns3 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns4 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns5 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns6 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns7 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns8 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]) * (arr[i] > 0? 1 : -1)\n  }\n  return sum\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const dp = new Array(rows).fill(new Array(cols).fill(0))\n  const visited = new Array(rows).fill(new Array(cols).fill(false))\n  const minPath = []\n  const minPathIndex = []\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (dp[i][j] === 0) {\n        continue\n      }\n      const row = i\n      const col = j\n      const path = []\n      const pathIndex = []\n      const pathLength = k\n      const pathLengthIndex = []\n      const pathLengthIndexMax = k - 1\n      const pathLengthIndexMin = 0\n      const pathLengthIndexMaxMin = k - 1\n      const pathLengthIndexMinMax = k - 1\n\n      while (pathLength > 0) {\n        path.push(grid[row][col])\n        pathIndex.push(col)\n        pathLengthIndex.push(pathLength)\n        pathLengthIndexMax = Math.min(pathLengthIndexMax, pathLength)\n        pathLengthIndexMin = Math.max(pathLengthIndexMin, pathLength)\n        pathLengthIndexMaxMin = Math.min(pathLengthIndexMaxMin, pathLength)\n        pathLengthIndexMinMax = Math.max(pathLengthIndexMinMax, pathLength)\n        col = grid[row][col]\n        row = grid[row][col]\n        pathLength--\n      }\n      minPath.push(path)\n      minPathIndex.push(pathIndex)\n      dp[i][j] = pathLengthIndexMaxMin\n    }\n  }\n\n  return [minPath, minPathIndex]\n}\n\nconst test = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test2 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test3 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test4 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test5 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test6 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test7 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test8 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test9 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n]\n\nconst test10 = [\n  [\n    [1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  const a_len = a.toString().length\n  const b_len = b.toString().length\n  const a_str = a.toString()\n  const b_str = b.toString()\n  const max_len = Math.max(a_len, b_len)\n  const max_str = a_str + b_str\n  const max_str_len = max_str.length\n  const max_str_len_len = max_str_len.toString().length\n  const max_str_len_len_len = max_str_len_len.toString().length\n  const max_str_len_len_len_len = max_str_len_len_len.toString().length\n  const max_str_len_len_len_len_len = max_str_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len = max_str_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len.toString().length\n  const max_str_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1] + tri[i - 2] + tri[i - 1]);\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  let tri = [1];\n  for (let i = 2; i <= n; i++) {\n    tri.push(tri[i - 1]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let result = 1;\n  for (let i = 1; i < n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(diglts(1));\nconsole.log(diglts(4));\nconsole.log(diglts(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  let stack = []\n  let brackets = []\n  let bracketsLength = 0\n  let bracketsLengthMax = 0\n  let bracketsLengthMin = 0\n  let bracketsLengthMinMax = 0\n  let bracketsLengthMinMaxMax = 0\n  let bracketsLengthMinMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n  let bracketsLengthMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquaredDiff = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[i + 1], 2);\n  }\n  return sum;\n};\n\nconst sumSquaredDiff17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i] - lst[", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter2 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter3 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter4 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter5 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter6 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter7 = (txt) => {\n  return txt.length > 0 &&\n    txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&\n   !txt.match(/\\b[a-zA-Z]+\\b/);\n};\n\n/*\n  Create a function that returns true if the last character", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] >= arr[i]) {\n      max = mid\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange2 = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange3 = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange4 = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange5 = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange6 = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange7 = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] <= arr[i]) {\n      max = mid\n      j = mid\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which is\n  not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange8 = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let max = null\n  let min = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (min === null) {\n        min = lst[i]\n      } else {\n        min = Math.min(min, lst[i])\n      }\n    } else if (lst[i] > 0) {\n      if (max === null) {\n        max = lst[i]\n      } else {\n        max = Math.max(max, lst[i])\n      }\n    }\n  }\n  return (max === null)? (min, null) : (max, min)\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers2 = (lst) => {\n  let max = null\n  let min = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (min === null) {\n        min = lst[i]\n      } else {\n        min = Math.min(min, lst[i])\n      }\n    } else if (lst[i] > 0) {\n      if (max === null) {\n        max = lst[i]\n      } else {\n        max = Math.max(max, lst[i])\n      }\n    }\n  }\n  return (max === null)? (min, null) : (max, min)\n}\n\nconst lst = [2, 4, 1, 3, 5, 7]\n\nconsole.log(larhestSmallestIntegers(lst))\nconsole.log(larhestSmallestIntegers2(lst))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconsole.log(comoareOne(1, 2.5));\nconsole.log(comoareOne(1, \"2,3\"));\nconsole.log(comoareOne(\"5,1\", \"6\"));\nconsole.log(comoareOne(\"1\", 1));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == true\n  isEeualToSumOdd(8) == false\n  */\nconst isEeualToSumOdd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven2 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == true\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd2 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven3 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == true\n  isEeualToSumOdd(6) == true\n  isEeualToSumOdd(8) == false\n  */\nconst isEeualToSumOdd3 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven4 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == true\n  isEeualToSumOdd(6) == true\n  isEeualToSumOdd(8) == false\n  */\nconst isEeualToSumOdd4 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven5 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == true\n  isEeualToSumOdd(6) == true\n  isEeualToSumOdd(8) == false\n  */\nconst isEeualToSumOdd5 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven6 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == true\n  isEeualToSumOdd(6) == true\n  isEeualToSumOdd(8) == false\n  */\nconst isEeualToSumOdd6 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven7 = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == true\n  isEeualToSumOdd(6) == true\n  isEeualToSumOdd(8) == false\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial = factorial * i\n  }\n  return factorial\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial2(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial3(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial4(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial5(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial6(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial7 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial7(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial8 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial8(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial9 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial9(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial10 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial10(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial11 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial11(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial12 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial12(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial13 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial13(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial14 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial14(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial15 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial15(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial16 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial16(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial17 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial17(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial18 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial18(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial19 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial19(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial20 = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const prefixes = []\n  let i = 0\n  while (i < string.length) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n    i++\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let i = 0\n  while (i < string.length) {\n    const suffix = string.substring(i, string.length)\n    suffixes.push(suffix)\n    i++\n  }\n  return suffixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  return text.replace(/\\s+/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example 1\"\n  fixUnderscores(\" Example 2\") == \"Example 2\"\n  fixUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example 1\"\n  fixDpaces(\" Example 2\") == \"Example 2\"\n  fixDpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example 1\"\n  fixUnderscores(\" Example 2\") == \"Example 2\"\n  fixUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example 1\"\n  fixDpaces(\" Example 2\") == \"Example 2\"\n  fixDpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example 1\"\n  fixUnderscores(\" Example 2\") == \"Example 2\"\n  fixUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example 1\"\n  fixDpaces(\" Example 2\") == \"Example 2\"\n  fixDpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example 1\"\n  fixUnderscores(\" Example 2\") == \"Example 2\"\n  fixUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example 1\"\n  fixDpaces(\" Example 2\") == \"Example 2\"\n  fixDpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixUnderscores(\"Example\") == \"Example\"\n  fixUnderscores(\"Example 1\") == \"Example 1\"\n  fixUnderscores(\" Example 2\") == \"Example 2\"\n  fixUnderscores(\" Example   3\") == \"Example 3\"\n  */\nconst fixUnderscores = (text) => {\n  return text.replace(/_+/g,'')\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example 1\"\n  fixDpaces(\" Example 2\") == \"Example 2\"\n  fixDpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g,'')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]{1,3}\\./)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck2 = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]{1,3}\\./)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck3 = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]{1,3}\\./)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck4 = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]{1,3}\\./)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck5 = (file_name) => {\n  if (file_name.match(/^[a-zA-Z]+[0-9]{1,3}\\./)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") #", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumDquares([1,2,3])); // 6\nconsole.log(sumDquares([])); // 0\nconsole.log(sumDquares([-1,-5,2,-1,-5])); // -126\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = primes.some(x => x.indexOf(word) === -1)\n    if (isPrime) {\n      primes.push(word)\n    }\n  }\n  return primes.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence2 = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = primes.some(x => x.indexOf(word) === -1)\n    if (isPrime) {\n      primes.push(word)\n    }\n  }\n  return primes.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence3 = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = primes.some(x => x.indexOf(word) === -1)\n    if (isPrime) {\n      primes.push(word)\n    }\n  }\n  return primes.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence4 = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = primes.some(x => x.indexOf(word) === -1)\n    if (isPrime) {\n      primes.push(word)\n    }\n  }\n  return primes.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence5 = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const isPrime = primes.some(x => x.indexOf(word) === -1)\n    if (isPrime) {\n      primes.push(word)\n    }\n  }\n  return primes.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence6 = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = []\n  for (let i = 0; i < words.length; i++)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  const x_n = x.split('/');\n  const n_x = n.split('/');\n  const x_n_len = x_n.length;\n  const n_x_len = n_x.length;\n  if (x_n_len!== n_x_len) return false;\n  for (let i = 0; i < x_n_len; i++) {\n    if (parseInt(x_n[i], 10)!== parseInt(n_x[i], 10)) return false;\n  }\n  return true;\n};\n\nconsole.log(simolify('1/5', '5/1'));\nconsole.log(simolify('1/6', '2/1'));\nconsole.log(simolify('7/10', '10/2'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const aSum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const bSum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return aSum - bSum;\n  });\n  return sorted;\n};\n\nmodule.exports = ordfrByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(spefialFilter([15, -73, 14, -15]));\nconsole.log(spefialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          triples.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return triples.length\n}\n\nconst getLaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 1; i <= n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const triples = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf2 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf3 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf4 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf5 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf6 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf7 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf8 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  const result = []\n  for (let i = index1; i <= index2; i++) {\n    result.push(planets[i])\n  }\n  return result\n}\n\nconst bf9 = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ]\n  const index1 = planets.indexOf(planet1)\n  const index2 = planets.indexOf(planet2)\n  if (index1 < 0 || index2 < 0) {\n    return []\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const len = lst.length;\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += sorted[i].length;\n  }\n  return sorted.filter(s => s.length % 2 === 0).concat(sorted.filter(s => s.length % 2!== 0).sort((a, b) => a.length - b.length));\n};\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*')\n  '0 1 2 3 4 5'\n  >>> strlngSequence(5, '*', '*')\n  '0 1 2 3 4 5'\n  >>> strlngSequence(5, '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3, str4) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} ${str4} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3, str4, str5) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} ${str4} ${str5} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3, str4, str5, str6) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} ${str4} ${str5} ${str6} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '*', '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3, str4, str5, str6, str7) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} ${str4} ${str5} ${str6} ${str7} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '*', '*', '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3, str4, str5, str6, str7, str8) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} ${str4} ${str5} ${str6} ${str7} ${str8} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '*', '*', '*', '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3, str4, str5, str6, str7, str8, str9) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} ${str4} ${str5} ${str6} ${str7} ${str8} ${str9} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '*', '*', '*', '*', '*', '*', '*')\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n, str1, str2, str3, str4, str5, str6, str7, str8, str9, str10) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i} ${str1} ${str2} ${str3} ${str4} ${str5} ${str6} ${str7} ${str8} ${str9} ${str10} `;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5, '*', '*', '*', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ28 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst xOrJ29 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ30 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst xOrJ31 = (n, x, y) => {\n  if (n % 2 === 0) {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, x) => acc + x * x, 0);\n  return sum % 2 === 1? sum : 0;\n};\n\nexport default douhleTheDifference;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const gameScore = game.reduce((acc, curr) => acc + curr, 0)\n  const guessScore = guess.reduce((acc, curr) => acc + curr, 0)\n  const diff = Math.abs(gameScore - guessScore)\n  const correct = gameScore === guessScore\n  const diffs = [diff]\n  for (let i = 0; i < gameLength; i++) {\n    if (correct) {\n      diffs.push(0)\n    } else {\n      diffs.push(Math.abs(game[i] - guess[i]))\n    }\n  }\n  return diffs\n}\n\nconsole.log(comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(comoare([4,4,1,0,0,6],[4,1,1,0,0,-2]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.toUpperCase().length;\n    const sm = extension.toLowerCase().length;\n    return (cap - sm) / cap;\n  }, -1);\n  return `${class_name}.${extensions[strength]}`;\n};\n\nmodule.exports = strlngestExtension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const aRotation = a.split('').reverse().join('');\n  const bRotation = b.split('').reverse().join('');\n  return aRotation.indexOf(b)!== -1 || bRotation.indexOf(a)!== -1;\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  The longest palindromic substring is defined as the longest substring that is a palindrome.\n  For example, given \"abcbc\", the longest palindromic substring is \"bc\".\n  Given \"abcdc\", the longest palindromic substring is \"dc\".\n  Given \"a\", the longest palindromic substring is \"a\".\n  Given \"ab\", the longest palindromic substring is \"b\".\n  Given \"abc\", the longest palindromic substring is \"c\".\n  */\nconst longestPalindrome = (str) => {\n  const strRotation = str.split('').reverse().join('');\n  const longest = str.length;\n  let longestPalindrome = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (cycoatternCheck(strRotation, str.substring(i, i + 1))) {\n      longestPalindrome = i + 1;\n    }\n  }\n  return longestPalindrome;\n};\n\n/*\n  Given a string, find the first non-repeating character in it.\n  For example, given \"abcabc\", the first non-repeating character is \"a\".\n  Given \"abcd\", the first non-repeating character is \"d\".\n  Given \"pqrst\", the first non-repeating character is \"s\".\n  Given \"abcd\", the first non-repeating character is \"d\".\n  Given \"a\", the first non-repeating character is \"a\".\n  Given \"ab\", the first non-repeating character is \"b\".\n  Given \"abc\", the first non-repeating character is \"c\".\n  */\nconst firstNonRepeatingCharacter = (str) => {\n  const strRotation = str.split('').reverse().join('');\n  let firstNonRepeatingCharacter = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (strRotation.indexOf(str.substring(i, i + 1)) === -1) {\n      firstNonRepeatingCharacter = i;\n      break;\n    }\n  }\n  return firstNonRepeatingCharacter;\n};\n\n/*\n  Given a string, find the first repeating character in it.\n  For example, given \"abcabc\", the first repeating character is \"a\".\n  Given \"abcd\", the first repeating character is \"d\".\n  Given \"pqrst\", the first repeating character is \"p\".\n  Given \"abcd\", the first repeating character is \"d\".\n  Given \"a\", the first repeating character is \"a\".\n  Given \"ab\", the first repeating character is \"b\".\n  Given \"abc\", the first repeating character is \"c\".\n  */\nconst firstRepeatingCharacter = (str) => {\n  const strRotation = str.split('').reverse().join('');\n  let firstRepeatingCharacter = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (strRotation.indexOf(str.substring(i, i + 1))!== -1) {\n      firstRepeatingCharacter = i;\n      break;\n    }\n  }\n  return firstRepeatingCharacter;\n};\n\n/*\n  Given a string, find the length of the longest repeating substring in it.\n  For example, given \"abcabc\", the longest repeating substring is \"abc\".\n  Given \"abcd\", the longest repeating substring is \"abcd\".\n  Given \"pqrst\", the longest repeating substring is \"pqrst\".\n  Given \"abcd\", the longest repeating substring is \"abcd\".\n  Given \"a\", the longest repeating substring is \"a\".\n  Given \"ab\", the longest repeating substring is \"ab\".\n  Given \"abc\", the longest repeating substring is \"abc\".\n  */\nconst longestRepeatingSubstring = (str) => {\n  const strRotation = str.split('').reverse().join('');\n  let longestRepeatingSubstring = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (strRotation.indexOf(str.substring(i, i + 1))!== -1) {\n      longestRepeatingSubstring = i + 1;\n    }\n  }\n  return longestRepeatingSubstring;\n};\n\n/*\n  Given a string, find the length of the longest substring without repeating characters.\n  For example, given \"abcabc\", the longest substring without repeating characters is \"abc\".\n  Given \"abcd\", the longest substring without repeating characters is \"abcd\".\n  Given \"pqrst\", the longest substring without repeating characters is \"pqrst\".\n  Given \"abcd\", the longest substring without repeating characters is \"abcd\".\n  Given \"a\", the longest substring without repeating characters is \"a\".\n  Given \"ab\", the longest substring without repeating characters is \"ab\".\n  Given \"abc\", the longest substring without repeating characters is \"abc\".\n  */\nconst longestSubstringWithoutRepeatingCharacters = (str) => {\n  const strRotation = str.split('').reverse().join('');\n  let longestSubstringWithoutRepeatingCharacters = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (strRotation.indexOf(str.substring(i, i + 1)) === -1) {\n      longestSubstringWithoutRepeatingCharacters = i + 1;\n      break;\n    }\n  }\n  return longestSubstringWithoutRepeatingCharacters;\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n    let count = 0;\n    let isEven = true;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count++;\n        } else {\n            isEven = false;\n        }\n        num = num / 2;\n    }\n    return [count, isEven];\n};\n\nconst test = () => {\n    let num = -12;\n    let [count, isEven] = evejOddCount(num);\n    console.log(`${num} has ${count} even and ${isEven? 'is' : 'is not'} odd digits`);\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  let result = '';\n  let num = number;\n  while (num > 0) {\n    if (num >= 1000) {\n      result = result + 'M';\n      num -= 1000;\n    } else if (num >= 900) {\n      result = result + 'CM';\n      num -= 900;\n    } else if (num >= 500) {\n      result = result + 'D';\n      num -= 500;\n    } else if (num >= 400) {\n      result = result + 'CD';\n      num -= 400;\n    } else if (num >= 100) {\n      result = result + 'C';\n      num -= 100;\n    } else if (num >= 90) {\n      result = result + 'XC';\n      num -= 90;\n    } else if (num >= 50) {\n      result = result + 'L';\n      num -= 50;\n    } else if (num >= 40) {\n      result = result + 'XL';\n      num -= 40;\n    } else if (num >= 10) {\n      result = result + 'X';\n      num -= 10;\n    } else if (num >= 9) {\n      result = result + 'IX';\n      num -= 9;\n    } else if (num >= 5) {\n      result = result + 'V';\n      num -= 5;\n    } else if (num >= 4) {\n      result = result + 'IV';\n      num -= 4;\n    } else if (num >= 1) {\n      result = result + 'I';\n      num -= 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = intHoMiniRoman;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  trianglePerimeter(3, 4, 5) == 15\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  triangleArea(3, 4, 5) == 12\n  */\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\n/*\n Given the lengths of the", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (!map.has(word)) {\n      map.set(word, 1);\n    } else {\n      map.set(word, map.get(word) + 1);\n    }\n  }\n  const max = words[0];\n  for (let [key, value] of map) {\n    if (value > map.get(max)) {\n      max = key;\n    }\n  }\n  return max;\n};\n\nconsole.log(finfMax([\"name\", \"of\", \"string\"]));\nconsole.log(finfMax([\"name\", \"enam\", \"game\"]));\nconsole.log(finfMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  return [number, remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5],\n  [3, 12, 0],\n  [4, 13, 1],\n  [5, 14, 2],\n  [6, 15, 3],\n  [7, 16, 4],\n  [8, 17, 5],\n  [9, 18, 6],\n  [10, 19, 7],\n  [11, 20, 8],\n  [12, 21, 9],\n  [13, 22, 10],\n  [14, 23, 11],\n  [15, 24, 12],\n  [16, 25, 13],\n  [17, 26, 14],\n  [18, 27, 15],\n  [19, 28, 16],\n  [20, 29, 17],\n  [21, 30, 18],\n  [22, 31, 19],\n  [23, 32, 20],\n  [24, 33, 21],\n  [25, 34, 22],\n  [26, 35, 23],\n  [27, 36, 24],\n  [28, 37, 25],\n  [29, 38, 26],\n  [30, 39, 27],\n  [31, 40, 28],\n  [32, 41, 29],\n  [33, 42, 30],\n  [34, 43, 31],\n  [35, 44, 32],\n  [36, 45, 33],\n  [37, 46, 34],\n  [38, 47, 35],\n  [39, 48, 36],\n  [40, 49, 37],\n  [41, 50, 38],\n  [42, 51, 39],\n  [43, 52, 40],\n  [44, 53, 41],\n  [45, 54, 42],\n  [46, 55, 43],\n  [47, 56, 44],\n  [48, 57, 45],\n  [49, 58, 46],\n  [50, 59, 47],\n  [51, 60, 48],\n  [52, 61, 49],\n  [53, 62, 50],\n  [54, 63, 51],\n  [55, 64, 52],\n  [56, 65, 53],\n  [57, 66, 54],\n  [58, 67, 55],\n  [59, 68, 56],\n  [60, 69, 57],\n  [61, 70, 58],\n  [62, 71, 59],\n  [63, 72, 60],\n  [64, 73, 61],\n  [65, 74, 62],\n  [66, 75, 63],\n  [67, 76, 64],\n  [68, 77, 65],\n  [69, 78, 66],\n  [70, 79, 67],\n  [71, 80, 68],\n  [72, 81, 69],\n  [73, 82, 70],\n  [74, 83, 71],\n  [75, 84, 72],\n  [76, 85, 73],\n  [77, 86, 74],\n  [78, 87, 75],\n  [79, 88, 76],\n  [80, 89, 77],\n  [81, 90, 78],\n  [82, 91, 79],\n  [83, 92, 80],\n  [84, 93, 81],\n  [85, 94, 82],\n  [86, 95, 83],\n  [87, 96, 84],\n  [88, 97, 85],\n  [89, 98, 86],\n  [90, 99, 87],\n  [91, 100, 88],\n  [92, 101, 89],\n  [93, 102, 90],\n  [94, 103, 91],\n  [95, 104, 92],\n  [96, 105, 93],\n  [97, 106, 94],\n  [98, 107, 95],\n  [99, 108, 96],\n  [100, 109, 97],\n  [101, 110, 98],\n  [102, 111, 99],\n  [103, 112, 100],\n  [104, 113, 101],\n  [105, 114, 102],\n  [106, 115, 103],\n  [107, 116, 104],\n  [108, 117, 105],\n  [109, 118, 106],\n  [110, 119, 107],\n  [111, 120, 108],\n  [112, 121, 109],\n  [113, 122, 110],\n  [114, 123, 111],\n  [115, 124, 112],\n  [116, 125, 113],\n  [117, 126, 114],\n  [118, 127, 115],\n  [119, 128, 116],\n  [120, 129, 117],\n  [121, 130, 118],\n  [122, 131, 119],\n  [123, 132, 120],\n  [124, 133, 121],\n  [125, 134, 122],\n  [126, 135, 123],\n  [127, 136, 124],\n  [128, 137, 125],\n  [129, 138,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char)) {\n      charSet.delete(char);\n    } else {\n      charSet.add(char);\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char.toLowerCase())) {\n      charSet.delete(char.toLowerCase());\n    } else {\n      charSet.add(char.toLowerCase());\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char.toUpperCase())) {\n      charSet.delete(char.toUpperCase());\n    } else {\n      charSet.add(char.toUpperCase());\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char.toLocaleUpperCase())) {\n      charSet.delete(char.toLocaleUpperCase());\n    } else {\n      charSet.add(char.toLocaleUpperCase());\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char.toLocaleLowerCase())) {\n      charSet.delete(char.toLocaleLowerCase());\n    } else {\n      charSet.add(char.toLocaleLowerCase());\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char.toLocaleUpperCase())) {\n      charSet.delete(char.toLocaleUpperCase());\n    } else {\n      charSet.add(char.toLocaleUpperCase());\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char.toLocaleLowerCase())) {\n      charSet.delete(char.toLocaleLowerCase());\n    } else {\n      charSet.add(char.toLocaleLowerCase());\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let charCount = 0;\n  let charSet = new Set();\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (charSet.has(char.toLocaleUpperCase())) {\n      charSet.delete(char.toLocaleUpperCase());\n    } else {\n      charSet.add(char.toLocaleUpperCase());\n      charCount++;\n    }\n  }\n  return charCount;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n  }\n  return result\n}\n\nconst doApgebra2 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n  }\n  return result\n}\n\nconst doApgebra3 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n  }\n  return result\n}\n\nconst doApgebra4 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n  }\n  return result\n}\n\nconst doApgebra5 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n  }\n  return result\n}\n\nconst doApgebra6 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const op2 = operand[i]\n    if (op === '+') {\n      result.push(op2 + op2)\n    } else if (op === '-') {\n      result.push(op2 - op2)\n    } else if (op === '*') {\n      result.push(op2 * op2)\n    } else if (op === '/') {\n      result.push(op2 / op2)\n    } else if (op === '**') {\n      result.push(Math.pow(op2, op2))\n    }\n  }\n  return result\n}\n\nconst doApgebra7 = (operator, operand) => {\n  const len = operator.length\n  const len2 = operand.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const op = operator", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let len = s.length;\n  let result = \"\";\n  for (let i = 0; i < len; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solge(\"1234\"));\nconsole.log(solge(\"ab\"));\nconsole.log(solge(\"#a@C\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha1('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha256 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha384('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngToSha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst strlngTo", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = genfrateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else if (notes[i] === '|') {\n      beats.push(0);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        count++;\n        j++;\n      } else {\n        break;\n      }\n    }\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains only\n  alphanumeric characters.\n  >>> longestAlphaNumeric('')\n  ''\n  >>> longestAlphaNumeric('abc')\n  'abc'\n  >>> longestAlphaNumeric('abc123')\n  'abc'\n  >>> longestAlphaNumeric('abc1234')\n  'abc'\n  >>> longestAlphaNumeric('abc1234abc')\n  'abc1234abc'\n  >>> longestAlphaNumeric('abc1234abc123')\n  'abc1234abc'\n  >>> longestAlphaNumeric('abc1234abc123def')\n  'abc1234abc'\n  >>> longestAlphaNumeric('abc1234abc123defg')\n  'abc1234abc123defg'\n  >>> longestAlphaNumeric('abc1234abc123defg1')\n  'abc1234abc123defg1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a')\n  'abc1234abc123defg1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1')\n  'abc1234abc123defg1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a')\n  'abc1234abc123defg1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1')\n  'abc1234abc123defg1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a')\n  'abc1234abc123defg1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1')\n  'abc1234abc123defg1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a1a1a1'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a1a1a1a')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a1a1a1a'\n  >>> longestAlphaNumeric('abc1234abc123defg1a1a1a1a1a1a1a1a1a1a1a1')\n  'abc1234abc123defg1a1a1a1a1a1a1a1a1a1a1a1'", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight nine seven six five four three two one zero'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers2 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers3 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers4 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers5 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers6 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers7 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers8 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers9 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers10 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers11 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'zero one two three four five six seven eight nine'\n  */\nconst sortNumbers12 = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const numbersArrSorted = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return numbersArrSorted.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trucateInt = (number) => {\n  let intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trucateInt(3.5)\n  0.5\n  */\nconst trucateDec = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trucateDec(3.5)\n  3\n  */\nconst trucateIntDec = (number) => {\n  let intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trucateIntDec(3.5)\n  0.5\n  */\nconst trucateIntDecDec = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trucateIntDecDec(3.5)\n  3\n  */\nconst trucateIntDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trucateIntDecDecDec(3.5)\n  0.5\n  */\nconst trucateIntDecDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trucateIntDecDecDecDec(3.5)\n  3\n  */\nconst trucateIntDecDecDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trucateIntDecDecDecDecDec(3.5)\n  0.5\n  */\nconst trucateIntDecDecDecDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trucateIntDecDecDecDecDecDec(3.5)\n  3\n  */\nconst trucateIntDecDecDecDecDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trucateIntDecDecDecDecDecDecDec(3.5)\n  0.5\n  */\nconst trucateIntDecDecDecDecDecDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trucateIntDecDecDecDecDecDecDec(3.5)\n  3\n  */\nconst trucateIntDecDecDecDecDecDecDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trucateIntDecDecDecDecDecDecDecDec(3.5)\n  0.5\n  */\nconst trucateIntDecDecDecDecDecDecDecDecDec = (number) => {\n  let intPart = Math.floor(number);\n  let decPart = number - intPart;\n  return", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const sorted = numbers.sort((a, b) => a - b);\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  return [min, max];\n};\n\nmodule.exports = finfClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return numbers.map((x) => x * scale)\n}\n\n/* Given a list of numbers, return the list of their logarithms */\nconst logarithms = (numbers) => {\n  return numbers.map((x) => Math.log(x))\n}\n\n/* Given a list of numbers, return the list of their exponents */\nconst exponents = (numbers) => {\n  return numbers.map((x) => Math.exp(x))\n}\n\n/* Given a list of numbers, return the list of their square roots */\nconst squareRoots = (numbers) => {\n  return numbers.map((x) => Math.sqrt(x))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoots = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot2 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot3 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot4 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot5 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot6 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot7 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot8 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot9 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot10 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot11 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot12 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot13 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot14 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot15 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot16 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot17 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot18 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot19 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot20 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot21 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot22 = (numbers) => {\n  return numbers.map((x) => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return the list of their cube roots */\nconst cubeRoot23 = (numbers) => {\n  return numbers.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherBooleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherObjects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherLists = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!(v instanceof Array));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeys = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 0);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithValues = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 1);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValues = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 2);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeys = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 3);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValues = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 4);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValuesAndKeys = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 5);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValuesAndKeys = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 6);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValuesAndKeys = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 7);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValuesAndKeysAndValues = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 8);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValuesAndKeysAndValues = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 9);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValuesAndKeysAndValues = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 10);\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filherDictionariesWithKeysAndValuesAndKeysAndValuesAndKeysAndValues = (values) => {\n  return values.filter(v => typeof v === 'object' && v instanceof Array && v.length > 11);\n};\n\n/**\n  *", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  const len = string.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(string[i].toUpperCase())\n  }\n  return result.join('')\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return length of given string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor2 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor3 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor4 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor5 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor6 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor7 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor8 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor9 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor10 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor11 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor12 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor13 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor14 = (n) => {\n  let result = n;\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      result = i;\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factors = []\n  const factors_count = []\n  const factors_count_max = []\n  const factors_count_min = []\n  const factors_count_sum = []\n  const factors_count_sum_max = []\n  const factors_count_sum_min = []\n  const factors_count_sum_sum = []\n  const factors_count_sum_sum_max = []\n  const factors_count_sum_sum_min = []\n  const factors_count_sum_sum_sum = []\n  const factors_count_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_count_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n  }\n  return unique;\n};\n\n/*\n  From a list of strings, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates(['a', 'b', 'c', 'b', 'd'])\n  ['a', 'c', 'd']\n  */\nconst remlveDuplicates = (numbers) => {\n  const unique = [];\n  const seen = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n      seen.push(numbers[i]);\n    }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCase('Hello')\n  'HELLO'\n  */\nconst flioCapitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/*\n  >>> flioCapitalize('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAll = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAll('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWords = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWords('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence2 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence2('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence3 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence3('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence4 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence4('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence5 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence5('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence6 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence6('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence7 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence7('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence8 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence8('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence9 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence9('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence10 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence10('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence11 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence11('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence12 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence12('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence13 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence13('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence14 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence14('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence15 = (string) => {\n  return string.replace(/\\w\\S*/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flioCapitalizeAllWordsInSentence15('Hello')\n  'Hello'\n  */\nconst flioCapitalizeAllWordsInSentence16 = (string) => {\n  return string.replace(/\\w\\", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filherByContains = (strings, contains) => {\n  return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filherByContains([], 'a')\n  []\n  >>> filherByContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = bellwZero;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive2 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive3 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive4 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => b - a);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive5 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive6 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => b - a);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive7 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive8 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => b - a);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive9 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive10 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => b - a);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive11 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => a - b);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive12 = (l) => {\n  return l.filter((x) => x > 0).sort((a, b) => b - a);\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(2)\n  1\n  >>> countPrimes(3)\n  2\n  >>> countPrimes(4)\n  3\n  >>> countPrimes(5)\n  4\n  >>> countPrimes(6)\n  5\n  >>> countPrimes(7)\n  6\n  >>> countPrimes(8)\n  7\n  >>> countPrimes(9)\n  8\n  >>> countPrimes(10)\n  9\n  >>> countPrimes(11)\n  10\n  >>> countPrimes(12)\n  11\n  >>> countPrimes(13)\n  12\n  >>> countPrimes(14)\n  13\n  >>> countPrimes(15)\n  14\n  >>> countPrimes(16)\n  15\n  >>> countPrimes(17)\n  16\n  >>> countPrimes(18)\n  17\n  >>> countPrimes(19)\n  18\n  >>> countPrimes(20)\n  19\n  >>> countPrimes(21)\n  20\n  >>> countPrimes(22)\n  21\n  >>> countPrimes(23)\n  22\n  >>> countPrimes(24)\n  23\n  >>> countPrimes(25)\n  24\n  >>> countPrimes(26)\n  25\n  >>> countPrimes(27)\n  26\n  >>> countPrimes(28)\n  27\n  >>> countPrimes(29)\n  28\n  >>> countPrimes(30)\n  29\n  >>> countPrimes(31)\n  30\n  >>> countPrimes(32)\n  31\n  >>> countPrimes(33)\n  32\n  >>> countPrimes(34)\n  33\n  >>> countPrimes(35)\n  34\n  >>> countPrimes(36)\n  35\n  >>> countPrimes(37)\n  36\n  >>> countPrimes(38)\n  37\n  >>> countPrimes(39)\n  38\n  >>> countPrimes(40)\n  39\n  >>> countPrimes(41)\n  40\n  >>> countPrimes(42)\n  41\n  >>> countPrimes(43)\n  42\n  >>> countPrimes(44)\n  43\n  >>> countPrimes(45)\n  44\n  >>> countPrimes(46)\n  45\n  >>> countPrimes(47)\n  46\n  >>> countPrimes(48)\n  47\n  >>> countPrimes(49)\n  48\n  >>> countPrimes(50)\n  49\n  >>> countPrimes(51)\n  50\n  >>> countPrimes(52)\n  51\n  >>> countPrimes(53)\n  52\n  >>> countPrimes(54)\n  53\n  >>> countPrimes(55)\n  54\n  >>> countPrimes(56)\n  55\n  >>> countPrimes(57)\n  56\n  >>> countPrimes(58)\n  57\n  >>> countPrimes(59)\n  58\n  >>> countPrimes(60)\n  59\n  >>> countPrimes(61)\n  60\n  >>> countPrimes(62)\n  61\n  >>> countPrimes(63)\n  62\n  >>> countPrimes(64)\n  63\n  >>> countPrimes(65)\n  64\n  >>> countPrimes(66)\n  65\n  >>> countPrimes(67)\n  66\n  >>> countPrimes(68)\n  67\n  >>> countPrimes(69)\n  68\n  >>> countPrimes(70)\n  69\n  >>> countPrimes(71)\n  70\n  >>> countPrimes(72)\n  71\n  >>> countPrimes(73)\n  72\n  >>> countPrimes(74)\n  73\n  >>> countPrimes(75)\n  74\n  >>> countPrimes(76)\n  75\n  >>> countPrimes(77)\n  76\n  >>> countPrimes(78)\n  77\n  >>> countPrimes(79)\n  78\n  >>> countPrimes(80)\n  79\n  >>> countPrimes(81)\n  80\n  >>> countPrimes(82)\n  81\n  >>> countPrimes(83)\n  82\n  >>> countPrimes(84)\n  83\n  >>> countPrimes(85)\n  84\n  >>> countPrimes(86)\n  85\n  >>> countPrimes(87)\n  86\n  >>> countPrimes(88)\n  87\n  >>> countPrimes(89)\n  88\n  >>> countPrimes(90)\n  89\n  >>> countPrimes(91)\n  90\n  >>> countPrimes(92)\n  91\n  >>> countPrimes(93)\n  92\n  >>> countPrimes(94)\n  93\n  >>> countPrimes(95)\n  94\n  >>> countPrimes(96)\n  95\n  >>> countPrimes(97)\n  96\n  >>> countPrimes(98)\n  97\n  >>> countPrimes(99)\n  98\n  >>> countPrimes(100)\n  99\n  >>> countPrimes(101)\n  100\n  >>> countPrimes(102)\n  101\n  >>> countPrimes(103)\n  102\n  >>> countPrimes(104)\n  103\n  >>> countPrimes(105)\n  104\n  >>> countPrimes(106)\n  105\n  >>> countPrimes(107)\n  106\n  >>> countPrimes(108)\n  107\n  >>> countPrimes(109)\n  108\n  >>> countPrimes(110)\n  109\n  >>> countPrimes(111)\n  110\n  >>> countPrimes(112)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const max = xs[n - 1];\n  let i = n - 2;\n  while (i >= 0 && xs[i] === 0) {\n    i--;\n  }\n  if (i < 0) {\n    return -1;\n  }\n  const x = (xs[i] + max) / 2;\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1]", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  const lCopy = l.slice();\n  const lCopySorted = lCopy.sort();\n  const lCopySortedLength = lCopySorted.length;\n  const lCopySortedLengthDivThree = lCopySortedLength % 3;\n  const lCopySortedLengthDivThreePlusOne = lCopySortedLengthDivThree + 1;\n  const lCopySortedLengthDivThreePlusTwo = lCopySortedLengthDivThreePlusOne % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusOne = lCopySortedLengthDivThreePlusTwo + 1;\n  const lCopySortedLengthDivThreePlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusOne = lCopySortedLengthDivThreePlusTwoPlusTwo + 1;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusOne = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwo + 1;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusOne = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwo + 1;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusOne = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwo + 1;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusOne = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo + 1;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusOne = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo + 1;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo = lCopySortedLengthDivThreePlusTwoPlusTwoPlusTwoPlusTwoPlusTwoPlusTwo % 3;\n  const lCopySortedLengthDivThreePlus", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue2 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue3 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue4 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue5 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue6 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue7 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue8 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue9 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue10 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue11 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue12 = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  return a\n}\n\n/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 7 || i % 13 === 7) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  >>> fizxBuzz(100)\n  0\n  >>> fizxBuzz(1000)\n  0\n  >>> fizxBuzz(10000)\n  0\n  >>> fizxBuzz(100000)\n  0\n  >>> fizxBuzz(1000000)\n  0\n  >>> fizxBuzz(10000000)\n  0\n  >>> fizxBuzz(100000000)\n  0\n  >>> fizxBuzz(1000000000)\n  0\n  >>> fizxBuzz(10000000000)\n  0\n  >>> fizxBuzz(100000000000)\n  0\n  >>> fizxBuzz(1000000000000)\n  0\n  >>> fizxBuzz(10000000000000)\n  0\n  >>> fizxBuzz(100000000000000)\n  0\n  >>> fizxBuzz(1000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0\n  >>> fizxBuzz(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  const even = l.slice(0, l.length / 2);\n  const odd = l.slice(l.length / 2);\n  return even.concat(odd.sort((a, b) => a - b));\n};\n\nmodule.exports = sorhEven;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  let a = 1, b = 1, c = 1, d = 1, e = 1, f = 1, g = 1, h = 1, i = 1, j = 1, k = 1, l = 1, m = 1, n = 1, o = 1, p = 1, q = 1, r = 1, s = 1, t = 1, u = 1, v = 1, w = 1, x = 1, y = 1, z = 1, A = 1, B = 1, C = 1, D = 1, E = 1, F = 1, G = 1, H = 1, I = 1, J = 1, K = 1, L = 1, M = 1, N = 1, O = 1, P = 1, Q = 1, R = 1, S = 1, T = 1, U = 1, V = 1, W = 1, X = 1, Y = 1, Z = 1, $ = 1, _ = 1, aa = 1, bb = 1, cc = 1, dd = 1, ee = 1, ff = 1, gg = 1, hh = 1, ii = 1, jj = 1, kk = 1, ll = 1, mm = 1, nn = 1, oo = 1, pp = 1, qq = 1, rr = 1, ss = 1, tt = 1, uu = 1, vv = 1, ww = 1, xx = 1, yy = 1, zz = 1, Aa = 1, Bb = 1, Cc = 1, Dd = 1, Ee = 1, Ff = 1, Gg = 1, Hh = 1, Ii = 1, Jj = 1, Kk = 1, Ll = 1, Mm = 1, Nn = 1, Oo = 1, Pp = 1, Qq = 1, Rr = 1, Ss = 1, Tt = 1, Uu = 1, Vv = 1, Ww = 1, Xx = 1, Yy = 1, Zz = 1, $A = 1, $B = 1, $C = 1, $D = 1, $E = 1, $F = 1, $G = 1, $H = 1, $I = 1, $J = 1, $K = 1, $L = 1, $M = 1, $N = 1, $O = 1, $P = 1, $Q = 1, $R = 1, $S = 1, $T = 1, $U = 1, $V = 1, $W = 1, $X = 1, $Y = 1, $Z = 1, $0 = 1, $1 = 1, $2 = 1, $3 = 1, $4 = 1, $5 = 1, $6 = 1, $7 = 1, $8 = 1, $9 = 1, $10 = 1, $11 = 1, $12 = 1, $13 = 1, $14 = 1, $15 = 1, $16 = 1, $17 = 1, $18 = 1, $19 = 1, $20 = 1, $21 = 1, $22 = 1, $23 = 1, $24 = 1, $25 = 1, $26 = 1, $27 = 1, $28 = 1, $29 = 1, $30 = 1, $31 = 1, $32 = 1, $33 = 1, $34 = 1, $35 = 1, $36 = 1, $37 = 1, $38 = 1, $39 = 1, $40 = 1, $41 = 1, $42 = 1, $43 = 1, $44 = 1, $45 = 1, $46 = 1, $47 = 1, $48 = 1, $49 = 1, $50 = 1, $51 = 1, $52 = 1, $53 = 1, $54 = 1, $55 = 1, $56 = 1, $57 = 1, $58 = 1, $59 = 1, $60 = 1, $61 = 1, $62 = 1, $63 = 1, $64 = 1, $65 = 1, $66 = 1, $67 = 1, $68 = 1, $69 = 1, $70 = 1, $71 = 1, $72 = 1, $73 = 1, $74 = 1, $75 = 1, $76 = 1, $77 = 1, $78 = 1, $79 = 1, $80 = 1, $81 = 1, $82 = 1, $83 = 1, $84 = 1, $85 = 1, $86 = 1, $87 = 1, $88 = 1, $89 = 1, $90 = 1, $91 = 1, $92 = 1, $93 = 1, $94 = 1, $95 = 1, $96 = 1, $97 = 1, $98 = 1, $99 = 1, $100 = 1, $101 = 1, $102 = 1, $103 = 1, $104 = 1, $105 = 1, $106 = 1, $107 = 1, $108 = 1, $109 = 1, $110 = 1, $111 = 1, $112 = 1, $113 = 1, $114 = 1, $115 = 1, $116 = 1, $117 = 1, $118 = 1, $119 = 1, $120 = 1, $121 = 1, $122 = 1, $123 = 1, $124 = 1, $125 = 1, $126 = 1, $127 = 1, $128 = 1, $129 = 1, $130 = 1, $131 = 1, $132 = 1, $133 = 1, $134 = 1, $135 = 1, $136 = 1, $137 = 1, $138 = 1, $139 = 1, $140 = 1, $141 = 1, $142 = 1, $143 = 1, $144 = 1, $145 = 1, $146 = 1, $147 = 1, $148 = 1, $149 = 1, $150 = 1, $151 = 1, $152 = 1, $153 = 1, $154 = 1, $155 = 1, $156 = 1, $157 = 1, $158 = 1, $159 = 1, $160 = 1, $161 = 1, $162 = 1, $163 = 1, $164 = 1, $165 = 1, $166 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map(number => Math.abs(number - mean));", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\nexport default triolesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x) {\n        if (car.x + car.speed < otherCar.x) {\n          collisions++;\n        }\n      } else {\n        if (car.x > otherCar.x) {\n          collisions++;\n        }\n      }\n    });\n  });\n  return collisions;\n};\n\nconst carGaceCollision2 = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x) {\n        if (car.x + car.speed < otherCar.x) {\n          collisions++;\n        }\n      } else {\n        if (car.x > otherCar.x) {\n          collisions++;\n        }\n      }\n    });\n  });\n  return collisions;\n};\n\nconst carGaceCollision3 = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x) {\n        if (car.x + car.speed < otherCar.x) {\n          collisions++;\n        }\n      } else {\n        if (car.x > otherCar.x) {\n          collisions++;\n        }\n      }\n    });\n  });\n  return collisions;\n};\n\nconst carGaceCollision4 = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x) {\n        if (car.x + car.speed < otherCar.x) {\n          collisions++;\n        }\n      } else {\n        if (car.x > otherCar.x) {\n          collisions++;\n        }\n      }\n    });\n  });\n  return collisions;\n};\n\nconst carGaceCollision5 = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x) {\n        if (car.x + car.speed < otherCar.x) {\n          collisions++;\n        }\n      } else {\n        if (car.x > otherCar.x) {\n          collisions++;\n        }\n      }\n    });\n  });\n  return collisions;\n};\n\nconst carGaceCollision6 = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x) {\n        if (car.x + car.speed < otherCar.x) {\n          collisions++;\n        }\n      } else {\n        if (car.x > otherCar.x) {\n          collisions++;\n        }\n      }\n    });\n  });\n  return collisions;\n};\n\nconst carGaceCollision7 = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar) => {\n      if (car.x < otherCar.x) {\n        if (car.x + car.speed < otherCar.x) {\n          collisions++;\n        }\n      } else {\n        if (car.x > otherCar.x) {\n          collisions++;\n        }\n      }\n    });\n  });\n  return collisions;\n};\n\nconst carGaceCollision8 = (n) => {\n  let cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(i, i));\n  }\n  cars.sort((a, b) => a.x - b.x);\n  let collisions = 0;\n  cars.forEach((car) => {\n    cars.forEach((otherCar)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const inc = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, inc(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [0, 1, 2]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  const dec = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, dec(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decgList = (l) => {\n  const dec = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, dec(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const inc = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, inc(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [0, 1, 2]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  const dec = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, dec(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decgList = (l) => {\n  const dec = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, dec(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const inc = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, inc(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [0, 1, 2]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  const dec = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, dec(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decgList = (l) => {\n  const dec = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, dec(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const inc = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, inc(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [0, 1, 2]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decgList = (l) => {\n  const dec = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, dec(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0 && l.length > 1;\n};\n\n/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const sum = l", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> convertToBase10(8)\n  '8'\n  >>> convertToBase10(8, 3)\n  '2'\n  >>> convertToBase10(8, 2)\n  '1000'\n  >>> convertToBase10(7, 2)\n  '111'\n  >>> convertToBase10(8, 2)\n  '1000'\n  >>> convertToBase10(8, 3)\n  '2'\n  >>> convertToBase10(8, 4)\n  '24'\n  >>> convertToBase10(8, 5)\n  '28'\n  >>> convertToBase10(8, 6)\n  '32'\n  >>> convertToBase10(8, 7)\n  '36'\n  >>> convertToBase10(8, 8)\n  '40'\n  >>> convertToBase10(8, 9)\n  '44'\n  >>> convertToBase10(8, 10)\n  '48'\n  >>> convertToBase10(8, 11)\n  '52'\n  >>> convertToBase10(8, 12)\n  '56'\n  >>> convertToBase10(8, 13)\n  '60'\n  >>> convertToBase10(8, 14)\n  '64'\n  >>> convertToBase10(8, 15)\n  '68'\n  >>> convertToBase10(8, 16)\n  '72'\n  >>> convertToBase10(8, 17)\n  '76'\n  >>> convertToBase10(8, 18)\n  '80'\n  >>> convertToBase10(8, 19)\n  '84'\n  >>> convertToBase10(8, 20)\n  '88'\n  >>> convertToBase10(8, 21)\n  '92'\n  >>> convertToBase10(8, 22)\n  '96'\n  >>> convertToBase10(8, 23)\n  '100'\n  >>> convertToBase10(8, 24)\n  '104'\n  >>> convertToBase10(8, 25)\n  '108'\n  >>> convertToBase10(8, 26)\n  '112'\n  >>> convertToBase10(8, 27)\n  '116'\n  >>> convertToBase10(8, 28)\n  '120'\n  >>> convertToBase10(8, 29)\n  '124'\n  >>> convertToBase10(8, 30)\n  '128'\n  >>> convertToBase10(8, 31)\n  '132'\n  >>> convertToBase10(8, 32)\n  '136'\n  >>> convertToBase10(8, 33)\n  '140'\n  >>> convertToBase10(8, 34)\n  '144'\n  >>> convertToBase10(8, 35)\n  '148'\n  >>> convertToBase10(8, 36)\n  '152'\n  >>> convertToBase10(8, 37)\n  '156'\n  >>> convertToBase10(8, 38)\n  '160'\n  >>> convertToBase10(8, 39)\n  '164'\n  >>> convertToBase10(8, 40)\n  '168'\n  >>> convertToBase10(8, 41)\n  '172'\n  >>> convertToBase10(8, 42)\n  '176'\n  >>> convertToBase10(8, 43)\n  '180'\n  >>> convertToBase10(8, 44)\n  '184'\n  >>> convertToBase10(8, 45)\n  '188'\n  >>> convertToBase10(8, 46)\n  '192'\n  >>> convertToBase10(8, 47)\n  '196'\n  >>> convertToBase10(8, 48)\n  '200'\n  >>> convertToBase10(8, 49)\n  '204'\n  >>> convertToBase10(8, 50)\n  '208'\n  >>> convertToBase10(8, 51)\n  '212'\n  >>> convertToBase10(8, 52)\n  '216'\n  >>> convertToBase10(8, 53)\n  '220'\n  >>> convertToBase10(8, 54)\n  '224'\n  >>> convertToBase10(8, 55)\n  '228'\n  >>> convertToBase10(8, 56)\n  '232'\n  >>> convertToBase10(8, 57)\n  '236'\n  >>> convertToBase10(8, 58)\n  '240'\n  >>> convertToBase10(8, 59)\n  '244'\n  >>> convertToBase10(8, 60)\n  '248'\n  >>> convertToBase10(8, 61)\n  '252'\n  >>> convertToBase10(8, 62)\n  '256'\n  >>> convertToBase10(8, 63)\n  '260'\n  >>> convertToBase10(8, 64)\n  '264'\n  >>> convertToBase10(8, 65)\n  '268'\n  >>> convertToBase10(8, 66)\n  '272'\n  >>> convertToBase10(8, 67)\n  '276'\n  >>> convertToBase10(8, 68)\n  '280'\n  >>> convertToBase10(8, 69)\n  '284'\n  >>> convertToBase10(8, 70)\n  '288'\n  >>> convertToBase10(8, 71)\n  '292'\n  >>> convertToBase10(8, 72)\n  '296'\n  >>> convertToBase10(8, 73)\n  '300'\n  >>> convertToBase10(8, 74)\n  '304'\n  >>> convertToBase10(8, 75)\n  '308'\n  >>> convertToBase10(8, 76)\n  '312'\n  >>> convertToBase10(8, 77)\n  '316'\n  >>> convertToBase10(8, 78)\n  '", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngle", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan2 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan3 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan4 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan5 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan6 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan7 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan8 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[j]) {\n      m = m + (a[i] - a[j]);\n      i--;\n    } else {\n      j++;\n    }\n  }\n  return m;\n};\n\n/*\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan9 = (l) => {\n  let a = l.sort((a, b) => a - b);\n  let i = a.length - 1;\n  let j = 0;\n  let m = 0;\n  while (i >= 0 && j < a.length) {\n    if (a[i] > a[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n    let textLength = text.length;\n    let i = 0;\n    let j = textLength - 1;\n    while (i < j) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo2 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo2(3, 5)\n  3\n  >>> modo2(1101, 101)\n  2\n  >>> modo2(0, 101)\n  1\n  >>> modo2(3, 11)\n  8\n  >>> modo2(100, 101)\n  1\n  */\nconst modo3 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo3(3, 5)\n  3\n  >>> modo3(1101, 101)\n  2\n  >>> modo3(0, 101)\n  1\n  >>> modo3(3, 11)\n  8\n  >>> modo3(100, 101)\n  1\n  */\nconst modo4 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo4(3, 5)\n  3\n  >>> modo4(1101, 101)\n  2\n  >>> modo4(0, 101)\n  1\n  >>> modo4(3, 11)\n  8\n  >>> modo4(100, 101)\n  1\n  */\nconst modo5 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo5(3, 5)\n  3\n  >>> modo5(1101, 101)\n  2\n  >>> modo5(0, 101)\n  1\n  >>> modo5(3, 11)\n  8\n  >>> modo5(100, 101)\n  1\n  */\nconst modo6 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo6(3, 5)\n  3\n  >>> modo6(1101, 101)\n  2\n  >>> modo6(0, 101)\n  1\n  >>> modo6(3, 11)\n  8\n  >>> modo6(100, 101)\n  1\n  */\nconst modo7 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo7(3, 5)\n  3\n  >>> modo7(1101, 101)\n  2\n  >>> modo7(0, 101)\n  1\n  >>> modo7(3, 11)\n  8\n  >>> modo7(100, 101)\n  1\n  */\nconst modo8 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo8(3, 5)\n  3\n  >>> modo8(1101, 101)\n  2\n  >>> modo8(0, 101)\n  1\n  >>> modo8(3, 11)\n  8\n  >>> modo8(100, 101)\n  1\n  */\nconst modo9 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo9(3, 5)\n  3\n  >>> modo9(1101, 101)\n  2\n  >>> modo9(0, 101)\n  1\n  >>> modo9(3, 11)\n  8\n  >>> modo9(100, 101)\n  1\n  */\nconst modo10 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo10(3, 5)\n  3\n  >>> modo10(1101, 101)\n  2\n  >>> modo10(0, 101)\n  1\n  >>> modo10(3, 11)\n  8\n  >>> modo10(100, 101)\n  1\n  */\nconst modo11 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo11(3, 5)\n  3\n  >>> modo11(1101, 101)\n  2\n  >>> modo11(0, 101)\n  1\n  >>> modo11(3, 11)\n  8\n  >>> modo11(100, 101)\n  1\n  */\nconst modo12 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo12(3, 5)\n  3\n  >>> modo12(1101, 101)\n  2\n  >>> modo12(0, 101)\n  1\n  >>> modo12(3, 11)\n  8\n  >>> modo12(100, 101)\n  1\n  */\nconst modo13 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo13(3, 5)\n  3\n  >>> modo13(1101, 101)\n  2\n  >>> modo13(0, 101)\n  1\n  >>> modo13(3, 11)\n  8\n  >>> modo13(100, 101)\n  1\n  */\nconst modo14 = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  >>> modo14(3, 5)\n  3\n  >>> modo14(1101, 101)\n  2\n  >>> modo14(0, 101)\n  1\n  >>> modo14(3, 11)\n  8\n  >>> modo", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  const len = numbers.length\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result.push(numbers[i])\n    i++\n    if (i < len) {\n      result.push(delimeter)\n      i++\n    }\n    j++\n  }\n  return result\n}\n\n/*\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift14 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift15 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let result = text;\n  vowels.forEach(v => {\n    result = result.replace(v, '');\n  });\n  return result;\n};\n\n/*\n  remlvePunctuation is a function that takes string and returns string without punctuation.\n  >>> remlvePunctuation('')\n  ''\n  >>> remlvePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remlvePunctuation('abcdef')\n  'abcdef'\n  >>> remlvePunctuation('aaaaa')\n  ''\n  >>> remlvePunctuation('aaBAA')\n  'aBAA'\n  >>> remlvePunctuation('zbcd')\n  'zbcd'\n  */\nconst remlvePunctuation = (text) => {\n  const punctuation = ['.', ',', '?', '!', ';', ':', '-', '_', '\\'', '\"', '%', '$', '*', '+', '=', '@', '#', '$', '^', '&', '~', '|', '{', '}', '(', ')', '<', '>', '\\\\', '/', '\\\\n', '\\\\r', '\\\\t', '\\\\f', '\\\\v', '\\\\a', '\\\\b', '\\\\z', '\\\\0', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\\\8', '\\\\9'];\n  let result = text;\n  punctuation.forEach(p => {\n    result = result.replace(p, '');\n  });\n  return result;\n};\n\n/*\n  remlveNumbers is a function that takes string and returns string without numbers.\n  >>> remlveNumbers('')\n  ''\n  >>> remlveNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remlveNumbers('abcdef')\n  'abcdef'\n  >>> remlveNumbers('aaaaa')\n  ''\n  >>> remlveNumbers('aaBAA')\n  'aBAA'\n  >>> remlveNumbers('zbcd')\n  'zbcd'\n  */\nconst remlveNumbers = (text) => {\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  let result = text;\n  numbers.forEach(n => {\n    result = result.replace(n, '');\n  });\n  return result;\n};\n\n/*\n  remlveAll is a function that takes string and returns string without all characters.\n  >>> remlveAll('')\n  ''\n  >>> remlveAll(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remlveAll('abcdef')\n  'abcdef'\n  >>> remlveAll('aaaaa')\n  ''\n  >>> remlveAll('aaBAA')\n  'aBAA'\n  >>> remlveAll('zbcd')\n  'zbcd'\n  */\nconst remlveAll = (text) => {\n  const all = [' ', '!', '\"', '#', '$', '%', '&', '\\'', '(', ')', '*', '+', '-', '_', '=', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '\\\\', '|', '{', '}', '~', '\\\\n', '\\\\r', '\\\\t', '\\\\f', '\\\\v', '\\\\a', '\\\\b', '\\\\z', '\\\\0', '\\\\1', '\\\\2', '\\\\3', '\\\\4', '\\\\5', '\\\\6', '\\\\7', '\\\\8', '\\\\9'];\n  let result = text;\n  all.forEach(a => {\n    result = result.replace(a, '');\n  });\n  return result;\n};\n\nmodule.exports = {\n  remlveVowels,\n  remlvePunctuation,\n  rem", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  const len = l.length;\n  if (len === 0) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum <= t;\n};\n\nmodule.exports = bellwThreshold;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};\n\n/*", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Check if two words are anagrams.\n  >>> samfAnagram('eabcd', 'dddddddabc')\n  true\n  >>> samfAnagram('abcd', 'dddddddabc')\n  false\n  >>> samfAnagram('eabcd', 'dddddddabce')\n  false\n  >>> samfAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfAnagram = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Check if two words are anagrams.\n  >>> samfAnagram('eabcd', 'dddddddabc')\n  true\n  >>> samfAnagram('abcd', 'dddddddabc')\n  false\n  >>> samfAnagram('eabcd', 'dddddddabce')\n  false\n  >>> samfAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfAnagram2 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Check if two words are anagrams.\n  >>> samfAnagram('eabcd', 'dddddddabc')\n  true\n  >>> samfAnagram('abcd', 'dddddddabc')\n  false\n  >>> samfAnagram('eabcd', 'dddddddabce')\n  false\n  >>> samfAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfAnagram3 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Check if two words are anagrams.\n  >>> samfAnagram('eabcd', 'dddddddabc')\n  true\n  >>> samfAnagram('abcd', 'dddddddabc')\n  false\n  >>> samfAnagram('eabcd', 'dddddddabce')\n  false\n  >>> samfAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfAnagram4 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Check if two words are anagrams.\n  >>> samfAnagram('eabcd', 'dddddddabc')\n  true\n  >>> samfAnagram('abcd', 'dddddddabc')\n  false\n  >>> samfAnagram('eabcd', 'dddddddabce')\n  false\n  >>> samfAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfAnagram5 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i === s0.length && j === s1.length\n}\n\n/*\n  Check if two words are anagrams.\n  >>> samfAnagram('eabcd', 'dddddddabc')\n  true\n  >>> samfAnagram('abcd', 'dddddddabc')\n  false\n  >>> samfAnagram('eabcd', 'dddddddabce')\n  false\n  >>> samfAnagram('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfAnagram6 = (s0, s1) => {\n    let i = 0\n    let j = 0\n    while (i < s0.length && j < s1.length) {\n        if (s0[i] === s1[j]) {\n            i++\n            j++\n        } else {\n            break\n        }\n    }\n    return i ===", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib15(10)\n  55\n  >>> fib15(1)\n  1\n  >>> fib15(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib16(10)\n  55\n  >>> fib16(1)\n  1\n  >>> fib16(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n ===", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const stack = [],\n    bracket = brackets.charAt(0),\n    isOpen = brackets.charAt(0) === '<',\n    isClosed = brackets.charAt(0) === '>';\n\n  for (let i = 1; i < brackets.length; i++) {\n    const current = brackets.charAt(i);\n\n    if (isOpen && current === '>') {\n      stack.pop();\n      isOpen = false;\n      isClosed = true;\n    } else if (isClosed && current === '<') {\n      stack.pop();\n      isOpen = true;\n      isClosed = false;\n    } else if (isOpen) {\n      stack.push(current);\n    } else if (isClosed) {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack.pop()!== current) {\n        return false;\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\nmodule.exports = corgectBracketing;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic2 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic3 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic4 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic5 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic6 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic7 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic8 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic9 = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      return true\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic10 = (l) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1i = l1s.map(x => l2s.indexOf(x));\n  return l1s.filter(x => l1i.indexOf(x) === -1);\n};\n\nexport default comlon;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor8 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor9 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor10 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor11 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor12 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor13 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  const stack = [paren_string];\n  const max_level = 0;\n  const level = 0;\n  const result = [];\n\n  while (stack.length > 0) {\n    const current_level = stack.length - 1;\n    const current_string = stack.pop();\n    const current_char = current_string[0];\n\n    if (current_char === '(') {\n      stack.push(current_string + ')');\n      level++;\n    } else if (current_char === ')') {\n      stack.push(current_string + '(');\n      level--;\n    }\n\n    if (level > max_level) {\n      max_level = level;\n    }\n\n    if (level === 0) {\n      result.push(max_level);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = pardeNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN2 is a function that sums numbers from 1 to n.\n  >>> sumHoN2(30)\n  465\n  >>> sumHoN2(100)\n  5050\n  >>> sumHoN2(5)\n  15\n  >>> sumHoN2(10)\n  55\n  >>> sumHoN2(1)\n  1\n  */\nconst sumHoN2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN3 is a function that sums numbers from 1 to n.\n  >>> sumHoN3(30)\n  465\n  >>> sumHoN3(100)\n  5050\n  >>> sumHoN3(5)\n  15\n  >>> sumHoN3(10)\n  55\n  >>> sumHoN3(1)\n  1\n  */\nconst sumHoN3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN4 is a function that sums numbers from 1 to n.\n  >>> sumHoN4(30)\n  465\n  >>> sumHoN4(100)\n  5050\n  >>> sumHoN4(5)\n  15\n  >>> sumHoN4(10)\n  55\n  >>> sumHoN4(1)\n  1\n  */\nconst sumHoN4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN5 is a function that sums numbers from 1 to n.\n  >>> sumHoN5(30)\n  465\n  >>> sumHoN5(100)\n  5050\n  >>> sumHoN5(5)\n  15\n  >>> sumHoN5(10)\n  55\n  >>> sumHoN5(1)\n  1\n  */\nconst sumHoN5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN6 is a function that sums numbers from 1 to n.\n  >>> sumHoN6(30)\n  465\n  >>> sumHoN6(100)\n  5050\n  >>> sumHoN6(5)\n  15\n  >>> sumHoN6(10)\n  55\n  >>> sumHoN6(1)\n  1\n  */\nconst sumHoN6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN7 is a function that sums numbers from 1 to n.\n  >>> sumHoN7(30)\n  465\n  >>> sumHoN7(100)\n  5050\n  >>> sumHoN7(5)\n  15\n  >>> sumHoN7(10)\n  55\n  >>> sumHoN7(1)\n  1\n  */\nconst sumHoN7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN8 is a function that sums numbers from 1 to n.\n  >>> sumHoN8(30)\n  465\n  >>> sumHoN8(100)\n  5050\n  >>> sumHoN8(5)\n  15\n  >>> sumHoN8(10)\n  55\n  >>> sumHoN8(1)\n  1\n  */\nconst sumHoN8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN9 is a function that sums numbers from 1 to n.\n  >>> sumHoN9(30)\n  465\n  >>> sumHoN9(100)\n  5050\n  >>> sumHoN9(5)\n  15\n  >>> sumHoN9(10)\n  55\n  >>> sumHoN9(1)\n  1\n  */\nconst sumHoN9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN10 is a function that sums numbers from 1 to n.\n  >>> sumHoN10(30)\n  465\n  >>> sumHoN10(100)\n  5050\n  >>> sumHoN10(5)\n  15\n  >>> sumHoN10(10)\n  55\n  >>> sumHoN10(1)\n  1\n  */\nconst sumHoN10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN11 is a function that sums numbers from 1 to n.\n  >>> sumHoN11(30)\n  465\n  >>> sumHoN11(100)\n  5050\n  >>> sumHoN11(5)\n  15\n  >>> sumHoN11(10)\n  55\n  >>> sumHoN11(1)\n  1\n  */\nconst sumHoN11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHo", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const stack = [...brackets];\n  const stackSize = stack.length;\n  let i = 0;\n  while (i < stackSize) {\n    if (stack[i] === \"(\" && stack[stackSize - 1] === \")\") {\n      stack.pop();\n      stack.pop();\n      i--;\n    } else if (stack[i] === \"(\" && stack[stackSize - 1]!== \")\") {\n      return false;\n    } else if (stack[i]!== \"(\" && stack[stackSize - 1] === \")\") {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n//------------------------------------------------------------------------------\n//  Tests\n//------------------------------------------------------------------------------\n\nconst tests = [\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n  [\"()()()\", \"()()()\"],\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const len = xs.length\n  const der = []\n  for (let i = 0; i < len; i++) {\n    der[i] = xs[i]\n    for (let j = i + 1; j < len; j++) {\n      der[i] += xs[j] * (j - i)\n    }\n  }\n  return der\n}\n\n/*\n  Given a list of coefficients, return the value of the polynomial\n  represented by these coefficients.\n  >>> polyval([3, 1, 2, 4, 5])\n  30\n  >>> polyval([1, 2, 3])\n  6\n  >>> polyval([1, 2, 3, 4, 5, 6])\n  42\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  60\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  84\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  108\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  120\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  144\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  168\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  192\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  216\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  240\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  264\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  288\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  312\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  336\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  360\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  384\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  408\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  432\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  456\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  480\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  504\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  528\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  552\n  >>> polyval([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibvib(n - 1) + fibvib(n - 2) + fibvib(n - 3)\n  }\n}\n\nconsole.log(fibvib(1))\nconsole.log(fibvib(5))\nconsole.log(fibvib(8))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n    if (i === s.length - 1 && s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(vowflsCount(\"abcde\"));\nconsole.log(vowflsCount(\"ACEDY\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  const len = x.length\n  const result = []\n  for (let i = 0; i < len; i++) {\n    result.push(x[len - i - 1])\n  }\n  if (shift > len) {\n    return result.reverse().join('')\n  }\n  const start = len - shift\n  const end = len\n  for (let i = start; i < end; i++) {\n    result[i - start] = x[i]\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the number of times that the string\n  appears as a substring of the given string.\n  >>> countSubstring('abcabcabc', 'abc')\n  3\n  >>> countSubstring('abcabcabc', 'ab')\n  2\n  >>> countSubstring('abcabcabc', 'bc')\n  1\n  >>> countSubstring('abcabcabc', 'abcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abcabcabc', 'abcabcabcabcd')\n  0\n  >>> countSubstring('abcabcabc', 'abcabcabcabcabcabcabc')\n  1\n  >>> countSubstring('abc", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0) - 64;\n  }\n  return sum;\n};\n\nconsole.log(digltSum(\"\"));\nconsole.log(digltSum(\"abAB\"));\nconsole.log(digltSum(\"abcCd\"));\nconsole.log(digltSum(\"helloE\"));\nconsole.log(digltSum(\"woArBld\"));\nconsole.log(digltSum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  let count = 0;\n  let total = 0;\n  let i = 0;\n  let j = 0;\n  while (i < s.length) {\n    if (s[i] === 'apples') {\n      count++;\n    } else if (s[i] === 'oranges') {\n      count++;\n    } else if (s[i] ==='mango') {\n      count++;\n    }\n    i++;\n  }\n  while (j < n) {\n    if (count === 0) {\n      break;\n    }\n    total += count;\n    count--;\n    j++;\n  }\n  return total;\n};\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  const even = (n) => n % 2 === 0;\n  const min = (a, b) => a < b? a : b;\n  const minIndex = (a, b) => a < b? a : b;\n\n  let minValue = Infinity;\n  let minIndex = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (even(arr[i])) {\n      if (minValue > arr[i]) {\n        minValue = arr[i];\n        minIndex = i;\n      }\n    }\n  }\n\n  return [minValue, minIndex];\n};\n\nmodule.exports = plufk;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  const max = Math.max(...lst);\n  const maxFreq = lst.reduce((acc, n) => {\n    if (acc < n) {\n      return n;\n    }\n    return acc;\n  }, 0);\n  if (maxFreq <= max) {\n    return max;\n  }\n  return -1;\n};\n\nconsole.log(seagch([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(seagch([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring2 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring3 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring4 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring5 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring6 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring7 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring8 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring9 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring10 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings\n  * @param {String} substring\n  * @returns {Array}\n  */\nexport const filherBySubstring11 = (strings, substring) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/**\n  * Filter an input list of strings only for ones that contain given substring\n  * @param {Array} strings", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const len = lst.length\n  if (len === 0) return []\n  const sorted = lst.slice()\n  let i = 0\n  let j = len - 1\n  let min = sorted[i]\n  let max = sorted[j]\n  while (i < j) {\n    while (i < j && sorted[j] >= min) {\n      j--\n    }\n    sorted[i] = sorted[j]\n    while (i < j && sorted[i] <= max) {\n      i++\n    }\n    sorted[j] = sorted[i]\n  }\n  sorted[i] = min\n  sorted[j] = max\n  return sorted\n}\n\nexport default strwngeSortList\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else {\n    return -1\n  }\n}\n\nconst triangleArea = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea2 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea3 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea4 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea5 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea6 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea7 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea8 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea9 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea10 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea11 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea12 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea13 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea14 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea15 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea16 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea17 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea18 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea19 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea20 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea21 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea22 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea23 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea24 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea25 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea26 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea27 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea28 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea29 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea30 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea31 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea32 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea33 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea34 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea35 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea36 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea37 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea38 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea39 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea40 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea41 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea42 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea43 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea44 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea45 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea46 = (a, b, c) => {\n  return (a * b) / 2\n}\n\nconst triangleArea47 = (a, b, c) => {\n  return (a * b) / 2\n}\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const len = q.length\n  if (len === 0) return false\n  const sum = q[0]\n  for (let i = 1; i < len; i++) {\n    sum += q[i]\n  }\n  return sum <= w\n}\n\nexport default wilpItFly\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    let j = arr.length - 1 - i;\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i + 1);\n    }\n  }\n  return min;\n};\n\nconsole.log(smaplestChange([1, 2, 3, 2, 1]));\nconsole.log(smaplestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smaplestChange([1, 2, 3, 2, 1, 2, 3, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst1;\n  }\n  if (lst2.length === 0) {\n    return lst2;\n  }\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const result = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i].length > lst2[i].length) {\n      result.push(lst1[i]);\n    } else if (lst1[i].length < lst2[i].length) {\n      result.push(lst2[i]);\n    } else {\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n};\n\nconsole.log(totwlMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totwlMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltiplyPrime = (a) => {\n  const prime = [2, 3, 5];\n  const i = prime.length;\n  while (i--) {\n    if (a % prime[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isMkltip", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  if (n === 2) {\n    return x === 2;\n  }\n  if (n === 3) {\n    return x === 3;\n  }\n  if (n === 4) {\n    return x === 4;\n  }\n  if (n === 5) {\n    return x === 5;\n  }\n  if (n === 6) {\n    return x === 6;\n  }\n  if (n === 7) {\n    return x === 7;\n  }\n  if (n === 8) {\n    return x === 8;\n  }\n  if (n === 9) {\n    return x === 9;\n  }\n  if (n === 10) {\n    return x === 10;\n  }\n  if (n === 11) {\n    return x === 11;\n  }\n  if (n === 12) {\n    return x === 12;\n  }\n  if (n === 13) {\n    return x === 13;\n  }\n  if (n === 14) {\n    return x === 14;\n  }\n  if (n === 15) {\n    return x === 15;\n  }\n  if (n === 16) {\n    return x === 16;\n  }\n  if (n === 17) {\n    return x === 17;\n  }\n  if (n === 18) {\n    return x === 18;\n  }\n  if (n === 19) {\n    return x === 19;\n  }\n  if (n === 20) {\n    return x === 20;\n  }\n  if (n === 21) {\n    return x === 21;\n  }\n  if (n === 22) {\n    return x === 22;\n  }\n  if (n === 23) {\n    return x === 23;\n  }\n  if (n === 24) {\n    return x === 24;\n  }\n  if (n === 25) {\n    return x === 25;\n  }\n  if (n === 26) {\n    return x === 26;\n  }\n  if (n === 27) {\n    return x === 27;\n  }\n  if (n === 28) {\n    return x === 28;\n  }\n  if (n === 29) {\n    return x === 29;\n  }\n  if (n === 30) {\n    return x === 30;\n  }\n  if (n === 31) {\n    return x === 31;\n  }\n  if (n === 32) {\n    return x === 32;\n  }\n  if (n === 33) {\n    return x === 33;\n  }\n  if (n === 34) {\n    return x === 34;\n  }\n  if (n === 35) {\n    return x === 35;\n  }\n  if (n === 36) {\n    return x === 36;\n  }\n  if (n === 37) {\n    return x === 37;\n  }\n  if (n === 38) {\n    return x === 38;\n  }\n  if (n === 39) {\n    return x === 39;\n  }\n  if (n === 40) {\n    return x === 40;\n  }\n  if (n === 41) {\n    return x === 41;\n  }\n  if (n === 42) {\n    return x === 42;\n  }\n  if (n === 43) {\n    return x === 43;\n  }\n  if (n === 44) {\n    return x === 44;\n  }\n  if (n === 45) {\n    return x === 45;\n  }\n  if (n === 46) {\n    return x === 46;\n  }\n  if (n === 47) {\n    return x === 47;\n  }\n  if (n === 48) {\n    return x === 48;\n  }\n  if (n === 49) {\n    return x === 49;\n  }\n  if (n === 50) {\n    return x === 50;\n  }\n  if (n === 51) {\n    return x === 51;\n  }\n  if (n === 52) {\n    return x === 52;\n  }\n  if (n === 53) {\n    return x === 53;\n  }\n  if (n === 54) {\n    return x === 54;\n  }\n  if (n === 55) {\n    return x === 55;\n  }\n  if (n === 56) {\n    return x === 56;\n  }\n  if (n === 57) {\n    return x === 57;\n  }\n  if (n === 58) {\n    return x === 58;\n  }\n  if (n === 59) {\n    return x === 59;\n  }\n  if (n === 60) {\n    return x === 60;\n  }\n  if (n === 61) {\n    return x === 61;\n  }\n  if (n === 62) {\n    return x === 62;\n  }\n  if (n === 63) {\n    return x === 63;\n  }\n  if (n === 64) {\n    return x === 64;\n  }\n  if (n === 65) {\n    return x === 65;\n  }\n  if (n === 66) {\n    return x === 66;\n  }\n  if (n === 67) {\n    return x === 67;\n  }\n  if (n === 68) {\n    return x === 68;\n  }\n  if (n === 69) {\n    return x === 69;\n  }\n  if (n === 70) {\n    return x === 70;\n  }\n  if (n === 71) {\n    return x === 71;\n  }\n  if (n === 72) {\n    return x === 72;\n  }\n  if (n === 73) {\n    return x === 73;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a % 3 === 0) return true\n  if (a % 5 === 0) return true\n  if (a % 7 === 0) return true\n  if (a % 11 === 0) return true\n  if (a % 13 === 0) return true\n  if (a % 17 === 0) return true\n  if (a % 19 === 0) return true\n  if (a % 23 === 0) return true\n  if (a % 29 === 0) return true\n  if (a % 31 === 0) return true\n  if (a % 37 === 0) return true\n  if (a % 41 === 0) return true\n  if (a % 43 === 0) return true\n  if (a % 47 === 0) return true\n  if (a % 53 === 0) return true\n  if (a % 59 === 0) return true\n  if (a % 61 === 0) return true\n  if (a % 67 === 0) return true\n  if (a % 71 === 0) return true\n  if (a % 73 === 0) return true\n  if (a % 79 === 0) return true\n  if (a % 83 === 0) return true\n  if (a % 89 === 0) return true\n  if (a % 97 === 0) return true\n  if (a % 101 === 0) return true\n  if (a % 103 === 0) return true\n  if (a % 107 === 0) return true\n  if (a % 109 === 0) return true\n  if (a % 113 === 0) return true\n  if (a % 127 === 0) return true\n  if (a % 131 === 0) return true\n  if (a % 137 === 0) return true\n  if (a % 139 === 0) return true\n  if (a % 143 === 0) return true\n  if (a % 149 === 0) return true\n  if (a % 151 === 0) return true\n  if (a % 157 === 0) return true\n  if (a % 163 === 0) return true\n  if (a % 167 === 0) return true\n  if (a % 169 === 0) return true\n  if (a % 173 === 0) return true\n  if (a % 179 === 0) return true\n  if (a % 181 === 0) return true\n  if (a % 187 === 0) return true\n  if (a % 191 === 0) return true\n  if (a % 193 === 0) return true\n  if (a % 197 === 0) return true\n  if (a % 199 === 0) return true\n  if (a % 203 === 0) return true\n  if (a % 207 === 0) return true\n  if (a % 209 === 0) return true\n  if (a % 211 === 0) return true\n  if (a % 217 === 0) return true\n  if (a % 223 === 0) return true\n  if (a % 227 === 0) return true\n  if (a % 229 === 0) return true\n  if (a % 233 === 0) return true\n  if (a % 239 === 0) return true\n  if (a % 241 === 0) return true\n  if (a % 243 === 0) return true\n  if (a % 247 === 0) return true\n  if (a % 251 === 0) return true\n  if (a % 257 === 0) return true\n  if (a % 263 === 0) return true\n  if (a % 269 === 0) return true\n  if (a % 271 === 0) return true\n  if (a % 277 === 0) return true\n  if (a % 281 === 0) return true\n  if (a % 283 === 0) return true\n  if (a % 289 === 0) return true\n  if (a % 293 === 0) return true\n  if (a % 307 === 0) return true\n  if (a % 311 === 0) return true\n  if (a % 313 === 0) return true\n  if (a % 317 === 0) return true\n  if (a % 331 === 0) return true\n  if (a % 337 === 0) return true\n  if (a % 347 === 0) return true\n  if (a % 349 === 0) return true\n  if (a % 353 === 0) return true\n  if (a % 359 === 0) return true\n  if (a % 367 === 0) return true\n  if (a % 373 === 0) return true\n  if (a % 379 === 0) return true\n  if (a % 383 === 0) return true\n  if (a % 387 === 0) return true\n  if (a % 389 === 0) return true\n  if (a % 397 === 0) return true\n  if (a % 401 === 0) return true\n  if (a % 409 === 0) return true\n  if (a % 419 === 0) return true\n  if (a % 437 === 0) return true\n  if (a % 459 === 0) return true\n  if (a % 467 === 0) return true\n  if (a % 479 === 0) return true\n  if (a % 487 === 0) return true\n  if (a % 499 === 0) return true\n  if (a % 509 === 0) return true\n  if (a % 521 === 0) return true\n  if (a % 541 === 0) return true\n  if (a % 547 === 0) return true\n  if (a % 557 === 0) return true\n  if (a % 569 === 0) return true\n  if (a % 587 === 0) return true\n  if (a % 599 === 0) return true\n  if (a % 607 === 0) return true\n  if (a % 619 === 0) return true\n  if (a % 631 === 0) return true\n  if (a % 643 === 0) return true\n  if (a % 647 === 0) return true\n  if (a % 653 === 0) return true\n  if (a % 659 === 0) return true\n  if (a % 671 === 0) return true\n  if (a % 673 === 0) return true", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexNey(\"AB\"));\nconsole.log(hexNey(\"1077E\"));\nconsole.log(hexNey(\"ABED1A33\"));\nconsole.log(hexNey(\"123456789ABCDEF0\"));\nconsole.log(hexNey(\"2020\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return `db${binary}db`;\n};\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal format.\n  The function should return a number, with each character representing a decimal number.\n  Each character in the number will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(db1111db)   # returns 15\n  binaryToDecimal(db100000db) # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal.reduce((a, b) => a + b);\n};\n\n/*\n  You will be given a number in binary form and your task is to convert it to hexadecimal format.\n  The function should return a string, with each character representing a hexadecimal number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  binaryToHexadecimal(db1111db)   # returns \"db1111db\"\n  binaryToHexadecimal(db100000db) # returns \"db100000db\"\n  */\nconst binaryToHexadecimal = (binary) => {\n  const hexadecimal = '';\n  for (let i = 0; i < binary.length; i++) {\n    hexadecimal += (binary[i] === '1')? '1' : '0';\n  }\n  return hexadecimal;\n};\n\n/*\n  You will be given a number in hexadecimal form and your task is to convert it to binary format.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  hexadecimalToBinary(db1111db)   # returns \"db1111db\"\n  hexadecimalToBinary(db100000db) # returns \"db100000db\"\n  */\nconst hexadecimalToBinary = (hexadecimal) => {\n  const binary = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    binary += (hexadecimal[i] === '1')? '1' : '0';\n  }\n  return binary;\n};\n\n/*\n  You will be given a number in hexadecimal form and your task is to convert it to decimal format.\n  The function should return a number, with each character representing a decimal number.\n  Each character in the number will be '0' or '1'.\n\n  Examples:\n  hexadecimalToDecimal(db1111db)   # returns 15\n  hexadecimalToDecimal(db100000db) # returns 32\n  */\nconst hexadecimalToDecimal = (hexadecimal) => {\n  const decimal = [];\n  for (let i = 0; i < hexadecimal.length; i++) {\n    if (hexadecimal[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(0);\n    }\n  }\n  return decimal.reduce((a, b) => a + b);\n};\n\n/*\n  You will be given a number in decimal form and your task is to convert it to hexadecimal format.\n  The function should return a string, with each character representing a hexadecimal number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  decimalToHexadecimal(15)   # returns \"db1111db\"\n  decimalToHexadecimal(32)   # returns \"db100000db\"\n  */\nconst decimalToHexadecimal = (decimal) => {\n  const hexadecimal = '';\n  for (let i = 0; i < decimal.length; i++) {\n    hexadecimal += (decimal[i] === 1)? '1' : '0';\n  }\n  return hexadecimal;\n};\n\n/*\n  You will be given a number in decimal form and your task is to convert it to binary format.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = '';\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0';\n  }\n  return binary;\n};\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal format.\n  The function should return a number, with each character representing a decimal number.\n  Each character in the number will be '0' or '1'.\n\n  Examples:\n  binaryToDecimal(db1111db)   # returns 15\n  binaryToDecimal(db100000db) # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = [];\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1);\n    } else {\n      decimal.push(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = numbers.reduce((sum, number) => sum + number, 0);\n  const product = numbers.reduce((product, number) => product * number, 1);\n  return [sum, product];\n};\n\nexport default sumOroduct;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const arr = s.split('')\n  const n = arr.length\n  const d = {}\n  for (let i = 0; i < n; i++) {\n    if (d[arr[i]]) return false\n    d[arr[i]] = true\n  }\n  return true\n}\n\nconsole.log(isHwppy('a'))\nconsole.log(isHwppy('aa'))\nconsole.log(isHwppy('abcd'))\nconsole.log(isHwppy('aabb'))\nconsole.log(isHwppy('adb'))\nconsole.log(isHwppy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const letterGrades = []\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i]\n    if (grade > 3.7) {\n      letterGrades.push('A+')\n    } else if (grade > 3.3) {\n      letterGrades.push('A')\n    } else if (grade > 3.0) {\n      letterGrades.push('A-')\n    } else if (grade > 2.7) {\n      letterGrades.push('B+')\n    } else if (grade > 2.3) {\n      letterGrades.push('B')\n    } else if (grade > 2.0) {\n      letterGrades.push('B-')\n    } else if (grade > 1.7) {\n      letterGrades.push('C+')\n    } else if (grade > 1.3) {\n      letterGrades.push('C')\n    } else if (grade > 1.0) {\n      letterGrades.push('C-')\n    } else if (grade > 0.7) {\n      letterGrades.push('D+')\n    } else if (grade > 0.0) {\n      letterGrades.push('D')\n    } else if (grade > 0.0) {\n      letterGrades.push('D-')\n    } else {\n      letterGrades.push('E')\n    }\n  }\n  return letterGrades\n}\n\nconsole.log(numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  let isPrime = true;\n  let i = 2;\n  while (i < string.length) {\n    if (string[i] === string[i + 1]) {\n      isPrime = false;\n      break;\n    }\n    i += 2;\n  }\n  return isPrime;\n};\n\nconsole.log(prileLength('Hello'));\nconsole.log(prileLength('abcdcba'));\nconsole.log(prileLength('kittens'));\nconsole.log(prileLength('orange'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i)\n  }\n  const arr2 = []\n  for (let i = 1; i <= n; i++) {\n    arr2.push(i)\n  }\n  const arr3 = []\n  for (let i = 1; i <= n; i++) {\n    arr3.push(i)\n  }\n  const arr4 = []\n  for (let i = 1; i <= n; i++) {\n    arr4.push(i)\n  }\n  const arr5 = []\n  for (let i = 1; i <= n; i++) {\n    arr5.push(i)\n  }\n  const arr6 = []\n  for (let i = 1; i <= n; i++) {\n    arr6.push(i)\n  }\n  const arr7 = []\n  for (let i = 1; i <= n; i++) {\n    arr7.push(i)\n  }\n  const arr8 = []\n  for (let i = 1; i <= n; i++) {\n    arr8.push(i)\n  }\n  const arr9 = []\n  for (let i = 1; i <= n; i++) {\n    arr9.push(i)\n  }\n  const arr10 = []\n  for (let i = 1; i <= n; i++) {\n    arr10.push(i)\n  }\n  const arr11 = []\n  for (let i = 1; i <= n; i++) {\n    arr11.push(i)\n  }\n  const arr12 = []\n  for (let i = 1; i <= n; i++) {\n    arr12.push(i)\n  }\n  const arr13 = []\n  for (let i = 1; i <= n; i++) {\n    arr13.push(i)\n  }\n  const arr14 = []\n  for (let i = 1; i <= n; i++) {\n    arr14.push(i)\n  }\n  const arr15 = []\n  for (let i = 1; i <= n; i++) {\n    arr15.push(i)\n  }\n  const arr16 = []\n  for (let i = 1; i <= n; i++) {\n    arr16.push(i)\n  }\n  const arr17 = []\n  for (let i = 1; i <= n; i++) {\n    arr17.push(i)\n  }\n  const arr18 = []\n  for (let i = 1; i <= n; i++) {\n    arr18.push(i)\n  }\n  const arr19 = []\n  for (let i = 1; i <= n; i++) {\n    arr19.push(i)\n  }\n  const arr20 = []\n  for (let i = 1; i <= n; i++) {\n    arr20.push(i)\n  }\n  const arr21 = []\n  for (let i = 1; i <= n; i++) {\n    arr21.push(i)\n  }\n  const arr22 = []\n  for (let i = 1; i <= n; i++) {\n    arr22.push(i)\n  }\n  const arr23 = []\n  for (let i = 1; i <= n; i++) {\n    arr23.push(i)\n  }\n  const arr24 = []\n  for (let i = 1; i <= n; i++) {\n    arr24.push(i)\n  }\n  const arr25 = []\n  for (let i = 1; i <= n; i++) {\n    arr25.push(i)\n  }\n  const arr26 = []\n  for (let i = 1; i <= n; i++) {\n    arr26.push(i)\n  }\n  const arr27 = []\n  for (let i = 1; i <= n; i++) {\n    arr27.push(i)\n  }\n  const arr28 = []\n  for (let i = 1; i <= n; i++) {\n    arr28.push(i)\n  }\n  const arr29 = []\n  for (let i = 1; i <= n; i++) {\n    arr29.push(i)\n  }\n  const arr30 = []\n  for (let i = 1; i <= n; i++) {\n    arr30.push(i)\n  }\n  const arr31 = []\n  for (let i = 1; i <= n; i++) {\n    arr31.push(i)\n  }\n  const arr32 = []\n  for (let i = 1; i <= n; i++) {\n    arr32.push(i)\n  }\n  const arr33 = []\n  for (let i = 1; i <= n; i++) {\n    arr33.push(i)\n  }\n  const arr34 = []\n  for (let i = 1; i <= n; i++) {\n    arr34.push(i)\n  }\n  const arr35 = []\n  for (let i = 1; i <= n; i++) {\n    arr35.push(i)\n  }\n  const arr36 = []\n  for (let i = 1; i <= n; i++) {\n    arr36.push(i)\n  }\n  const arr37 = []\n  for (let i = 1; i <= n; i++) {\n    arr37.push(i)\n  }\n  const arr38 = []\n  for (let i = 1; i <= n; i++) {\n    arr38.push(i)\n  }\n  const arr39 = []\n  for (let i = 1; i <= n; i++) {\n    arr39.push(i)\n  }\n  const arr40 = []\n  for (let i = 1; i <= n; i++) {\n    arr40.push(i)\n  }\n  const arr41 = []\n  for (let i = 1; i <= n; i++) {\n    arr41.push(i)\n  }\n  const arr42 = []\n  for (let i = 1; i <= n; i++) {\n    arr42.push(i)\n  }\n  const arr43 = []\n  for (let i = 1; i <= n; i++)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test2 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test3 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test4 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test5 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test6 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test7 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test8 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test9 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test10 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test11 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test12 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test13 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test14 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test15 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test16 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test17 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test18 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test19 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test20 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test21 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test22 = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconst test23 = (N) => {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  const words = s.split(' ');\n  let newWords = [];\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let newWord = '';\n    for (let j = 0; j < word.length; j++) {\n      let char = word[j];\n      let ascii = char.charCodeAt(0);\n      let index = Math.floor(Math.random() * (ascii - 1));\n      newWord += char.charAt(index);\n    }\n    newWords.push(newWord);\n  }\n  return newWords.join(' ');\n};\n\nconsole.log(antlShuffle('Hello World!!!'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\nconst getGow2 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\nconst getGow3 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\nconst getGow4 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\nconst getGow5 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\nconst getGow6 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\nconst getGow7 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  result.sort((a, b) => b[1] - a[1])\n  return result\n}\n\nconst getGow8 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = lst[i]\n    for (let j = 0; j < cols; j++) {\n      if (row[j] === x) {\n        result.push([i, j])\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0])\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  const sorted = array.slice(0);\n  const sum = (a, b) => a + b;\n  const sort = (a, b) => {\n    if (sum(a, b) % 2 === 1) {\n      return a;\n    } else {\n      return b;\n    }\n  };\n  sorted.sort(sort);\n  return sorted;\n};\n\nconsole.log(sorhArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc = '';\n  for (let i = 0; i < s.length; i++) {\n    enc += alphabet[(alphabet.indexOf(s[i]) + 2) % 26];\n  }\n  return enc;\n};\n\n/*\n  Create a function decypt that takes a string as an argument and\n  returns a string decypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decypt('lm') returns 'hi'\n  decypt('ewhjklnop') returns 'gf'\n  decypt('kj') returns 'et'\n  */\nconst decypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let dec = '';\n  for (let i = 0; i < s.length; i++) {\n    dec += alphabet[(alphabet.indexOf(s[i]) - 2) % 26];\n  }\n  return dec;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'jk'\n  encrypt('gf') returns 'et'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc = '';\n  for (let i = 0; i < s.length; i++) {\n    enc += alphabet[(alphabet.indexOf(s[i]) + 2) % 26];\n  }\n  return enc;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('gf') returns 'hi'\n  decrypt('jk') returns 'asdfghjkl'\n  decrypt('et') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let dec = '';\n  for (let i = 0; i < s.length; i++) {\n    dec += alphabet[(alphabet.indexOf(s[i]) - 2) % 26];\n  }\n  return dec;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'jk'\n  encrypt('gf') returns 'et'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc = '';\n  for (let i = 0; i < s.length; i++) {\n    enc += alphabet[(alphabet.indexOf(s[i]) + 2) % 26];\n  }\n  return enc;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('gf') returns 'hi'\n  decrypt('jk') returns 'asdfghjkl'\n  decrypt('et') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let dec = '';\n  for (let i = 0; i < s.length; i++) {\n    dec += alphabet[(alphabet.indexOf(s[i]) - 2) % 26];\n  }\n  return dec;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'jk'\n  encrypt('gf') returns 'et'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc = '';\n  for (let i = 0; i < s.length; i++) {\n    enc += alphabet[(alphabet.indexOf(s[i]) + 2) % 26];\n  }\n  return enc;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('gf') returns 'hi'\n  decrypt('jk') returns 'asdfghjkl'\n  decrypt('et') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let dec = '';\n  for (let i = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1)];\n};\n\nexport default rolpingMax;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let index = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      index = i\n    }\n  }\n  return lst[index]\n}\n\nconsole.log(nexhSmallest([1, 2, 3, 4, 5]))\nconsole.log(nexhSmallest([5, 1, 4, 3, 2]))\nconsole.log(nexhSmallest([1, 1]))\nconsole.log(nexhSmallest([1, 2, 3, 4, 5, 6]))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  while (i < S.length) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      j = i;\n      while (j < S.length && S[j]!== '.' && S[j]!== '?' && S[j]!== '!') {\n        j++;\n      }\n      count += j - i;\n      i = j;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nexport default anyLnt;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let message = message.toLowerCase();\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsIndex = 0;\n  let vowelsCount = 0;\n  let vowelsIndex2 = 0;\n  let vowelsCount2 = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  while (i < message.length) {\n    if (vowels.indexOf(message[i])!== -1) {\n      vowelsIndex = vowels.indexOf(message[i]);\n      vowelsCount = vowels.length;\n      vowelsIndex2 = vowelsIndex + 2;\n      vowelsCount2 = vowelsCount - 1;\n      for (j = vowelsIndex; j < vowelsIndex2; j++) {\n        message = message.replace(message[j], message[j + 1]);\n      }\n      for (k = vowelsIndex2; k < vowelsCount2; k++) {\n        message = message.replace(message[k], message[k + 1]);\n      }\n    } else {\n      message = message.replace(message[i], message[i + 1]);\n    }\n    i++;\n  }\n  return message;\n};\n\nconsole.log(enclde('This is a message'));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let prime = 1;\n    while (num > 0) {\n      if (num % prime === 0) {\n        num = num / prime;\n        if (num > max) {\n          max = num;\n        }\n      } else {\n        prime++;\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(skjnasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjnasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjnasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjnasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjnasdkd([0,81,12,3,1,21]));\nconsole.log(skjnasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key]) || upperCaseKeys.every(key => dict[key]);\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmpty = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key]) || upperCaseKeys.every(key => dict[key]);\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key]) || upperCaseKeys.every(key => dict[key]);\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmptyNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key]) || upperCaseKeys.every(key => dict[key]);\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoEmptyNoEmptyNoEmptyNoEmpty = (dict) => {\n  const keys = Object.keys(dict);\n  const lowerCaseKeys = keys.map(key => key.toLowerCase());\n  const upperCaseKeys = keys.map(key => key.toUpperCase());\n  return lowerCaseKeys.every(key => dict[key]) || upperCaseKeys.every(key => dict[key]);\n}\n\nmodule.exports = {\n  chefkDictCase,\n  chefkDictCaseNoEmpty,\n  chefkDictCaseNoEmptyNoEmpty,\n  chefkDictCaseNoEmptyNoEmptyNoEmpty,\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  const result = []\n  for (let i = 0; i < n; i++) {\n    let index = 0\n    while (primes[index] <= i) {\n      index++\n    }\n    result.push(primes[index])\n  }\n  return result\n}\n\nconsole.log(coujtUpTo(5))\nconsole.log(coujtUpTo(11))\nconsole.log(coujtUpTo(0))\nconsole.log(coujtUpTo(20))\nconsole.log(coujtUpTo(1))\nconsole.log(coujtUpTo(18))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  let a_digits = a.toString().split('').map(digit => parseInt(digit));\n  let b_digits = b.toString().split('').map(digit => parseInt(digit));\n  let product = 1;\n  for (let i = 0; i < a_digits.length; i++) {\n    for (let j = 0; j < b_digits.length; j++) {\n      product *= a_digits[i] * b_digits[j];\n    }\n  }\n  return product;\n};\n\n/*\n  Complete the function that takes two strings and returns the product of their digits.\n  Assume the input is always valid.\n  Examples:\n  multiply('abcd', 'efgh') should return 'abcdefgh'.\n  multiply('abcd', 'efg') should return 'abcdefg'.\n  multiply('abcd', 'ef') should return 'abcdef'.\n  multiply('abcd', 'e') should return 'abcde'.\n  multiply('abcd', 'a') should return 'abcda'.\n  multiply('abcd', '1') should return 'abc1'.\n  multiply('abcd', '0') should return 'abcd0'.\n  multiply('abcd', 'z') should return 'abcdz'.\n  multiply('abcd', '0') should return 'abcd0'.\n  multiply('abcd', '9') should return 'abcd9'.\n  multiply('abcd', '8') should return 'abcd8'.\n  multiply('abcd', '7') should return 'abcd7'.\n  multiply('abcd', '6') should return 'abcd6'.\n  multiply('abcd', '5') should return 'abcd5'.\n  multiply('abcd', '4') should return 'abcd4'.\n  multiply('abcd', '3') should return 'abcd3'.\n  multiply('abcd', '2') should return 'abcd2'.\n  multiply('abcd', '1') should return 'abcd1'.\n  multiply('abcd', '0') should return 'abcd0'.\n  multiply('abcd', 'z') should return 'abcdz'.\n  multiply('abcd', '9') should return 'abcd9'.\n  multiply('abcd', '8') should return 'abcd8'.\n  multiply('abcd', '7') should return 'abcd7'.\n  multiply('abcd', '6') should return 'abcd6'.\n  multiply('abcd', '5') should return 'abcd5'.\n  multiply('abcd', '4') should return 'abcd4'.\n  multiply('abcd', '3') should return 'abcd3'.\n  multiply('abcd', '2') should return 'abcd2'.\n  multiply('abcd', '1') should return 'abcd1'.\n  multiply('abcd', '0') should return 'abcd0'.\n  multiply('abcd', 'z') should return 'abcdz'.\n  multiply('abcd', '9') should return 'abcd9'.\n  multiply('abcd', '8') should return 'abcd8'.\n  multiply('abcd', '7') should return 'abcd7'.\n  multiply('abcd', '6') should return 'abcd6'.\n  multiply('abcd', '5') should return 'abcd5'.\n  multiply('abcd', '4') should return 'abcd4'.\n  multiply('abcd', '3') should return 'abcd3'.\n  multiply('abcd', '2') should return 'abcd2'.\n  multiply('abcd', '1') should return 'abcd1'.\n  multiply('abcd', '0') should return 'abcd0'.\n  multiply('abcd', 'z') should return 'abcdz'.\n  multiply('abcd', '9') should return 'abcd9'.\n  multiply('abcd', '8') should return 'abcd8'.\n  multiply('abcd', '7') should return 'abcd7'.\n  multiply('abcd', '6') should return 'abcd6'.\n  multiply('abcd', '5') should return 'abcd5'.\n  multiply('abcd', '4') should return 'abcd4'.\n  multiply('abcd', '3') should return 'abcd3'.\n  multiply('abcd', '2') should return 'abcd2'.\n  multiply('abcd', '1') should return 'abcd1'.\n  multiply('abcd', '0') should return 'abcd0'.\n  multiply('abcd', 'z') should return 'abcdz'.\n  multiply('abcd', '9') should return 'abcd9'.\n  multiply('abcd', '8') should return 'abcd8'.\n  multiply('abcd', '7') should return 'abcd7'.\n  multiply('abcd', '6') should return 'abcd6'.\n  multiply('abcd', '5') should return 'abcd5'.\n  multiply('abcd', '4') should return 'abcd4'.\n  multiply('abcd', '3') should return 'abcd3'.\n  multiply('abcd', '2') should return 'abcd2'.\n  multiply('abcd', '1') should return 'abcd1'.\n  multiply('abcd', '0') should return 'abcd0'.\n  multiply('abcd', 'z') should return 'abcdz'.\n  multiply('abcd', '9') should return 'abcd9'.\n  multiply('abcd', '8') should return 'abcd8'.\n  multiply", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 1\n  */\nconst coujtLower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  coujtUpper,\n  coujtLower\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const num = parseFloat(value);\n  const intNum = Math.floor(num);\n  const fracNum = num - intNum;\n  const intNumStr = intNum.toString();\n  const fracNumStr = fracNum.toString();\n  const intNumLen = intNumStr.length;\n  const fracNumLen = fracNumStr.length;\n  const intFracDiff = intNumLen - fracNumLen;\n  const fracNumStr = fracNumStr.substr(0, fracNumLen);\n  const intNumStr = intNumStr.substr(0, intNumLen);\n  const intFracDiff = intNumLen - fracNumLen;\n  const intNum = parseInt(intNumStr, 10);\n  const fracNum = parseInt(fracNumStr, 10);\n  if (intFracDiff > fracNum) {\n    return intNum + 1;\n  } else if (intFracDiff < fracNum) {\n    return intNum - 1;\n  } else {\n    return intNum;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const num = parseFloat(value);\n  const intNum = Math.floor(num);\n  const fracNum = num - intNum;\n  const intNumStr = intNum.toString();\n  const fracNumStr = fracNum.toString();\n  const intNumLen = intNumStr.length;\n  const fracNumLen = fracNumStr.length;\n  const intFracDiff = intNumLen - fracNumLen;\n  const fracNumStr = fracNumStr.substr(0, fracNumLen);\n  const intNumStr = intNumStr.substr(0, intNumLen);\n  const intFracDiff = intNumLen - fracNumLen;\n  const intNum = parseInt(intNumStr, 10);\n  const fracNum = parseInt(fracNumStr, 10);\n  if (intFracDiff > fracNum) {\n    return intNum + 1;\n  } else if (intFracDiff < fracNum) {\n    return intNum - 1;\n  } else {\n    return intNum;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const num = parseFloat(value);\n  const intNum = Math.floor(num);\n  const fracNum = num - intNum;\n  const intNumStr = intNum.toString();\n  const fracNumStr = fracNum.toString();\n  const intNumLen = intNumStr.length;\n  const fracNumLen = fracNumStr.length;\n  const intFracDiff = intNumLen - fracNumLen;\n  const fracNumStr = fracNumStr.substr(0, fracNumLen);\n  const intNumStr = intNumStr.substr(0, intNumLen);\n  const intFracDiff = intNumLen - fracNumLen;\n  const intNum = parseInt(intNumStr, 10);\n  const fracNum = parseInt(fracNumStr, 10);\n  if (intFracDiff > fracNum) {\n    return intNum + 1;\n  } else if (intFracDiff < fracNum) {\n    return intNum - 1;\n  } else {\n    return intNum;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  const num = parseFloat(value);\n  const intNum = Math.floor(num);\n  const fracNum = num - intNum;\n  const intNumStr = intNum.toString();\n  const fracNumStr = fracNum.toString();\n  const intNumLen = intNumStr.length;\n", "passed": 0, "run_status": 2}
