{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[len - 1])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  >>> largest_number([1, 2, 3])\n  3\n  >>> largest_number([1, 2, 3, 4])\n  4\n  >>> largest_number([1, 2, 3, 4, 5])\n  5\n  >>> largest_number([1, 2, 3, 4, 5, 6])\n  6\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8])\n  8\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  11\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  13\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  14\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  15\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  17\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  18\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  19\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  21\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  22\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  23\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  26\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  30\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  31\n  >>> largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const stack = [];\n  const groups = [];\n  let current_group = '';\n  paren_string.split('').forEach((char) => {\n    if (char === '(') {\n      stack.push(char);\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        groups.push(current_group);\n        current_group = '';\n      } else {\n        stack.pop();\n      }\n    } else {\n      current_group += char;\n    }\n  });\n  if (stack.length!== 0) {\n    groups.push(current_group);\n  }\n  return groups;\n};\n\nmodule.exports = separate_paren_groups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  if (decimal < 0.5) {\n    return integer;\n  } else {\n    return integer + 1;\n  }\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_integer = (number) => {\n  let integer = Math.floor(number);\n  return integer;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_integer(3.5)\n  3\n  */\nconst truncate_decimal = (number) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal(3.5)\n  3.5\n  */\nconst truncate_decimal_with_precision = (number, precision) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal_with_precision(3.5, 2)\n  3.5\n  */\nconst truncate_decimal_with_precision_with_precision = (number, precision) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal_with_precision_with_precision(3.5, 2)\n  3.5\n  */\nconst truncate_decimal_with_precision_with_precision_with_precision = (number, precision) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal_with_precision_with_precision_with_precision(3.5, 2)\n  3.5\n  */\nconst truncate_decimal_with_precision_with_precision_with_precision_with_precision = (number, precision) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal_with_precision_with_precision_with_precision_with_precision(3.5, 2)\n  3.5\n  */\nconst truncate_decimal_with_precision_with_precision_with_precision_with_precision = (number, precision) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal_with_precision_with_precision_with_precision_with_precision(3.5, 2)\n  3.5\n  */\nconst truncate_decimal_with_precision_with_precision_with_precision_with_precision_with_precision = (number, precision) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal_with_precision_with_precision_with_precision_with_precision_with_precision(3.5, 2)\n  3.5\n  */\nconst truncate_decimal_with_precision_with_precision_with_precision_with_precision_with_precision = (number, precision) => {\n  let integer = Math.floor(number);\n  let decimal = number - integer;\n  return integer + decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_decimal_with_precision_with_precision_with_precision_with_precision_with_precision(3.5, 2)\n  3.5\n  */\nconst truncate_decimal_with_precision_with_precision_with_"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  const balance = operations.reduce((acc, curr) => acc + curr, 0)\n  return balance < 0\n}\n\nexport default below_zero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.abs(x - mean);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_squared = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_squared_biased = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2) / (numbers.length - 1);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_biased = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2) / (numbers.length);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_biased_squared = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2) / (numbers.length);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_biased_squared_biased = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2) / (numbers.length - 1);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_biased_biased = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2) / (numbers.length);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_biased_biased_squared = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2) / (numbers.length - 1);\n  };\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard deviation is the square root of the average of the squared\n  differences between each element and the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation_biased_biased_biased = (numbers) => {\n  const mean = mean(numbers);\n  return (x) => {\n    const diff = x - mean;\n    return Math.pow(x - mean, 2) / (numbers.length);\n  };\n};\n\n/*\n  For a given list"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length) {\n    if (j === 0) {\n      result.push(numbers[i]);\n      j++;\n    } else {\n      result.push(delimeter);\n      result.push(numbers[i]);\n      j = 0;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse(["}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const stack = [paren_string];\n  const level = 0;\n  const max_level = 0;\n  const result = [];\n\n  while (stack.length > 0) {\n    const current_level = stack.length - 1;\n    const current_string = stack[current_level];\n    const next_string = stack[current_level + 1];\n\n    if (current_string === '(') {\n      stack.push(next_string);\n      level++;\n    } else if (current_string === ')') {\n      stack.pop();\n      level--;\n      if (level === max_level) {\n        result.push(level);\n      }\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = parse_nested_parens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers = (numbers) => {\n  return numbers.map(num => num * num);\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_2 = (numbers) => {\n  return numbers.reduce((acc, num) => acc.concat(num * num), []);\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_3 = (numbers) => {\n  return [...new Set(numbers.map(num => num * num))];\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_4 = (numbers) => {\n  return [...new Set(numbers.reduce((acc, num) => acc.concat(num * num), []))];\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_5 = (numbers) => {\n  return [...new Set(numbers.reduce((acc, num) => acc.concat(num), []))];\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_6 = (numbers) => {\n  return [...new Set(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc.concat(num), [])))]\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_7 = (numbers) => {\n  return [...new Set(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc.concat(num), []))))];\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_8 = (numbers) => {\n  return [...new Set(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc.concat(num), [])))))]\n};\n\n/*\n  Given a list of numbers, return a list of the numbers squared.\n  >>> square_numbers([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square_numbers([])\n  []\n  >>> square_numbers([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  */\nconst square_numbers_9 = (numbers) => {\n  return [...new Set(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc.concat(num), []).concat(numbers.reduce((acc, num) => acc."}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const max_element = (numbers, index) => {\n    if (index === numbers.length - 1) {\n      return numbers[index];\n    }\n    return Math.max(numbers[index + 1], max_element(numbers, index + 1));\n  };\n  return numbers.map(max_element);\n};\n\nmodule.exports = rolling_max;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i);\n  postfix = string.substring(i, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, j + 1);\n  postfix = string.substring(j + 1, i + 1);\n  return postfix + makePalindrome(prefix);\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i + 1);\n  postfix = string.substring(i + 1, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, j + 1);\n  postfix = string.substring(j + 1, i + 1);\n  return postfix + makePalindrome(prefix);\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes after the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let postfix = '';\n  let i = 0;\n  let j = string.length - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  prefix = string.substring(0, i + 1);\n  postfix = string.substring(i + 1, j + 1);\n  return prefix + makePalindrome(postfix);\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a supplied"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given two strings a and b, return the longest common prefix of these strings.\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc', 'abcd')\n  'ab'\n  >>> string_common_prefix('abc"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a === 0) return b;\n  if (b === 0) return a;\n  if (a === 1) return b;\n  if (b === 1) return a;\n  if (a === -1) return b;\n  if (b === -1) return a;\n  if (a === 2) return b;\n  if (b === 2) return a;\n  if (a === -2) return b;\n  if (b === -2) return a;\n  if (a === 3) return b;\n  if (b === 3) return a;\n  if (a === -3) return b;\n  if (b === -3) return a;\n  if (a === 4) return b;\n  if (b === 4) return a;\n  if (a === -4) return b;\n  if (b === -4) return a;\n  if (a === 5) return b;\n  if (b === 5) return a;\n  if (a === -5) return b;\n  if (b === -5) return a;\n  if (a === 6) return b;\n  if (b === 6) return a;\n  if (a === -6) return b;\n  if (b === -6) return a;\n  if (a === 7) return b;\n  if (b === 7) return a;\n  if (a === -7) return b;\n  if (b === -7) return a;\n  if (a === 8) return b;\n  if (b === 8) return a;\n  if (a === -8) return b;\n  if (b === -8) return a;\n  if (a === 9) return b;\n  if (b === 9) return a;\n  if (a === -9) return b;\n  if (b === -9) return a;\n  if (a === 10) return b;\n  if (b === 10) return a;\n  if (a === -10) return b;\n  if (b === -10) return a;\n  if (a === 11) return b;\n  if (b === 11) return a;\n  if (a === -11) return b;\n  if (b === -11) return a;\n  if (a === 12) return b;\n  if (b === 12) return a;\n  if (a === -12) return b;\n  if (b === -12) return a;\n  if (a === 13) return b;\n  if (b === 13) return a;\n  if (a === -13) return b;\n  if (b === -13) return a;\n  if (a === 14) return b;\n  if (b === 14) return a;\n  if (a === -14) return b;\n  if (b === -14) return a;\n  if (a === 15) return b;\n  if (b === 15) return a;\n  if (a === -15) return b;\n  if (b === -15) return a;\n  if (a === 16) return b;\n  if (b === 16) return a;\n  if (a === -16) return b;\n  if (b === -16) return a;\n  if (a === 17) return b;\n  if (b === 17) return a;\n  if (a === -17) return b;\n  if (b === -17) return a;\n  if (a === 18) return b;\n  if (b === 18) return a;\n  if (a === -18) return b;\n  if (b === -18) return a;\n  if (a === 19) return b;\n  if (b === 19) return a;\n  if (a === -19) return b;\n  if (b === -19) return a;\n  if (a === 20) return b;\n  if (b === 20) return a;\n  if (a === -20) return b;\n  if (b === -20) return a;\n  if (a === 21) return b;\n  if (b === 21) return a;\n  if (a === -21) return b;\n  if (b === -21) return a;\n  if (a === 22) return b;\n  if (b === 22) return a;\n  if (a === -22) return b;\n  if (b === -22) return a;\n  if (a === 23) return b;\n  if (b === 23) return a;\n  if (a === -23) return b;\n  if (b === -23) return a;\n  if (a === 24) return b;\n  if (b === 24) return a;\n  if (a === -24) return b;\n  if (b === -24) return a;\n  if (a === 25) return b;\n  if (b === 25) return a;\n  if (a === -25) return b;\n  if (b === -25) return a;\n  if (a === 26) return b;\n  if (b === 26) return a;\n  if (a === -26) return b;\n  if (b === -26) return a;\n  if (a === 27) return b;\n  if (b === 27) return a;\n  if (a === -27) return b;\n  if (b === -27) return a;\n  if (a === 28) return b;\n  if (b === 28) return a;\n  if (a === -28) return b;\n  if (b === -28) return a;\n  if (a === 29) return b;\n  if (b === 29) return a;\n  if (a === -29) return b;\n  if (b === -29) return a;\n  if (a === 30) return b;\n  if (b === 30) return a;\n  if (a === -30) return b;\n  if (b === -30) return a;\n  if (a === 31) return b;\n  if (b === 31) return a;\n  if (a === -31) return b;\n  if (b === -31) return a;\n  if (a === 32) return b;\n  if (b === 32"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substr(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['b', 'c', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const suffix = string.substr(length - i - 1)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i + 1)\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations_2 = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i, length - i)\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations_3 = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i, length - i) + string.substr(length - i)\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations_4 = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i, length - i) + string.substr(length - i, i)\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations_5 = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i, length - i) + string.substr(length - i, i) + string.substr(length - i - 1)\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations_6 = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i, length - i) + string.substr(length - i, i) + string.substr(length - i - 1) + string.substr(length - i - 2)\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations_7 = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i, length - i) + string.substr(length - i, i) + string.substr(length - i - 1) + string.substr(length - i - 2) + string.substr(length - i - 3)\n    permutations.push(permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n  */\nconst all_permutations_8 = (string) => {\n  const permutations = []\n  const length = string.length\n  for (let i = 0; i < length; i++) {\n    const permutation = string.substr(0, i) + string.substr(i, length - i) + string.substr(length - i, i) + string.substr(length - i - 1) + string.substr(length - i - 2) + string.substr(length - i -"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_reverse = (n) => {\n  let s = '';\n  for (let i = n - 1; i >= 0; i--) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat = (n, r) => {\n  let s = '';\n  for (let i = 0; i < r; i++) {\n    s += string_sequence(n);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence(n);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence_repeat_reverse(n, r);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence_repeat_reverse_repeat(n, r);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat_reverse_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence_repeat_reverse_repeat_reverse(n, r);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat_reverse_reverse_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence_repeat_reverse_repeat_reverse(n, r);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat_reverse_reverse_reverse_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence_repeat_reverse_repeat_reverse_reverse(n, r);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat_reverse_reverse_reverse_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence_repeat_reverse_repeat_reverse_reverse(n, r);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat_reverse_reverse_reverse_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_sequence_repeat_reverse_repeat_reverse_reverse(n, r);\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence_repeat_reverse_repeat_reverse_reverse_reverse_reverse = (n, r) => {\n  let s = '';\n  for (let i = r - 1; i >= 0; i--) {\n    s += string_"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char.toLowerCase())) {\n      char_set.delete(char.toLowerCase());\n    } else {\n      char_set.add(char.toLowerCase());\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_2 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char)) {\n      char_set.delete(char);\n    } else {\n      char_set.add(char);\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_3 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char.toUpperCase())) {\n      char_set.delete(char.toUpperCase());\n    } else {\n      char_set.add(char.toUpperCase());\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_4 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char.toLowerCase())) {\n      char_set.delete(char.toLowerCase());\n    } else {\n      char_set.add(char.toLowerCase());\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_5 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char.toUpperCase())) {\n      char_set.delete(char.toUpperCase());\n    } else {\n      char_set.add(char.toUpperCase());\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_6 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char.toLowerCase())) {\n      char_set.delete(char.toLowerCase());\n    } else {\n      char_set.add(char.toLowerCase());\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_7 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char.toUpperCase())) {\n      char_set.delete(char.toUpperCase());\n    } else {\n      char_set.add(char.toUpperCase());\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_8 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char.toLowerCase())) {\n      char_set.delete(char.toLowerCase());\n    } else {\n      char_set.add(char.toLowerCase());\n    }\n  }\n  return char_set.size;\n};\n\n/*\n  Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(note));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(note));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(note));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '.') {\n      beats.push(1);\n    } else if (note === '|') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(note));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note === 'o') {\n      beats.push(4);\n    } else if (note === 'o|') {\n      beats.push(2);\n    } else if (note === '"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i + j] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given substring.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('aaa', 'a')\n  'aaa'\n  >>> longest_substring('aaaa', 'aa')\n  'aaaa'\n  >>> longest_substring('aaaaa', 'aa')\n  'aaaaa'\n  */\nconst longest_substring = (string, substring) => {\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring[j]) {\n      j++;\n    }\n    if (j === substring.length) {\n      count = count + 1;\n      i = i + count;\n      j = 0;\n    }\n    else {\n      i++;\n    }\n  }\n  return string.substring(0, count);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given substring.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('aaa', 'a')\n  'aaa'\n  >>> longest_substring('aaaa', 'aa')\n  'aaaa'\n  >>> longest_substring('aaaaa', 'aa')\n  'aaaaa'\n  */\nconst longest_substring = (string, substring) => {\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring[j]) {\n      j++;\n    }\n    if (j === substring.length) {\n      count = count + 1;\n      i = i + count;\n      j = 0;\n    }\n    else {\n      i++;\n    }\n  }\n  return string.substring(0, count);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given substring.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('aaa', 'a')\n  'aaa'\n  >>> longest_substring('aaaa', 'aa')\n  'aaaa'\n  >>> longest_substring('aaaaa', 'aa')\n  'aaaaa'\n  */\nconst longest_substring = (string, substring) => {\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring[j]) {\n      j++;\n    }\n    if (j === substring.length) {\n      count = count + 1;\n      i = i + count;\n      j = 0;\n    }\n    else {\n      i++;\n    }\n  }\n  return string.substring(0, count);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given substring.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('aaa', 'a')\n  'aaa'\n  >>> longest_substring('aaaa', 'aa')\n  'aaaa'\n  >>> longest_substring('aaaaa', 'aa')\n  'aaaaa'\n  */\nconst longest_substring = (string, substring) => {\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring[j]) {\n      j++;\n    }\n    if (j === substring.length) {\n      count = count + 1;\n      i = i + count;\n      j = 0;\n    }\n    else {\n      i++;\n    }\n  }\n  return string.substring(0, count);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given substring.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('aaa', 'a')\n  'aaa'\n  >>> longest_substring('aaaa', 'aa')\n  'aaaa'\n  >>> longest_substring('aaaaa', 'aa')\n  'aaaaa'\n  */\nconst longest_substring = (string, substring) => {\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring[j]) {\n      j++;\n    }\n    if (j === substring.length) {\n      count = count + 1;\n      i = i + count;\n      j = 0;\n    }\n    else {\n      i++;\n    }\n  }\n  return string.substring(0, count);\n};\n\n/*\n  Find the longest substring in the original string that contains all the characters in the given substring.\n  >>> longest_substring('', 'a')\n  ''\n  >>> longest_substring('aaa', 'a')\n  'aaa'\n  >>> longest_substring('aaaa', 'aa')\n  'aaaa'\n  >>> longest_substring('aaaaa', 'aa')\n  'aaaaa'\n  */\nconst longest_substring = (string, substring) => {\n  let i = 0;\n  let j = 0;\n  let count = 0;\n  while (i < string.length) {\n    while (j < substring.length && string[i] === substring"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const numbers_sorted = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    numbers_sorted.push(parseInt(numbers_array[i]))\n  }\n  numbers_sorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbers_sorted.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sort_numbers('one two three')\n  'three two one'\n  */\nconst sort_numbers_reverse = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const numbers_sorted = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    numbers_sorted.push(parseInt(numbers_array[i]))\n  }\n  numbers_sorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbers_sorted.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers_reverse('one two three')\n  'three two one'\n  */\nconst sort_numbers_reverse_2 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const numbers_sorted = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    numbers_sorted.push(parseInt(numbers_array[i]))\n  }\n  numbers_sorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbers_sorted.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sort_numbers_reverse_2('one two three')\n  'three two one'\n  */\nconst sort_numbers_reverse_3 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const numbers_sorted = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    numbers_sorted.push(parseInt(numbers_array[i]))\n  }\n  numbers_sorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbers_sorted.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers_reverse_3('one two three')\n  'three two one'\n  */\nconst sort_numbers_reverse_4 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const numbers_sorted = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    numbers_sorted.push(parseInt(numbers_array[i]))\n  }\n  numbers_sorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbers_sorted.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sort_numbers_reverse_4('one two three')\n  'three two one'\n  */\nconst sort_numbers_reverse_5 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const numbers_sorted = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    numbers_sorted.push(parseInt(numbers_array[i]))\n  }\n  numbers_sorted.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return numbers_sorted.join(' ')\n}\n\n/*\n  Input is a string of numbers from 'zero' to 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers_reverse_5('one two three')\n  'three two one'\n  */\nconst sort_numbers_reverse_6 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const numbers_sorted = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    numbers_sorted.push(parseInt(numbers_array[i]))\n  }\n  numbers_sorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return numbers_sorted.join(' ')\n}\n\n/*\n  Input is a string of"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const sorted_numbers = sort_numbers(numbers);\n  const closest_elements = [sorted_numbers[0], sorted_numbers[1]];\n  const closest_difference = Math.abs(closest_elements[0] - closest_elements[1]);\n  for (let i = 2; i < sorted_numbers.length; i++) {\n    const difference = Math.abs(sorted_numbers[i] - closest_elements[0]);\n    if (difference < closest_difference) {\n      closest_difference = difference;\n      closest_elements[0] = sorted_numbers[i];\n    }\n    difference = Math.abs(sorted_numbers[i] - closest_elements[1]);\n    if (difference < closest_difference) {\n      closest_difference = difference;\n      closest_elements[1] = sorted_numbers[i];\n    }\n  }\n  return closest_elements;\n};\n\n/*\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements_2 = (numbers) => {\n  const sorted_numbers = sort_numbers(numbers);\n  const closest_elements = [sorted_numbers[0], sorted_numbers[1]];\n  const closest_difference = Math.abs(closest_elements[0] - closest_elements[1]);\n  for (let i = 2; i < sorted_numbers.length; i++) {\n    const difference = Math.abs(sorted_numbers[i] - closest_elements[0]);\n    if (difference < closest_difference) {\n      closest_difference = difference;\n      closest_elements[0] = sorted_numbers[i];\n    }\n    difference = Math.abs(sorted_numbers[i] - closest_elements[1]);\n    if (difference < closest_difference) {\n      closest_difference = difference;\n      closest_elements[1] = sorted_numbers[i];\n    }\n  }\n  return closest_elements;\n};\n\nconst sort_numbers = (numbers) => {\n  return numbers.sort((a, b) => {\n    return a - b;\n  });\n};\n\nmodule.exports = {\n  find_closest_elements,\n  find_closest_elements_2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  const scale = 1 / range\n  return [\n    (n - min) * scale,\n    (n - min) * scale + scale\n  ]\n}\n\n/* Given a list of numbers, return a list of their logarithms */\nconst log = (numbers) => {\n  return numbers.map(x => Math.log(x))\n}\n\n/* Given a list of numbers, return a list of their exponents */\nconst exp = (numbers) => {\n  return numbers.map(x => Math.exp(x))\n}\n\n/* Given a list of numbers, return a list of their square roots */\nconst sqrt = (numbers) => {\n  return numbers.map(x => Math.sqrt(x))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power = (numbers) => {\n  return numbers.map(x => Math.pow(x, 1 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_2 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 2 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_3 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 3 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_4 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 4 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_5 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 5 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_6 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 6 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_7 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 7 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_8 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 8 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_9 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 9 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_10 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 10 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_11 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 11 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_12 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 12 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_13 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 13 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_14 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 14 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_15 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 15 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_16 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 16 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_17 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 17 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_18 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 18 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_19 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 19 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_20 = (numbers) => {\n  return numbers.map(x => Math.pow(x, 20 / 3))\n}\n\n/* Given a list of numbers, return a list of their cube roots */\nconst cube_root_to_power_21 = (numbers"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_booleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_dicts = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object' && value!== null &&!Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_lists = (values) => {\n  return values.filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_numbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_numbers_with_strings = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  }).filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings_with_numbers = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  }).filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings_with_numbers_and_booleans = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  }).filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  }).filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings_with_numbers_and_booleans_and_dicts = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  }).filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  }).filter((value) => {\n    return typeof value === 'boolean';\n  }).filter((value) => {\n    return typeof value === 'object' && value!== null &&!Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings_with_numbers_and_booleans_and_lists = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  }).filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  }).filter((value) => {\n    return typeof value === 'boolean';\n  }).filter((value) => {\n    return Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings_with_numbers_and_booleans_and_lists_and_dicts = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  }).filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  }).filter((value) => {\n    return typeof value === 'boolean';\n  }).filter((value) => {\n    return Array.isArray(value);\n  }).filter((value) => {\n    return typeof value === 'object' && value!== null &&!Array.isArray(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings_with_numbers_and_booleans_and_lists_and_dicts_and_integers = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  }).filter((value) => {\n    return typeof value === 'number' &&!isNaN(value);\n  }).filter((value) => {\n    return typeof value === 'boolean';\n  })."}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return i\n}\n\n/* Return index of first occurrence of character in string\n  >>> strindex('')\n  -1\n  >>> strindex('abc')\n  0\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'c')\n  2\n  >>> strindex('abc', 'd')\n  -1\n  */\nconst strindex = (string, character) => {\n  let i = 0\n  while (string.charAt(i)!== character) {\n    i++\n  }\n  return i\n}\n\n/* Return index of last occurrence of character in string\n  >>> strlastindex('')\n  -1\n  >>> strlastindex('abc')\n  2\n  >>> strlastindex('abc', 'a')\n  0\n  >>> strlastindex('abc', 'b')\n  1\n  >>> strlastindex('abc', 'c')\n  2\n  >>> strlastindex('abc', 'd')\n  -1\n  */\nconst strlastindex = (string, character) => {\n  let i = 0\n  while (string.charAt(i) === character) {\n    i++\n  }\n  return i\n}\n\n/* Return substring of given string\n  >>> strsub('')\n  ''\n  >>> strsub('abc')\n  'abc'\n  >>> strsub('abc', 0)\n  ''\n  >>> strsub('abc', 1)\n  'b'\n  >>> strsub('abc', 2)\n  'c'\n  >>> strsub('abc', 3)\n  ''\n  >>> strsub('abc', 4)\n  ''\n  */\nconst strsub = (string, start) => {\n  let i = start\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return string.slice(start, i)\n}\n\n/* Return substring of given string\n  >>> strsubfrom('')\n  ''\n  >>> strsubfrom('abc')\n  'abc'\n  >>> strsubfrom('abc', 0)\n  ''\n  >>> strsubfrom('abc', 1)\n  'b'\n  >>> strsubfrom('abc', 2)\n  'c'\n  >>> strsubfrom('abc', 3)\n  ''\n  >>> strsubfrom('abc', 4)\n  ''\n  */\nconst strsubfrom = (string, start) => {\n  let i = start\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return string.slice(start, i)\n}\n\n/* Return substring of given string\n  >>> strsubto('')\n  ''\n  >>> strsubto('abc')\n  'abc'\n  >>> strsubto('abc', 0)\n  ''\n  >>> strsubto('abc', 1)\n  'b'\n  >>> strsubto('abc', 2)\n  'c'\n  >>> strsubto('abc', 3)\n  ''\n  >>> strsubto('abc', 4)\n  ''\n  */\nconst strsubto = (string, start) => {\n  let i = start\n  while (string.charAt(i)!== 0) {\n    i++\n  }\n  return string.slice(i, string.length)\n}\n\n/* Return string with all occurrences of character replaced by replacement\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc')\n  'abc'\n  >>> strreplace('abc', 'a')\n  'abc'\n  >>> strreplace('abc', 'b')\n  'abc'\n  >>> strreplace('abc', 'c')\n  'abc'\n  >>> strreplace('abc', 'd')\n  'abc'\n  */\nconst strreplace = (string, character, replacement) => {\n  let i = 0\n  while (string.charAt(i) === character) {\n    string = string.slice(0, i) + replacement + string.slice(i + 1)\n    i++\n  }\n  return string\n}\n\n/* Return string with all occurrences of character replaced by replacement\n  >>> strreplacefrom('')\n  ''\n  >>> strreplacefrom('abc')\n  'abc'\n  >>> strreplacefrom('abc', 'a')\n  'abc'\n  >>> strreplacefrom('abc', 'b')\n  'abc'\n  >>> strreplacefrom('abc', 'c')\n  'abc'\n  >>> strreplacefrom('abc', 'd')\n  'abc'\n  */\nconst strreplacefrom = (string, character, replacement) => {\n  let i = 0\n  while (string.charAt(i) === character) {\n    string = string.slice(0, i) + replacement + string.slice(i + 1)\n    i++\n  }\n  return string\n}\n\n/* Return string with all occurrences of character replaced by replacement\n  >>> strreplaceto('')\n  ''\n  >>> strreplaceto('abc')\n  'abc'\n  >>> strreplaceto('abc', 'a')\n  'abc'\n  >>> strreplaceto('abc', 'b')\n  'abc'\n  >>> strreplaceto('abc', 'c')\n  'abc'\n  >>> strreplaceto('abc', 'd')\n  'abc'\n  */\nconst strreplaceto = (string, character, replacement) => {\n  let i = 0\n  while (string.charAt(i) === character) {\n    string = string.slice(0, i) + replacement + string.slice(i + 1)\n    i++\n  }\n  return string\n}\n\n/* Return string with all occurrences of character replaced by replacement\n  >>> strreplace('')\n  ''\n  >>> strreplace('abc')\n  'abc'\n  >>> strreplace('abc', 'a')\n  'abc'\n  >>> strreplace('abc', 'b')\n  'abc'\n  >>> strreplace('abc', 'c')\n  'abc'\n  >>> strreplace('abc', 'd')\n  'abc'\n  */\nconst strreplace = (string, character, replacement) => {\n  let i = 0\n  while (string.charAt(i) ==="}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let result = 1;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor(15)\n  10\n  */\nconst largest_divisor_plus = (n) => {\n  let result = n;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus(15)\n  20\n  */\nconst largest_divisor_plus_two = (n) => {\n  let result = n + 1;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_two(15)\n  20\n  */\nconst largest_divisor_plus_three = (n) => {\n  let result = n + 2;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_three(15)\n  20\n  */\nconst largest_divisor_plus_four = (n) => {\n  let result = n + 3;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_four(15)\n  20\n  */\nconst largest_divisor_plus_five = (n) => {\n  let result = n + 4;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_five(15)\n  20\n  */\nconst largest_divisor_plus_six = (n) => {\n  let result = n + 5;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_six(15)\n  20\n  */\nconst largest_divisor_plus_seven = (n) => {\n  let result = n + 6;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_seven(15)\n  20\n  */\nconst largest_divisor_plus_eight = (n) => {\n  let result = n + 7;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_eight(15)\n  20\n  */\nconst largest_divisor_plus_nine = (n) => {\n  let result = n + 8;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_nine(15)\n  20\n  */\nconst largest_divisor_plus_ten = (n) => {\n  let result = n + 9;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_ten(15)\n  20\n  */\nconst largest_divisor_plus_eleven = (n) => {\n  let result = n + 10;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_eleven(15)\n  20\n  */\nconst largest_divisor_plus_twelve = (n) => {\n  let result = n + 11;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_twelve(15)\n  20\n  */\nconst largest_divisor_plus_thirteen = (n) => {\n  let result = n + 12;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_thirteen(15)\n  20\n  */\nconst largest_divisor_plus_fourteen = (n) => {\n  let result = n + 13;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_plus_fourteen(15)\n  20\n  */\nconst largest_divisor_plus_fifteen = (n) => {\n  let result = n + 14;\n  while (n % result!== 0) {\n    result++;\n  }\n  return result;\n};\n\n/*\n  For a given number n, find the largest number"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const factorize = (n) => {\n    if (isPrime(n)) {\n      factors.push(n)\n    }\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) {\n        factorize(n / i)\n      }\n    }\n  }\n  factorize(n)\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const factorize = (n) => {\n    if (isPrime(n)) {\n      factors.push(n)\n    }\n    for (let i = n; i > 1; i--) {\n      if (n % i === 0) {\n        factorize(n / i)\n      }\n    }\n  }\n  factorize(n)\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse2 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const factorize = (n) => {\n    if (isPrime(n)) {\n      factors.push(n)\n    }\n    for (let i = n; i > 1; i--) {\n      if (n % i === 0) {\n        factorize(n / i)\n      }\n    }\n  }\n  factorize(n)\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse3 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const factorize = (n) => {\n    if (isPrime(n)) {\n      factors.push(n)\n    }\n    for (let i = n; i > 1; i--) {\n      if (n % i === 0) {\n        factorize(n / i)\n      }\n    }\n  }\n  factorize(n)\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse4 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  const factorize = (n) => {\n    if (isPrime(n)) {\n      factors.push(n)\n    }\n    for (let i = n; i > 1; i--) {\n      if (n % i === 0) {\n        factorize(n / i)\n      }\n    }\n  }\n  factorize(n)\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorizeReverse5 = (n) => {\n  const factors = []\n  const isPrime = (n) => {\n    for"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const unique_numbers = [];\n  const number_set = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (number_set.has(numbers[i])) {\n      continue;\n    }\n    number_set.add(numbers[i]);\n    unique_numbers.push(numbers[i]);\n  }\n  return unique_numbers;\n};\n\nexport default remove_duplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> flip_case('Hello')\n  'hELLO'\n  >>> flip_case('hello')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELLO')\n  'hELLO'\n  >>> flip_case('HELL"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', '"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 123, 1]\n  */\nconst get_negative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n/*\n  >>> get_odd([1, 2, 3, 4, 5])\n  [1, 3, 5]\n  >>> get_odd([1, 2, 3, 4, 5, 6])\n  [1, 3, 5, 6]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7])\n  [1, 3, 5, 6, 7]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 3, 5, 6, 7, 8]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 3, 5, 6, 7, 8, 9]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 3, 5, 6, 7, 8, 9, 10]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  if (n < 2) return false\n  if (n % 3 === 0) return false\n  if (n < 9) return true\n  if (n % 5 === 0) return false\n  if (n < 25) return true\n  if (n % 7 === 0) return false\n  if (n < 67) return true\n  if (n % 11 === 0) return false\n  if (n < 137) return true\n  if (n % 13 === 0) return false\n  if (n < 251) return true\n  if (n % 17 === 0) return false\n  if (n < 337) return true\n  if (n % 19 === 0) return false\n  if (n < 701) return true\n  if (n % 23 === 0) return false\n  if (n < 1409) return true\n  if (n % 29 === 0) return false\n  if (n < 1423) return true\n  if (n % 31 === 0) return false\n  if (n < 1447) return true\n  if (n % 37 === 0) return false\n  if (n < 1453) return true\n  if (n % 41 === 0) return false\n  if (n < 1487) return true\n  if (n % 43 === 0) return false\n  if (n < 1501) return true\n  if (n % 47 === 0) return false\n  if (n < 1523) return true\n  if (n % 53 === 0) return false\n  if (n < 1543) return true\n  if (n % 59 === 0) return false\n  if (n < 1567) return true\n  if (n % 61 === 0) return false\n  if (n < 1597) return true\n  if (n % 67 === 0) return false\n  if (n < 1601) return true\n  if (n % 71 === 0) return false\n  if (n < 1607) return true\n  if (n % 73 === 0) return false\n  if (n < 1623) return true\n  if (n % 79 === 0) return false\n  if (n < 1631) return true\n  if (n % 83 === 0) return false\n  if (n < 1647) return true\n  if (n % 89 === 0) return false\n  if (n < 1663) return true\n  if (n % 97 === 0) return false\n  if (n < 1687) return true\n  if (n % 101 === 0) return false\n  if (n < 1699) return true\n  if (n % 107 === 0) return false\n  if (n < 1703) return true\n  if (n % 109 === 0) return false\n  if (n < 1709) return true\n  if (n % 113 === 0) return false\n  if (n < 1717) return true\n  if (n % 119 === 0) return false\n  if (n < 1733) return true\n  if (n % 121 === 0) return false\n  if (n < 1739) return true\n  if (n % 127 === 0) return false\n  if (n < 1741) return true\n  if (n % 137 === 0) return false\n  if (n < 1747) return true\n  if (n % 139 === 0) return false\n  if (n < 1753) return true\n  if (n % 143 === 0) return false\n  if (n < 1759) return true\n  if (n % 149 === 0) return false\n  if (n < 1761) return true\n  if (n % 157 === 0) return false\n  if (n < 1767) return true\n  if (n % 163 === 0) return false\n  if (n < 1769) return true\n  if (n % 167 === 0) return false\n  if (n < 1771) return true\n  if (n % 179 === 0) return false\n  if (n < 1773) return true\n  if (n % 181 === 0) return false\n  if (n < 1777) return true\n  if (n % 191 === 0) return false\n  if (n < 1783) return true\n  if (n % 193 === 0) return false\n  if (n < 1787) return true\n  if (n % 199 === 0) return false\n  if (n < 1789) return true\n  if (n % 211 === 0) return false\n  if (n < 1801) return true\n  if (n % 223 === 0) return false\n  if (n < 1811) return true\n  if (n % 227 === 0) return false\n  if (n < 1823) return true\n  if (n % 229 === 0) return false\n  if (n < 1831) return true\n  if (n % 233 === 0) return false\n  if (n < 1847) return true\n  if (n % 239 === 0) return false\n  if (n < 1861) return true\n  if (n % 241 === 0) return false\n  if (n < 1867) return true\n  if (n % 251 === 0) return false\n  if (n < 1871) return true\n  if (n % 257 === 0) return false\n  if (n < 1873) return true\n  if (n % 263 === 0) return false\n  if (n < 1877) return true\n  if (n % 269 === 0) return false\n  if (n < 1879) return true\n  if (n % 271 === 0) return false\n  if (n < 1883) return true\n  if (n % 277 === 0) return false\n  if (n < 1887) return true\n  if (n % 289 === 0) return false\n  if (n < 1889) return true\n  if (n % 293 === 0) return false\n  if (n < 1891) return true\n  if (n % 307 === 0) return false\n  if (n < 1893) return true\n  if (n % 311 === 0) return false\n  if (n < 1897) return true\n  if (n % 313 === 0) return false"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    const max = Math.max(...xs);\n    const min = Math.min(...xs);\n    if (max === min) {\n      return min;\n    }\n  }\n  return undefined;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly6 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly7 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly8 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly9 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly10 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly11 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x * x * x * x * x * x * x * x;\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sorted = l.slice().sort((a, b) => a % 3!== b % 3);\n  const third = sorted.slice(sorted.length / 3, sorted.length);\n  return third.concat(sorted.slice(0, sorted.length / 3));\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    if (uniqueList.indexOf(l[i]) === -1) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  const min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the number of elements in the list.\n  >>> length([1, 2, 3])\n  3\n  >>> length([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  11\n  */\nconst length = (l) => {\n  return l.length;\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst average = (l) => {\n  return sum(l) / length(l);\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -2.5\n  */\nconst median = (l) => {\n  const sorted = sorted_list(l);\n  if (length(sorted) % 2 === 0) {\n    return (sorted[length(sorted) / 2 - 1] + sorted[length(sorted) / 2]) / 2;\n  } else {\n    return sorted[length(sorted) / 2];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode = (l) => {\n  const sorted = sorted_list(l);\n  const max = max_element(sorted);\n  const min = min_element(sorted);\n  const count = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      count++;\n    }\n  }\n  if (count === 1) {\n    return max;\n  } else {\n    return min;\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode_list = (l) => {\n  const sorted = sorted_list(l);\n  const max = max_element(sorted);\n  const min = min_element(sorted);\n  const count = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      count++;\n    }\n  }\n  if (count === 1) {\n    return [max];\n  } else {\n    return [min];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst mode_list_list = (l) => {\n  const sorted = sorted_list(l);\n  const max = max_element(sorted);\n  const min = min_element(sorted);\n  const count = 0;\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i] === max) {\n      count++;\n    }\n  }\n  if (count === 1) {\n    return [max];\n  } else {\n    return [min];\n  }\n};\n\nmodule.exports = {\n  sum,\n  average,\n  median,\n  mode,\n  mode_list,\n  mode_list_list\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  const divisors = [11, 13];\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    return acc + (n % divisor === 0? 1 : 0);\n  }, 0);\n  return divisor_count;\n};\n\n/*\n  >>> fizz_buzz(100)\n  4\n  >>> fizz_buzz(101)\n  5\n  >>> fizz_buzz(102)\n  6\n  >>> fizz_buzz(103)\n  7\n  >>> fizz_buzz(104)\n  8\n  >>> fizz_buzz(105)\n  9\n  >>> fizz_buzz(106)\n  10\n  >>> fizz_buzz(107)\n  11\n  >>> fizz_buzz(108)\n  12\n  >>> fizz_buzz(109)\n  13\n  >>> fizz_buzz(110)\n  14\n  >>> fizz_buzz(111)\n  15\n  >>> fizz_buzz(112)\n  16\n  >>> fizz_buzz(113)\n  17\n  >>> fizz_buzz(114)\n  18\n  >>> fizz_buzz(115)\n  19\n  >>> fizz_buzz(116)\n  20\n  >>> fizz_buzz(117)\n  21\n  >>> fizz_buzz(118)\n  22\n  >>> fizz_buzz(119)\n  23\n  >>> fizz_buzz(120)\n  24\n  >>> fizz_buzz(121)\n  25\n  >>> fizz_buzz(122)\n  26\n  >>> fizz_buzz(123)\n  27\n  >>> fizz_buzz(124)\n  28\n  >>> fizz_buzz(125)\n  29\n  >>> fizz_buzz(126)\n  30\n  >>> fizz_buzz(127)\n  31\n  >>> fizz_buzz(128)\n  32\n  >>> fizz_buzz(129)\n  33\n  >>> fizz_buzz(130)\n  34\n  >>> fizz_buzz(131)\n  35\n  >>> fizz_buzz(132)\n  36\n  >>> fizz_buzz(133)\n  37\n  >>> fizz_buzz(134)\n  38\n  >>> fizz_buzz(135)\n  39\n  >>> fizz_buzz(136)\n  40\n  >>> fizz_buzz(137)\n  41\n  >>> fizz_buzz(138)\n  42\n  >>> fizz_buzz(139)\n  43\n  >>> fizz_buzz(140)\n  44\n  >>> fizz_buzz(141)\n  45\n  >>> fizz_buzz(142)\n  46\n  >>> fizz_buzz(143)\n  47\n  >>> fizz_buzz(144)\n  48\n  >>> fizz_buzz(145)\n  49\n  >>> fizz_buzz(146)\n  50\n  >>> fizz_buzz(147)\n  51\n  >>> fizz_buzz(148)\n  52\n  >>> fizz_buzz(149)\n  53\n  >>> fizz_buzz(150)\n  54\n  >>> fizz_buzz(151)\n  55\n  >>> fizz_buzz(152)\n  56\n  >>> fizz_buzz(153)\n  57\n  >>> fizz_buzz(154)\n  58\n  >>> fizz_buzz(155)\n  59\n  >>> fizz_buzz(156)\n  60\n  >>> fizz_buzz(157)\n  61\n  >>> fizz_buzz(158)\n  62\n  >>> fizz_buzz(159)\n  63\n  >>> fizz_buzz(160)\n  64\n  >>> fizz_buzz(161)\n  65\n  >>> fizz_buzz(162)\n  66\n  >>> fizz_buzz(163)\n  67\n  >>> fizz_buzz(164)\n  68\n  >>> fizz_buzz(165)\n  69\n  >>> fizz_buzz(166)\n  70\n  >>> fizz_buzz(167)\n  71\n  >>> fizz_buzz(168)\n  72\n  >>> fizz_buzz(169)\n  73\n  >>> fizz_buzz(170)\n  74\n  >>> fizz_buzz(171)\n  75\n  >>> fizz_buzz(172)\n  76\n  >>> fizz_buzz(173)\n  77\n  >>> fizz_buzz(174)\n  78\n  >>> fizz_buzz(175)\n  79\n  >>> fizz_buzz(176)\n  80\n  >>> fizz_buzz(177)\n  81\n  >>> fizz_buzz(178)\n  82\n  >>> fizz_buzz(179)\n  83\n  >>> fizz_buzz(180)\n  84\n  >>> fizz_buzz(181)\n  85\n  >>> fizz_buzz(182)\n  86\n  >>> fizz_buzz(183)\n  87\n  >>> fizz_buzz(184)\n  88\n  >>> fizz_buzz(185)\n  89\n  >>> fizz_buzz(186)\n  90\n  >>> fizz_buzz(187)\n  91\n  >>> fizz_buzz(188)\n  92\n  >>> fizz_buzz(189)\n  93\n  >>> fizz_buzz(190)\n  94\n  >>> fizz_buzz(191)\n  95\n  >>> fizz_buzz(192)\n  96\n  >>> fizz_buzz(193)\n  97\n  >>> fizz_buzz(194)\n  98\n  >>> fizz_buzz(195)\n  99\n  >>> fizz_buzz(196)\n  100\n  >>> fizz_buzz(197)\n  101\n  >>> fizz_buzz("}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const sorted = l.slice();\n  const even = sorted.slice(0, sorted.length / 2);\n  const odd = sorted.slice(sorted.length / 2);\n  return even.concat(odd.sort((a, b) => a - b));\n};\n\nmodule.exports = sort_even;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_2 function. Returns decoded string.\n  */\nconst decodeCyclic_2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_3 function. Returns decoded string.\n  */\nconst decodeCyclic_3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_4 function. Returns decoded string.\n  */\nconst decodeCyclic_4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join("}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_2 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_3 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 3 === 0) {\n      prime = prime + 3;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_4 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 4 === 0) {\n      prime = prime + 4;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_5 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 5 === 0) {\n      prime = prime + 5;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_6 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 6 === 0) {\n      prime = prime + 6;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_7 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 7 === 0) {\n      prime = prime + 7;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_8 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 8 === 0) {\n      prime = prime + 8;\n    }\n  }\n  return fib;\n};\n\n/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib_9 = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib %"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.length > 2 && l.every(x => x > 0 && x < sum)\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.length > 2 && l.every(x => x > 0 && x < sum)\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.length > 2 && l.every(x => x > 0 && x < sum)\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted_sorted = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.length > 2 && l.every(x => x > 0 && x < sum)\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted_sorted_sorted = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0)\n  return l.length > 2 && l.every(x => x > 0 && x < sum)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  let left_cars = [];\n  let right_cars = [];\n  let left_car_index = 0;\n  let right_car_index = 0;\n  let left_car = 0;\n  let right_car = 0;\n  let left_car_speed = 0;\n  let right_car_speed = 0;\n  let left_car_x = 0;\n  let right_car_x = 0;\n  let left_car_y = 0;\n  let right_car_y = 0;\n  let left_car_x_speed = 0;\n  let right_car_x_speed = 0;\n  let left_car_y_speed = 0;\n  let right_car_y_speed = 0;\n  let left_car_x_distance = 0;\n  let right_car_x_distance = 0;\n  let left_car_y_distance = 0;\n  let right_car_y_distance = 0;\n  let left_car_x_distance_speed = 0;\n  let right_car_x_distance_speed = 0;\n  let left_car_y_distance_speed = 0;\n  let right_car_y_distance_speed = 0;\n  let left_car_x_distance_speed_speed = 0;\n  let right_car_x_distance_speed_speed = 0;\n  let left_car_y_distance_speed_speed = 0;\n  let right_car_y_distance_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_y_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let left_car_x_distance_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed_speed = 0;\n  let right_car_x_"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] + 1);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [1, 2, 3]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 8, 1, 122]\n  */\nconst decr_list = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] - 1);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_one([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list_by_one([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_one = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] + 1);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_one([1, 2, 3])\n  [1, 2, 3]\n  >>> decr_list_by_one([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 8, 1, 122]\n  */\nconst decr_list_by_one = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] - 1);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_two([1, 2, 3])\n  [3, 4, 5]\n  >>> incr_list_by_two([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [7, 4, 7, 3, 4, 4, 11, 1, 124]\n  */\nconst incr_list_by_two = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] + 2);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_two([1, 2, 3])\n  [1, 2, 3]\n  >>> decr_list_by_two([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 8, 1, 122]\n  */\nconst decr_list_by_two = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] - 2);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_three([1, 2, 3])\n  [4, 5, 6]\n  >>> incr_list_by_three([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_three = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] + 3);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_three([1, 2, 3])\n  [1, 2, 3]\n  >>> decr_list_by_three([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 8, 1, 122]\n  */\nconst decr_list_by_three = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] - 3);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list_by_four([1, 2, 3])\n  [5, 6, 7]\n  >>> incr_list_by_four([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_by_four = (l) => {\n  let i = 0,\n    len = l.length,\n    new_list = [];\n  while (i < len) {\n    new_list.push(l[i] + 4);\n    i++;\n  }\n  return new_list;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list_by_four"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  const pairs = l.filter((x) => x % 2 === 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairs_sum_to_zero_2 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_2([1])\n  false\n  */\nconst pairs_sum_to_zero_2 = (l) => {\n  const pairs = l.filter((x) => x % 2 === 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairs_sum_to_zero_3 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_3([1])\n  false\n  */\nconst pairs_sum_to_zero_3 = (l) => {\n  const pairs = l.filter((x) => x % 2 === 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairs_sum_to_zero_4 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_4([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_4([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_4([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_4([1])\n  false\n  */\nconst pairs_sum_to_zero_4 = (l) => {\n  const pairs = l.filter((x) => x % 2 === 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairs_sum_to_zero_5 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_5([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_5([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_5([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_5([1])\n  false\n  */\nconst pairs_sum_to_zero_5 = (l) => {\n  const pairs = l.filter((x) => x % 2 === 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairs_sum_to_zero_6 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_6([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_6([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_6([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_6([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_6([1])\n  false\n  */\nconst pairs_sum_to_zero_6 = (l) => {\n  const pairs = l.filter((x) => x % 2 === 0)\n  const sum = pairs.reduce((a, b) => a + b)\n  return sum === 0\n}\n\n/*\n  pairs_sum_to_zero_7 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_7([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_7([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_7([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_7([2, 4, -5, 3, 5, 7])"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('12345')\n  5\n  >>> length('123')\n  3\n  >>> length('12')\n  2\n  >>> length('1')\n  1\n  >>> length('0')\n  1\n  >>> length('a')\n  1\n  >>> length('ab')\n  2\n  >>> length('abcd')\n  4\n  >>> length('abcd')\n  4\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  >>> length('abc')\n  3\n  "}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area25 = (a, h) => {\n  "}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Finds the longest palindrome in a string\n  >>> find_longest_palindrome('abcd')\n  'abcd'\n  >>> find_longest_palindrome('abcdab')\n  'abcdab'\n  >>> find_longest_palindrome('abcdabcd')\n  'abcdabcd'\n  >>> find_longest_palindrome('abcdabcdab')\n  'abcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcd')\n  'abcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdab')\n  'abcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcd')\n  'abcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdab')\n  'abcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab'\n  >>> find_longest_palindrome('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd')\n  'abcdabcdabcdabcdabcdabcdabcdabcdabcd"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*Return the greatest common divisor of a and b.\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 0)\n  3\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd(2, 4)\n  2\n  >>> gcd(3, 4)\n  1\n  >>> gcd(3, 5)\n  3\n  >>> gcd(6, 7)\n  7\n  >>> gcd(7, 6)\n  7\n  >>> gcd(0, 0)\n  0\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(1, 1)\n  1\n  >>> gcd(2, 3)\n  1\n  >>> gcd("}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_shift = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_shift = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_shift_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_shift_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_shift_reverse_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_shift_reverse_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_reverse_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_reverse_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_reverse_reverse_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_reverse_reverse_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_shift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const vowels_regex = new RegExp(`[${vowels.join('|')}]`, 'g');\n  return text.replace(vowels_regex, '');\n};\n\n/*\n  remove_punctuation is a function that takes string and returns string without punctuation.\n  >>> remove_punctuation('')\n  ''\n  >>> remove_punctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_punctuation('abcdef')\n  'abcdef'\n  >>> remove_punctuation('aaaaa')\n  ''\n  >>> remove_punctuation('aaBAA')\n  'BAA'\n  >>> remove_punctuation('zbcd')\n  'zbcd'\n  */\nconst remove_punctuation = (text) => {\n  const punctuation = ['!', '.', '?', ';', ':', '-', '_', '*', '\\'', '\"', '%', '+', '=', '@', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&', '~', '{', '}', '[', ']', '|', '\\\\', '<', '>', '/', '$', '^', '~', '*', '+', '-', '_', '%', '#', '$', '^', '&',"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  */\nconst above_threshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst between_thresholds = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst between_thresholds_2 = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst between_thresholds_3 = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst between_thresholds_4 = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst between_thresholds_5 = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst between_thresholds_6 = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  >>> below_threshold([1, 20, 4, 10], 100)\n  false\n  */\nconst between_thresholds_7 = (l, t1, t2) => {\n  const len = l.length\n  for (let i ="}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @return {Number}\n  * @example\n  *\n  * >>> subtract(2, 3)\n  * -1\n  * >>> subtract(5, 7)\n  * 4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @return {Number}\n  * @example\n  *\n  * >>> multiply(2, 3)\n  * 6\n  * >>> multiply(5, 7)\n  * 35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @return {Number}\n  * @example\n  *\n  * >>> divide(2, 3)\n  * 0.6666666666666666\n  * >>> divide(5, 7)\n  * 2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @return {Number}\n  * @example\n  *\n  * >>> modulo(2, 3)\n  * 1\n  * >>> modulo(5, 7)\n  * 4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the absolute value of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> abs(2)\n  * 2\n  * >>> abs(-2)\n  * 2\n  */\nconst abs = x => {\n  return x < 0? -x : x;\n};\n\n/*\n  * Return the sign of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> sign(2)\n  * 1\n  * >>> sign(-2)\n  * -1\n  */\nconst sign = x => {\n  return x < 0? -1 : 1;\n};\n\n/*\n  * Return the floor of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> floor(2)\n  * 2\n  * >>> floor(-2)\n  * -2\n  */\nconst floor = x => {\n  return Math.floor(x);\n};\n\n/*\n  * Return the ceiling of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> ceil(2)\n  * 2\n  * >>> ceil(-2)\n  * -2\n  */\nconst ceil = x => {\n  return Math.ceil(x);\n};\n\n/*\n  * Return the round of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> round(2)\n  * 2\n  * >>> round(-2)\n  * -2\n  */\nconst round = x => {\n  return Math.round(x);\n};\n\n/*\n  * Return the truncate of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> truncate(2)\n  * 2\n  * >>> truncate(-2)\n  * -2\n  */\nconst truncate = x => {\n  return x < 0? Math.ceil(x) : Math.floor(x);\n};\n\n/*\n  * Return the round of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> round(2.5)\n  * 2\n  * >>> round(-2.5)\n  * -2\n  */\nconst round2 = x => {\n  return Math.round(x * 100) / 100;\n};\n\n/*\n  * Return the truncate of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> truncate(2.5)\n  * 2\n  * >>> truncate(-2.5)\n  * -2\n  */\nconst truncate2 = x => {\n  return Math.round(x * 100) / 100;\n};\n\n/*\n  * Return the round of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> round(2.5)\n  * 2\n  * >>> round(-2.5)\n  * -2\n  */\nconst round3 = x => {\n  return Math.round(x * 1000) / 1000;\n};\n\n/*\n  * Return the truncate of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> truncate(2.5)\n  * 2\n  * >>> truncate(-2.5)\n  * -2\n  */\nconst truncate3 = x => {\n  return Math.round(x * 1000) / 1000;\n};\n\n/*\n  * Return the round of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example\n  *\n  * >>> round(2.5)\n  * 2\n  * >>> round(-2.5)\n  * -2\n  */\nconst round4 = x => {\n  return Math.round(x * 10000) / 10000;\n};\n\n/*\n  * Return the truncate of a number\n  *\n  * @param {Number} x\n  * @return {Number}\n  * @example"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) return false;\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('eabcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcd', 'dddddddabce')\n  true\n  */\nconst same_anagrams = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) return false;\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> same_anagrams('eabcd', 'dddddddabc')\n  true\n  >>> same_anagrams('eabcd', 'dddddddabce')\n  false\n  >>> same_anagrams('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_anagrams('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_anagrams('abcd', 'dddddddabc')\n  true\n  >>> same_anagrams('abcd', 'dddddddabce')\n  false\n  >>> same_anagrams('eabcd', 'dddddddabce')\n  true\n  */\nconst same_anagrams_2 = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) return false;\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> same_anagrams_2('eabcd', 'dddddddabc')\n  true\n  >>> same_anagrams_2('eabcd', 'dddddddabce')\n  false\n  >>> same_anagrams_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_anagrams_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_anagrams_2('abcd', 'dddddddabc')\n  true\n  >>> same_anagrams_2('abcd', 'dddddddabce')\n  false\n  >>> same_anagrams_2('eabcd', 'dddddddabce')\n  true\n  */\nconst same_anagrams_3 = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) return false;\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> same_anagrams_3('eabcd', 'dddddddabc')\n  true\n  >>> same_anagrams_3('eabcd', 'dddddddabce')\n  false\n  >>> same_anagrams_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_anagrams_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_anagrams_3('abcd', 'dddddddabc')\n  true\n  >>> same_anagrams_3('abcd', 'dddddddabce')\n  false\n  >>> same_anagrams_3('eabcd', 'dddddddabce')\n  true\n  */\nconst same_anagrams_4 = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) return false;\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> same_anagrams_4('eabcd', 'dddddddabc')\n  true\n  >>> same_anagrams_4('eabcd', 'dddddddabce')\n  false\n  >>> same_anagrams_4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib2(n - 1) + fib2(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib3(10)\n  55\n  >>> fib3(1)\n  1\n  >>> fib3(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib3(n - 1) + fib3(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib4(10)\n  55\n  >>> fib4(1)\n  1\n  >>> fib4(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib4(n - 1) + fib4(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib5(10)\n  55\n  >>> fib5(1)\n  1\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib5(n - 1) + fib5(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib6(10)\n  55\n  >>> fib6(1)\n  1\n  >>> fib6(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib6(n - 1) + fib6(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib7(10)\n  55\n  >>> fib7(1)\n  1\n  >>> fib7(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib7(n - 1) + fib7(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib8(10)\n  55\n  >>> fib8(1)\n  1\n  >>> fib8(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib8(n - 1) + fib8(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib9(10)\n  55\n  >>> fib9(1)\n  1\n  >>> fib9(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib9(n - 1) + fib9(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib10(10)\n  55\n  >>> fib10(1)\n  1\n  >>> fib10(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib10(n - 1) + fib10(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib11(10)\n  55\n  >>> fib11(1)\n  1\n  >>> fib11(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib11(n - 1) + fib11(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib12(10)\n  55\n  >>> fib12(1)\n  1\n  >>> fib12(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib12(n - 1) + fib12(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib13(10)\n  55\n  >>> fib13(1)\n  1\n  >>> fib13(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fib13(n - 1) + fib13(n - 2)\n  }\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib14(10)\n  55\n  >>> fib14(1)\n  1\n  >>> fib14(8)\n  21\n  */\nconst fib14 = (n) => {\n  if ("}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const brackets_length = brackets.length\n  let brackets_counter = 0\n  for (let i = 0; i < brackets_length; i++) {\n    if (brackets[i] === \"<\") {\n      brackets_counter++\n    }\n    if (brackets[i] === \">\") {\n      brackets_counter--\n    }\n    if (brackets_counter < 0) {\n      return false\n    }\n  }\n  return brackets_counter === 0\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either \"<\" or \">\".\n\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<<><>>\")\n  3\n  >>> number_of_brackets(\"><<>\")\n  2\n  */\nconst number_of_brackets = (string) => {\n  const brackets = string.split(\"\")\n  return brackets.reduce((acc, curr) => {\n    if (curr === \"<\") {\n      acc++\n    }\n    if (curr === \">\") {\n      acc--\n    }\n    return acc\n  }, 0)\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either \"<\" or \">\".\n\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<<><>>\")\n  3\n  >>> number_of_brackets(\"><<>\")\n  2\n  */\nconst number_of_brackets_2 = (string) => {\n  const brackets = string.split(\"\")\n  return brackets.reduce((acc, curr) => {\n    if (curr === \"<\") {\n      acc++\n    }\n    if (curr === \">\") {\n      acc--\n    }\n    return acc\n  }, 0)\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either \"<\" or \">\".\n\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<<><>>\")\n  3\n  >>> number_of_brackets(\"><<>\")\n  2\n  */\nconst number_of_brackets_3 = (string) => {\n  const brackets = string.split(\"\")\n  return brackets.reduce((acc, curr) => {\n    if (curr === \"<\") {\n      acc++\n    }\n    if (curr === \">\") {\n      acc--\n    }\n    return acc\n  }, 0)\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either \"<\" or \">\".\n\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<<><>>\")\n  3\n  >>> number_of_brackets(\"><<>\")\n  2\n  */\nconst number_of_brackets_4 = (string) => {\n  const brackets = string.split(\"\")\n  return brackets.reduce((acc, curr) => {\n    if (curr === \"<\") {\n      acc++\n    }\n    if (curr === \">\") {\n      acc--\n    }\n    return acc\n  }, 0)\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either \"<\" or \">\".\n\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<<><>>\")\n  3\n  >>> number_of_brackets(\"><<>\")\n  2\n  */\nconst number_of_brackets_5 = (string) => {\n  const brackets = string.split(\"\")\n  return brackets.reduce((acc, curr) => {\n    if (curr === \"<\") {\n      acc++\n    }\n    if (curr === \">\") {\n      acc--\n    }\n    return acc\n  }, 0)\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either \"<\" or \">\".\n\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<<><>>\")\n  3\n  >>> number_of_brackets(\"><<>\")\n  2\n  */\nconst number_of_brackets_6 = (string) => {\n  const brackets = string.split(\"\")\n  return brackets.reduce((acc, curr) => {\n    if (curr === \"<\") {\n      acc++\n    }\n    if (curr === \">\") {\n      acc--\n    }\n    return acc\n  }, 0)\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either \"<\" or \">\".\n\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<<><>>\")\n  3\n  >>> number_of_brackets(\"><<>\")\n  2\n  */\nconst number_of_brackets_7 = (string) => {\n  const brackets = string.split(\"\")\n  return brackets.reduce((acc, curr) => {\n    if (curr === \"<\") {\n      acc++\n    }\n    if (curr === \">\") {\n      acc--\n    }\n    return acc\n  }, 0)\n}\n\n/*\n  Given a string, returns the number of brackets in the string.\n  A bracket is either"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    if (l[i] > l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    if (l[i] > l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    if (l[i] > l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      return false;\n    }\n    if (l[i] > l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false;\n    }\n    if (l[i] < l[j]) {\n      return true;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const map = new Map();\n  for (let i = 0; i < l1.length; i++) {\n    map.set(l1[i], l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (map.has(l2[i])) {\n      map.delete(l2[i]);\n    }\n  }\n  return [...new Set(map.values())];\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    "}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n\n/*\n  >>> sum"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let stack = [],\n    open = 0,\n    closed = 0;\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && open === 0) {\n      stack.push(brackets[i]);\n      open++;\n    } else if (brackets[i] === \")\" && open > 0) {\n      open--;\n      if (open === 0) {\n        closed++;\n      }\n      if (stack.length === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n\n  return closed === open;\n};\n\nmodule.exports = correct_bracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = [];\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i + 1] - xs[i];\n  }\n  return d;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate2 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate3 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate4 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate5 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate6 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate7 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate8 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates to\n  the given list.\n  >>> evaluate([3, 1, 2, 4, 5])\n  [3, 4, 12, 20]\n  >>> evaluate([1, 2, 3])\n  [1, 6]\n  */\nconst evaluate9 = (xs) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const p = [];\n  for (let i = 0; i < len; i++) {\n    p[i] = xs[i] * d[i];\n  }\n  return p;\n};\n\n/*\n  Given a list of coefficients, return the polynomial that evaluates"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++;\n  }\n  return count;\n};\n\nexport default vowels_count;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = result * 10 + x % 10;\n      x = Math.floor(x / 10);\n    }\n  } else {\n    for (let i = 0; i < -shift; i++) {\n      result = result / 10 + x % 10;\n      x = Math.floor(x / 10);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  >>> reverse(\"ab\")\n  \"ba\"\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"abcd\")\n  \"dcba\"\n  >>> reverse(\"abcde\")\n  \"edcba\"\n  >>> reverse(\"abcdef\")\n  \"fedcba\"\n  >>> reverse(\"abcdefg\")\n  \"gfedcba\"\n  >>> reverse(\"abcdefgh\")\n  \"ghfedcba\"\n  >>> reverse(\"abcdefghi\")\n  \"highfedcba\"\n  >>> reverse(\"abcdefghij\")\n  \"jihgfedcba\"\n  >>> reverse(\"abcdefghijk\")\n  \"kijhgfedcba\"\n  >>> reverse(\"abcdefghijkl\")\n  \"lkijhgfedcba\"\n  >>> reverse(\"abcdefghijklm\")\n  \"lmjihgfedcba\"\n  >>> reverse(\"abcdefghijklmn\")\n  \"mnjihgfedcba\"\n  >>> reverse(\"abcdefghijklmno\")\n  \"nojihgfedcba\"\n  >>> reverse(\"abcdefghijklmnop\")\n  \"pnojihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopq\")\n  \"qnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqr\")\n  \"rqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrst\")\n  \"stqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstu\")\n  \"ustqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuv\")\n  \"uvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvw\")\n  \"wvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwx\")\n  \"wxvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxy\")\n  \"xywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyz\")\n  \"zxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyza\")\n  \"azxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzab\")\n  \"abazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabc\")\n  \"abcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcde\")\n  \"deabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefg\")\n  \"fgdeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefgh\")\n  \"ghfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghi\")\n  \"highfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghij\")\n  \"jihgfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijk\")\n  \"kijhgfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijkl\")\n  \"lkijhgfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklm\")\n  \"mnjihgfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmn\")\n  \"nojihgfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnop\")\n  \"pnojihgfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq\")\n  \"qnopjihgfgeabcabazxywvstqnopjihgfedcba\"\n  >>> reverse(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqr\")\n  \"rqnopjihgfgeabc"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 0\n      digit_sum(\"abcCd\") => 0\n      digit_sum(\"helloE\") => 0\n      digit_sum(\"woArBld\") => 0\n      digit_sum(\"aAaaaXa\") => 0\n  */\nconst lower_digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst upper_digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst mixed_digit_sum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst mixed_digit_sum_2 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst mixed_digit_sum_3 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst mixed_digit_sum_4 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 96;\n  }\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\n"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const [apple, orange, mango] = s.split(\" \")\n  const apple_count = parseInt(apple)\n  const orange_count = parseInt(orange)\n  const mango_count = parseInt(mango)\n\n  return n - apple_count - orange_count - mango_count\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const min = arr.reduce((a, b) => a < b? a : b, Infinity)\n  const minIndex = arr.findIndex(a => a === min)\n  return [min, minIndex]\n}\n\nexport default pluck\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      return max\n    }\n  }\n  return -1\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  if (lst.length === 0) {\n    return []\n  }\n\n  const sorted_lst = lst.sort((a, b) => a - b)\n  const sorted_lst_length = sorted_lst.length\n\n  const min = sorted_lst[0]\n  const max = sorted_lst[sorted_lst_length - 1]\n\n  const sorted_lst_length_minus_one = sorted_lst_length - 1\n\n  const sorted_lst_half = sorted_lst.slice(1, sorted_lst_length_minus_one)\n\n  const sorted_lst_half_length = sorted_lst_half.length\n\n  const sorted_lst_half_half = sorted_lst_half.slice(1, sorted_lst_half_length)\n\n  const sorted_lst_half_half_length = sorted_lst_half_half.length\n\n  const sorted_lst_half_half_half = sorted_lst_half_half.slice(1, sorted_lst_half_half_length)\n\n  const sorted_lst_half_half_half_length = sorted_lst_half_half_half.length\n\n  const sorted_lst_half_half_half_half = sorted_lst_half_half_half_half.slice(1, sorted_lst_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half = sorted_lst_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_half_half_half_half_half_half_length)\n\n  const sorted_lst_half_half_half_half_half_half = sorted_lst_half_half_half_half_half_half.slice(1, sorted_lst_half_half_half_half_half_half_half_half_half_half"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area2 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area3 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area4 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area5 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area6 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area7 = (a, b, c) => {\n  if (a + b > c) {\n    return ((a + b) * (c / 2))\n  } else if (b + c > a) {\n    return ((b + c) * (a / 2))\n  } else if (a + c > b) {\n    return ((a + c) * (b / 2))\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the lengths of the three sides of"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_2 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isPalindrome(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_3 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isPalindrome(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_4 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isPalindrome(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_5 = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && isPalindrome(q);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced."}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  const len = arr.length;\n  let min_change = 0;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min_change++;\n      i++;\n      j--;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return min_change;\n};\n\nmodule.exports = smallest_change;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return lst1;\n  }\n\n  const len = lst1.length;\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    const lst1_item = lst1[i];\n    const lst2_item = lst2[i];\n    if (lst1_item.length === lst2_item.length) {\n      lst.push(lst1_item);\n    } else if (lst1_item.length > lst2_item.length) {\n      lst.push(lst1_item);\n    } else {\n      lst.push(lst2_item);\n    }\n  }\n\n  return lst;\n};\n\nmodule.exports = total_match;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const is_prime = (n) => {\n    return prime_numbers.indexOf(n)!== -1;\n  };\n  const is_multiply_prime = (n) => {\n    return prime_numbers.every(is_prime);\n  };\n  return is_multiply_prime(a);\n};\n\nconst is_multiply_prime_2 = (a) => {\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const is_prime = (n) => {\n    return prime_numbers.indexOf(n)!== -1;\n  };\n  const is_multiply_prime = (n) => {\n    return prime_numbers.every(is_prime);\n  };\n  return is_multiply_prime(a);\n};\n\nconst is_multiply_prime_3 = (a) => {\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967,"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return is_simple_power(x / n, n);\n};\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a === 1) {\n    return true;\n  }\n  if (a === 2) {\n    return true;\n  }\n  if (a === 3) {\n    return true;\n  }\n  if (a === 4) {\n    return true;\n  }\n  if (a === 5) {\n    return true;\n  }\n  if (a === 6) {\n    return true;\n  }\n  if (a === 7) {\n    return true;\n  }\n  if (a === 8) {\n    return true;\n  }\n  if (a === 9) {\n    return true;\n  }\n  if (a === 10) {\n    return true;\n  }\n  if (a === 11) {\n    return true;\n  }\n  if (a === 12) {\n    return true;\n  }\n  if (a === 13) {\n    return true;\n  }\n  if (a === 14) {\n    return true;\n  }\n  if (a === 15) {\n    return true;\n  }\n  if (a === 16) {\n    return true;\n  }\n  if (a === 17) {\n    return true;\n  }\n  if (a === 18) {\n    return true;\n  }\n  if (a === 19) {\n    return true;\n  }\n  if (a === 20) {\n    return true;\n  }\n  if (a === 21) {\n    return true;\n  }\n  if (a === 22) {\n    return true;\n  }\n  if (a === 23) {\n    return true;\n  }\n  if (a === 24) {\n    return true;\n  }\n  if (a === 25) {\n    return true;\n  }\n  if (a === 26) {\n    return true;\n  }\n  if (a === 27) {\n    return true;\n  }\n  if (a === 28) {\n    return true;\n  }\n  if (a === 29) {\n    return true;\n  }\n  if (a === 30) {\n    return true;\n  }\n  if (a === 31) {\n    return true;\n  }\n  if (a === 32) {\n    return true;\n  }\n  if (a === 33) {\n    return true;\n  }\n  if (a === 34) {\n    return true;\n  }\n  if (a === 35) {\n    return true;\n  }\n  if (a === 36) {\n    return true;\n  }\n  if (a === 37) {\n    return true;\n  }\n  if (a === 38) {\n    return true;\n  }\n  if (a === 39) {\n    return true;\n  }\n  if (a === 40) {\n    return true;\n  }\n  if (a === 41) {\n    return true;\n  }\n  if (a === 42) {\n    return true;\n  }\n  if (a === 43) {\n    return true;\n  }\n  if (a === 44) {\n    return true;\n  }\n  if (a === 45) {\n    return true;\n  }\n  if (a === 46) {\n    return true;\n  }\n  if (a === 47) {\n    return true;\n  }\n  if (a === 48) {\n    return true;\n  }\n  if (a === 49) {\n    return true;\n  }\n  if (a === 50) {\n    return true;\n  }\n  if (a === 51) {\n    return true;\n  }\n  if (a === 52) {\n    return true;\n  }\n  if (a === 53) {\n    return true;\n  }\n  if (a === 54) {\n    return true;\n  }\n  if (a === 55) {\n    return true;\n  }\n  if (a === 56) {\n    return true;\n  }\n  if (a === 57) {\n    return true;\n  }\n  if (a === 58) {\n    return true;\n  }\n  if (a === 59) {\n    return true;\n  }\n  if (a === 60) {\n    return true;\n  }\n  if (a === 61) {\n    return true;\n  }\n  if (a === 62) {\n    return true;\n  }\n  if (a === 63) {\n    return true;\n  }\n  if (a === 64) {\n    return true;\n  }\n  if (a === 65) {\n    return true;\n  }\n  if (a === 66) {\n    return true;\n  }\n  if (a === 67) {\n    return true;\n  }\n  if (a === 68) {\n    return true;\n  }\n  if (a === 69) {\n    return true;\n  }\n  if (a === 70) {\n    return true;\n  }\n  if (a === 71) {\n    return true;\n  }\n  if (a === 72) {\n    return true;\n  }\n  if (a === 73) {\n    return true;\n  }\n  if (a === 74) {\n    return true;\n  }\n  if (a === 75) {\n    return true;\n  }\n  if (a === 76) {\n    return true;\n  }\n  if (a === 77) {\n    return true;\n  }\n  if (a === 78) {\n    return true;\n  }\n  if (a === 79) {\n    return true;\n  }\n  if (a === 80) {\n    return true;\n  }\n  if (a === 81) {\n    return true;\n  }\n  if (a === 82) {\n    return true;\n  }\n  if (a === 83"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  const num_str = num.toString();\n  const num_str_len = num_str.length;\n  const num_str_len_half = num_str_len / 2;\n  const num_str_half = num_str.substring(0, num_str_len_half);\n  const num_str_half_int = parseInt(num_str_half, 16);\n  const num_str_half_int_half = num_str_half_int / 2;\n  const num_str_half_int_half_int = parseInt(num_str_half_int_half, 16);\n  const num_str_half_int_half_int_half = num_str_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half = num_str_half_int_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half_int_half = num_str_half_int_half_int_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half_int_half_int_half = num_str_half_int_half_int_half_int_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half_int_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half = num_str_half_int_half_int_half_int_half_int_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half_int_half_int_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half = num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int = num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int = num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int / 2;\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int = parseInt(num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half, 16);\n  const num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int = num_str_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int_half_int"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  const binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0'\n  }\n  return `db${binary}db`\n}\n\n/*\n  Converts a binary number to decimal.\n  The function should return a number.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")   # returns 15\n  binary_to_decimal(\"db100000db\") # returns 32\n  */\nconst binary_to_decimal = (binary) => {\n  const decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to binary.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_2 = (decimal) => {\n  const binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0'\n  }\n  return binary\n}\n\n/*\n  Converts a binary number to decimal.\n  The function should return a number.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")   # returns 15\n  binary_to_decimal(\"db100000db\") # returns 32\n  */\nconst binary_to_decimal_2 = (binary) => {\n  const decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to binary.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_3 = (decimal) => {\n  const binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0'\n  }\n  return binary\n}\n\n/*\n  Converts a binary number to decimal.\n  The function should return a number.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")   # returns 15\n  binary_to_decimal(\"db100000db\") # returns 32\n  */\nconst binary_to_decimal_3 = (binary) => {\n  const decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to binary.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_4 = (decimal) => {\n  const binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0'\n  }\n  return binary\n}\n\n/*\n  Converts a binary number to decimal.\n  The function should return a number.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")   # returns 15\n  binary_to_decimal(\"db100000db\") # returns 32\n  */\nconst binary_to_decimal_4 = (binary) => {\n  const decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\n/*\n  Converts a decimal number to binary.\n  The function should return a string, with each character representing a binary number.\n  Each character in the string will be '0' or '1'.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary_5 = (decimal) => {\n  const binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] === 1)? '1' : '0'\n  }\n  return binary\n}\n\n/*\n  Converts a binary number to decimal.\n  The function should return a number.\n\n  Examples:\n  binary_to_decimal(\"db1111db\")   # returns 15\n  binary_to_decimal(\"db100000db\") # returns 32\n  */\nconst binary_to_decimal_5 = ("}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const arr = s.split('')\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (arr[i] === arr[i + 1]) {\n      k += 1\n      if (k === 3) {\n        j += 1\n        k = 0\n      }\n    } else {\n      k = 0\n      j = 0\n    }\n    i += 1\n  }\n  return j >= 3\n}\n\nconsole.log(is_happy('a'))\nconsole.log(is_happy('aa'))\nconsole.log(is_happy('abcd'))\nconsole.log(is_happy('aabb'))\nconsole.log(is_happy('adb'))\nconsole.log(is_happy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b)\n  const grades_sorted_length = grades_sorted.length\n  const grades_sorted_index = grades_sorted.indexOf(3.0)\n  const grades_sorted_index_plus_one = grades_sorted_index + 1\n  const grades_sorted_index_minus_one = grades_sorted_index - 1\n  const grades_sorted_index_plus_two = grades_sorted_index_plus_one + 1\n  const grades_sorted_index_minus_two = grades_sorted_index_minus_one - 1\n  const grades_sorted_index_plus_three = grades_sorted_index_plus_two + 1\n  const grades_sorted_index_minus_three = grades_sorted_index_minus_two - 1\n  const grades_sorted_index_plus_four = grades_sorted_index_plus_three + 1\n  const grades_sorted_index_minus_four = grades_sorted_index_minus_three - 1\n  const grades_sorted_index_plus_five = grades_sorted_index_plus_four + 1\n  const grades_sorted_index_minus_five = grades_sorted_index_minus_four - 1\n  const grades_sorted_index_plus_six = grades_sorted_index_plus_five + 1\n  const grades_sorted_index_minus_six = grades_sorted_index_minus_five - 1\n  const grades_sorted_index_plus_seven = grades_sorted_index_plus_six + 1\n  const grades_sorted_index_minus_seven = grades_sorted_index_minus_six - 1\n  const grades_sorted_index_plus_eight = grades_sorted_index_plus_seven + 1\n  const grades_sorted_index_minus_eight = grades_sorted_index_minus_seven - 1\n  const grades_sorted_index_plus_nine = grades_sorted_index_plus_eight + 1\n  const grades_sorted_index_minus_nine = grades_sorted_index_minus_eight - 1\n  const grades_sorted_index_plus_ten = grades_sorted_index_plus_nine + 1\n  const grades_sorted_index_minus_ten = grades_sorted_index_minus_nine - 1\n  const grades_sorted_index_plus_eleven = grades_sorted_index_plus_ten + 1\n  const grades_sorted_index_minus_eleven = grades_sorted_index_minus_ten - 1\n  const grades_sorted_index_plus_twelve = grades_sorted_index_plus_eleven + 1\n  const grades_sorted_index_minus_twelve = grades_sorted_index_minus_eleven - 1\n  const grades_sorted_index_plus_thirteen = grades_sorted_index_plus_twelve + 1\n  const grades_sorted_index_minus_thirteen = grades_sorted_index_minus_twelve - 1\n  const grades_sorted_index_plus_fourteen = grades_sorted_index_plus_thirteen + 1\n  const grades_sorted_index_minus_fourteen = grades_sorted_index_minus_thirteen - 1\n  const grades_sorted_index_plus_fifteen = grades_sorted_index_plus_fourteen + 1\n  const grades_sorted_index_minus_fifteen = grades_sorted_index_minus_fourteen - 1\n  const grades_sorted_index_plus_sixteen = grades_sorted_index_plus_fifteen + 1\n  const grades_sorted_index_minus_sixteen = grades_sorted_index_minus_fifteen - 1\n  const grades_sorted_index_plus_seventeen = grades_sorted_index_plus_sixteen + 1\n  const grades_sorted_index_minus_seventeen = grades_sorted_index_minus_sixteen - 1\n  const grades_sorted_index_plus_eighteen = grades_sorted_index_plus_seventeen + 1\n  const grades_sorted_index_minus_eighteen = grades_sorted_index_minus_seventeen - 1\n  const grades_sorted_index_plus_nineteen = grades_sorted_index_plus_eighteen + 1\n  const grades_sorted_index_minus_nineteen = grades_sorted_index_minus_eighteen - 1\n  const grades_sorted_index_plus_twenty = grades_sorted_index_plus_nineteen + 1\n  const grades_sorted_index_minus_twenty = grades_sorted_index_minus_nineteen - 1\n  const grades_sorted_index_plus_twenty_one = grades_sorted_index_plus_twenty + 1\n  const grades_sorted_index_minus_twenty_one = grades_sorted_index_minus_twenty - 1\n  const grades_sorted_index_plus_twenty_two = grades_sorted_index_plus_twenty_one + 1\n  const grades_sorted_index_minus_twenty_two = grades_sorted_index_minus_twenty_one - 1\n  const grades_sorted"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const is_prime = (n) => {\n    if (n < 2) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n === 3) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    if (n % 3 === 0) {\n      return false;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i += 6;\n    }\n    return true;\n  };\n  const is_not_prime = (n) => {\n    if (n < 2) {\n      return true;\n    }\n    if (n === 2) {\n      return false;\n    }\n    if (n === 3) {\n      return false;\n    }\n    if (n % 2 === 0) {\n      return true;\n    }\n    if (n % 3 === 0) {\n      return true;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return true;\n      }\n      i += 6;\n    }\n    return false;\n  };\n  const is_prime_number = (n) => {\n    if (n < 2) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n === 3) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    if (n % 3 === 0) {\n      return false;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i += 6;\n    }\n    return true;\n  };\n  const is_not_prime_number = (n) => {\n    if (n < 2) {\n      return true;\n    }\n    if (n === 2) {\n      return false;\n    }\n    if (n === 3) {\n      return false;\n    }\n    if (n % 2 === 0) {\n      return true;\n    }\n    if (n % 3 === 0) {\n      return true;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return true;\n      }\n      i += 6;\n    }\n    return false;\n  };\n  const is_prime_number = (n) => {\n    if (n < 2) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n === 3) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    if (n % 3 === 0) {\n      return false;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i += 6;\n    }\n    return true;\n  };\n  const is_not_prime_number = (n) => {\n    if (n < 2) {\n      return true;\n    }\n    if (n === 2) {\n      return false;\n    }\n    if (n === 3) {\n      return false;\n    }\n    if (n % 2 === 0) {\n      return true;\n    }\n    if (n % 3 === 0) {\n      return true;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return true;\n      }\n      i += 6;\n    }\n    return false;\n  };\n  const is_prime = (n) => {\n    if (n < 2) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n === 3) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    if (n % 3 === 0) {\n      return false;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i += 6;\n    }\n    return true;\n  };\n  const is_not_prime = (n) => {\n    if (n < 2) {\n      return true;\n    }\n    if (n === 2) {\n      return false;\n    }\n    if (n === 3) {\n      return false;\n    }\n    if (n % 2 === 0) {\n      return true;\n    }\n    if (n % 3 === 0) {\n      return true;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return true;\n      }\n      i += 6;\n    }\n    return false;\n  };\n  const is_prime_number = (n) => {\n    if (n < 2) {\n      return false;\n    }\n    if (n === 2) {\n      return true;\n    }\n    if (n === 3) {\n      return true;\n    }\n    if (n % 2 === 0) {\n      return false;\n    }\n    if (n % 3 === 0) {\n      return false;\n    }\n    let i = 5;\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        count++;\n      }\n      start = start / 10;\n    }\n    let end = i;\n    while (end < n) {\n      if (end % 10 === 1) {\n        count++;\n      }\n      end = end / 10;\n    }\n  }\n  return count;\n};\n\nconsole.log(starts_one_ends(10));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = N.toString(2).split('').reduce((a, b) => a + b, 0);\n  return sum.toString(2);\n};\n\nexport default solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  let sum = 0;\n  for"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const words = s.split(' ')\n  const new_words = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const new_word = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const new_char = char\n      if (char.charCodeAt(0) > char.charCodeAt(j + 1)) {\n        new_char = char.charCodeAt(j + 1)\n      }\n      new_word += new_char\n    }\n    new_words.push(new_word)\n  }\n  return new_words.join(' ')\n}\n\nconsole.log(anti_shuffle('Hi'))\nconsole.log(anti_shuffle('hello'))\nconsole.log(anti_shuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const rows = lst.map(row => row.slice(0, x))\n  const rows_sorted = rows.sort((a, b) => a[0] - b[0])\n  const rows_sorted_reverse = rows_sorted.reverse()\n  return rows_sorted.concat(rows_sorted_reverse)\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer y, find integers y in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  get_column([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 0), (3, 1), (3, 2)]\n  get_column([], 1) == []\n  get_column([[], [1], [1, 2, 3]], 3) == [(0, 3), (1, 3), (1, 2), (2, 3)]\n  */\nconst get_column = (lst, y) => {\n  const columns = lst.map(row => row.slice(y))\n  const columns_sorted = columns.sort((a, b) => a[0] - b[0])\n  const columns_sorted_reverse = columns_sorted.reverse()\n  return columns_sorted.concat(columns_sorted_reverse)\n}\n\nconst get_coordinates = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns)\n}\n\nconst get_coordinates_sorted = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => a[0] - b[0])\n}\n\nconst get_coordinates_sorted_reverse = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n\nconst get_coordinates_sorted_reverse_2 = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n\nconst get_coordinates_sorted_reverse_3 = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n\nconst get_coordinates_sorted_reverse_4 = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n\nconst get_coordinates_sorted_reverse_5 = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n\nconst get_coordinates_sorted_reverse_6 = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n\nconst get_coordinates_sorted_reverse_7 = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n\nconst get_coordinates_sorted_reverse_8 = (lst, x, y) => {\n  const rows = get_row(lst, x)\n  const columns = get_column(lst, y)\n  return rows.concat(columns).sort((a, b) => b[0] - a[0])\n}\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const sorted_array = array.slice().sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 1) {\n      return a - b;\n    }\n    return b - a;\n  });\n  return sorted_array;\n};\n\nexport default sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const alphabet_rotation = (n) => {\n    const new_alphabet = [];\n    for (let i = 0; i < alphabet_length; i++) {\n      new_alphabet.push(alphabet[(i + n) % alphabet_length]);\n    }\n    return new_alphabet;\n  };\n  const rotate = (s, n) => {\n    const new_s = [];\n    for (let i = 0; i < s.length; i++) {\n      new_s.push(alphabet[(s.charCodeAt(i) + n) % alphabet_length]);\n    }\n    return new_s;\n  };\n  return rotate(s, alphabet_rotation(2));\n};\n\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const alphabet_length = alphabet.length;\n  const alphabet_rotation = (n) => {\n    const new_alphabet = [];\n    for (let i = 0; i < alphabet_length; i++) {\n      new_alphabet.push(alphabet[(alphabet_length - i - 1 + n) % alphabet_length]);\n    }\n    return new_alphabet;\n  };\n  const rotate = (s, n) => {\n    const new_s = [];\n    for (let i = 0; i < s.length; i++) {\n      new_s.push(alphabet[(s.charCodeAt(i) - n) % alphabet_length]);\n    }\n    return new_s;\n  };\n  return rotate(s, alphabet_rotation(2));\n};\n\nconst encrypt_decrypt = (s) => {\n  const encrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const alphabet_length = alphabet.length;\n    const alphabet_rotation = (n) => {\n      const new_alphabet = [];\n      for (let i = 0; i < alphabet_length; i++) {\n        new_alphabet.push(alphabet[(i + n) % alphabet_length]);\n      }\n      return new_alphabet;\n    };\n    const rotate = (s, n) => {\n      const new_s = [];\n      for (let i = 0; i < s.length; i++) {\n        new_s.push(alphabet[(s.charCodeAt(i) + n) % alphabet_length]);\n      }\n      return new_s;\n    };\n    return rotate(s, alphabet_rotation(2));\n  };\n  const decrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const alphabet_length = alphabet.length;\n    const alphabet_rotation = (n) => {\n      const new_alphabet = [];\n      for (let i = 0; i < alphabet_length; i++) {\n        new_alphabet.push(alphabet[(alphabet_length - i - 1 + n) % alphabet_length]);\n      }\n      return new_alphabet;\n    };\n    const rotate = (s, n) => {\n      const new_s = [];\n      for (let i = 0; i < s.length; i++) {\n        new_s.push(alphabet[(s.charCodeAt(i) - n) % alphabet_length]);\n      }\n      return new_s;\n    };\n    return rotate(s, alphabet_rotation(2));\n  };\n  return {\n    encrypt: encrypt,\n    decrypt: decrypt\n  };\n};\n\nconst encrypt_decrypt_test = () => {\n  const encrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const alphabet_length = alphabet.length;\n    const alphabet_rotation = (n) => {\n      const new_alphabet = [];\n      for (let i = 0; i < alphabet_length; i++) {\n        new_alphabet.push(alphabet[(i + n) % alphabet_length]);\n      }\n      return new_alphabet;\n    };\n    const rotate = (s, n) => {\n      const new_s = [];\n      for (let i = 0; i < s.length; i++) {\n        new_s.push(alphabet[(s.charCodeAt(i) + n) % alphabet_length]);\n      }\n      return new_s;\n    };\n    return rotate(s, alphabet_rotation(2));\n  };\n  const decrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const alphabet_length = alphabet.length;\n    const alphabet_rotation = (n) => {\n      const new_alphabet = [];\n      for (let i = 0; i < alphabet_length; i++) {\n        new_alphabet.push(alphabet[(alphabet_length - i - 1 + n) % alphabet_length]);\n      }\n      return new_alphabet;\n    };\n    const rotate = (s, n) => {\n      const new_s = [];\n      for (let i = 0; i < s.length; i++) {\n        new_s.push(alphabet[(s.charCodeAt(i) - n) % alphabet_length]);\n      }\n      return new_s;\n    };\n    return rotate(s, alphabet_rotation(2));\n  };\n  return {\n    encrypt: encrypt,\n    decrypt: decrypt\n  };\n};\n\nconst encrypt_decrypt_test_2 = () => {\n  const encrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    "}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  let smallest = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      index = i;\n    }\n  }\n  if (index === 0) {\n    return null;\n  }\n  return lst[index - 1];\n};\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5, 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  const is_bored_words = S.split('.').filter(x => x.startsWith('I')).length\n  const is_bored_sentences = S.split('.').filter(x => x.startsWith('I')).length\n  const is_bored_sentences_words = S.split('.').filter(x => x.startsWith('I')).length\n  return is_bored_words + is_bored_sentences + is_bored_sentences_words\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_boring(\"Hello world\")\n  0\n  >>> is_boring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_boring = (S) => {\n  const is_boring_words = S.split('.').filter(x => x.startsWith('I')).length\n  const is_boring_sentences = S.split('.').filter(x => x.startsWith('I')).length\n  const is_boring_sentences_words = S.split('.').filter(x => x.startsWith('I')).length\n  return is_boring_words + is_boring_sentences + is_boring_sentences_words\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_boring(\"Hello world\")\n  0\n  >>> is_boring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_boring_words = (S) => {\n  const is_boring_words = S.split('.').filter(x => x.startsWith('I')).length\n  const is_boring_sentences = S.split('.').filter(x => x.startsWith('I')).length\n  const is_boring_sentences_words = S.split('.').filter(x => x.startsWith('I')).length\n  return is_boring_words + is_boring_sentences + is_boring_sentences_words\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_boring(\"Hello world\")\n  0\n  >>> is_boring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_boring_sentences = (S) => {\n  const is_boring_sentences = S.split('.').filter(x => x.startsWith('I')).length\n  const is_boring_sentences_words = S.split('.').filter(x => x.startsWith('I')).length\n  return is_boring_sentences + is_boring_sentences_words\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_boring(\"Hello world\")\n  0\n  >>> is_boring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_boring_sentences_words = (S) => {\n  const is_boring_sentences_words = S.split('.').filter(x => x.startsWith('I')).length\n  return is_boring_sentences_words\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_boring(\"Hello world\")\n  0\n  >>> is_boring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_boring_words_sentences = (S) => {\n  const is_boring_words_sentences = S.split('.').filter(x => x.startsWith('I')).length\n  const is_boring_sentences_words = S.split('.').filter(x => x.startsWith('I')).length\n  return is_boring_words_sentences + is_boring_sentences_words\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A boring sentence is a sentence that starts with the\n  word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_boring(\"Hello world\")\n  0\n  >>> is_boring(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_boring_words_sentences_words = (S) => {\n  const is_boring_words_sentences_words = S.split('.').filter(x => x.startsWith('I')).length\n  return is_boring_words_sentences_words\n}\n\n/*\n  You'll be given a string of words, and"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_2 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_3 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_4 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_5 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_6 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_7 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_8 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int_9 = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === x || sum === y || sum === z;\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const message = message.toLowerCase();\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowelsLength = vowels.length;\n  const consonantsLength = consonants.length;\n  const messageLength = message.length;\n  const encodedMessage = '';\n  const i = 0;\n  const j = 0;\n  const k = 0;\n  const l = 0;\n  const m = 0;\n  const n = 0;\n  const p = 0;\n  const q = 0;\n  const r = 0;\n  const s = 0;\n  const t = 0;\n  const v = 0;\n  const w = 0;\n  const x = 0;\n  const y = 0;\n  const z = 0;\n  while (i < messageLength) {\n    if (vowels.includes(message[i])) {\n      encodedMessage += consonants[vowels.indexOf(message[i]) + vowelsLength];\n    } else if (consonants.includes(message[i])) {\n      encodedMessage += vowels[consonants.indexOf(message[i]) + consonantsLength];\n    } else {\n      encodedMessage += message[i];\n    }\n    i++;\n  }\n  return encodedMessage;\n};\n\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let prime = isPrime(num);\n    if (prime) {\n      max = Math.max(max, num);\n      sum += num;\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_2 = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_3 = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_4 = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_5 = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_6 = (dict) => {\n  const keys = Object.keys(dict)\n  return keys.every(key => {\n    return key.toLowerCase() === key || key.toUpperCase() === key\n  })\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const primes = []\n  const is_prime = (n) => {\n    if (n === 1) return false\n    if (n === 2) return true\n    if (n % 2 === 0) return false\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) return false\n    }\n    return true\n  }\n  for (let i = 2; i <= n; i++) {\n    if (is_prime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconsole.log(count_up_to(5))\nconsole.log(count_up_to(11))\nconsole.log(count_up_to(0))\nconsole.log(count_up_to(20))\nconsole.log(count_up_to(1))\nconsole.log(count_up_to(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply2 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply3 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply4 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply5 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply6 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply7 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply8 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply9 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply10 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply11 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply12 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply13 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply14 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply15 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply16 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply17 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply18 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply19 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply20 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply21 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply22 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply23 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] * b[i];\n  }\n  return result;\n};\n\nconst multiply24 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    result"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 1\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  count_vowels('aBCdEf') returns 3\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 2\n  */\nconst count_vowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 0\n  */\nconst count_consonants = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_upper_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_lower_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 0\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_upper_lower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++;\n    }\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer_2 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\nconst closest_integer_3 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\nconst closest_integer_4 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\nconst closest_integer_5 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\nconst closest_integer_6 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\nconst closest_integer_7 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\nconst closest_integer_8 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_diff = Math.abs(abs_number_ceil - abs_number_floor);\n  if (abs_number_diff === 1) {\n    return number > 0? abs_number_ceil : abs_number_floor;\n  }\n  return number;\n};\n\nconst closest_integer_9 = (value) => {\n  const number = parseInt(value, 10);\n  const abs_number = Math.abs(number);\n  const abs_number_floor = Math.floor(abs_number);\n  const abs_number_ceil = Math.ceil(abs_number);\n  const abs_number_"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n    if (i % 2 === 0) {\n      pile.push(i + 1)\n    }\n  }\n  return pile\n}\n\nconst make_a_pile_2 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_3 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_4 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_5 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_6 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_7 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_8 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_9 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_10 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_11 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_12 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_13 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_14 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_15 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_16 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_17 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_18 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_19 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_20 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_21 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_22 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_23 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_24 = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\nconst make_a_pile_25 = (n) => {\n"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_2 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_3 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_4 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_5 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_6 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_7 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_8 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_9 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_10 = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return choose_num(x, mid - 1);\n};\n\nconst choose_num_test = [\n  [12, 15],\n  [13, 12],\n  [14, 13],\n  [15, 14],\n  [16, 15],\n  [17, 16],\n  [18, 17],\n  [19, 18],\n  [20, 19],\n  [21, 20],\n  [22, 21],\n  [23, 22],\n  [24, 23],\n  [25, 24],\n  [26, 25],\n  [27, 26],\n  [28, 27],\n  [29, 28],\n  [30, 29],\n  [31, 30],\n  [32, 31],\n  [33, 32],\n  [34, 33],\n  [35, 34],\n  [36, 35],\n  [37, 36],\n  [38, 37],\n  [39, 38],\n  [40, 39],\n  [41, 40],\n  [42, 41],\n  [43, 42],\n  [44, 43],\n  [45, 44],\n  [46, 45],\n  [47, 46],\n  [48, 47],\n  [49, 48],\n  [50, 49],\n  [51, 50],\n  [52, 51],\n  [53, 52],\n  [54, 53],\n  [55, 54],\n  [56, 55],\n  [57, 56],\n  [58, 57],\n  [59, 58],\n  [60, 59],\n  [61, 60],\n  [62, 61],\n  [63, 62],\n  [64, 63],\n  [65, 64],\n  [66, 65],\n  [67, 66],\n  [68, 67],\n  [69, 68],\n  [70, 69],\n  [71, 70],\n  [72, 71],\n  [73, 72],\n  [74, 73],\n  [75, 74],\n  [76, 75],\n  [77, 76],\n  [78, 77],\n  [79, 78],\n  [80, 79],\n  [81, 80],\n  [82, 81],\n  [83, 82],\n  [84, 83],\n  [85, 84],\n  [86, 85],\n  [87, 86],\n  [88, 87],\n  [89, 88],\n  [90, 89],\n  [91, 90],\n  [92, 91],\n  [93, 92],\n  [94, 93],\n  [95, 94],\n  [96, 95],\n  [97, 96],\n  [98, 97],\n  [99, 98],\n  [100, 99],\n  [101, 100],\n  [102, 101],\n  [103, 102],\n  [104, 103],\n  [105, 104],\n  [106, 105],\n  [107, 106],\n  [108, 107],\n  [109, 108],\n  [110, 109],\n  [111, 110],\n  [112, 111],\n  [113, 112],\n  [114, 113],\n  [115, 114],\n  [116, 115],\n  [117, 116],\n  [118, 117],\n  [119, 118],\n  [120, 119],\n  [121, 120],\n  [122, 121],\n  [123, 122],\n  [124, 123],\n  [125, 124],\n  [126, 125],\n  [127, 126],\n  [128, 127],\n  [129, 128],\n  [130, 129],\n  [131, 130],\n  [132, 131],\n  [133, 132],\n  [134, 133],\n  [135, 134],\n  [136, 135],\n  [137, 136],\n  [138, 137],\n  [139, 138],\n  [140, 139],\n  [141, 140],\n  [142, 141],\n  [143, 142],\n  [144, 143],\n  [145, 144],\n  [146, 145],\n  [147, 146],\n  [148, 147],\n  [149, 148],\n  [150, 149],\n  [151, 150],\n  [152, 151],\n  [153, 152],\n  [154, 153],\n  [155, 154],\n  [156, 155],\n  [157, 156],\n  [158, 157],\n  [159, 158],\n  [160, 159],\n  [161, 160],\n  [162, 161],\n  [163, 162],\n  [164, 163],\n  [165, 164],\n  [166, 165],\n  [167, 166],\n  [168, 167],\n  [169, 168],\n  [170, 169],\n  [171, 170],\n  [172, 171],\n  [173, 172],\n  [174, 173],\n  [175, 174],\n  [176, 175],\n  [177, 176],\n  [178, 177],\n  [179, 178],\n  [180, 179],\n  [181, 180],\n  [182, 181],\n  [183, 182],\n  [184, 183],\n  [185, 184],\n  [186, 185],\n  [187, 186],\n  [188, 187],\n  [189, 188],\n  [190, 189],\n  [191, 190],\n  [192, 191],\n  [193, 192],\n  [194, 193],\n  [195, 194],\n  [196, 195],\n  [197, 196],\n  [198, 197],\n  [199, 198],\n  [200, 199],\n  [201, 200],\n  [202, 201],\n  [203, 202"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  const n_m = n + m\n  const n_m_1 = n_m - 1\n  const n_m_2 = n_m - 2\n  const n_m_3 = n_m - 3\n  const n_m_4 = n_m - 4\n  const n_m_5 = n_m - 5\n  const n_m_6 = n_m - 6\n  const n_m_7 = n_m - 7\n  const n_m_8 = n_m - 8\n  const n_m_9 = n_m - 9\n  const n_m_10 = n_m - 10\n  const n_m_11 = n_m - 11\n  const n_m_12 = n_m - 12\n  const n_m_13 = n_m - 13\n  const n_m_14 = n_m - 14\n  const n_m_15 = n_m - 15\n  const n_m_16 = n_m - 16\n  const n_m_17 = n_m - 17\n  const n_m_18 = n_m - 18\n  const n_m_19 = n_m - 19\n  const n_m_20 = n_m - 20\n  const n_m_21 = n_m - 21\n  const n_m_22 = n_m - 22\n  const n_m_23 = n_m - 23\n  const n_m_24 = n_m - 24\n  const n_m_25 = n_m - 25\n  const n_m_26 = n_m - 26\n  const n_m_27 = n_m - 27\n  const n_m_28 = n_m - 28\n  const n_m_29 = n_m - 29\n  const n_m_30 = n_m - 30\n  const n_m_31 = n_m - 31\n  const n_m_32 = n_m - 32\n  const n_m_33 = n_m - 33\n  const n_m_34 = n_m - 34\n  const n_m_35 = n_m - 35\n  const n_m_36 = n_m - 36\n  const n_m_37 = n_m - 37\n  const n_m_38 = n_m - 38\n  const n_m_39 = n_m - 39\n  const n_m_40 = n_m - 40\n  const n_m_41 = n_m - 41\n  const n_m_42 = n_m - 42\n  const n_m_43 = n_m - 43\n  const n_m_44 = n_m - 44\n  const n_m_45 = n_m - 45\n  const n_m_46 = n_m - 46\n  const n_m_47 = n_m - 47\n  const n_m_48 = n_m - 48\n  const n_m_49 = n_m - 49\n  const n_m_50 = n_m - 50\n  const n_m_51 = n_m - 51\n  const n_m_52 = n_m - 52\n  const n_m_53 = n_m - 53\n  const n_m_54 = n_m - 54\n  const n_m_55 = n_m - 55\n  const n_m_56 = n_m - 56\n  const n_m_57 = n_m - 57\n  const n_m_58 = n_m - 58\n  const n_m_59 = n_m - 59\n  const n_m_60 = n_m - 60\n  const n_m_61 = n_m - 61\n  const n_m_62 = n_m - 62\n  const n_m_63 = n_m - 63\n  const n_m_64 = n_m - 64\n  const n_m_65 = n_m - 65\n  const n_m_66 = n_m - 66\n  const n_m_67 = n_m - 67\n  const n_m_68 = n_m - 68\n  const n_m_69 = n_m - 69\n  const n_m_70 = n_m - 70\n  const n_m_71 = n_m - 71\n  const n_m_72 = n_m - 72\n  const n_m_73 = n_m - 73\n  const n_m_74 = n_m - 74\n  const n_m_75 = n_m - 75\n  const n_m_76 = n_m - 76\n  const n_m_77 = n_m - 77\n  const n_m_78 = n_m - 78\n  const n_m_79 = n_m - 79\n  const n_m_80 = n_m - 80\n  const n_m_81 = n_m - 81\n  const n_m_82 = n_m - 82\n  const n_m_83 = n_m - 83\n  const n_m_84 = n_m - 84\n  const n_m_85 = n_m - 85\n  const n_m_86 = n_m - 86\n  const n_m_87 = n_m - 87\n  const n_m_88 = n_m - 88\n  const n_m_89 = n_m - 89\n  const n_m_90 = n_m - 90\n  const n_m_91 = n_m - 91\n  const n_m_92 = n_m - 92\n  const n_m_93 = n_m - 93\n  const n_m_94 = n_m - 94\n  const n_m_95 = n_m - 95\n  const n_m_96 = n_m - 96\n  const n_m_97 = n_m - 97\n  const n_m_98 = n_m - 98\n  const n"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const digits = x.toString().split('').reverse();\n  const result = [];\n  for (let i = 0; i < digits.length; i++) {\n    if (i % 2 === 0) {\n      continue;\n    }\n    result.push(parseInt(digits[i]));\n  }\n  return result;\n};\n\nconsole.log(unique_digits([15, 33, 1422, 1]));\nconsole.log(unique_digits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const arr_length = arr.length\n  const sorted_arr = arr.sort((a, b) => a - b)\n  const reversed_arr = sorted_arr.reverse()\n  const sorted_arr_length = sorted_arr.length\n  const reversed_arr_length = reversed_arr.length\n  const sorted_arr_length_diff = sorted_arr_length - reversed_arr_length\n  const sorted_arr_length_diff_length = sorted_arr_length_diff.length\n  const sorted_arr_length_diff_length_diff = sorted_arr_length_diff_length - 1\n  const sorted_arr_length_diff_length_diff_diff = sorted_arr_length_diff_length_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff = sorted_arr_length_diff_length_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - 1\n  const sorted_arr_length_diff_length_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(Math.pow(i, i));\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const odd_palindrome = (n) => {\n    let odd_palindrome_count = 0;\n    let odd_palindrome_start = 1;\n    while (odd_palindrome_start <= n) {\n      if (is_palindrome(odd_palindrome_start)) {\n        odd_palindrome_count++;\n      }\n      odd_palindrome_start += 2;\n    }\n    return odd_palindrome_count;\n  };\n  const even_palindrome = (n) => {\n    let even_palindrome_count = 0;\n    let even_palindrome_start = 1;\n    while (even_palindrome_start <= n) {\n      if (is_palindrome(even_palindrome_start)) {\n        even_palindrome_count++;\n      }\n      even_palindrome_start += 2;\n    }\n    return even_palindrome_count;\n  };\n  const is_palindrome = (n) => {\n    let reverse = 0;\n    while (n > 0) {\n      reverse = reverse * 10 + n % 10;\n      n = n / 10;\n    }\n    return reverse === n;\n  };\n  return [even_palindrome(n), odd_palindrome(n)];\n};\n\nconst even_odd_palindrome_test = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(3);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(12);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_2 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(12);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_3 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(1);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_4 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(10);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_5 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(100);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_6 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(1000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_7 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(10000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_8 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(100000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_9 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(1000000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_10 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(10000000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_11 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(100000000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_12 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(1000000000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_13 = () => {\n  const [odd_palindrome, even_palindrome] = even_odd_palindrome(10000000000);\n  console.log(odd_palindrome);\n  console.log(even_palindrome);\n};\n\nconst even_odd_palindrome_test_14 = () => {\n  const [odd_palindrome, even_"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      let sum = 0;\n      while (num > 0) {\n        sum += num % 10;\n        num = num / 10;\n      }\n      if (sum > 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\nconsole.log(count_nums([1, 2, 3]));\nconsole.log(count_nums([-1, -2, -3]));\nconsole.log(count_nums([-1, -2, -3, -4]));\nconsole.log(count_nums([-1, -2, -3, -4, -5]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]));\nconsole.log(count_nums([-1, -2, -3, -4, -5, -6"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      break;\n    }\n  }\n  return i === j;\n};\n\nconst move_one_ball_test = () => {\n  let arr = [3, 4, 5, 1, 2];\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball(arr));\n  console.log(move_one_ball("}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const len2 = lst2.length;\n  if (len!== len2) {\n    return false;\n  }\n  const lst = [];\n  for (let i = 0; i < len; i++) {\n    lst.push(lst1[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    lst.push(lst2[i]);\n  }\n  const lst2 = lst.slice(0, len);\n  const lst1 = lst.slice(len, lst.length);\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] % 2!== 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport {exchange};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n  }\n  return histogram;\n};\n\nconst test = 'a b c a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a b a"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    while (i < len && c.indexOf(s[i])!== -1) {\n      i++\n    }\n    while (j >= 0 && c.indexOf(s[j])!== -1) {\n      j--\n    }\n    if (i < j) {\n      s = s.substring(0, i) + s.substring(j + 1)\n    }\n  }\n  return [s, s.length === len? true : false]\n}\n\nexport default reverse_delete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  const odd_count = (str) => {\n    const odd_count = (str) => {\n      const odd_count = (str) => {\n        const odd_count = (str) => {\n          const odd_count = (str) => {\n            const odd_count = (str) => {\n              const odd_count = (str) => {\n                const odd_count = (str) => {\n                  const odd_count = (str) => {\n                    const odd_count = (str) => {\n                      const odd_count = (str) => {\n                        const odd_count = (str) => {\n                          const odd_count = (str) => {\n                            const odd_count = (str) => {\n                              const odd_count = (str) => {\n                                const odd_count = (str) => {\n                                  const odd_count = (str) => {\n                                    const odd_count = (str) => {\n                                      const odd_count = (str) => {\n                                        const odd_count = (str) => {\n                                          const odd_count = (str) => {\n                                            const odd_count = (str) => {\n                                              const odd_count = (str) => {\n                                                const odd_count = (str) => {\n                                                  const odd_count = (str) => {\n                                                    const odd_count = (str) => {\n                                                      const odd_count = (str) => {\n                                                        const odd_count = (str) => {\n                                                          const odd_count = (str) => {\n                                                           const odd_count = (str) => {\n                                                            const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str)"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  const min = nums.reduce((a, b) => a + b, 0);\n  const sum = nums.reduce((a, b) => a + b, 0);\n  const min_sum = sum;\n  const min_index = nums.indexOf(min);\n  const min_sub_array = nums.slice(min_index);\n  const min_sub_array_sum = min_sub_array.reduce((a, b) => a + b, 0);\n  return min_sub_array_sum < min_sum? min_sub_array_sum : min_sum;\n};\n\nconsole.log(min_sub_array_sum([2, 3, 4, 1, 2, 4]));\nconsole.log(min_sub_array_sum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test2 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test3 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test4 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test5 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test6 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test7 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test8 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test9 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test10 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[i][j]);\n      }\n    }\n  }\n  return count;\n};\n\nconst test11 = (grid, capacity) => {\n  let count = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count +="}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted_arr = arr.slice().sort((a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted_arr;\n};\n\nexport default sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const words = []\n  const len = s.length\n  let i = 0\n  while (i < len) {\n    let j = i\n    while (j < len && s[j]!=='') {\n      j++\n    }\n    if (j - i === n) {\n      words.push(s.slice(i, j))\n    }\n    i = j + 1\n  }\n  return words\n}\n\n/*\nGiven a string s and a non-negative integer n, you have to return the string \ncontaining n copies of the character 'a' in the string s.\nIf the character 'a' does not appear in the string, return the string consisting of \nonly the character 'a'.\nIf the string is empty, return an empty string.\nExamples:\ninsert_a(\"abc\", 2) ==> \"aaaab\"\ninsert_a(\"abc\", 3) ==> \"aaaaabc\"\ninsert_a(\"abc\", 4) ==> \"aaaaabc\"\ninsert_a(\"abc\", 5) ==> \"aaaaabc\"\ninsert_a(\"abc\", 6) ==> \"aaaaabc\"\ninsert_a(\"abc\", 7) ==> \"aaaaabc\"\ninsert_a(\"abc\", 8) ==> \"aaaaabc\"\ninsert_a(\"abc\", 9) ==> \"aaaaabc\"\ninsert_a(\"abc\", 10) ==> \"aaaaabc\"\ninsert_a(\"abc\", 11) ==> \"aaaaabc\"\ninsert_a(\"abc\", 12) ==> \"aaaaabc\"\ninsert_a(\"abc\", 13) ==> \"aaaaabc\"\ninsert_a(\"abc\", 14) ==> \"aaaaabc\"\ninsert_a(\"abc\", 15) ==> \"aaaaabc\"\ninsert_a(\"abc\", 16) ==> \"aaaaabc\"\ninsert_a(\"abc\", 17) ==> \"aaaaabc\"\ninsert_a(\"abc\", 18) ==> \"aaaaabc\"\ninsert_a(\"abc\", 19) ==> \"aaaaabc\"\ninsert_a(\"abc\", 20) ==> \"aaaaabc\"\ninsert_a(\"abc\", 21) ==> \"aaaaabc\"\ninsert_a(\"abc\", 22) ==> \"aaaaabc\"\ninsert_a(\"abc\", 23) ==> \"aaaaabc\"\ninsert_a(\"abc\", 24) ==> \"aaaaabc\"\ninsert_a(\"abc\", 25) ==> \"aaaaabc\"\ninsert_a(\"abc\", 26) ==> \"aaaaabc\"\ninsert_a(\"abc\", 27) ==> \"aaaaabc\"\ninsert_a(\"abc\", 28) ==> \"aaaaabc\"\ninsert_a(\"abc\", 29) ==> \"aaaaabc\"\ninsert_a(\"abc\", 30) ==> \"aaaaabc\"\ninsert_a(\"abc\", 31) ==> \"aaaaabc\"\ninsert_a(\"abc\", 32) ==> \"aaaaabc\"\ninsert_a(\"abc\", 33) ==> \"aaaaabc\"\ninsert_a(\"abc\", 34) ==> \"aaaaabc\"\ninsert_a(\"abc\", 35) ==> \"aaaaabc\"\ninsert_a(\"abc\", 36) ==> \"aaaaabc\"\ninsert_a(\"abc\", 37) ==> \"aaaaabc\"\ninsert_a(\"abc\", 38) ==> \"aaaaabc\"\ninsert_a(\"abc\", 39) ==> \"aaaaabc\"\ninsert_a(\"abc\", 40) ==> \"aaaaabc\"\ninsert_a(\"abc\", 41) ==> \"aaaaabc\"\ninsert_a(\"abc\", 42) ==> \"aaaaabc\"\ninsert_a(\"abc\", 43) ==> \"aaaaabc\"\ninsert_a(\"abc\", 44) ==> \"aaaaabc\"\ninsert_a(\"abc\", 45) ==> \"aaaaabc\"\ninsert_a(\"abc\", 46) ==> \"aaaaabc\"\ninsert_a(\"abc\", 47) ==> \"aaaaabc\"\ninsert_a(\"abc\", 48) ==> \"aaaaabc\"\ninsert_a(\"abc\", 49) ==> \"aaaaabc\"\ninsert_a(\"abc\", 50) ==> \"aaaaabc\"\ninsert_a(\"abc\", 51) ==> \"aaaaabc\"\ninsert_a(\"abc\", 52) ==> \"aaaaabc\"\ninsert_a(\"abc\", 53) ==> \"aaaaabc\"\ninsert_a(\"abc\", 54) ==> \"aaaaabc\"\ninsert_a(\"abc\", 55) ==> \"aaaaabc\"\ninsert_a(\"abc\", 56) ==> \"aaaaabc\"\ninsert_a(\"abc\", 57) ==> \"aaaaabc\"\ninsert_a(\"abc\", 58) ==> \"aaaaabc\"\ninsert_a(\"abc\", 59) ==> \"aaaaabc\"\ninsert_a(\"abc\", 60) ==> \"aaaaabc\"\ninsert_a(\"abc\", 61) ==> \"aaaaabc\"\ninsert_a(\"abc\", 62) ==> \"aaaaabc\"\ninsert_a(\"abc\", 63) ==> \"aaaaabc\"\ninsert_a(\"abc\", 64) ==> \"aaaaabc\"\ninsert_a(\"abc\", 65) ==> \"aaaaabc\"\ninsert_a(\"abc\", 66) ==> \"aaaaabc\"\ninsert_a(\"abc\", 67) ==> \"aaaaabc\"\ninsert_a(\"abc\", 68) ==> \"aaaaabc\"\ninsert_a(\"abc\", 69) ==> \"aaaaabc\"\ninsert_a(\"abc\", 70) ==> \"aaaaabc\"\ninsert_a(\"abc\", 71) ==> \"aaaaabc\"\ninsert_a(\"abc\", 72) ==> \"aaaaabc\"\ninsert_a(\"abc\", 73) ==> \"aaaaabc\"\ninsert_a(\"abc\", 74) ==> \"aaaaabc\"\ninsert_a(\"abc\", 75) ==> \"aaaaabc\"\ninsert_a(\"abc\", 76) ==> \"aaaaabc\"\ninsert_a(\"abc\", 77) ==> \"aaaaabc\"\ninsert_a(\"abc\", 78) ==> \"aaaaabc\"\ninsert_a(\""}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const closest_vowel = ''\n  const closest_vowel_distance = Infinity\n  const closest_vowel_index = -1\n  const closest_vowel_distance_index = -1\n  const closest_vowel_distance_index_distance = Infinity\n  for (let i = 0; i < word.length; i++) {\n    const vowel = word[i]\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(i - word.length)\n      if (distance < closest_vowel_distance) {\n        closest_vowel = vowel\n        closest_vowel_distance = distance\n        closest_vowel_index = i\n      }\n    }\n  }\n  for (let i = 0; i < word.length; i++) {\n    const consonant = word[i]\n    if (consonants.indexOf(consonant)!== -1) {\n      const distance = Math.abs(i - word.length)\n      if (distance < closest_vowel_distance) {\n        const distance_index = i\n        const distance_distance = distance\n        if (distance_distance < closest_vowel_distance_distance) {\n          closest_vowel_distance_index = distance_index\n          closest_vowel_distance_index_distance = distance_distance\n          closest_vowel_distance_index_distance = distance_distance\n        }\n      }\n    }\n  }\n  if (closest_vowel_distance_index!== -1) {\n    return word.substring(closest_vowel_index, closest_vowel_index + closest_vowel_distance_index_distance + 1)\n  }\n  return closest_vowel\n}\n\n/*\n  Given a string, find the longest string that can be formed by interleaving the characters of the string.\n  \n  Example:\n  interleaving(\"abc\", \"bcd\") ==> \"abcd\"\n  interleaving(\"aa\", \"a\") ==> \"aa\"\n  interleaving(\"a\", \"aa\") ==> \"aa\"\n  interleaving(\"abc\", \"\") ==> \"abc\"\n  interleaving(\"\", \"abc\") ==> \"abc\"\n  interleaving(\"a\", \"\") ==> \"\"\n  interleaving(\"\", \"\") ==> \"\"\n  */\nconst interleaving = (string, string2) => {\n  const result = []\n  const string_length = string.length\n  const string2_length = string2.length\n  for (let i = 0; i < string_length; i++) {\n    const char = string[i]\n    for (let j = 0; j < string2_length; j++) {\n      const char2 = string2[j]\n      result.push(char + char2)\n    }\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, find the longest string that can be formed by interleaving the characters of the string.\n  \n  Example:\n  interleaving(\"abc\", \"bcd\") ==> \"abcd\"\n  interleaving(\"aa\", \"a\") ==> \"aa\"\n  interleaving(\"a\", \"aa\") ==> \"aa\"\n  interleaving(\"abc\", \"\") ==> \"abc\"\n  interleaving(\"\", \"abc\") ==> \"abc\"\n  interleaving(\"a\", \"\") ==> \"\"\n  interleaving(\"\", \"\") ==> \"\"\n  */\nconst interleaving_2 = (string, string2) => {\n  const result = []\n  const string_length = string.length\n  const string2_length = string2.length\n  for (let i = 0; i < string_length; i++) {\n    const char = string[i]\n    for (let j = 0; j < string2_length; j++) {\n      const char2 = string2[j]\n      if (i + j < string_length) {\n        result.push(char + char2)\n      }\n    }\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, find the longest string that can be formed by interleaving the characters of the string.\n  \n  Example:\n  interleaving(\"abc\", \"bcd\") ==> \"abcd\"\n  interleaving(\"aa\", \"a\") ==> \"aa\"\n  interleaving(\"a\", \"aa\") ==> \"aa\"\n  interleaving(\"abc\", \"\") ==> \"abc\"\n  interleaving(\"\", \"abc\") ==> \"abc\"\n  interleaving(\"a\", \"\") ==> \"\"\n  interleaving(\"\", \"\") ==> \"\"\n  */\nconst interleaving_3 = (string, string2) => {\n  const result = []\n  const string_length = string.length\n  const string2_length = string2.length\n  for (let i = 0; i < string_length; i++) {\n    const char = string[i]\n    for (let j = 0; j < string2_length; j++) {\n      const char2 = string2[j]\n      if (i + j <"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(match_parens([]));\nconsole.log(match_parens(['(', ')', ')', '(']));\nconsole.log(match_parens([')', ')', '(']));\nconsole.log(match_parens(['(', ')', ')', '(']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr[0]\n  const maxIndex = 0\n  const maxLength = 1\n\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxIndex = i\n      maxLength = i + 1\n    }\n  }\n\n  return [...new Array(maxLength).fill(max),...arr.slice(maxIndex + 1)]\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements_9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_collatz = [];\n  let collatz = [1, n];\n  while (collatz.length > 1) {\n    let current = collatz.pop();\n    if (current % 2 === 0) {\n      collatz.push(current / 2);\n    } else {\n      collatz.push(3 * current + 1);\n    }\n    odd_collatz.push(current);\n  }\n  return odd_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [];\n  let collatz = [1, n];\n  while (collatz.length > 1) {\n    let current = collatz.pop();\n    if (current % 2 === 1) {\n      collatz.push(current / 2);\n    } else {\n      collatz.push(3 * current + 1);\n    }\n    even_collatz.push(current);\n  }\n  return even_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the sum of odd and even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_sum_collatz(5) returns [1, 5, 9] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the sum of odd and even numbers is 9.\n  */\nconst get_sum_collatz = (n) => {\n  let sum_collatz = [];\n  let collatz = [1, n];\n  while (collatz.length > 1) {\n    let current = collatz.pop();\n    sum_collatz.push(current);\n    sum_collatz.push(current + current);\n  }\n  return sum_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the sum of odd and even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_sum_collatz(5) returns [1, 5, 9] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the sum of odd and even numbers is 9.\n  */\nconst get_sum_odd_collatz = (n) => {\n  let sum_odd_collatz = [];\n  let collatz = [1, n];\n  while (collatz.length > 1) {\n    let current = collatz.pop();\n    sum_odd_collatz.push(current);\n    sum_odd_collatz.push(current + current);\n  }\n  return sum_odd_collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the sum of odd and even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_sum_odd_collatz(5) returns [1, 5, 9] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the sum of odd and even numbers is 9.\n  */\n"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const date_array = date.split('-');\n  const month = parseInt(date_array[1]);\n  const day = parseInt(date_array[2]);\n  const year = parseInt(date_array[0]);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date_2 = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const date_array = date.split('-');\n  const month = parseInt(date_array[1]);\n  const day = parseInt(date_array[2]);\n  const year = parseInt(date_array[0]);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nconst date = '03-11-2000';\nconsole.log(valid_date(date));\nconsole.log(valid_date_2(date));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_9 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_10 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_11 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_12 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_13 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_14 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_15 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_16 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_17 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_18 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_19 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_20 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_21 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_22 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_23 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_24 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_25 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_26 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_27 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_28 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_29 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_30 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_31 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_32 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_33 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst split_words_34 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.length === sorted.length && lst.every((x, i) => x === sorted[i]);\n};\n\nexport default is_sorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return \"NO\";\n  }\n  if (interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[0] > interval2[0] && interval1[1] < interval2[1]) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i]\n    if (sign === 1 || sign === -1 || sign === 0) {\n      result += Math.abs(arr[i]) * sign\n    }\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_2 = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i]\n    if (sign === 1 || sign === -1 || sign === 0) {\n      result += Math.abs(arr[i]) * sign\n    }\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_3 = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i]\n    if (sign === 1 || sign === -1 || sign === 0) {\n      result += Math.abs(arr[i]) * sign\n    }\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_4 = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i]\n    if (sign === 1 || sign === -1 || sign === 0) {\n      result += Math.abs(arr[i]) * sign\n    }\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_5 = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i]\n    if (sign === 1 || sign === -1 || sign === 0) {\n      result += Math.abs(arr[i]) * sign\n    }\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_6 = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i]\n    if (sign === 1 || sign === -1 || sign === 0) {\n      result += Math.abs(arr[i]) * sign\n    }\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_7 = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i]\n    if (sign === 1 || sign === -1 || sign === 0) {\n      result += Math.abs(arr[i]) * sign\n    }\n  }\n  return result\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n).fill(0);\n  const dp_row = new Array(m).fill(0);\n  const dp_col = new Array(m).fill(0);\n  const dp_row_col = new Array(n).fill(0);\n  const dp_row_col_row = new Array(n).fill(0);\n  const dp_row_col_col = new Array(n).fill(0);\n  const dp_row_col_col_row = new Array(n).fill(0);\n  const dp_row_col_col_row_col = new Array(n).fill(0);\n  const dp_row_col_col_row_col_row = new Array(n).fill(0);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      dp[i] = Math.min(dp[i], grid[i][j]);\n      dp_row[j] = Math.min(dp_row[j], grid[i][j]);\n      dp_col[j] = Math.min(dp_col[j], grid[i][j]);\n      dp_row_col[i][j] = Math.min(dp_row_col[i][j], grid[i][j]);\n      dp_row_col_row[i][j] = Math.min(dp_row_col_row[i][j], grid[i][j]);\n      dp_row_col_col[i][j] = Math.min(dp_row_col_col[i][j], grid[i][j]);\n      dp_row_col_col_row[i][j] = Math.min(dp_row_col_col_row[i][j], grid[i][j]);\n      dp_row_col_col_row_col[i][j] = Math.min(dp_row_col_col_row_col[i][j], grid[i][j]);\n    }\n  }\n\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      result.push(dp[i]);\n    }\n  }\n\n  return result;\n};\n\nconsole.log(min_path([[1,2,3], [4,5,6], [7,8,9]], 3));\nconsole.log(min_path([[5,9,3], [4,1,6], [7,8,2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return fib(n)\n}\n\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0\n"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  const brackets = /\\[|\\]/g;\n  const brackets_count = brackets.source.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let count = 0;\n  let nested = false;\n  while (i < string.length) {\n    if (string[i] === '[') {\n      stack.push(string[i]);\n      count++;\n    } else if (string[i] === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop();\n        count--;\n      } else {\n        return false;\n      }\n    }\n    i++;\n  }\n  if (stack.length === 0) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\nconst sum_squares_ceil = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.round(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_ceil_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_ceil = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_ceil_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_ceil_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.ceil(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => Math.floor(acc + curr * curr), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr)"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char.match(/[a-zA-Z]/) &&!last_char.match(/[a-zA-Z0-9]/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char.match(/[0-9]/) &&!last_char.match(/[a-zA-Z0-9]/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter_or_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter_or_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter_or_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter_or_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter_or_number = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char.match(/[a-zA-Z0-9]/) &&!last_char.match(/[a-zA-Z]/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter_or_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter_or_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter_or_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter_or_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter_or_number_and_not_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char.match(/[a-zA-Z0-9]/) &&!last_char.match(/[a-zA-Z0-9]/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"apple pie\") ➞ true\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"apple pi e \") ➞ true\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter_or_number_and_not_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  return last_char.match(/[a-zA-Z0-9]/) &&!last_char.match(/[a-zA-Z0-9]/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter_or_number_and_not_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter_or_number_and_not_a_word_and_not_a_space = (txt) => {\n  const last_char = txt."}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] < arr[i]) {\n      max = mid\n      i = mid + 1\n    } else {\n      j = mid\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_reverse = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] > arr[i]) {\n      max = mid\n      i = mid + 1\n    } else {\n      j = mid\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_reverse_2 = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] < arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_reverse_3 = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] > arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_reverse_4 = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] < arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_reverse_5 = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] > arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_reverse_6 = (arr) => {\n  let i = 0\n  let j = arr.length - 1\n  let max = -1\n  while (i < j) {\n    let mid = Math.floor((i + j) / 2)\n    if (arr[mid] < arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const largest = (a, b) => a > b? a : b\n  const smallest = (a, b) => a < b? a : b\n  const largest_smallest = (lst) => {\n    if (lst.length === 0) return null\n    const [a, b] = lst\n    return [largest(a, b), smallest(a, b)]\n  }\n  return largest_smallest(lst)\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_2 = (lst) => {\n  const largest = (a, b) => a > b? a : b\n  const smallest = (a, b) => a < b? a : b\n  const largest_smallest = (lst) => {\n    if (lst.length === 0) return null\n    const [a, b] = lst\n    return [largest(a, b), smallest(a, b)]\n  }\n  return largest_smallest(lst)\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_3 = (lst) => {\n  const largest = (a, b) => a > b? a : b\n  const smallest = (a, b) => a < b? a : b\n  const largest_smallest = (lst) => {\n    if (lst.length === 0) return null\n    const [a, b] = lst\n    return [largest(a, b), smallest(a, b)]\n  }\n  return largest_smallest(lst)\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_4 = (lst) => {\n  const largest = (a, b) => a > b? a : b\n  const smallest = (a, b) => a < b? a : b\n  const largest_smallest = (lst) => {\n    if (lst.length === 0) return null\n    const [a, b] = lst\n    return [largest(a, b), smallest(a, b)]\n  }\n  return largest_smallest(lst)\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_5 = (lst) => {\n  const largest = (a, b) => a > b? a : b\n  const smallest = (a, b) => a < b? a : b\n  const largest_smallest = (lst) => {\n    if (lst.length === 0) return null\n    const [a, b] = lst\n    return [largest(a, b), smallest(a, b)]\n  }\n  return largest_smallest(lst)\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers_6 = (lst) => {\n  const largest = (a, b) => a > b? a : b\n  const smallest = (a, b) => a < b? a : b\n  const largest_smallest = (lst) => {\n    if (lst.length === 0) return null\n    const [a, b] = lst\n    return [largest(a, b), smallest(a, b)]\n  }\n  return largest_smallest(lst)\n}\n\n/*\n  Create"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare_two = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compare_three = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare_four = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compare_five = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare_six = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compare_seven = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare_eight = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compare_nine = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare_ten = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compare_eleven = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare_twelve = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  }\n  return null;\n};\n\nconst compare_thirteen = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    b = parseFloat(b);\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare_fourteen = (a, b) => {\n  if (typeof a ==='string') {\n    a = parseFloat(a);\n  }\n  if (typeof b ==='string') {\n    "}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  const sum = n + n + n + n\n  return sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  is_equal_to_sum_even(3) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_3 = (n) => {\n  const sum = n + n + n\n  return sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  is_equal_to_sum_even(2) == true\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_2 = (n) => {\n  const sum = n + n\n  return sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  is_equal_to_sum_even(1) == true\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_1 = (n) => {\n  const sum = n\n  return sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 0 positive even numbers\n  Example\n  is_equal_to_sum_even(0) == true\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_0 = (n) => {\n  const sum = 0\n  return sum % 2 === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 1 positive odd number\n  Example\n  is_equal_to_sum_even(1) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_1_odd = (n) => {\n  const sum = n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  is_equal_to_sum_even(2) == false\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_2_odd = (n) => {\n  const sum = n + n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n  Example\n  is_equal_to_sum_even(3) == false\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_3_odd = (n) => {\n  const sum = n + n + n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_even(4) == true\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_4_odd = (n) => {\n  const sum = n + n + n + n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  Example\n  is_equal_to_sum_even(5) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_5_odd = (n) => {\n  const sum = n + n + n + n + n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive odd numbers\n  Example\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_6_odd = (n) => {\n  const sum = n + n + n + n + n + n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive odd numbers\n  Example\n  is_equal_to_sum_even(7) == false\n  is_equal_to_sum_even(8) == false\n  */\nconst is_equal_to_sum_even_7_odd = (n) => {\n  const sum = n + n + n + n + n + n + n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive odd numbers\n  Example\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even_8_odd = (n) => {\n  const sum = n + n + n + n + n + n + n + n + 1\n  return sum % 2 === 1\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive odd numbers\n  Example\n  is_equal_to_sum_even(9) == false\n  */\nconst is"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * special_factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1\n  }\n  return n * factorial(n - 1)\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  permutation of the given integer.\n  */\nconst permutation = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return permutation(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_recursive = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_recursive(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_2 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_2(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_3 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_3(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_4 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_4(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_5 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_5(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_6 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_6(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_7 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_7(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_8 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_8(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_9 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_9(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_10 = (n, arr) => {\n  if (n === 1) {\n    return arr\n  }\n  return combination_iterative_recursive_10(n - 1, arr.concat(arr.slice(0)))\n}\n\n/*\n  The function will receive an integer as input and should return the nth\n  combination of the given integer.\n  */\nconst combination_iterative_recursive_11 = ("}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s/g, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fix_underscores(\"Example\") == \"Example\"\n  fix_underscores(\"Example_1\") == \"Example 1\"\n  fix_underscores(\"_Example_2\") == \"Example 2\"\n  fix_underscores(\"_Example-3\") == \"Example 3\"\n  */\nconst fix_underscores = (text) => {\n  return text.replace(/_/g,'')\n}\n\n/*\n  Given a string text, replace all dashes in it with underscores, \n  and if a string has more than 2 consecutive dashes, \n  then replace all consecutive dashes with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_dashes = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all - and _ in it with spaces, \n  and if a string has more than 2 consecutive - or _, \n  then replace all consecutive - or _ with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_hyphens = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - and _ in it with dashes, \n  and if a string has more than 2 consecutive - or _, \n  then replace all consecutive - or _ with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_hyphens_dashes = (text) => {\n  return text.replace(/\\s/g, '-')\n}\n\n/*\n  Given a string text, replace all - and _ in it with dashes, \n  and if a string has more than 2 consecutive - or _, \n  then replace all consecutive - or _ with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_hyphens_underscores = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all - and _ in it with dashes, \n  and if a string has more than 2 consecutive - or _, \n  then replace all consecutive - or _ with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_hyphens_underscores_dashes = (text) => {\n  return text.replace(/\\s/g, '-')\n}\n\n/*\n  Given a string text, replace all - and _ in it with dashes, \n  and if a string has more than 2 consecutive - or _, \n  then replace all consecutive - or _ with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_hyphens_underscores_dashes_spaces = (text) => {\n  return text.replace(/-/g,'')\n}\n\n/*\n  Given a string text, replace all - and _ in it with dashes, \n  and if a string has more than 2 consecutive - or _, \n  then replace all consecutive - or _ with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_hyphens_underscores_dashes_spaces_hyphens = (text) => {\n  return text.replace(/\\s/g, '-')\n}\n\n/*\n  Given a string text, replace all - and _ in it with dashes, \n  and if a string has more than 2 consecutive - or _, \n  then replace all consecutive - or _ with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example_1\") == \"Example 1\"\n  fix_dashes(\"-Example_2\") == \"Example 2\"\n  fix_dashes(\"-Example-3\") == \"Example 3\"\n  */\nconst fix_hyphens_underscores_dashes_spaces_hyphens_dashes = (text) => {\n  return text.replace(/-/g, '_')\n}\n\n/*\n  Given a string text, replace all - and _ in it with dashes, \n  and if a string has more than 2"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  if(regex.test(file_name) && file_name.indexOf(\".\") === 0 && file_name.length > 1 && file_name.indexOf(\".\") === 1) {\n    return \"Yes\";\n  } else if(regex_2.test(file_name) && file_name.indexOf(\".\") === 1 && file_name.length > 2 && file_name.indexOf(\".\") === 2) {\n    return \"Yes\";\n  } else if(regex_3.test(file_name) && file_name.indexOf(\".\") === 1 && file_name.length > 2 && file_name.indexOf(\".\") === 2) {\n    return \"Yes\";\n  } else if(regex_4.test(file_name) && file_name.indexOf(\".\") === 1 && file_name.length > 2 && file_name.indexOf(\".\") === 2) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check_2 = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*$/;\n  const regex_2 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.txt$/;\n  const regex_3 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.exe$/;\n  const regex_4 = /^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z0-9]*\\.dll$/;\n  if(regex.test(file_name) && file_name.indexOf(\".\") === 0 && file_name.length > 1 && file_name.indexOf(\".\") === 1) {\n    return \"Yes\";\n  } else if(regex_2.test(file_name) && file_name.indexOf(\".\") === 1 && file_name.length > 2 && file_name.indexOf(\".\") === 2) {\n    return \"Yes\";\n  } else if(regex_3.test(file_name) && file_name.indexOf(\".\") === 1 && file_name.length > 2 && file_name.indexOf(\".\") === 2) {\n    return \"Yes\";\n  } else if(regex_4.test(file_name) && file_name.indexOf(\".\") === 1 && file_name.length > 2 && file_name.indexOf(\".\") === 2) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_cubes_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_cubes_squares_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(' ')\n  const new_words = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const new_word = []\n    for (let j = 0; j < word.length; j++) {\n      const new_char = word[j]\n      if (is_prime(new_char)) {\n        new_word.push(new_char)\n      }\n    }\n    new_words.push(new_word.join(' '))\n  }\n  return new_words.join(' ')\n}\n\nconst is_prime = (number) => {\n  if (number === 1) {\n    return false\n  }\n  let i = 2\n  while (i < number) {\n    if (number % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xs = x.split('/')\n  const ns = n.split('/')\n  const xn = parseInt(xs[0])\n  const nn = parseInt(ns[0])\n  if (xn === nn) {\n    return xn === 1\n  }\n  return false\n}\n\nconsole.log(simplify('1/5', '5/1'))\nconsole.log(simplify('1/6', '2/1'))\nconsole.log(simplify('7/10', '10/2'))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_test = () => {\n  const sorted = order_by_points([1, 11, -1, -11, -12]);\n  console.log(sorted);\n};\n\norder_by_points_test();\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  const odd_nums = nums.filter(num => num % 2 === 1)\n  const even_nums = nums.filter(num => num % 2 === 0)\n  return odd_nums.length + even_nums.length\n}\n\nconsole.log(special_filter([15, -73, 14, -15]))\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.length\n}\n\nconst get_triples = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_2 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_3 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_4 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_5 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_6 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_7 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_8 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_9 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_10 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_11 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_12 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_13 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_14 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_15 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x % 3 === 0)\n  return result.map((x) => [x, a[x], a[x + 1]])\n}\n\nconst get_triples_16 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const result = a.filter((x) => x"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Orbit = getOrbit(planet1);\n  const planet2Orbit = getOrbit(planet2);\n  const planet1OrbitLength = planet1Orbit.length;\n  const planet2OrbitLength = planet2Orbit.length;\n  const planet1OrbitIndex = planet1Orbit.indexOf(planet2);\n  const planet2OrbitIndex = planet2Orbit.indexOf(planet1);\n  const planet1OrbitIndexEnd = planet1OrbitIndex + planet1OrbitLength;\n  const planet2OrbitIndexEnd = planet2OrbitIndex + planet2OrbitLength;\n  const planet1OrbitEnd = planet1OrbitIndexEnd < planet1OrbitLength? planet1OrbitIndexEnd : planet1OrbitLength;\n  const planet2OrbitEnd = planet2OrbitIndexEnd < planet2OrbitLength? planet2OrbitIndexEnd : planet2OrbitLength;\n  const planet1OrbitStart = planet1OrbitIndex > 0? planet1OrbitIndex - 1 : 0;\n  const planet2OrbitStart = planet2OrbitIndex > 0? planet2OrbitIndex - 1 : 0;\n  const planet1OrbitStartEnd = planet1OrbitIndexStart + planet1OrbitLength;\n  const planet2OrbitStartEnd = planet2OrbitIndexStart + planet2OrbitLength;\n  const planet1OrbitStartEndEnd = planet1OrbitStartEnd < planet1OrbitLength? planet1OrbitStartEnd : planet1OrbitLength;\n  const planet2OrbitStartEndEnd = planet2OrbitStartEnd < planet2OrbitLength? planet2OrbitStartEnd : planet2OrbitLength;\n  const planet1OrbitStartEndEndEnd = planet1OrbitStartEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEnd = planet2OrbitStartEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEnd = planet1OrbitStartEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEnd = planet2OrbitStartEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEnd = planet1OrbitStartEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEnd = planet2OrbitStartEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEndEndEnd + planet1OrbitLength;\n  const planet2OrbitStartEndEndEndEndEndEndEndEnd = planet2OrbitStartEndEndEndEndEndEndEndEndEnd + planet2OrbitLength;\n  const planet1OrbitStartEndEndEndEndEndEndEndEnd = planet1OrbitStartEndEndEndEndEndEndEnd"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_2 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_3 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_4 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_5 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_6 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_7 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_8 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_9 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_10 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_11 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_12 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_13 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!== index);\n};\n\nconst list_sort_14 = (lst) => {\n  const sorted_list = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted_list.filter((curr, index) => sum % 2!"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_even = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_odd = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_even_odd = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_odd_even = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_odd_odd = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_even_odd = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0);\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_odd_even = (lst) => {\n  if (lst.length === 0) return 0;\n  const sum = lst.reduce((acc, curr) => acc + curr * cur"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare9 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare10 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\nconst compare11 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const strength = {};\n  extensions.forEach(ext => {\n    const cap = ext.replace(/\\W/g, '').toUpperCase().length;\n    const sm = ext.replace(/\\W/g, '').toLowerCase().length;\n    strength[ext] = (cap - sm) / cap;\n  });\n  const max_strength = Object.keys(strength).reduce((max, key) => {\n    return strength[key] > strength[max]? key : max;\n  }, '');\n  return class_name + '.' + max_strength + '.' + max_strength;\n};\n\nmodule.exports = strongest_extension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const len = a.length;\n  const bLen = b.length;\n  const aR = a.split('');\n  const bR = b.split('');\n  const aRLen = aR.length;\n  const bRLen = bR.length;\n  const aRLenMinus1 = aRLen - 1;\n  const bRLenMinus1 = bRLen - 1;\n  const aRMinus1 = aR.slice(0, aRLenMinus1);\n  const bRMinus1 = bR.slice(0, bRLenMinus1);\n  const aRMinus1R = aR.slice(aRLenMinus1);\n  const bRMinus1R = bR.slice(bRLenMinus1);\n  const aRMinus1RLen = aRMinus1R.length;\n  const bRMinus1RLen = bRMinus1R.length;\n  const aRMinus1RLenMinus1 = aRMinus1RLen - 1;\n  const bRMinus1RLenMinus1 = bRMinus1RLen - 1;\n  const aRMinus1RMinus1 = aRMinus1R.slice(0, aRMinus1RLenMinus1);\n  const bRMinus1RMinus1 = bRMinus1R.slice(0, bRMinus1RLenMinus1);\n  const aRMinus1RMinus1R = aRMinus1R.slice(aRMinus1RLenMinus1);\n  const bRMinus1RMinus1R = bRMinus1R.slice(bRMinus1RLenMinus1);\n  const aRMinus1RMinus1RLen = aRMinus1RMinus1R.length;\n  const bRMinus1RMinus1RLen = bRMinus1RMinus1R.length;\n  const aRMinus1RMinus1RLenMinus1 = aRMinus1RMinus1RLen - 1;\n  const bRMinus1RMinus1RLenMinus1 = bRMinus1RMinus1RLen - 1;\n  const aRMinus1RMinus1RMinus1 = aRMinus1RMinus1R.slice(0, aRMinus1RMinus1RLenMinus1);\n  const bRMinus1RMinus1RMinus1 = bRMinus1RMinus1R.slice(0, bRMinus1RMinus1RLenMinus1);\n  const aRMinus1RMinus1RMinus1R = aRMinus1RMinus1R.slice(aRMinus1RMinus1RLenMinus1);\n  const bRMinus1RMinus1RMinus1R = bRMinus1RMinus1R.slice(bRMinus1RMinus1RLenMinus1);\n  const aRMinus1RMinus1RMinus1RLen = aRMinus1RMinus1RMinus1R.length;\n  const bRMinus1RMinus1RMinus1RLen = bRMinus1RMinus1RMinus1R.length;\n  const aRMinus1RMinus1RMinus1RLenMinus1 = aRMinus1RMinus1RMinus1RLen - 1;\n  const bRMinus1RMinus1RMinus1RLenMinus1 = bRMinus1RMinus1RMinus1RLen - 1;\n  const aRMinus1RMinus1RMinus1RMinus1 = aRMinus1RMinus1RMinus1R.slice(0, aRMinus1RMinus1RMinus1RLenMinus1);\n  const bRMinus1RMinus1RMinus1RMinus1 = bRMinus1RMinus1RMinus1R.slice(0, bRMinus1RMinus1RMinus1RLenMinus1);\n  const aRMinus1RMinus1RMinus1RMinus1R = aRMinus1RMinus1RMinus1R.slice(aRMinus1RMinus1RMinus1RLenMinus1);\n  const bRMinus1RMinus1RMinus1RMinus1R = bRMinus1RMinus1RMinus1R.slice(bRMinus1RMinus1RMinus1RLenMinus1);\n  const aRMinus1RMinus1RMinus1RMinus1RLen = aRMinus1RMinus1RMinus1RMinus1R.length;\n  const bRMinus1RMinus1RMinus1RMinus1RLen = bRMinus1RMinus1RMinus1RMinus1R.length;\n  const aRMinus1RMinus1RMinus1RMinus1RLenMinus1 = aRMinus1RMinus1RMinus1RMinus1RLen - 1;\n  const bRMinus1RMinus1RMinus1RMinus1RLenMinus1 = bRMinus1RMinus1RMinus1RMinus1RLen - 1;\n  const aRMinus1RMinus1RMinus1RMinus1RMinus1 = aRMinus1RMinus1RMinus1RMinus1R.slice(0, aRMinus1RMinus1RMinus1RMinus1RLenMinus1);\n  const bRMinus1RMinus1RMinus1RMinus1RMinus1 = bRMinus1"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_2 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_3 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_4 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_5 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_6 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_7 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_8 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_9 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_10 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_11 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_12 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_13 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_14 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_15 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return [count, odd];\n};\n\nconst even_odd_count_16 = (num) => {\n  let count = 0;\n  let odd = 0;\n  let even = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    } else {\n      odd"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const num = number;\n  const roman = ['i', 'v', 'x', 'l', 'c', 'd','m'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      num -= roman[i];\n      result.push(roman[i]);\n    }\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  Given a roman numeral, return its integer value.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> int_from_mini_roman('xix') == 19\n  >>> int_from_mini_roman('clii') == 152\n  >>> int_from_mini_roman('cdxxvi') == 426\n  */\nconst int_from_mini_roman = (roman) => {\n  const roman = roman.split('');\n  const result = 0;\n  let i = 0;\n  while (i < roman.length) {\n    while (roman[i]!== roman[i + 1]) {\n      result += roman[i] === 'i'? 1 : roman[i] === 'v'? 5 : roman[i] === 'x'? 10 : roman[i] === 'l'? 50 : roman[i] === 'c'? 100 : roman[i] === 'd'? 500 : roman[i] ==='m'? 1000 : 0;\n      i++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a roman numeral, return its value in the form of a string.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> int_to_string(19) == 'xix'\n  >>> int_to_string(152) == 'clii'\n  >>> int_to_string(426) == 'cdxxvi'\n  */\nconst int_to_string = (number) => {\n  const num = number;\n  const roman = ['i', 'v', 'x', 'l', 'c', 'd','m'];\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    while (num >= roman[i]) {\n      result.push(roman[i]);\n      num -= roman[i];\n    }\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  Given a string, return its integer value.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> int_from_string('xix') == 19\n  >>> int_from_string('clii') == 152\n  >>> int_from_string('cdxxvi') == 426\n  */\nconst int_from_string = (string) => {\n  const string = string.split('');\n  const result = 0;\n  let i = 0;\n  while (i < string.length) {\n    while (string[i]!== string[i + 1]) {\n      result += string[i] === 'i'? 1 : string[i] === 'v'? 5 : string[i] === 'x'? 10 : string[i] === 'l'? 50 : string[i] === 'c'? 100 : string[i] === 'd'? 500 : string[i] ==='m'? 1000 : 0;\n      i++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a string, return its roman numeral equivalent.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> string_to_mini_roman('xix') == 'xix'\n  >>> string_to_mini_roman('clii') == 'clii'\n  >>> string_to_mini_roman('cdxxvi') == 'cdxxvi'\n  */\nconst string_to_mini_roman = (string) => {\n  const string = string.split('');\n  const result = [];\n  let i = 0;\n  while (i < string.length) {\n    while (string[i]!== string[i + 1]) {\n      result.push(string[i] === 'i'? 'i' : string[i] === 'v'? 'v' : string[i] === 'x'? 'x' : string[i] === 'l'? 'l' : string[i] === 'c'? 'c' : string[i] === 'd'? 'd' : string[i] ==='m'?'m' : 0);\n      i++;\n    }\n    i++;\n  }\n  return result.reverse().join('');\n};\n\n/*\n  Given a string, return its integer value.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> string_to_int('xix') == 19\n  >>> string_to_int('clii') == 152\n  >>> string_to_int('cdxxvi') == 426\n  */\nconst string_to_int = (string) => {\n  const string = string.split('');\n  const result = 0;\n  let i = 0;\n  while (i < string.length) {\n    while (string[i]!== string[i + 1]) {\n      result += string[i] === 'i'? 1 : string[i] === 'v'? 5 : string[i] === 'x'? 10 : string[i] === 'l'? 50 : string[i] === 'c'? 100 : string[i] === 'd'? 500 : string[i] ==='m'? 1000 : 0;\n      i++;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Given a string, return its roman numeral equivalent.\n  Restrictions: 1 <= num <= 3999\n\n  Examples:\n  >>> string_to_int('xix') == '"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_2 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_3 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_4 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_5 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_6 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_7 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_8 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_9 = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle_10 = (a, b, c) => {\n  if (a + b > c && b + c > a && a +"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const unique_chars = new Set();\n  const max_length = 0;\n  const max_word = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const length = word.length;\n    const unique_chars_count = unique_chars.size;\n\n    if (length > max_length) {\n      max_length = length;\n      max_word = word;\n    }\n\n    if (unique_chars_count > 0) {\n      for (let j = 0; j < word.length; j++) {\n        unique_chars.add(word[j]);\n      }\n    }\n  }\n\n  return max_word;\n};\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining]\n  } else if (number < need) {\n    return [number, need - number]\n  } else {\n    return [number, remaining]\n  }\n}\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  const operator_length = operator.length\n  const operand_length = operand.length\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let current_operator = operator[i]\n  let current_operand = operand[j]\n  let current_result = 0\n  while (i < operator_length) {\n    if (operator[i] === '+') {\n      current_result = current_result + current_operand\n    } else if (operator[i] === '-') {\n      current_result = current_result - current_operand\n    } else if (operator[i] === '*') {\n      current_result = current_result * current_operand\n    } else if (operator[i] === '/') {\n      current_result = current_result // current_operand\n    } else if (operator[i] === '**') {\n      current_result = current_result ** current_operand\n    }\n    i++\n  }\n  while (j < operand_length) {\n    if (operand[j] === '+') {\n      current_result = current_result + operand[j]\n    } else if (operand[j] === '-') {\n      current_result = current_result - operand[j]\n    } else if (operand[j] === '*') {\n      current_result = current_result * operand[j]\n    } else if (operand[j] === '/') {\n      current_result = current_result // operand[j]\n    } else if (operand[j] === '**') {\n      current_result = current_result ** operand[j]\n    }\n    j++\n  }\n  result.push(current_result)\n  return result\n}\n\nconst do_algebra_test = () => {\n  const operator = ['+', '-', '*', '/', '**']\n  const operand = [2, 3, 4, 5]\n  const result = do_algebra(operator, operand)\n  console.log(result)\n}\n\ndo_algebra_test()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let len = s.length;\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = string_to_md5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_in_range = (a, b, c) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    for (let j = c; j <= b; j++) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step = (a, b, c, d) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j += d) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step_and_start = (a, b, c, d, e) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j += d) {\n      for (let k = e; k <= b; k += e) {\n        result.push(i);\n      }\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step_and_start_and_end = (a, b, c, d, e, f) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j += d) {\n      for (let k = e; k <= b; k += e) {\n        for (let l = f; l <= b; l += f) {\n          result.push(i);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step_and_start_and_end_and_step = (a, b, c, d, e, f, g) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j += d) {\n      for (let k = e; k <= b; k += e) {\n        for (let l = f; l <= b; l += f) {\n          for (let m = g; m <= b; m += g) {\n            result.push(i);\n          }\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step_and_start_and_end_and_step_and_start = (a, b, c, d, e, f, g, h) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j += d) {\n      for (let k = e; k <= b; k += e) {\n        for (let l = f; l <= b; l += f) {\n          for (let m = g; m <= b; m += g) {\n            for (let n = h; n <= b; n += h) {\n              result.push(i);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step_and_start_and_end_and_step_and_start_and_end = (a, b, c, d, e, f, g, h, i, j) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j += d) {\n      for (let k = e; k <= b; k += e) {\n        for (let l = f; l <= b; l += f) {\n          for (let m = g; m <= b; m += g) {\n            for (let n = h; n <= b; n += h) {\n              for (let o = i; o <= b; o += i) {\n                result.push(o);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step_and_start_and_end_and_step_and_start_and_end_and_step = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j += d) {\n      for (let k = e; k <= b; k += e) {\n        for (let l = f; l <= b; l += f) {\n          for (let m = g; m <= b; m += g) {\n            for (let n = h; n <= b; n += h) {\n              for (let o = i; o <= b; o += i) {\n                for (let p = j; p <= b; p += j) {\n                  result.push(o);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst generate_integers_in_range_with_step_and_start_and_end_and_step_and_start_and_end_and_step = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n  let result = [];\n  for (let i = a; i <= b; i += c) {\n    for (let j = c; j <= b; j"}
