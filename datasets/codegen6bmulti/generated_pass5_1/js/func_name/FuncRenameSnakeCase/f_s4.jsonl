{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @example\n  *\n  *   distance([1, 2, 3], [2, 3, 4])\n  *   // => 1\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5])\n  *   // => 2\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6])\n  *   // => 3\n  */\nconst distance = (x, y) => {\n  const len = x.length\n  if (len < 2) {\n    return 0\n  }\n  const diff = x.slice(1).reduce((acc, curr) => {\n    return acc + Math.abs(curr - x[0])\n  }, 0)\n  return Math.min(diff, y.length - 1)\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @example\n  *\n  *   distance([1, 2, 3], [2, 3, 4])\n  *   // => 1\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5])\n  *   // => 2\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6])\n  *   // => 3\n  */\nconst distance_2d = (x, y) => {\n  const len = x.length\n  if (len < 2) {\n    return 0\n  }\n  const diff = x.slice(1).reduce((acc, curr) => {\n    return acc + Math.abs(curr - x[0])\n  }, 0)\n  return Math.min(diff, y.length - 1)\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @example\n  *\n  *   distance([1, 2, 3], [2, 3, 4])\n  *   // => 1\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5])\n  *   // => 2\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6])\n  *   // => 3\n  */\nconst distance_3d = (x, y) => {\n  const len = x.length\n  if (len < 3) {\n    return 0\n  }\n  const diff = x.slice(1).reduce((acc, curr) => {\n    return acc + Math.abs(curr - x[0])\n  }, 0)\n  return Math.min(diff, y.length - 1)\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @example\n  *\n  *   distance([1, 2, 3], [2, 3, 4])\n  *   // => 1\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5])\n  *   // => 2\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6])\n  *   // => 3\n  */\nconst distance_4d = (x, y) => {\n  const len = x.length\n  if (len < 4) {\n    return 0\n  }\n  const diff = x.slice(1).reduce((acc, curr) => {\n    return acc + Math.abs(curr - x[0])\n  }, 0)\n  return Math.min(diff, y.length - 1)\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @example\n  *\n  *   distance([1, 2, 3], [2, 3, 4])\n  *   // => 1\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5])\n  *   // => 2\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6])\n  *   // => 3\n  */\nconst distance_5d = (x, y) => {\n  const len = x.length\n  if (len < 5) {\n    return 0\n  }\n  const diff = x.slice(1).reduce((acc, curr) => {\n    return acc + Math.abs(curr - x[0])\n  }, 0)\n  return Math.min(diff, y.length - 1)\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @example\n  *\n  *   distance([1, 2, 3], [2, 3, 4])\n  *   // => 1\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5])\n  *   // => 2\n  *\n  *   distance([1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const stack = []\n  let current_group = ''\n  let current_group_open = false\n  let current_group_closed = false\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      if (current_group_open) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_open = false\n      }\n      current_group_open = true\n    } else if (c === ')') {\n      if (current_group_closed) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_closed = false\n      }\n      current_group_closed = true\n    } else {\n      current_group += c\n    }\n  }\n  if (current_group_open) {\n    stack.push(current_group)\n  }\n  return stack\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_2 = (paren_string) => {\n  const stack = []\n  let current_group = ''\n  let current_group_open = false\n  let current_group_closed = false\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      if (current_group_open) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_open = false\n      }\n      current_group_open = true\n    } else if (c === ')') {\n      if (current_group_closed) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_closed = false\n      }\n      current_group_closed = true\n    } else {\n      current_group += c\n    }\n  }\n  if (current_group_open) {\n    stack.push(current_group)\n  }\n  return stack\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_3 = (paren_string) => {\n  const stack = []\n  let current_group = ''\n  let current_group_open = false\n  let current_group_closed = false\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      if (current_group_open) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_open = false\n      }\n      current_group_open = true\n    } else if (c === ')') {\n      if (current_group_closed) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_closed = false\n      }\n      current_group_closed = true\n    } else {\n      current_group += c\n    }\n  }\n  if (current_group_open) {\n    stack.push(current_group)\n  }\n  return stack\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_4 = (paren_string) => {\n  const stack = []\n  let current_group = ''\n  let current_group_open = false\n  let current_group_closed = false\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i]\n    if (c === '(') {\n      if (current_group_open) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_open = false\n      }\n      current_group_open = true\n    } else if (c === ')') {\n      if (current_group_closed) {\n        stack.push(current_group)\n        current_group = ''\n        current_group_closed = false\n      }\n      current_group_closed = true\n    } else {\n      current_group += c\n    }\n  }\n  if (current_group_open) {\n    stack.push(current_group)\n  }\n  return stack\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_5 = (paren_string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longest_prefix = longest_prefix_of_palindrome(string);\n  const longest_prefix_length = longest_prefix.length;\n  const suffix = string.slice(longest_prefix_length);\n  const reversed_suffix = suffix.split('').reverse().join('');\n  return longest_prefix + reversed_suffix;\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longest_prefix_of_palindrome('cat')\n  'cat'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  */\nconst longest_prefix_of_palindrome = (string) => {\n  const prefix = string.slice(0, string.length - 1);\n  const suffix = string.slice(1);\n  const reversed_suffix = suffix.split('').reverse().join('');\n  return prefix + reversed_suffix;\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest prefix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longest_prefix_of_palindrome('cat')\n  'cat'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  */\nconst longest_prefix_of_palindrome = (string) => {\n  const suffix = string.slice(1);\n  const reversed_suffix = suffix.split('').reverse().join('');\n  return string.slice(0, string.length - 1) + reversed_suffix;\n}\n\n/* Find the longest prefix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longest_prefix_of_palindrome('cat')\n  'cat'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  */\nconst longest_prefix_of_palindrome = (string) => {\n  const suffix = string.slice(1);\n  const reversed_suffix = suffix.split('').reverse().join('');\n  return string.slice(0, string.length - 1) + reversed_suffix;\n}\n\n/* Find the longest prefix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longest_prefix_of_palindrome('cat')\n  'cat'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  */\nconst longest_prefix_of_palindrome = (string) => {\n  const suffix = string.slice(1);\n  const reversed_suffix = suffix.split('').reverse().join('');\n  return string.slice(0, string.length - 1) + reversed_suffix;\n}\n\n/* Find the longest prefix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longest_prefix_of_palindrome('cat')\n  'cat'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  */\nconst longest_prefix_of_palindrome = (string) => {\n  const suffix = string.slice(1);\n  const reversed_suffix = suffix.split('').reverse().join('');\n  return string.slice(0, string.length - 1) + reversed_suffix;\n}\n\n/* Find the longest prefix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> longest_prefix_of_palindrome('cat')\n  'cat'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  >>> longest_prefix_of_palindrome('cata')\n  'cata'\n  */\nconst longest_prefix_of_palindrome = (string) => {\n  const suffix = string.slice(1);\n  const reversed_suffix = suffix.split('').reverse().join('');\n  return string.slice(0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const odd = n % 2 === 1;\n  const even = n % 2 === 0;\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(odd? (i + 1) : (i + 1) * 2);\n  }\n  return result;\n};\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n\n  stones.\n\n  Examples:\n  >>> number_of_ways_to_make_a_pile(3)\n  3\n  >>> number_of_ways_to_make_a_pile(4)\n  3\n  >>> number_of_ways_to_make_a_pile(5)\n  2\n  >>> number_of_ways_to_make_a_pile(6)\n  2\n  >>> number_of_ways_to_make_a_pile(7)\n  1\n  >>> number_of_ways_to_make_a_pile(8)\n  1\n  >>> number_of_ways_to_make_a_pile(9)\n  1\n  >>> number_of_ways_to_make_a_pile(10)\n  1\n  >>> number_of_ways_to_make_a_pile(11)\n  1\n  >>> number_of_ways_to_make_a_pile(12)\n  1\n  >>> number_of_ways_to_make_a_pile(13)\n  1\n  >>> number_of_ways_to_make_a_pile(14)\n  1\n  >>> number_of_ways_to_make_a_pile(15)\n  1\n  >>> number_of_ways_to_make_a_pile(16)\n  1\n  >>> number_of_ways_to_make_a_pile(17)\n  1\n  >>> number_of_ways_to_make_a_pile(18)\n  1\n  >>> number_of_ways_to_make_a_pile(19)\n  1\n  >>> number_of_ways_to_make_a_pile(20)\n  1\n  >>> number_of_ways_to_make_a_pile(21)\n  1\n  >>> number_of_ways_to_make_a_pile(22)\n  1\n  >>> number_of_ways_to_make_a_pile(23)\n  1\n  >>> number_of_ways_to_make_a_pile(24)\n  1\n  >>> number_of_ways_to_make_a_pile(25)\n  1\n  >>> number_of_ways_to_make_a_pile(26)\n  1\n  >>> number_of_ways_to_make_a_pile(27)\n  1\n  >>> number_of_ways_to_make_a_pile(28)\n  1\n  >>> number_of_ways_to_make_a_pile(29)\n  1\n  >>> number_of_ways_to_make_a_pile(30)\n  1\n  >>> number_of_ways_to_make_a_pile(31)\n  1\n  >>> number_of_ways_to_make_a_pile(32)\n  1\n  >>> number_of_ways_to_make_a_pile(33)\n  1\n  >>> number_of_ways_to_make_a_pile(34)\n  1\n  >>> number_of_ways_to_make_a_pile(35)\n  1\n  >>> number_of_ways_to_make_a_pile(36)\n  1\n  >>> number_of_ways_to_make_a_pile(37)\n  1\n  >>> number_of_ways_to_make_a_pile(38)\n  1\n  >>> number_of_ways_to_make_a_pile(39)\n  1\n  >>> number_of_ways_to_make_a_pile(40)\n  1\n  >>> number_of_ways_to_make_a_pile(41)\n  1\n  >>> number_of_ways_to_make_a_pile(42)\n  1\n  >>> number_of_ways_to_make_a_pile(43)\n  1\n  >>> number_of_ways_to_make_a_pile(44)\n  1\n  >>> number_of_ways_to_make_a_pile(45)\n  1\n  >>> number_of_ways_to_make_a_pile(46)\n  1\n  >>> number_of_ways_to_make_a_pile(47)\n  1\n  >>> number_of_ways_to_make_a_pile(48)\n  1\n  >>> number_of_ways_to_make_a_pile(49)\n  1\n  >>> number_of_ways_to_make_a_pile(50)\n  1\n  >>> number_of_ways_to_make_a_pile(51)\n  1\n  >>> number_of_ways_to_make_a_pile(52)\n  1\n  >>> number_of_ways_to_make_a_pile(53)\n  1\n  >>> number_of_ways_to_make_a_pile(54)\n  1\n  >>> number_of_ways_to_make_a_pile(55)\n  1\n  >>> number_of_ways_to_make_a_pile(56)\n  1\n  >>> number_of_ways_to_make_a_pile(57)\n  1\n  >>> number_of_ways_to_make_a_pile(58)\n  1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_2 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_3 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_4 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_5 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_6 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_7 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_8 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_9 = (s) => {\n  const words = s.split(/\\s*[,\\s]\\s*/);\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_10 = (s) =>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  }\n  return -1;\n};\n\nconst choose_num_test = [\n  [12, 15],\n  [13, 12],\n  [15, 12],\n  [15, 13],\n  [15, 14],\n  [15, 15],\n  [15, 16],\n  [15, 17],\n  [15, 18],\n  [15, 19],\n  [15, 20],\n  [15, 21],\n  [15, 22],\n  [15, 23],\n  [15, 24],\n  [15, 25],\n  [15, 26],\n  [15, 27],\n  [15, 28],\n  [15, 29],\n  [15, 30],\n  [15, 31],\n  [15, 32],\n  [15, 33],\n  [15, 34],\n  [15, 35],\n  [15, 36],\n  [15, 37],\n  [15, 38],\n  [15, 39],\n  [15, 40],\n  [15, 41],\n  [15, 42],\n  [15, 43],\n  [15, 44],\n  [15, 45],\n  [15, 46],\n  [15, 47],\n  [15, 48],\n  [15, 49],\n  [15, 50],\n  [15, 51],\n  [15, 52],\n  [15, 53],\n  [15, 54],\n  [15, 55],\n  [15, 56],\n  [15, 57],\n  [15, 58],\n  [15, 59],\n  [15, 60],\n  [15, 61],\n  [15, 62],\n  [15, 63],\n  [15, 64],\n  [15, 65],\n  [15, 66],\n  [15, 67],\n  [15, 68],\n  [15, 69],\n  [15, 70],\n  [15, 71],\n  [15, 72],\n  [15, 73],\n  [15, 74],\n  [15, 75],\n  [15, 76],\n  [15, 77],\n  [15, 78],\n  [15, 79],\n  [15, 80],\n  [15, 81],\n  [15, 82],\n  [15, 83],\n  [15, 84],\n  [15, 85],\n  [15, 86],\n  [15, 87],\n  [15, 88],\n  [15, 89],\n  [15, 90],\n  [15, 91],\n  [15, 92],\n  [15, 93],\n  [15, 94],\n  [15, 95],\n  [15, 96],\n  [15, 97],\n  [15, 98],\n  [15, 99],\n  [15, 100],\n  [15, 101],\n  [15, 102],\n  [15, 103],\n  [15, 104],\n  [15, 105],\n  [15, 106],\n  [15, 107],\n  [15, 108],\n  [15, 109],\n  [15, 110],\n  [15, 111],\n  [15, 112],\n  [15, 113],\n  [15, 114],\n  [15, 115],\n  [15, 116],\n  [15, 117],\n  [15, 118],\n  [15, 119],\n  [15, 120],\n  [15, 121],\n  [15, 122],\n  [15, 123],\n  [15, 124],\n  [15, 125],\n  [15, 126],\n  [15, 127],\n  [15, 128],\n  [15, 129],\n  [15, 130],\n  [15, 131],\n  [15, 132],\n  [15, 133],\n  [15, 134],\n  [15, 135],\n  [15, 136],\n  [15, 137],\n  [15, 138],\n  [15, 139],\n  [15, 140],\n  [15, 141],\n  [15, 142],\n  [15, 143],\n  [15, 144],\n  [15, 145],\n  [15, 146],\n  [15, 147],\n  [15, 148],\n  [15, 149],\n  [15, 150],\n  [15, 151],\n  [15, 152],\n  [15, 153],\n  [15, 154],\n  [15, 155],\n  [15, 156],\n  [15, 157],\n  [15, 158],\n  [15, 159],\n  [15, 160],\n  [15, 161],\n  [15, 162],\n  [15, 163],\n  [15, 164],\n  [15, 165],\n  [15, 166],\n  [15, 167],\n  [15, 168],\n  [15, 169],\n  [15, 170],\n  [15, 171],\n  [15, 172],\n  [15, 173],\n  [15, 174],\n  [15, 175],\n  [15, 176],\n  [15, 177],\n  [15, 178],\n  [15, 179],\n  [15, 180],\n  [15, 181],\n  [15, 182],\n  [15, 183],\n  [15, 184],\n  [15, 185],\n  [15, 186],\n  [15, 187],\n  [15, 188],\n  [15, 189],\n  [15, 190],\n  [15, 191],\n  [15, 192],\n  [15, 193],\n  [15, 194],\n  [15, 195],\n  [15, 196],\n  [15, 197],\n  [15, 198],\n  [15, 199],\n  [15, 200],\n  [15, 201],\n  [15, 202", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded_avg = Math.round(avg)\n  const binary_avg = rounded_avg.toString(2)\n  return binary_avg\n}\n\nconst rounded_avg_test = () => {\n  const test_cases = [\n    [1, 5, \"0b11\"],\n    [7, 5, -1],\n    [10, 20, \"0b1111\"],\n    [20, 33, \"0b11010\"]\n  ]\n  test_cases.forEach(test_case => {\n    const rounded_avg = rounded_avg(test_case[0], test_case[1])\n    console.log(`rounded_avg(${test_case[0]}, ${test_case[1]}) => ${rounded_avg}`)\n  })\n}\n\nrounded_avg_test()\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const digits = [...x].filter(x => x % 2 === 0)\n  const sorted = digits.sort((a, b) => a - b)\n  return sorted.filter(x => x!== 0)\n}\n\nconst unique_digits_test = () => {\n  const test = [15, 33, 1422, 1, 152, 323, 1422, 10]\n  const expected = [1, 15, 33, 1422, 10]\n  const actual = unique_digits(test)\n  assert.deepEqual(actual, expected)\n}\n\ndescribe('unique_digits', () => {\n  it('should return sorted list of all elements that doesn\\'t have any even digit', () => {\n    unique_digits_test()\n  })\n})\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_2 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_3 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_4 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_5 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_6 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_7 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_8 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_9 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_10 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_11 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_12 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_13 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_14 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_15 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_16 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_17 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_18 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_19 = (arr) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const reversed = sorted.reverse();\n  const names = reversed.map(n => n.toString());\n  return names;\n};\n\nconst by_length_20 = (arr) => {\n  const sorted = arr.slice().sort((a, b) =>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i);\n  }\n  for (let i = 3; i <= n; i += 2) {\n    result.push(i * result[i - 1]);\n  }\n  return result;\n};\n\nconst test = (n) => {\n  const result = f(n);\n  console.log(`The result of f(${n}) is: ${result}`);\n};\n\ntest(5);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palindrome) {\n      if (palindrome % 2 === 0) {\n        even_palindrome++;\n      } else {\n        odd_palindrome++;\n      }\n      palindrome = palindrome / 2;\n    }\n  }\n  return [even_palindrome, odd_palindrome];\n};\n\nconst even_odd_palindrome = (n) => {\n  let even_palindrome = 0, odd_palindrome = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    while (palind", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_2 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_3 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_4 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_5 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_6 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_7 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_8 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_9 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_10 = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let flag = true;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      flag = false;\n    }\n    i++;\n    j--;\n  }\n  return flag;\n};\n\nconst move_one_ball_11 = (arr) => {\n  let i", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = [];\n  for (let i = 0; i < a_len; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string s, return the number of 1s in the string.\n  >>> string_count('010101')\n  4\n  >>> string_count('0101')\n  2\n  >>> string_count('01')\n  1\n  >>> string_count('0')\n  0\n  >>> string_count('1')\n  1\n  >>> string_count('10')\n  2\n  >>> string_count('101')\n  3\n  >>> string_count('1010')\n  4\n  >>> string_count('10101')\n  5\n  >>> string_count('101010')\n  6\n  >>> string_count('1010101')\n  7\n  >>> string_count('10101010')\n  8\n  >>> string_count('101010101')\n  9\n  >>> string_count('1010101010')\n  10\n  >>> string_count('10101010101')\n  11\n  >>> string_count('101010101010')\n  12\n  >>> string_count('1010101010101')\n  13\n  >>> string_count('10101010101010')\n  14\n  >>> string_count('101010101010101')\n  15\n  >>> string_count('1010101010101010')\n  16\n  >>> string_count('10101010101010101')\n  17\n  >>> string_count('101010101010101010')\n  18\n  >>> string_count('1010101010101010101')\n  19\n  >>> string_count('10101010101010101010')\n  20\n  >>> string_count('101010101010101010101')\n  21\n  >>> string_count('1010101010101010101010')\n  22\n  >>> string_count('10101010101010101010101')\n  23\n  >>> string_count('101010101010101010101010')\n  24\n  >>> string_count('1010101010101010101010101')\n  25\n  >>> string_count('10101010101010101010101010')\n  26\n  >>> string_count('101010101010101010101010101')\n  27\n  >>> string_count('1010101010101010101010101010')\n  28\n  >>> string_count('10101010101010101010101010101')\n  29\n  >>> string_count('101010101010101010101010101010')\n  30\n  >>> string_count('1010101010101010101010101010101')\n  31\n  >>> string_count('10101010101010101010101010101010')\n  32\n  >>> string_count('101010101010101010101010101010101')\n  33\n  >>> string_count('1010101010101010101010101010101010')\n  34\n  >>> string_count('10101010101010101010101010101010101')\n  35\n  >>> string_count('101010101010101010101010101010101010')\n  36\n  >>> string_count('1010101010101010101010101010101010101')\n  37\n  >>> string_count('10101010101010101010101010101010101010')\n  38\n  >>> string_count('101010101010101010101010101010101010101')\n  39\n  >>> string_count('1010101010101010101010101010101010101010')\n  40\n  >>> string_count('10101010101010101010101010101010101010101')\n  41\n  >>> string_count('101010101010101010101010101010101010101010')\n  42\n  >>> string_count('1010101010101010101010101010101010101010101')\n  43\n  >>> string_count('10101010101010101010101010101010101010101010')\n  44\n  >>> string_count('101010101010101010101010101010101010101010101')\n  45\n  >>> string_count('1010101010101010101010101010101010101010101010')\n  46\n  >>> string_count('10101010101010101010101010101010101010101010101')\n  47\n  >>> string_count('101010101010101010101010101010101010101010101010')\n  48\n  >>> string_count('1010101010101010101010101010101010101010101010101')\n  49\n  >>> string_count('10101010101010101010101010101010101010101010101010')\n  50\n  >>> string_count('101010101010101010101010101010101010101010101010101')\n  51\n  >>> string_count('1010101010101010101010101010101010101010101010101010')\n  52\n  >>> string_count('10101010101010101010101010101010101010101010101010101')\n  53\n  >>> string_count('101010101010101010101010101010101010101010101010101010')\n  54\n  >>> string_count('10101010101010101010101010101", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  if (lst1Length!== lst2Length) {\n    return false;\n  }\n  const lst1Even = lst1.every(x => x % 2 === 0);\n  const lst2Even = lst2.every(x => x % 2 === 0);\n  return lst1Even && lst2Even;\n};\n\nconst lst1 = [1, 2, 3, 4];\nconst lst2 = [1, 5, 3, 4];\n\nconsole.log(exchange(lst1, lst2));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.toLowerCase();\n  const histogram = {};\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i]] === undefined) {\n      histogram[test[i]] = 1;\n    } else {\n      histogram[test[i]]++;\n    }\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  const c_len = c.length;\n  const s_len = s.length;\n  const result = [];\n  let i = 0;\n  let j = s_len - 1;\n  while (i < s_len && j >= 0) {\n    if (s[i] === c[j % c_len]) {\n      i++;\n      j--;\n    } else {\n      result.push(s[i]);\n      i++;\n    }\n  }\n  return [result.join(''), s.length === result.length];\n};\n\nconst test = [\n  ['abcde', 'ae'],\n  ['abcdef', 'b'],\n  ['abcdedcba', 'ab'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ['abcdefghijklmnopqrstuvwxyz', 'z'],\n  ['abcdefghijklmnopqrstuvwxyz', 'a'],\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  const odd_count = (lst) => {\n    const odd_count = (lst) => {\n      const odd_count = (lst) => {\n        const odd_count = (lst) => {\n          const odd_count = (lst) => {\n            const odd_count = (lst) => {\n              const odd_count = (lst) => {\n                const odd_count = (lst) => {\n                  const odd_count = (lst) => {\n                    const odd_count = (lst) => {\n                      const odd_count = (lst) => {\n                        const odd_count = (lst) => {\n                          const odd_count = (lst) => {\n                            const odd_count = (lst) => {\n                              const odd_count = (lst) => {\n                                const odd_count = (lst) => {\n                                  const odd_count = (lst) => {\n                                    const odd_count = (lst) => {\n                                      const odd_count = (lst) => {\n                                        const odd_count = (lst) => {\n                                          const odd_count = (lst) => {\n                                            const odd_count = (lst) => {\n                                              const odd_count = (lst) => {\n                                                const odd_count = (lst) => {\n                                                  const odd_count = (lst) => {\n                                                    const odd_count = (lst) => {\n                                                      const odd_count = (lst) => {\n                                                        const odd_count = (lst) => {\n                                                          const odd_count = (lst) => {\n                                                           const odd_count = (lst) => {\n                                                            const odd_count = (lst) => {\n                                                              const odd_count = (lst) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return odd_count(lst)\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let minSum = nums.reduce((a, b) => a + b, 0)\n  let minSumIndex = 0\n  let minSumIndex2 = 0\n  let minSumIndex3 = 0\n  let minSumIndex4 = 0\n  let minSumIndex5 = 0\n  let minSumIndex6 = 0\n  let minSumIndex7 = 0\n  let minSumIndex8 = 0\n  let minSumIndex9 = 0\n  let minSumIndex10 = 0\n  let minSumIndex11 = 0\n  let minSumIndex12 = 0\n  let minSumIndex13 = 0\n  let minSumIndex14 = 0\n  let minSumIndex15 = 0\n  let minSumIndex16 = 0\n  let minSumIndex17 = 0\n  let minSumIndex18 = 0\n  let minSumIndex19 = 0\n  let minSumIndex20 = 0\n  let minSumIndex21 = 0\n  let minSumIndex22 = 0\n  let minSumIndex23 = 0\n  let minSumIndex24 = 0\n  let minSumIndex25 = 0\n  let minSumIndex26 = 0\n  let minSumIndex27 = 0\n  let minSumIndex28 = 0\n  let minSumIndex29 = 0\n  let minSumIndex30 = 0\n  let minSumIndex31 = 0\n  let minSumIndex32 = 0\n  let minSumIndex33 = 0\n  let minSumIndex34 = 0\n  let minSumIndex35 = 0\n  let minSumIndex36 = 0\n  let minSumIndex37 = 0\n  let minSumIndex38 = 0\n  let minSumIndex39 = 0\n  let minSumIndex40 = 0\n  let minSumIndex41 = 0\n  let minSumIndex42 = 0\n  let minSumIndex43 = 0\n  let minSumIndex44 = 0\n  let minSumIndex45 = 0\n  let minSumIndex46 = 0\n  let minSumIndex47 = 0\n  let minSumIndex48 = 0\n  let minSumIndex49 = 0\n  let minSumIndex50 = 0\n  let minSumIndex51 = 0\n  let minSumIndex52 = 0\n  let minSumIndex53 = 0\n  let minSumIndex54 = 0\n  let minSumIndex55 = 0\n  let minSumIndex56 = 0\n  let minSumIndex57 = 0\n  let minSumIndex58 = 0\n  let minSumIndex59 = 0\n  let minSumIndex60 = 0\n  let minSumIndex61 = 0\n  let minSumIndex62 = 0\n  let minSumIndex63 = 0\n  let minSumIndex64 = 0\n  let minSumIndex65 = 0\n  let minSumIndex66 = 0\n  let minSumIndex67 = 0\n  let minSumIndex68 = 0\n  let minSumIndex69 = 0\n  let minSumIndex70 = 0\n  let minSumIndex71 = 0\n  let minSumIndex72 = 0\n  let minSumIndex73 = 0\n  let minSumIndex74 = 0\n  let minSumIndex75 = 0\n  let minSumIndex76 = 0\n  let minSumIndex77 = 0\n  let minSumIndex78 = 0\n  let minSumIndex79 = 0\n  let minSumIndex80 = 0\n  let minSumIndex81 = 0\n  let minSumIndex82 = 0\n  let minSumIndex83 = 0\n  let minSumIndex84 = 0\n  let minSumIndex85 = 0\n  let minSumIndex86 = 0\n  let minSumIndex87 = 0\n  let minSumIndex88 = 0\n  let minSumIndex89 = 0\n  let minSumIndex90 = 0\n  let minSumIndex91 = 0\n  let minSumIndex92 = 0\n  let minSumIndex93 = 0\n  let minSumIndex94 = 0\n  let minSumIndex95 = 0\n  let minSumIndex96 = 0\n  let minSumIndex97 = 0\n  let minSumIndex98 = 0\n  let minSumIndex99 = 0\n  let minSumIndex100 = 0\n  let minSumIndex101 = 0\n  let minSumIndex102 = 0\n  let minSumIndex103 = 0\n  let minSumIndex104 = 0\n  let minSumIndex105 = 0\n  let minSumIndex106 = 0\n  let minSumIndex107 = 0\n  let minSumIndex108 = 0\n  let minSumIndex109 = 0\n  let minSumIndex110 = 0\n  let minSumIndex111 = 0\n  let minSumIndex112 = 0\n  let minSumIndex113 = 0\n  let minSumIndex114 = 0\n  let minSumIndex115 = 0\n  let minSumIndex116 = 0\n  let minSumIndex117 = 0\n  let minSumIndex118 = 0\n  let minSumIndex119 = 0\n  let minSumIndex120 = 0\n  let minSumIndex121 = 0\n  let minSumIndex122 = 0\n  let minSumIndex123 = 0\n  let minSumIndex124 = 0\n  let minSumIndex125 = 0\n  let minSumIndex126 = 0\n  let minSumIndex127 = 0\n  let minSumIndex128 = 0\n  let minSumIndex129 = 0\n  let minSumIndex130 = 0\n  let minSumIndex131 = 0\n  let minSumIndex132 = 0\n  let minSumIndex133 = 0\n  let minSumIndex134 = 0\n  let minSumIndex135 = 0\n  let minSumIndex136 = 0\n  let minSumIndex137 = 0\n  let minSumIndex138 = 0\n  let minSumIndex139 = 0\n  let minSumIndex140 = 0\n  let minSumIndex141 = 0\n  let minSumIndex142 = 0\n  let minSumIndex143 = 0\n  let minSumIndex144 = 0\n  let minSumIndex145 = 0\n  let minSumIndex146 = 0\n  let minSumIndex147 = 0\n  let minSumIndex148 = 0\n  let minSumIndex149 = 0\n  let minSumIndex150 = 0\n  let minSumIndex151 = 0\n  let minSumIndex152 = 0\n  let minSumIndex153 = 0\n  let minSumIndex154 = 0\n  let minSumIndex155 = 0\n  let minSumIndex156 = 0\n  let minSumIndex157 = 0\n  let min", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const [row_len, col_len] = grid[0].length;\n  const [row_fill, col_fill] = [0, 0];\n  const [row_fill_sum, col_fill_sum] = [0, 0];\n  const [row_fill_sum_2, col_fill_sum_2] = [0, 0];\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        row_fill_sum += 1;\n        row_fill_sum_2 += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < row_len; i++) {\n    for (let j = 0; j < col_len; j++) {\n      if (grid[i][j] === 1) {\n        col_fill_sum += 1;\n        col_fill_sum_2 += 1;\n      }\n    }\n  }\n\n  let fill_sum = 0;\n  let fill_sum_2 = 0;\n\n  for (let i = 0; i < row_len; i++) {\n    for (let j = 0; j < col_len; j++) {\n      if (grid[i][j] === 1) {\n        fill_sum += 1;\n        fill_sum_2 += 1;\n      }\n    }\n  }\n\n  fill_sum = fill_sum - row_fill_sum;\n  fill_sum_2 = fill_sum_2 - col_fill_sum_2;\n\n  if (fill_sum === 0 && fill_sum_2 === 0) {\n    return 0;\n  }\n\n  let fill_sum_3 = 0;\n  let fill_sum_4 = 0;\n\n  for (let i = 0; i < row_len; i++) {\n    for (let j = 0; j < col_len; j++) {\n      if (grid[i][j] === 1) {\n        fill_sum_3 += 1;\n        fill_sum_4 += 1;\n      }\n    }\n  }\n\n  fill_sum_3 = fill_sum_3 - row_fill_sum_2;\n  fill_sum_4 = fill_sum_4 - col_fill_sum_2;\n\n  if (fill_sum_3 === 0 && fill_sum_4 === 0) {\n    return 0;\n  }\n\n  let fill_sum_5 = 0;\n  let fill_sum_6 = 0;\n\n  for (let i = 0; i < row_len; i++) {\n    for (let j = 0; j < col_len; j++) {\n      if (grid[i][j] === 1) {\n        fill_sum_5 += 1;\n        fill_sum_6 += 1;\n      }\n    }\n  }\n\n  fill_sum_5 = fill_sum_5 - row_fill_sum;\n  fill_sum_6 = fill_sum_6 - col_fill_sum;\n\n  if (fill_sum_5 === 0 && fill_sum_6 === 0) {\n    return 0;\n  }\n\n  let fill_sum_7 = 0;\n  let fill_sum_8 = 0;\n\n  for (let i = 0; i < row_len; i++) {\n    for (let j = 0; j < col_len; j++) {\n      if (grid[i][j] === 1) {\n        fill_sum_7 += 1;\n        fill_sum_8 += 1;\n      }\n    }\n  }\n\n  fill_sum_7 = fill_sum_7 - row_fill_sum_2;\n  fill_sum_8 = fill_sum_8 - col_fill_sum_2;\n\n  if (fill_sum_7 === 0 && fill_sum_8 === 0) {\n    return 0;\n  }\n\n  let fill_sum_9 = 0;\n  let fill_sum_10 = 0;\n\n  for (let i = 0; i < row_len; i++) {\n    for (let j = 0; j < col_len; j++) {\n      if (grid[i][j] === 1) {\n        fill_sum_9 += 1;\n        fill_sum_10 += 1;\n      }\n    }\n  }\n\n  fill_sum_9 = fill_sum_9 - row_fill_sum_2;\n  fill_sum_10 = fill_sum_10 - col_fill_sum_2;\n\n  if (fill_sum_9 === 0 && fill_sum_10 === 0) {\n    return 0;\n  }\n\n  let fill_sum_11 = 0;\n  let fill_sum_12 = 0;\n\n  for (let i = 0; i < row_len; i++) {\n    for (let j = 0; j < col_len; j++) {\n      if (grid[i][j] === 1) {\n        fill_sum_11 += 1;\n        fill_sum_12 += 1;\n      ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const a_int = parseInt(a, 2);\n    const b_int = parseInt(b, 2);\n    if (a_int === b_int) {\n      return a - b;\n    } else if (a_int > b_int) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  return sorted;\n};\n\nmodule.exports = sort_array;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const words = [];\n  const chars = s.split('');\n  let i = 0;\n  while (i < chars.length) {\n    const word = chars.slice(i, i + n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-negative integer n, you have been tasked to implement \na function that returns the nth word from the string s.\nIf the nth word does not exist, return the empty string.\nNote: The word may contain only letters and spaces.\nExamples:\nselect_nth(\"Hello world\", 1) ==> \"world\"\nselect_nth(\"Hello world\", 2) ==> \"world\"\nselect_nth(\"Hello world\", 3) ==> \"\"\nselect_nth(\"Hello world\", 4) ==> \"\"\nselect_nth(\"Hello world\", 5) ==> \"\"\nselect_nth(\"Hello world\", 6) ==> \"\"\nselect_nth(\"Hello world\", 7) ==> \"\"\nselect_nth(\"Hello world\", 8) ==> \"world\"\nselect_nth(\"Hello world\", 9) ==> \"\"\nselect_nth(\"Hello world\", 10) ==> \"\"\nselect_nth(\"Hello world\", 11) ==> \"\"\nselect_nth(\"Hello world\", 12) ==> \"\"\nselect_nth(\"Hello world\", 13) ==> \"\"\nselect_nth(\"Hello world\", 14) ==> \"\"\nselect_nth(\"Hello world\", 15) ==> \"\"\nselect_nth(\"Hello world\", 16) ==> \"\"\nselect_nth(\"Hello world\", 17) ==> \"\"\nselect_nth(\"Hello world\", 18) ==> \"\"\nselect_nth(\"Hello world\", 19) ==> \"\"\nselect_nth(\"Hello world\", 20) ==> \"\"\nselect_nth(\"Hello world\", 21) ==> \"\"\nselect_nth(\"Hello world\", 22) ==> \"\"\nselect_nth(\"Hello world\", 23) ==> \"\"\nselect_nth(\"Hello world\", 24) ==> \"\"\nselect_nth(\"Hello world\", 25) ==> \"\"\nselect_nth(\"Hello world\", 26) ==> \"\"\nselect_nth(\"Hello world\", 27) ==> \"\"\nselect_nth(\"Hello world\", 28) ==> \"\"\nselect_nth(\"Hello world\", 29) ==> \"\"\nselect_nth(\"Hello world\", 30) ==> \"\"\nselect_nth(\"Hello world\", 31) ==> \"\"\nselect_nth(\"Hello world\", 32) ==> \"\"\nselect_nth(\"Hello world\", 33) ==> \"\"\nselect_nth(\"Hello world\", 34) ==> \"\"\nselect_nth(\"Hello world\", 35) ==> \"\"\nselect_nth(\"Hello world\", 36) ==> \"\"\nselect_nth(\"Hello world\", 37) ==> \"\"\nselect_nth(\"Hello world\", 38) ==> \"\"\nselect_nth(\"Hello world\", 39) ==> \"\"\nselect_nth(\"Hello world\", 40) ==> \"\"\nselect_nth(\"Hello world\", 41) ==> \"\"\nselect_nth(\"Hello world\", 42) ==> \"\"\nselect_nth(\"Hello world\", 43) ==> \"\"\nselect_nth(\"Hello world\", 44) ==> \"\"\nselect_nth(\"Hello world\", 45) ==> \"\"\nselect_nth(\"Hello world\", 46) ==> \"\"\nselect_nth(\"Hello world\", 47) ==> \"\"\nselect_nth(\"Hello world\", 48) ==> \"\"\nselect_nth(\"Hello world\", 49) ==> \"\"\nselect_nth(\"Hello world\", 50) ==> \"\"\nselect_nth(\"Hello world\", 51) ==> \"\"\nselect_nth(\"Hello world\", 52) ==> \"\"\nselect_nth(\"Hello world\", 53) ==> \"\"\nselect_nth(\"Hello world\", 54) ==> \"\"\nselect_nth(\"Hello world\", 55) ==> \"\"\nselect_nth(\"Hello world\", 56) ==> \"\"\nselect_nth(\"Hello world\", 57) ==> \"\"\nselect_nth(\"Hello world\", 58) ==> \"\"\nselect_nth(\"Hello world\", 59) ==> \"\"\nselect_nth(\"Hello world\", 60) ==> \"\"\nselect_nth(\"Hello world\", 61) ==> \"\"\nselect_nth(\"Hello world\", 62) ==> \"\"\nselect_nth(\"Hello world\", 63) ==> \"\"\nselect_nth(\"Hello world\", 64) ==> \"\"\nselect_nth(\"Hello world\", 65) ==> \"\"\nselect_nth(\"Hello world\", 66) ==> \"\"\nselect_nth(\"Hello world\", 67) ==> \"\"\nselect_nth(\"Hello world\", 68) ==> \"\"\nselect_nth(\"Hello world\", 69) ==> \"\"\nselect_nth(\"Hello world\", 70) ==> \"\"\nselect_nth(\"Hello world\", 71) ==> \"\"\nselect_nth(\"Hello world\", 72) ==> \"\"\nselect_nth(\"Hello world\", 73) ==> \"\"\nselect_nth(\"Hello world\", 74) ==> \"\"\nselect_nth(\"Hello world\", 75) ==> \"\"\nselect_nth(\"Hello world\", 76) ==> \"\"\nselect_nth(\"Hello world\", 77) ==> \"\"\nselect_nth(\"Hello world\", 78) ==> \"\"\nselect_nth(\"Hello world\", 79) ==> \"\"\nselect_nth(\"Hello world\", 80) ==> \"\"\nselect_nth(\"Hello world\", 81) ==> \"\"\nselect_nth(\"Hello world\", 82) ==> \"\"\nselect_nth(\"Hello world\", 83) ==> \"\"\nselect_nth(\"Hello world\", 84) ==> \"\"\nselect_nth(\"Hello", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let vowel = '';\n  let consonant = '';\n  let index = 0;\n  let len = word.length;\n  while (index < len) {\n    consonant = word[index];\n    if (isVowel(consonant)) {\n      vowel = consonant;\n      break;\n    }\n    index++;\n  }\n  if (index === len) {\n    return vowel;\n  }\n  while (index < len) {\n    consonant = word[index];\n    if (isVowel(consonant)) {\n      if (Math.abs(consonant - vowel) < Math.abs(consonant - word[index + 1])) {\n        vowel = consonant;\n      }\n      break;\n    }\n    index++;\n  }\n  return vowel;\n};\n\nconst isVowel = (char) => {\n  return char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u';\n};\n\nconsole.log(get_closest_vowel(\"yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack.push(c)\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n    }\n  }\n  return 'Yes'\n}\n\nconsole.log(match_parens(['()(', ')']));\nconsole.log(match_parens([')', ')']));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.slice(0, k).reduce((a, b) => Math.max(a, b), -Infinity)\n  const min = arr.slice(0, k).reduce((a, b) => Math.min(a, b), Infinity)\n  return arr.slice(k).sort((a, b) => a - b)\n}\n\nconst test = (arr, k) => {\n  console.log(`arr = ${arr}, k = ${k}`)\n  console.log(`maximum = ${maximum(arr, k)}`)\n}\n\ntest([-3, -4, 5], 3)\ntest([4, -4, 4], 2)\ntest([-3, 2, 1, 2, -1, -2, 1], 1)\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_2 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_3 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_4 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_5 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_6 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_7 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_8 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_9 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_10 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_11 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_12 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_13 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_14 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_15 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_16 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_17 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_18 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_19 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_20 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_21 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_22 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_23 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_24 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst add_elements_25 = (arr, k) => {\n  const sum = 0;\n  for (let i = 0;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_collatz = [1];\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    odd_collatz.push(n);\n  }\n  return odd_collatz.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_even_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 1, and 5.\n  */\nconst get_even_collatz = (n) => {\n  let even_collatz = [1];\n  while (n > 1) {\n    if (n % 2 === 1) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    even_collatz.push(n);\n  }\n  return even_collatz.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the sum of odd and even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_sum_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the sum of odd and even numbers is 5.\n  */\nconst get_sum_collatz = (n) => {\n  let sum_collatz = [1];\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    sum_collatz.push(n);\n  }\n  return sum_collatz.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the sum of odd and even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_sum_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the sum of odd and even numbers is 5.\n  */\nconst get_sum_odd_collatz = (n) => {\n  let sum_odd_collatz = [1];\n  while (n > 1) {\n    if (n % 2 === 1) {\n      n = n / 2;\n    } else {\n      n = 3 * n + 1;\n    }\n    sum_odd_collatz.push(n);\n  }\n  return sum_odd_collatz.sort((a, b) => a - b);\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the sum of odd and even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_sum_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the sum of odd and even numbers is 5.\n  */\nconst get_sum_even_collatz = (n) => {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const date_array = date.split('-');\n  const month = parseInt(date_array[1]);\n  const day = parseInt(date_array[2]);\n  const year = parseInt(date_array[0]);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date_2 = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const date_array = date.split('-');\n  const month = parseInt(date_array[1]);\n  const day = parseInt(date_array[2]);\n  const year = parseInt(date_array[0]);\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  if (year < 1900 || year > 2100) {\n    return false;\n  }\n  return true;\n};\n\nconst date_validation = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_2 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_3 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_4 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_5 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_6 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_7 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_8 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_9 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_10 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_11 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_12 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_13 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validation_14 = (date)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_with_commas = (txt) => {\n  const words = txt.split(/\\s*,\\s*/);\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_with_commas_and_hyphens = (txt) => {\n  const words = txt.split(/\\s*,\\s*-/);\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_with_commas_and_hyphens_and_periods = (txt) => {\n  const words = txt.split(/\\s*,\\s*\\.\\s*/);\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_with_commas_and_hyphens_and_periods_and_hyphens = (txt) => {\n  const words = txt.split(/\\s*,\\s*-\\s*\\.\\s*/);\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_with_commas_and_hyphens_and_periods_and_hyphens_and_commas = (txt) => {\n  const words = txt.split(/\\s*,\\s*-\\s*\\.\\s*,\\s*/);\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_with_commas_and_hyphens_and_periods_and_hyphens_and_commas_and_hyphens = (txt) => {\n  const words = txt.split(/\\s*,\\s*-\\s*\\.\\s*,\\s*-\\s*\\.\\s*/);\n  return words;\n};\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_with_commas_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sorted_length = sorted.length;\n  const sorted_index = sorted.indexOf(lst[0]);\n  const sorted_index_next = sorted.indexOf(lst[1]);\n  return sorted_index === 0 && sorted_index_next === 1 || sorted_index === sorted_length - 1 && sorted_index_next === sorted_length - 2;\n};\n\nexport default is_sorted;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  if (start1 > end2 || start2 > end1) {\n    return \"NO\"\n  }\n  const start = Math.max(start1, start2)\n  const end = Math.min(end1, end2)\n  const length = end - start\n  if (length === 0) {\n    return \"NO\"\n  }\n  const isPrime = (n) => {\n    const isPrime = (n) => {\n      if (n === 1) {\n        return false\n      }\n      if (n === 2) {\n        return true\n      }\n      if (n % 2 === 0) {\n        return false\n      }\n      for (let i = 3; i * i <= n; i += 2) {\n        if (n % i === 0) {\n          return false\n        }\n      }\n      return true\n    }\n    return isPrime(n)\n  }\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false\n    }\n    if (n === 2) {\n      return true\n    }\n    if (n % 2 === 0) {\n      return false\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  if (isPrime(length)) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += Math.abs(arr[i]);\n  }\n\n  let product = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      continue;\n    }\n\n    if (arr[i] === 1) {\n      product *= 1;\n    } else if (arr[i] === -1) {\n      product *= -1;\n    } else {\n      product *= 0;\n    }\n  }\n\n  return sum * product;\n};\n\nmodule.exports = prod_signs;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const dp = new Array(n).fill(0);\n  const visited = new Array(n).fill(0);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        dp[i] = Math.min(dp[i], dp[i - 1] + 1);\n        dp[i] = Math.min(dp[i], dp[i + 1] + 1);\n        dp[i] = Math.min(dp[i], dp[i - m] + 1);\n        dp[i] = Math.min(dp[i], dp[i + m] + 1);\n        visited[i] = 1;\n      }\n    }\n  }\n\n  const ans = [];\n  for (let i = 0; i < n; i++) {\n    if (visited[i] === 0) {\n      ans.push(grid[i][0]);\n    }\n  }\n\n  return ans;\n};\n\nexport { min_path };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === -1) {\n    return b;\n  }\n  if (b === -1) {\n    return a;\n  }\n  if (a === -2) {\n    return b;\n  }\n  if (b === -2) {\n    return a;\n  }\n  if (a === 2) {\n    return b;\n  }\n  if (b === 2) {\n    return a;\n  }\n  if (a === -3) {\n    return b;\n  }\n  if (b === -3) {\n    return a;\n  }\n  if (a === 3) {\n    return b;\n  }\n  if (b === 3) {\n    return a;\n  }\n  if (a === -4) {\n    return b;\n  }\n  if (b === -4) {\n    return a;\n  }\n  if (a === 4) {\n    return b;\n  }\n  if (b === 4) {\n    return a;\n  }\n  if (a === -5) {\n    return b;\n  }\n  if (b === -5) {\n    return a;\n  }\n  if (a === 5) {\n    return b;\n  }\n  if (b === 5) {\n    return a;\n  }\n  if (a === -6) {\n    return b;\n  }\n  if (b === -6) {\n    return a;\n  }\n  if (a === 6) {\n    return b;\n  }\n  if (b === 6) {\n    return a;\n  }\n  if (a === -7) {\n    return b;\n  }\n  if (b === -7) {\n    return a;\n  }\n  if (a === 7) {\n    return b;\n  }\n  if (b === 7) {\n    return a;\n  }\n  if (a === -8) {\n    return b;\n  }\n  if (b === -8) {\n    return a;\n  }\n  if (a === 8) {\n    return b;\n  }\n  if (b === 8) {\n    return a;\n  }\n  if (a === -9) {\n    return b;\n  }\n  if (b === -9) {\n    return a;\n  }\n  if (a === 9) {\n    return b;\n  }\n  if (b === 9) {\n    return a;\n  }\n  if (a === -10) {\n    return b;\n  }\n  if (b === -10) {\n    return a;\n  }\n  if (a === 10) {\n    return b;\n  }\n  if (b === 10) {\n    return a;\n  }\n  if (a === -11) {\n    return b;\n  }\n  if (b === -11) {\n    return a;\n  }\n  if (a === 11) {\n    return b;\n  }\n  if (b === 11) {\n    return a;\n  }\n  if (a === -12) {\n    return b;\n  }\n  if (b === -12) {\n    return a;\n  }\n  if (a === 12) {\n    return b;\n  }\n  if (b === 12) {\n    return a;\n  }\n  if (a === -13) {\n    return b;\n  }\n  if (b === -13) {\n    return a;\n  }\n  if (a === 13) {\n    return b;\n  }\n  if (b === 13) {\n    return a;\n  }\n  if (a === -14) {\n    return b;\n  }\n  if (b === -14) {\n    return a;\n  }\n  if (a === 14) {\n    return b;\n  }\n  if (b === 14) {\n    return a;\n  }\n  if (a === -15) {\n    return b;\n  }\n  if (b === -15) {\n    return a;\n  }\n  if (a === 15) {\n    return b;\n  }\n  if (b === 15) {\n    return a;\n  }\n  if (a === -16) {\n    return b;\n  }\n  if (b === -16) {\n    return a;\n  }\n  if (a === 16) {\n    return b;\n  }\n  if (b === 16) {\n    return a;\n  }\n  if (a === -17) {\n    return b;\n  }\n  if (b === -17) {\n    return a;\n  }\n  if (a === 17) {\n    return b;\n  }\n  if (b === 17) {\n    return a;\n  }\n  if (a === -18) {\n    return b;\n  }\n  if (b === -18) {\n    return a;\n  }\n  if (a === 18) {\n    return b;\n  }\n  if (b === 18) {\n    return a;\n  }\n  if (a === -19) {\n    return b;\n  }\n  if (b === -19) {\n    return a;\n  }\n  if (a === 19) {\n    return b;\n  }\n  if (b === 19) {\n    return a;\n  }\n  if (a === -20) {\n    return b;\n  }\n  if (b === -20) {\n    return a;\n  }\n  if (a === 20) {\n    return b;\n  }\n  if (b === 20) {\n    return a;\n  }\n  if (a === -21) {\n    return b;\n  }\n  if (b === -21) {\n    return a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1, 3, 2, 8];\n  for (let i = 2; i <= n; i++) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n  }\n  return result;\n};\n\nconst tri2 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri3 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri4 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri5 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri6 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri7 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri8 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri9 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri10 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri11 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri12 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri13 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri14 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri15 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri16 = (n) => {\n  let result = [1, 3, 2, 8];\n  let i = 2;\n  while (i <= n) {\n    result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    i++;\n  }\n  return result;\n};\n\nconst tri17 = (n) => {\n  let result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = []\n  const brackets = string.split('')\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === ']') {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '[') {\n        stack.pop()\n      }\n    }\n  }\n  return stack.length === 0\n}\n\nconsole.log(is_nested('[[]]'))\nconsole.log(is_nested('[]]]]]]][[[[[]'))\nconsole.log(is_nested('[][]'))\nconsole.log(is_nested('[]'))\nconsole.log(is_nested('[[][]]'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + curr * curr, 0)\n  return sum\n}\n\nconst sum_squares_ceiling = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.floor(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.round(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.floor(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_floor_floor = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.floor(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_floor_ceiling_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.floor(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_floor_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.floor(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_floor_ceiling_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_squares_ceiling_ceiling_floor_ceiling_floor_round = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + Math.ceil(curr * curr), 0)\n  return sum\n}\n\nconst sum_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_letter = last_char.match(/[a-zA-Z]/);\n  return is_letter &&!is_letter.match(/\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_number = last_char.match(/[0-9]/);\n  return is_number &&!is_number.match(/\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_punctuation_mark(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation_mark(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation_mark(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation_mark(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation_mark = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_punctuation = last_char.match(/[.,;:?!]/);\n  return is_punctuation &&!is_punctuation.match(/\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a whitespace and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_whitespace(\"apple pie\") ➞ false\n  check_if_last_char_is_a_whitespace(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_whitespace(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_whitespace(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_whitespace = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_whitespace = last_char.match(/\\s/);\n  return is_whitespace &&!is_whitespace.match(/\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a whitespace and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_whitespace(\"apple pie\") ➞ false\n  check_if_last_char_is_a_whitespace(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_whitespace(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_whitespace(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_whitespace_or_punctuation = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_whitespace = last_char.match(/\\s/);\n  const is_punctuation = last_char.match(/[.,;:?!]/);\n  return is_whitespace || is_punctuation &&!is_punctuation.match(/\\b/);\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a whitespace and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_whitespace(\"apple pie\") ➞ false\n  check_if_last_char_is_a_whitespace(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_whitespace(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_whitespace(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_whitespace_or_punctuation_or_number = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_whitespace = last_char.match(/\\s/);\n  const is_punctuation = last_char.match(/[.,;:?!]/);\n  const is_number = last_char.match(/[0-9]/);\n  return is_wh", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let max = -1\n  while (i < j) {\n    const mid = (i + j) / 2\n    if (arr[mid] >= arr[i]) {\n      max = mid\n      j = mid - 1\n    } else {\n      i = mid + 1\n    }\n  }\n  return max\n}\n\nexport default can_arrange\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const max = Math.max(...lst);\n  const min = Math.min(...lst);\n  if (max === min) {\n    return (null, null);\n  }\n  return (max < 0? null : [max, min]);\n};\n\n/*\n  Given a list of numbers, return the largest number in the list.\n  If there are no numbers, return null.\n  Examples:\n  largest_number([2, 4, 1, 3, 5, 7]) == 7\n  largest_number([]) == null\n  largest_number([0]) == null\n  largest_number([-1, -2, -3]) == -1\n  largest_number([-1, -2, -3, -4]) == -1\n  largest_number([-1, -2, -3, -4, -5]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]) == -1\n  largest_number([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_two(1, 2.5) ➞ 2.5\n  compare_two(1, \"2,3\") ➞ \"2,3\"\n  compare_two(\"5,1\", \"6\") ➞ \"6\"\n  compare_two(\"1\", 1) ➞ null\n  */\nconst compare_two = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_three(1, 2.5) ➞ 2.5\n  compare_three(1, \"2,3\") ➞ \"2,3\"\n  compare_three(\"5,1\", \"6\") ➞ \"6\"\n  compare_three(\"1\", 1) ➞ null\n  */\nconst compare_three = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_four(1, 2.5) ➞ 2.5\n  compare_four(1, \"2,3\") ➞ \"2,3\"\n  compare_four(\"5,1\", \"6\") ➞ \"6\"\n  compare_four(\"1\", 1) ➞ null\n  */\nconst compare_four = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_five(1, 2.5) ➞ 2.5\n  compare_five(1, \"2,3\") ➞ \"2,3\"\n  compare_five(\"5,1\", \"6\") ➞ \"6\"\n  compare_five(\"1\", 1) ➞ null\n  */\nconst compare_five = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes two variables, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_six(1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == true\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == false\n  */\nconst is_equal_to_sum_odd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  is_equal_to_sum_even(5) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(10) == true\n  */\nconst is_equal_to_sum_even_5 = (n) => {\n  const sum = n + n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  Example\n  is_equal_to_sum_odd(5) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(10) == true\n  */\nconst is_equal_to_sum_odd_5 = (n) => {\n  const sum = n + n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(10) == false\n  */\nconst is_equal_to_sum_even_6 = (n) => {\n  const sum = n + n + n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive odd numbers\n  Example\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(10) == true\n  */\nconst is_equal_to_sum_odd_6 = (n) => {\n  const sum = n + n + n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  is_equal_to_sum_even(7) == true\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(10) == false\n  */\nconst is_equal_to_sum_even_7 = (n) => {\n  const sum = n + n + n + n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive odd numbers\n  Example\n  is_equal_to_sum_odd(7) == false\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(10) == true\n  */\nconst is_equal_to_sum_odd_7 = (n) => {\n  const sum = n + n + n + n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  is_equal_to_sum_even(8) == true\n  is_equal_to_sum_even(10) == false\n  */\nconst is_equal_to_sum_even_8 = (n) => {\n  const sum = n + n + n + n + n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive odd numbers\n  Example\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(10) == true\n  */\nconst is_equal_to_sum_odd_8 = (n) => {\n  const sum = n + n + n + n + n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  is_equal_to_sum_even(9) == true\n  is_equal_to_sum_even(10) == false\n  */\nconst is_equal_to_sum_even_9 = (n) => {\n  const sum = n + n + n + n + n + n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive odd numbers\n  Example\n  is_equal_to_sum_odd(9) == false\n  is_equal_to_sum_odd(10) == true\n  */\nconst is_equal_to_sum_odd_9 = (n) => {\n  const sum = n + n + n + n + n + n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n  Example\n  is_equal_to_sum_even(10) == true\n  is_equal_to_sum_even(11) == false\n  */\nconst is_equal_to_sum_even_10", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n - 3);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number(n - 1) + prime_number(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_2(n - 1) + prime_number_2(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_3(n - 1) + prime_number_3(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_4(n - 1) + prime_number_4(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_5(n - 1) + prime_number_5(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_6(n - 1) + prime_number_6(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_7 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_7(n - 1) + prime_number_7(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_8 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_8(n - 1) + prime_number_8(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_9 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_9(n - 1) + prime_number_9(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_10 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_10(n - 1) + prime_number_10(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_11 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_11(n - 1) + prime_number_11(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_12 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_12(n - 1) + prime_number_12(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_13 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_13(n - 1) + prime_number_13(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_14 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_14(n - 1) + prime_number_14(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_15 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_15(n - 1) + prime_number_15(n - 2);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  nth prime number.\n  */\nconst prime_number_16 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return prime_number_16(n - 1) + prime_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = []\n  const string_length = string.length\n  for (let i = 0; i < string_length; i++) {\n    const prefix = string.substring(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = []\n  const string_length = string.length\n  for (let i = 0; i < string_length; i++) {\n    const suffix = string.substring(string_length - i, string_length)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'bac', 'cba', 'acb', 'bca', 'cab', 'abc']\n  */\nconst all_permutations = (string) => {\n  const permutations = []\n  const string_length = string.length\n  for (let i = 0; i < string_length; i++) {\n    const permutation = string.substring(0, i)\n    permutations.push(permutation)\n    permutations.push(string.substring(0, i) + string.substring(i + 1, string_length))\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'bac', 'cba', 'acb', 'bca', 'cab', 'abc']\n  */\nconst all_permutations_2 = (string) => {\n  const permutations = []\n  const string_length = string.length\n  for (let i = 0; i < string_length; i++) {\n    const permutation = string.substring(0, i)\n    const suffix = string.substring(i + 1, string_length)\n    permutations.push(permutation + suffix)\n    permutations.push(suffix + permutation)\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'bac', 'cba', 'acb', 'bca', 'cab', 'abc']\n  */\nconst all_permutations_3 = (string) => {\n  const permutations = []\n  const string_length = string.length\n  for (let i = 0; i < string_length; i++) {\n    const permutation = string.substring(0, i)\n    const suffix = string.substring(i + 1, string_length)\n    const suffix_length = suffix.length\n    for (let j = 0; j < suffix_length; j++) {\n      const permutation_suffix = permutation + suffix.substring(0, j + 1)\n      permutations.push(permutation_suffix)\n    }\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'bac', 'cba', 'acb', 'bca', 'cab', 'abc']\n  */\nconst all_permutations_4 = (string) => {\n  const permutations = []\n  const string_length = string.length\n  for (let i = 0; i < string_length; i++) {\n    const permutation = string.substring(0, i)\n    const suffix = string.substring(i + 1, string_length)\n    const suffix_length = suffix.length\n    for (let j = 0; j < suffix_length; j++) {\n      const permutation_suffix = permutation + suffix.substring(0, j + 1)\n      const permutation_suffix_length = permutation_suffix.length\n      for (let k = 0; k < permutation_suffix_length; k++) {\n        const permutation_suffix_suffix = permutation_suffix.substring(0, k + 1)\n        permutations.push(permutation_suffix_suffix + permutation_suffix)\n      }\n    }\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'bac', 'cba', 'acb', 'bca', 'cab', 'abc']\n  */\nconst all_permutations_5 = (string) => {\n  const permutations = []\n  const string_length = string.length\n  for (let i = 0; i < string_length; i++) {\n    const permutation = string.substring(0, i)\n    const suffix = string.substring(i + 1, string_length)\n    const suffix_length = suffix.length\n    for (let j = 0; j < suffix_length; j++) {\n      const permutation_suffix = permutation + suffix.substring(0, j + 1)\n      const permutation_suffix_length = permutation_suffix.length\n      for (let k = 0; k < permutation_suffix_length; k++) {\n        const permutation_suffix_suffix = permutation_suffix.substring(0, k + 1)\n        const permutation_suffix_suffix_length = permutation_suffix_suffix.length\n        for (let l = 0; l < permutation_suffix_suffix_length; l++) {\n          const permutation_suffix_suffix_suffix = permutation_suffix_suffix.substring(0, l + 1)\n          permutations.push(permutation_suffix_suffix_suffix + permutation_suffix_suffix)\n        }\n      }\n    }\n  }\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'bac', 'cba', 'acb', 'bca', 'cab', 'abc']\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  const spaces = /\\s+/g\n  return text.replace(spaces, '_')\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fix_underscores(\"Example\") == \"Example\"\n  fix_underscores(\"Example 1\") == \"Example 1\"\n  fix_underscores(\" Example 2\") == \"Example 2\"\n  fix_underscores(\" Example   3\") == \"Example 3\"\n  */\nconst fix_underscores = (text) => {\n  const underscores = /_+/g\n  return text.replace(underscores,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example 1\") == \"Example 1\"\n  fix_dashes(\" Example 2\") == \"Example 2\"\n  fix_dashes(\" Example   3\") == \"Example 3\"\n  */\nconst fix_dashes = (text) => {\n  const dashes = /\\-+/g\n  return text.replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example 1\") == \"Example 1\"\n  fix_dashes(\" Example 2\") == \"Example 2\"\n  fix_dashes(\" Example   3\") == \"Example 3\"\n  */\nconst fix_hyphens = (text) => {\n  const hyphens = /\\-/g\n  return text.replace(hyphens,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_hyphens(\"Example\") == \"Example\"\n  fix_hyphens(\"Example 1\") == \"Example 1\"\n  fix_hyphens(\" Example 2\") == \"Example 2\"\n  fix_hyphens(\" Example   3\") == \"Example 3\"\n  */\nconst fix_hyphens_and_dashes = (text) => {\n  const hyphens = /\\-/g\n  const dashes = /\\-/g\n  return text.replace(hyphens,'').replace(dashes,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_hyphens(\"Example\") == \"Example\"\n  fix_hyphens(\"Example 1\") == \"Example 1\"\n  fix_hyphens(\" Example 2\") == \"Example 2\"\n  fix_hyphens(\" Example   3\") == \"Example 3\"\n  */\nconst fix_hyphens_and_dashes_and_underscores = (text) => {\n  const hyphens = /\\-/g\n  const dashes = /\\-/g\n  const underscores = /_+/g\n  return text.replace(hyphens,'').replace(dashes,'').replace(underscores,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_hyphens(\"Example\") == \"Example\"\n  fix_hyphens(\"Example 1\") == \"Example 1\"\n  fix_hyphens(\" Example 2\") == \"Example 2\"\n  fix_hyphens(\" Example   3\") == \"Example 3\"\n  */\nconst fix_hyphens_and_dashes_and_underscores_and_spaces = (text) => {\n  const hyphens = /\\-/g\n  const dashes = /\\-/g\n  const underscores = /_+/g\n  return text.replace(hyphens,'').replace(dashes,'').replace(underscores,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_hyphens(\"Example\") == \"Example\"\n  fix_hyphens(\"Example 1\") == \"Example 1\"\n  fix_hyphens(\" Example 2\") == \"Example 2\"\n  fix_hyphens(\" Example   3\") == \"Example 3\"\n  */\nconst fix_hyphens_and_dashes_and_underscores_and_spaces_and_quotes = (text) => {\n  const hyphens = /\\-/g\n  const dashes = /\\-/g\n  const underscores = /_+/g\n  return text.replace(hyphens,'').replace(dashes,'').replace(underscores,'')\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_hyphens(\"Example\") == \"Example\"\n  fix_hyphens(\"Example 1\") == \"Example 1\"\n  fix_hyphens(\" Example 2\") == \"Example 2\"\n  fix_hyphens(\" Example   3\") == \"Example 3\"\n  */\nconst fix_hyphens_and_dashes_and_underscores_and_spaces_and_quotes_and_spaces = (text) => {\n  const hyphens = /\\-/g\n  const dashes = /\\-/g\n  const underscores = /_+/g\n  return text.replace(hyphens,'').replace(dashes,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const regex = /^[a-zA-Z][a-zA-Z0-9]*\\./;\n  const regex2 = /\\.txt$/;\n  const regex3 = /\\.exe$/;\n  const regex4 = /\\.dll$/;\n  const regex5 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex6 = /^[a-zA-Z][a-zA-Z0-9]*\\./;\n  const regex7 = /\\.txt$/;\n  const regex8 = /\\.exe$/;\n  const regex9 = /\\.dll$/;\n  const regex10 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex11 = /\\.txt$/;\n  const regex12 = /\\.exe$/;\n  const regex13 = /\\.dll$/;\n  const regex14 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex15 = /\\.txt$/;\n  const regex16 = /\\.exe$/;\n  const regex17 = /\\.dll$/;\n  const regex18 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex19 = /\\.txt$/;\n  const regex20 = /\\.exe$/;\n  const regex21 = /\\.dll$/;\n  const regex22 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex23 = /\\.txt$/;\n  const regex24 = /\\.exe$/;\n  const regex25 = /\\.dll$/;\n  const regex26 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex27 = /\\.txt$/;\n  const regex28 = /\\.exe$/;\n  const regex29 = /\\.dll$/;\n  const regex30 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex31 = /\\.txt$/;\n  const regex32 = /\\.exe$/;\n  const regex33 = /\\.dll$/;\n  const regex34 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex35 = /\\.txt$/;\n  const regex36 = /\\.exe$/;\n  const regex37 = /\\.dll$/;\n  const regex38 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex39 = /\\.txt$/;\n  const regex40 = /\\.exe$/;\n  const regex41 = /\\.dll$/;\n  const regex42 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex43 = /\\.txt$/;\n  const regex44 = /\\.exe$/;\n  const regex45 = /\\.dll$/;\n  const regex46 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex47 = /\\.txt$/;\n  const regex48 = /\\.exe$/;\n  const regex49 = /\\.dll$/;\n  const regex50 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex51 = /\\.txt$/;\n  const regex52 = /\\.exe$/;\n  const regex53 = /\\.dll$/;\n  const regex54 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex55 = /\\.txt$/;\n  const regex56 = /\\.exe$/;\n  const regex57 = /\\.dll$/;\n  const regex58 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex59 = /\\.txt$/;\n  const regex60 = /\\.exe$/;\n  const regex61 = /\\.dll$/;\n  const regex62 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex63 = /\\.txt$/;\n  const regex64 = /\\.exe$/;\n  const regex65 = /\\.dll$/;\n  const regex66 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex67 = /\\.txt$/;\n  const regex68 = /\\.exe$/;\n  const regex69 = /\\.dll$/;\n  const regex70 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex71 = /\\.txt$/;\n  const regex72 = /\\.exe$/;\n  const regex73 = /\\.dll$/;\n  const regex74 = /^[a-zA-Z][a-zA-Z0-9]*$/;\n  const regex75 = /\\.txt$/;\n  const regex76 = /\\.exe$/;\n  const regex77 = /\\.dll$/;\n  const regex78 = /^[a-zA-Z", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sum_squares([1,2,3]));\nconsole.log(sum_squares([]));\nconsole.log(sum_squares([-1,-5,2,-1,-5]));\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(' ')\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  const new_words = []\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i]\n    const new_word = ''\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j]\n      const new_char = char\n      if (primes.indexOf(j + 1)!== -1) {\n        new_char =''\n      }\n      new_word += new_char\n    }\n    new_words.push(new_word)\n  }\n  return new_words.join(' ')\n}\n\nconsole.log(words_in_sentence('This is a test'))\nconsole.log(words_in_sentence('lets go for swimming'))\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xNum = parseInt(x.split('/')[0], 10);\n  const xDen = parseInt(x.split('/')[1], 10);\n  const nNum = parseInt(n.split('/')[0], 10);\n  const nDen = parseInt(n.split('/')[1], 10);\n\n  if (xNum === nNum && xDen === nDen) {\n    return true;\n  }\n\n  if (xNum === nNum && xDen === nDen) {\n    return false;\n  }\n\n  if (xNum === nNum) {\n    return true;\n  }\n\n  if (xDen === nDen) {\n    return false;\n  }\n\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    const a_sum = a.toString().split('').reduce((a, b) => a + b, 0);\n    const b_sum = b.toString().split('').reduce((a, b) => a + b, 0);\n    return a_sum - b_sum;\n  });\n  return sorted;\n};\n\nconst order_by_points_13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  const len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(special_filter([15, -73, 14, -15]));\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_2 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_3 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_4 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_5 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_6 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_7 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_8 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_9 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_10 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_11 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_12 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_13 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_14 = (n) => {\n  const a = Array.from({length: n}, (x) => x * x - x + 1)\n  const triples = a.filter((x, i) => i < a.length - 1 && a[i] + a[i + 1] + a[i + 2] % 3 === 0)\n  return triples.length\n}\n\nconst get_max_triples_15 = (n) => {\n  const a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  if (planet1Index < 0 || planet2Index < 0) {\n    return []\n  }\n  const planet1Orbit = getOrbit(planet1)\n  const planet2Orbit = getOrbit(planet2)\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitStart = planet1Orbit[0]\n  const planet2OrbitStart = planet2Orbit[0]\n  const planet1OrbitEnd = planet1Orbit[planet1OrbitLength - 1]\n  const planet2OrbitEnd = planet2Orbit[planet2OrbitLength - 1]\n  const planet1OrbitStartIndex = planet1Orbit.indexOf(planet1OrbitStart)\n  const planet2OrbitStartIndex = planet2Orbit.indexOf(planet2OrbitStart)\n  const planet1OrbitEndIndex = planet1Orbit.indexOf(planet1OrbitEnd)\n  const planet2OrbitEndIndex = planet2Orbit.indexOf(planet2OrbitEnd)\n  const planet1OrbitStartIndexInRange = planet1OrbitStartIndex >= planet1OrbitStartIndex\n  const planet2OrbitStartIndexInRange = planet2OrbitStartIndex >= planet2OrbitStartIndex\n  const planet1OrbitEndIndexInRange = planet1OrbitEndIndex <= planet1OrbitEndIndex\n  const planet2OrbitEndIndexInRange = planet2OrbitEndIndex <= planet2OrbitEndIndex\n  const planet1OrbitStartInRange = planet1OrbitStartIndexInRange && planet1OrbitStartIndexInRange\n  const planet2OrbitStartInRange = planet2OrbitStartIndexInRange && planet2OrbitStartIndexInRange\n  const planet1OrbitEndInRange = planet1OrbitEndIndexInRange && planet1OrbitEndIndexInRange\n  const planet2OrbitEndInRange = planet2OrbitEndIndexInRange && planet2OrbitEndIndexInRange\n  const planet1OrbitStartInRangeAndEndInRange = planet1OrbitStartInRange && planet1OrbitEndInRange\n  const planet2OrbitStartInRangeAndEndInRange = planet2OrbitStartInRange && planet2OrbitEndInRange\n  const planet1OrbitStartInRangeAndEndInRangeAndPlanet1OrbitStartInRangeAndEndInRange = planet1OrbitStartInRange && planet1OrbitEndInRange && planet1OrbitStartInRange && planet1OrbitEndInRange\n  const planet2OrbitStartInRangeAndEndInRangeAndPlanet1OrbitStartInRangeAndEndInRange = planet2OrbitStartInRange && planet2OrbitEndInRange && planet1OrbitStartInRange && planet1OrbitEndInRange\n  const planet1OrbitStartInRangeAndEndInRangeAndPlanet1OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRange = planet1OrbitStartInRange && planet1OrbitEndInRange && planet1OrbitStartInRange && planet1OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange\n  const planet1OrbitStartInRangeAndEndInRangeAndPlanet1OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRange = planet1OrbitStartInRange && planet1OrbitEndInRange && planet1OrbitStartInRange && planet1OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange\n  const planet1OrbitStartInRangeAndEndInRangeAndPlanet1OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRange = planet1OrbitStartInRange && planet1OrbitEndInRange && planet1OrbitStartInRange && planet1OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange\n  const planet1OrbitStartInRangeAndEndInRangeAndPlanet1OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRange = planet1OrbitStartInRange && planet1OrbitEndInRange && planet1OrbitStartInRange && planet1OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange && planet2OrbitStartInRange && planet2OrbitEndInRange\n  const planet1OrbitStartInRangeAndEndInRangeAndPlanet1OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEndInRangeAndPlanet2OrbitStartInRangeAndEnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort_2 = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort_3 = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort_4 = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort_5 = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort_6 = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort_7 = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    sorted_lst.push(lst[i])\n    sorted_lst_sum.push(sum)\n  }\n  sorted_lst.sort((a, b) => a.length - b.length)\n  sorted_lst_sum.sort((a, b) => a - b)\n  return sorted_lst\n}\n\nconst list_sort_8 = (lst) => {\n  const len = lst.length\n  const sorted_lst = []\n  const sorted_lst_sum = []\n  let sum = 0\n  for (let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*')\n  '0'\n  >>> string_sequence(5, '*')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, s) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-')\n  '0'\n  >>> string_sequence(5, '*', '-')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, s, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-', '.')\n  '0'\n  >>> string_sequence(5, '*', '-', '.')\n  '0.1 1.2 2.3 3.4 4.5'\n  */\nconst string_sequence = (n, s, d, f) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-', '.', ',')\n  '0'\n  >>> string_sequence(5, '*', '-', '.', ',')\n  '0,1,2,3,4,5'\n  */\nconst string_sequence = (n, s, d, f, c) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-', '.', ',', '.')\n  '0'\n  >>> string_sequence(5, '*', '-', '.', ',', '.')\n  '0.1 1.2 2.3 3.4 4.5'\n  */\nconst string_sequence = (n, s, d, f, c, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-', '.', ',', '.', ',')\n  '0'\n  >>> string_sequence(5, '*', '-', '.', ',', '.', ',')\n  '0,1,2,3,4,5'\n  */\nconst string_sequence = (n, s, d, f, c, d, f) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-', '.', ',', '.', ',', '.')\n  '0'\n  >>> string_sequence(5, '*', '-', '.', ',', '.', ',', '.')\n  '0.1 1.2 2.3 3.4 4.5'\n  */\nconst string_sequence = (n, s, d, f, c, d, f, c) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-', '.', ',', '.', ',', '.', ',')\n  '0'\n  >>> string_sequence(5, '*', '-', '.', ',', '.', ',', '.', ',')\n  '0,1,2,3,4,5'\n  */\nconst string_sequence = (n, s, d, f, c, d, f, c, d) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '*', '-', '.', ',', '.', ',', '.', ',', '.')\n  '0'\n  >>> string_sequence(5, '*', '-', '.', ',', '.', ',', '.', ',', '.')\n  '0.1 1.2 2.3 3.4 4.5'\n  */\nconst string_sequence = (n, s, d, f, c, d, f, c, d, f) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upt", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_2 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_3 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_4 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_5 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_6 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_7 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_8 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_9 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_10 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_11 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_12 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_13 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_14 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_15 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_16 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_17 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_18 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_19 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_20 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_21 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_22 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_23 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_24 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_25 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_26 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst x_or_y_test_27 = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  const sum = (a, b) => a + b;\n  const double_difference = (a, b) => a * b;\n  const diff = (a, b) => a - b;\n  const is_odd = (n) => n % 2 === 1;\n  const is_even = (n) => n % 2 === 0;\n  const is_positive = (n) => n > 0;\n  const is_negative = (n) => n < 0;\n  const is_integer = (n) => is_positive(Math.floor(n));\n  const is_double = (n) => is_integer(Math.floor(n)) && is_positive(Math.ceil(n));\n  const is_double_difference = (a, b) => is_double(a) && is_double(b);\n  const is_double_difference_odd = (a, b) => is_double_difference(a, b) && is_odd(a);\n  const is_double_difference_even = (a, b) => is_double_difference(a, b) && is_even(a);\n  const is_double_difference_positive = (a, b) => is_double_difference(a, b) && is_positive(a);\n  const is_double_difference_negative = (a, b) => is_double_difference(a, b) && is_negative(a);\n  const is_double_difference_integer = (a, b) => is_double_difference(a, b) && is_integer(a);\n  const is_double_difference_integer_odd = (a, b) => is_double_difference_integer(a, b) && is_odd(a);\n  const is_double_difference_integer_even = (a, b) => is_double_difference_integer(a, b) && is_even(a);\n  const is_double_difference_integer_positive = (a, b) => is_double_difference_integer(a, b) && is_positive(a);\n  const is_double_difference_integer_negative = (a, b) => is_double_difference_integer(a, b) && is_negative(a);\n  const is_double_difference_double = (a, b) => is_double_difference(a, b) && is_double(a);\n  const is_double_difference_double_odd = (a, b) => is_double_difference_double(a, b) && is_odd(a);\n  const is_double_difference_double_even = (a, b) => is_double_difference_double(a, b) && is_even(a);\n  const is_double_difference_double_positive = (a, b) => is_double_difference_double(a, b) && is_positive(a);\n  const is_double_difference_double_negative = (a, b) => is_double_difference_double(a, b) && is_negative(a);\n  const is_double_difference_double_integer = (a, b) => is_double_difference_double(a, b) && is_integer(a);\n  const is_double_difference_double_integer_odd = (a, b) => is_double_difference_double_integer(a, b) && is_odd(a);\n  const is_double_difference_double_integer_even = (a, b) => is_double_difference_double_integer(a, b) && is_even(a);\n  const is_double_difference_double_integer_positive = (a, b) => is_double_difference_double_integer(a, b) && is_positive(a);\n  const is_double_difference_double_integer_negative = (a, b) => is_double_difference_double_integer(a, b) && is_negative(a);\n  const is_double_difference_double_double = (a, b) => is_double_difference_double(a, b) && is_double(a);\n  const is_double_difference_double_double_odd = (a, b) => is_double_difference_double_double(a, b) && is_odd(a);\n  const is_double_difference_double_double_even = (a, b) => is_double_difference_double_double(a, b) && is_even(a);\n  const is_double_difference_double_double_positive = (a, b) => is_double_difference_double_double(a, b) && is_positive(a);\n  const is_double_difference_double_double_negative = (a, b) => is_double_difference_double_double(a, b) && is_negative(a);\n  const is_double_difference_double_double_integer = (a, b) => is_double_difference_double_double(a, b) && is_integer(a);\n  const is_double_difference_double_double_integer_odd = (a, b) => is_double_difference_double_double_integer(a, b) && is_odd(a);\n  const is_double_difference_double_double_integer_even = (a, b) => is_double_difference_double_double_integer(a, b) && is_even(a);\n  const is_double_difference_double_double_integer_positive = (a, b) => is_double_difference_double_double_integer(a, b) && is_positive(a);\n  const is_double_difference_double_double_integer_negative = (a, b) => is_double_difference_double_double_integer(a, b) && is_negative(a", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare2 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare3 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare4 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare5 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare6 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare7 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare8 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare9 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare10 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare11 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare12 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare13 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare14 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.abs(game[i] - guess[i])\n    diff.push(diff)\n  }\n  return diff\n}\n\nconst compare15 = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const diff = Math.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.toUpperCase().length;\n    const sm = extension.toLowerCase().length;\n    return (cap - sm) / cap;\n  }, -1);\n\n  return `${class_name}.${extensions[0]}`;\n};\n\nmodule.exports = strongest_extension;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  const a_substr = a.substr(0, b_length);\n  const b_substr = b.substr(0, b_length);\n  if (a_substr === b_substr) return true;\n  for (let i = 0; i < a_length; i++) {\n    if (cycpattern_check(a_substr, b_substr)) return true;\n    if (cycpattern_check(a_substr, b_substr.replace(b_substr[0], b_substr[1]))) return true;\n    if (cycpattern_check(a_substr.replace(a_substr[0], a_substr[1]), b_substr)) return true;\n    if (cycpattern_check(a_substr.replace(a_substr[0], a_substr[1]), b_substr.replace(b_substr[0], b_substr[1]))) return true;\n  }\n  return false;\n};\n\nconsole.log(cycpattern_check(\"abcd\",\"abd\"));\nconsole.log(cycpattern_check(\"hello\",\"ell\"));\nconsole.log(cycpattern_check(\"whassup\",\"psus\"));\nconsole.log(cycpattern_check(\"abab\",\"baa\"));\nconsole.log(cycpattern_check(\"efef\",\"eeff\"));\nconsole.log(cycpattern_check(\"himenss\",\"simen\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let even = 0, odd = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n  }\n  return [even, odd];\n};\n\nexport default even_odd_count;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const num = number;\n  const roman = [\n    '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII',\n    'XIII', 'XIV', 'XV', 'XVI', 'XVII', 'XVIII', 'XIX', 'XX', 'XXI', 'XXII',\n    'XXIII', 'XXIV', 'XXV', 'XXVI', 'XXVII', 'XXVIII', 'XXIX', 'XXX', 'XXXI',\n    'XXXII', 'XXXIII', 'XXXIV', 'XXXV', 'XXXVI', 'XXXVII', 'XXXVIII', 'XXXIX',\n    'XL', 'XLI', 'XLII', 'XLIII', 'XLIV', 'XLV', 'XLVII', 'XLVIII', 'XLIX',\n    'L', 'LI', 'LII', 'LIII', 'LIV', 'LV', 'LVI', 'LVII', 'LVIII', 'LIX', 'LX',\n    'LXI', 'LXII', 'LXIII', 'LXIV', 'LXV', 'LXVI', 'LXVII', 'LXVIII', 'LXIX',\n    'C', 'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'C',\n    'CI', 'CII', 'CIII', 'CIV', 'CV', 'CVI', 'CVII', 'CVIII', 'CIX', 'CC', 'CCI',\n    'CCII', 'CCIII', 'CCIV', 'CCV', 'CCVI', 'CCVII', 'CCVIII', 'CCIX', 'CD',\n    'CDI', 'CDII', 'CDIII', 'CDIV', 'CDV', 'CDVI', 'CDVII', 'CDVIII', 'CDIX',\n    'D', 'DI', 'DII', 'DIII', 'DIV', 'DV', 'DVI', 'DVII', 'DVIII', 'DIX', 'D',\n    'DI', 'DII', 'DIII', 'DIV', 'DV', 'DVI', 'DVII', 'DVIII', 'DIX', 'CM', 'CMI',\n    'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII',\n    'CMXVIII', 'CMXIX', 'CM', 'CMI', 'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII',\n    'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII', 'CMXIX', 'CM', 'CMI', 'CMM',\n    'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII',\n    'CMXIX', 'CM', 'CMI', 'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV',\n    'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII', 'CMXIX', 'CM', 'CMI', 'CMM', 'CMX',\n    'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII',\n    'CMXIX', 'CM', 'CMI', 'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV',\n    'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII', 'CMXIX', 'CM', 'CMI', 'CMM', 'CMX',\n    'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII',\n    'CMXIX', 'CM', 'CMI', 'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV',\n    'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII', 'CMXIX', 'CM', 'CMI', 'CMM', 'CMX',\n    'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII',\n    'CMXIX', 'CM', 'CMI', 'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV',\n    'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII', 'CMXIX', 'CM', 'CMI', 'CMM', 'CMX',\n    'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII',\n    'CMXIX', 'CM', 'CMI', 'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV',\n    'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII', 'CMXIX', 'CM', 'CMI', 'CMM', 'CMX',\n    'CMXI', 'CMXII', 'CMXIII', 'CMXIV', 'CMXV', 'CMXVI', 'CMXVII', 'CMXVIII',\n    'CMXIX', 'CM', 'CMI', 'CMM', 'CMX', 'CMXI', 'CMXII', 'CMXIII', 'CMXIV',\n    '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 12\n  area_of_triangle(1, 2, 3) == 0\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeter_of_triangle(3, 4, 5) == 17\n  perimeter_of_triangle(1, 2, 3) == 0\n  */\nconst perimeter_of_triangle = (a, b, c) => {\n  return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 12\n  area_of_triangle(1, 2, 3) == 0\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeter_of_triangle(3, 4, 5) == 17\n  perimeter_of_triangle(1, 2, 3) == 0\n  */\nconst perimeter_of_triangle = (a, b, c) => {\n  return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 12\n  area_of_triangle(1, 2, 3) == 0\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeter_of_triangle(3, 4, 5) == 17\n  perimeter_of_triangle(1, 2, 3) == 0\n  */\nconst perimeter_of_triangle = (a, b, c) => {\n  return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 12\n  area_of_triangle(1, 2, 3) == 0\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeter_of_triangle(3, 4, 5) == 17\n  perimeter_of_triangle(1, 2, 3) == 0\n  */\nconst perimeter_of_triangle = (a, b, c) => {\n  return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 12\n  area_of_triangle(1, 2, 3) == 0\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeter_of_triangle(3, 4, 5) == 17\n  perimeter_of_triangle(1, 2, 3) == 0\n  */\nconst perimeter_of_triangle = (a, b, c) => {\n  return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 12\n  area_of_triangle(1, 2, 3) == 0\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeter_of_triangle(3, 4, 5) == 17\n  perimeter_of_triangle(1, 2, 3) == 0\n  */\nconst perimeter_of_triangle = (a, b, c) => {\n  return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_of_triangle(3, 4, 5) == 12\n  area_of_triangle(1, 2, 3) == 0\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (a * b) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n  triangle.\n  Example:\n  perimeter_of_triangle(3, 4, 5) == 17\n  perimeter_of_triangle(1, 2, 3) == 0\n  */\nconst perimeter_of_triangle = (a, b, c) => {\n  return (a + b + c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  area_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const max = words[0];\n  let max_count = 0;\n  let max_index = 0;\n  for (let i = 0; i < words.length; i++) {\n    const count = words[i].length;\n    if (count > max_count) {\n      max = words[i];\n      max_count = count;\n      max_index = i;\n    }\n  }\n  return max;\n};\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [0, 0];\n  if (number >= need) {\n    result[0] = number - need;\n    result[1] = remaining;\n  } else {\n    result[0] = remaining;\n    result[1] = remaining - number;\n  }\n  return result;\n};\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nconst test27 = [\n  [5, 6, 10", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i]);\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_2 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toLowerCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_3 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toUpperCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_4 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toLowerCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_5 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toUpperCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_6 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toLowerCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_7 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toUpperCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_8 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toLowerCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_9 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toUpperCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_10 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toLowerCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_11 = (string) => {\n  const char_set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    char_set.add(string[i].toUpperCase());\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  const len_operator = operator.length\n  const len_operand = operand.length\n  const operator_list = []\n  const operand_list = []\n\n  for (let i = 0; i < len_operator; i++) {\n    operator_list.push(operator[i])\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    operand_list.push(operand[i])\n  }\n\n  const result = operator_list[0]\n  for (let i = 1; i < len_operator; i++) {\n    result = operator_list[i] + result\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    result = result + operand_list[i]\n  }\n\n  return result\n}\n\nconst do_algebra_2 = (operator, operand) => {\n  const len_operator = operator.length\n  const len_operand = operand.length\n  const operator_list = []\n  const operand_list = []\n\n  for (let i = 0; i < len_operator; i++) {\n    operator_list.push(operator[i])\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    operand_list.push(operand[i])\n  }\n\n  const result = operator_list[0]\n  for (let i = 1; i < len_operator; i++) {\n    result = operator_list[i] + result\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    result = result + operand_list[i]\n  }\n\n  return result\n}\n\nconst do_algebra_3 = (operator, operand) => {\n  const len_operator = operator.length\n  const len_operand = operand.length\n  const operator_list = []\n  const operand_list = []\n\n  for (let i = 0; i < len_operator; i++) {\n    operator_list.push(operator[i])\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    operand_list.push(operand[i])\n  }\n\n  const result = operator_list[0]\n  for (let i = 1; i < len_operator; i++) {\n    result = operator_list[i] + result\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    result = result + operand_list[i]\n  }\n\n  return result\n}\n\nconst do_algebra_4 = (operator, operand) => {\n  const len_operator = operator.length\n  const len_operand = operand.length\n  const operator_list = []\n  const operand_list = []\n\n  for (let i = 0; i < len_operator; i++) {\n    operator_list.push(operator[i])\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    operand_list.push(operand[i])\n  }\n\n  const result = operator_list[0]\n  for (let i = 1; i < len_operator; i++) {\n    result = operator_list[i] + result\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    result = result + operand_list[i]\n  }\n\n  return result\n}\n\nconst do_algebra_5 = (operator, operand) => {\n  const len_operator = operator.length\n  const len_operand = operand.length\n  const operator_list = []\n  const operand_list = []\n\n  for (let i = 0; i < len_operator; i++) {\n    operator_list.push(operator[i])\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    operand_list.push(operand[i])\n  }\n\n  const result = operator_list[0]\n  for (let i = 1; i < len_operator; i++) {\n    result = operator_list[i] + result\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    result = result + operand_list[i]\n  }\n\n  return result\n}\n\nconst do_algebra_6 = (operator, operand) => {\n  const len_operator = operator.length\n  const len_operand = operand.length\n  const operator_list = []\n  const operand_list = []\n\n  for (let i = 0; i < len_operator; i++) {\n    operator_list.push(operator[i])\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    operand_list.push(operand[i])\n  }\n\n  const result = operator_list[0]\n  for (let i = 1; i < len_operator; i++) {\n    result = operator_list[i] + result\n  }\n\n  for (let i = 0; i < len_operand; i++) {\n    result = result + operand_list[i]\n  }\n\n  return result\n}\n\nconst do_algebra_7 = (operator, operand) => {\n  const len_operator = operator.length\n  const len_operand = operand.length\n  const operator_list = []\n  const operand_list = []", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n  */\nconst string_to_sha1 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha256 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha384('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha384 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst string_to_sha512 = (text) => {\n  if (text ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the odd digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_odds(2, 8) => [3, 5, 7]\n  generate_odds(8, 2) => [3, 5, 7]\n  generate_odds(10, 14) => [1, 3, 5, 7, 9]\n  */\nconst generate_odds = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the even digits\n  between a and b, in ascending order.\n\n  For example:\n  sum_evens(2, 8) => 6\n  sum_evens(8, 2) => 6\n  sum_evens(10, 14) => 20\n  */\nconst sum_evens = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the odd digits\n  between a and b, in ascending order.\n\n  For example:\n  sum_odds(2, 8) => 10\n  sum_odds(8, 2) => 10\n  sum_odds(10, 14) => 30\n  */\nconst sum_odds = (a, b) => {\n  let result = 0;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the even\n  digits between a and b, in ascending order.\n\n  For example:\n  product_evens(2, 8) => 2\n  product_evens(8, 2) => 2\n  product_evens(10, 14) => 1890\n  */\nconst product_evens = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the odd\n  digits between a and b, in ascending order.\n\n  For example:\n  product_odds(2, 8) => 8\n  product_odds(8, 2) => 8\n  product_odds(10, 14) => 1890\n  */\nconst product_odds = (a, b) => {\n  let result = 1;\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the even\n  digits between a and b, in descending order.\n\n  For example:\n  sum_evens_descending(2, 8) => 6\n  sum_evens_descending(8, 2) => 6\n  sum_evens_descending(10, 14) => 20\n  */\nconst sum_evens_descending = (a, b) => {\n  let result = 0;\n  for (let i = a; i >= b; i--) {\n    if (i % 2 === 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the sum of the odd\n  digits between a and b, in descending order.\n\n  For example:\n  sum_odds_descending(2, 8) => 10\n  sum_odds_descending(8, 2) => 10\n  sum_odds_descending(10, 14) => 30\n  */\nconst sum_odds_descending = (a, b) => {\n  let result = 0;\n  for (let i = a; i >= b; i--) {\n    if (i % 2!== 0) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the even\n  digits between a and b, in descending order.\n\n  For example:\n  product_evens_descending(2, 8) => 2\n  product_evens_descending(8, 2) => 2\n  product_evens_descending(10, 14) => 1890\n  */\nconst product_evens_descending = (a, b) => {\n  let result = 1;\n  for (let i = a; i >= b; i--) {\n    if (i % 2 === 0) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two positive integers a and b, return the product of the odd\n  digits between a and b, in descending order.\n\n  For example:\n  product_odds_descending(2, 8) => 8\n  product_odds_descending(8, 2) => 8\n  product_odds_descending(10, 14) => 1890\n  */\nconst product_odds_descending = (a, b) => {\n  let result = 1;\n  for (let i = a; i >= b; i--) {\n    if (i % 2!== 0) {\n      result *= i;\n    }\n  }\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_2 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_3 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_4 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_5 = (music_string) => {\n  const notes = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < notes.length; i++) {\n    if (notes[i] === 'o') {\n      beats.push(4);\n    } else if (notes[i] === 'o|') {\n      beats.push(2);\n    } else if (notes[i] === '.') {\n      beats.push(1);\n    } else {\n      beats.push(parseInt(notes[i]));\n    }\n  }\n  return beats;\n};\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const len = string.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string[i + j]!== substring[j]) {\n          break;\n        }\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> to_lower('ABC')\n  'abc'\n  >>> to_lower('aBC')\n  'abc'\n  >>> to_lower('A')\n  'a'\n  >>> to_lower('A')\n  'a'\n  */\nconst to_lower = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> to_upper('abc')\n  'ABC'\n  >>> to_upper('aBC')\n  'ABC'\n  >>> to_upper('A')\n  'A'\n  >>> to_upper('A')\n  'A'\n  */\nconst to_upper = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in title case.\n  >>> to_title('abc')\n  'Abc'\n  >>> to_title('aBC')\n  'Abc'\n  >>> to_title('A')\n  'A'\n  >>> to_title('A')\n  'A'\n  */\nconst to_title = (string) => {\n  return string.replace(/\\w\\S*/g, to_upper);\n};\n\n/*\n  Given a string, return a string with all the punctuation removed.\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello, world!')\n  'Hello world!'\n  >>> strip_punctuation('Hello,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_2 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_3 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_4 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_5 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_6 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_7 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_8 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_9 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = []\n  for (let i = 0; i < numbers_array.length; i++) {\n    sorted_numbers.push(parseInt(numbers_array[i]))\n  }\n  sorted_numbers.sort((a, b) => a - b)\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'\n  Output:\n  'eight five four nine seven six two one zero three'\n  */\nconst sort_numbers_10 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const number_as_int = parseInt(number, 10);\n  const decimal_part = number - number_as_int;\n  return decimal_part;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_integer = (number) => {\n  const number_as_int = parseInt(number, 10);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_integer_with_decimal = (number) => {\n  const number_as_int = parseInt(number, 10);\n  const decimal_part = number - number_as_int;\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_integer_with_decimal_and_decimal = (number) => {\n  const number_as_int = parseInt(number, 10);\n  const decimal_part = number - number_as_int;\n  const decimal_part_as_int = parseInt(decimal_part, 10);\n  return number_as_int + decimal_part_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_integer_with_decimal_and_decimal_and_decimal = (number) => {\n  const number_as_int = parseInt(number, 10);\n  const decimal_part = number - number_as_int;\n  const decimal_part_as_int = parseInt(decimal_part, 10);\n  const decimal_part_as_int_2 = parseInt(decimal_part * 2, 10);\n  return number_as_int + decimal_part_as_int + decimal_part_as_int_2;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_integer_with_decimal_and_decimal_and_decimal_and_decimal = (number) => {\n  const number_as_int = parseInt(number, 10);\n  const decimal_part = number - number_as_int;\n  const decimal_part_as_int = parseInt(decimal_part, 10);\n  const decimal_part_as_int_2 = parseInt(decimal_part * 2, 10);\n  const decimal_part_as_int_3 = parseInt(decimal_part * 3, 10);\n  return number_as_int + decimal_part_as_int + decimal_part_as_int_2 + decimal_part_as_int_3;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_integer_with_decimal_and_decimal_and_decimal_and_decimal_and_decimal = (number) => {\n  const number_as_int = parseInt(number, 10);\n  const decimal_part = number - number_as_int;\n  const decimal_part_as_int = parseInt(decimal_part, 10);\n  const decimal_part_as_int_2 = parseInt(decimal_part * 2, 10);\n  const decimal_part_as_int_3 = parseInt(decimal_part * 3, 10);\n  const decimal_part_as_int_4 = parseInt(decimal_part * 4, 10);\n  return number_as_int + decimal_part_as_int + decimal_part_as_int_2 + decimal_part_as_int_3 + decimal_part_as_int_4;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_to_integer_with_decimal_and_decimal_and_decimal_and_decimal_and_decimal_and_decimal = (number) => {\n  const number_as_int = parseInt(number, 10);\n  const decimal_part = number - number_as_int;\n  const decimal_part_as_int = parseInt(decimal_part, 10);\n  const decimal_part_as_int_2 = parseInt(decimal_part * 2, 10);\n  const decimal_part_as_int_3 = parseInt(decimal_part * 3, 10);\n  const decimal_part_as_int_4 = parseInt(decimal_part * 4, 10);\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const sorted_numbers = sorted(numbers);\n  const closest_numbers = [\n    sorted_numbers[0],\n    sorted_numbers[1],\n  ];\n  const closest_numbers_distance = [\n    Math.abs(sorted_numbers[0] - sorted_numbers[1]),\n    Math.abs(sorted_numbers[1] - sorted_numbers[2]),\n  ];\n  const closest_numbers_index = closest_numbers_distance.indexOf(\n    Math.min(closest_numbers_distance)\n  );\n  return [\n    closest_numbers[closest_numbers_index],\n    closest_numbers[closest_numbers_index + 1],\n  ];\n};\n\nexport default find_closest_elements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const range = max - min\n  return [\n    (n - min) / range,\n    1 - (n - min) / range\n  ]\n}\n\n/**\n  Given a list of numbers, return a list of numbers that are the logarithms of the\n  input numbers.\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst log_numbers = (numbers) => {\n  const log_numbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    log_numbers.push(Math.log(numbers[i]))\n  }\n  return log_numbers\n}\n\n/**\n  Given a list of numbers, return a list of numbers that are the logarithms of the\n  input numbers.\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst log_numbers_to_base = (numbers, base) => {\n  const log_numbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    log_numbers.push(Math.log(numbers[i]))\n  }\n  return log_numbers\n}\n\n/**\n  Given a list of numbers, return a list of numbers that are the logarithms of the\n  input numbers.\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst log_numbers_to_base_2 = (numbers, base) => {\n  const log_numbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    log_numbers.push(Math.log(numbers[i]))\n  }\n  return log_numbers\n}\n\n/**\n  Given a list of numbers, return a list of numbers that are the logarithms of the\n  input numbers.\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst log_numbers_to_base_10 = (numbers, base) => {\n  const log_numbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    log_numbers.push(Math.log(numbers[i]))\n  }\n  return log_numbers\n}\n\n/**\n  Given a list of numbers, return a list of numbers that are the logarithms of the\n  input numbers.\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> log_numbers([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst log_numbers_to_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for floats\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_floats = (values) => {\n  return values.filter(v => typeof v === 'number' && isFloat(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_booleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for dicts\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_dicts = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for lists\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_lists = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_objects = (values) => {\n  return values.filter(v => typeof v === 'object' && v!== null &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_functions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_numbers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_none = (values) => {\n  return values.filter(v => v === null || v === undefined);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_all = (values) => {\n  return values;\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_any = (values) => {\n  return values.filter(v => v!== null && v!== undefined);\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_none_or_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_any_or_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_none_or_non_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_any_or_non_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_none_or_non_empty_or_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_any_or_non_empty_or_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_none_or_non_empty_or_non_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_any_or_non_empty_or_non_empty = (values) => {\n  return values.filter(v => v!== null && v!== undefined && v!== '');\n};\n\n/**\n  * Filter given list of any python values only", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Return index of first occurrence of character in string\n  >>> strindex('')\n  -1\n  >>> strindex('abc')\n  0\n  >>> strindex('abc', 'a')\n  0\n  >>> strindex('abc', 'b')\n  1\n  >>> strindex('abc', 'c')\n  2\n  >>> strindex('abc', 'd')\n  -1\n  */\nconst strindex = (string, character) => {\n  let index = -1;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/* Return index of last occurrence of character in string\n  >>> strlastindex('')\n  -1\n  >>> strlastindex('abc')\n  2\n  >>> strlastindex('abc', 'a')\n  1\n  >>> strlastindex('abc', 'b')\n  0\n  >>> strlastindex('abc', 'c')\n  2\n  >>> strlastindex('abc', 'd')\n  -1\n  */\nconst strlastindex = (string, character) => {\n  let index = -1;\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i] === character) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/* Return substring of string\n  >>> strsub('')\n  ''\n  >>> strsub('abc')\n  'abc'\n  >>> strsub('abc', 1)\n  'bc'\n  >>> strsub('abc', 2)\n  'c'\n  >>> strsub('abc', 3)\n  ''\n  >>> strsub('abc', 4)\n  ''\n  */\nconst strsub = (string, start, length) => {\n  if (start < 0) {\n    start = string.length + start;\n  }\n  if (length === undefined) {\n    length = string.length - start;\n  }\n  if (start + length > string.length) {\n    length = string.length - start;\n  }\n  return string.substring(start, start + length);\n};\n\n/* Return substring of string, starting at index\n  >>> strsubat('')\n  ''\n  >>> strsubat('abc')\n  'abc'\n  >>> strsubat('abc', 1)\n  'bc'\n  >>> strsubat('abc', 2)\n  'c'\n  >>> strsubat('abc', 3)\n  ''\n  >>> strsubat('abc', 4)\n  ''\n  */\nconst strsubat = (string, index) => {\n  return strsub(string, index, 1);\n};\n\n/* Return string with all occurrences of character replaced by new character\n  >>> strrep('')\n  ''\n  >>> strrep('abc')\n  'abc'\n  >>> strrep('abc', 'x')\n  'axc'\n  >>> strrep('abc', 'x', 2)\n  'axc'\n  */\nconst strrep = (string, character, length) => {\n  if (length === undefined) {\n    length = 1;\n  }\n  let result = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      result += character;\n    } else {\n      result += string[i];\n    }\n  }\n  return result;\n};\n\n/* Return string with all occurrences of character replaced by new character, starting at index\n  >>> strrepat('')\n  ''\n  >>> strrepat('abc')\n  'abc'\n  >>> strrepat('abc', 'x')\n  'axc'\n  >>> strrepat('abc', 'x', 2)\n  'axc'\n  */\nconst strrepat = (string, index, character, length) => {\n  if (length === undefined) {\n    length = 1;\n  }\n  let result = '';\n  for (let i = index; i < string.length; i++) {\n    if (string[i] === character) {\n      result += character;\n    } else {\n      result += string[i];\n    }\n  }\n  return result;\n};\n\n/* Return string with all occurrences of character replaced by new character, starting at index\n  >>> strrepat('')\n  ''\n  >>> strrepat('abc')\n  'abc'\n  >>> strrepat('abc', 'x')\n  'axc'\n  >>> strrepat('abc', 'x', 2)\n  'axc'\n  */\nconst strrepat = (string, index, character, length) => {\n  if (length === undefined) {\n    length = 1;\n  }\n  let result = '';\n  for (let i = index; i < string.length; i++) {\n    if (string[i] === character) {\n      result += character;\n    } else {\n      result += string[i];\n    }\n  }\n  return result;\n};\n\n/* Return string with all occurrences of character replaced by new character, starting at index\n  >>> strrepat('')\n  ''\n  >>> strrepat('abc')\n  'abc'\n  >>> strrepat('abc', 'x')\n  'axc'\n  >>> strrepat('abc', 'x', 2)\n  'axc'\n  */\nconst strrepat = (string, index, character, length) => {\n  if (length === undefined) {\n    length = 1;\n  }\n  let result = '';\n  for (let i = index; i < string.length; i++) {\n    if (string[i] === character) {\n      result += character;\n    } else {\n      result += string[i];\n    }\n  }\n  return result;\n};\n\n/* Return string with all occurrences of character replaced by new character, starting at index\n  >>> strrepat('')\n  ''\n  >>> strrepat('abc')\n  'abc'\n  >>> strrepat('abc', 'x')\n  'axc'\n  >>> strrepat('abc', 'x', 2)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor(15)\n  10\n  */\nconst largest_divisor_plus = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor + 1;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_plus(15)\n  5\n  */\nconst largest_divisor_minus = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor - 1;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_minus(15)\n  10\n  */\nconst largest_divisor_times = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor * 2;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_times(15)\n  5\n  */\nconst largest_divisor_div = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return divisor / 2;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_div(15)\n  10\n  */\nconst largest_divisor_mod = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_mod(15)\n  5\n  */\nconst largest_divisor_mod_plus = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor + 1;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_mod_plus(15)\n  10\n  */\nconst largest_divisor_mod_minus = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor - 1;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_mod_minus(15)\n  5\n  */\nconst largest_divisor_mod_times = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor * 2;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_mod_times(15)\n  10\n  */\nconst largest_divisor_mod_div = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor / 2;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_mod_div(15)\n  5\n  */\nconst largest_divisor_mod_mod = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor % 2;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_mod_mod(15)\n  10\n  */\nconst largest_divisor_mod_mod_plus = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor % 2 + 1;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_mod_mod_plus(15)\n  5\n  */\nconst largest_divisor_mod_mod_minus = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor % 2 - 1;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largest_divisor_mod_mod_minus(15)\n  10\n  */\nconst largest_divisor_mod_mod_times = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n / divisor % 2 * 2;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_mod_mod_times(15)\n  5\n  */\nconst largest_divisor_mod_mod_div = (n) => {\n  let divisor = 1;\n  while (n % divisor === 0) {\n    divisor++;\n  }\n  return n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  const factors_length = []\n  const factors_length_max = []\n  const factors_length_min = []\n  const factors_length_sum = []\n  const factors_length_sum_max = []\n  const factors_length_sum_min = []\n  const factors_length_sum_sum = []\n  const factors_length_sum_sum_max = []\n  const factors_length_sum_sum_min = []\n  const factors_length_sum_sum_sum = []\n  const factors_length_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_min = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_max = []\n  const factors_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter(x => seen.add(x));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_2 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_3 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_4 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_5 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_6 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_7 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_8 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*\n  From a list of strings, remove all strings that are a substring of another.\n  Keep order of elements left the same as in the input.\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> remove_substrings([\"a\", \"b\", \"c\", \"a\", \"d\"])\n  [\"a\", \"b\", \"c\", \"d\"]\n  */\nconst remove_substrings_9 = (strings) => {\n  const seen = new Set();\n  return strings.filter(x =>!seen.has(x.toLowerCase()));\n};\n\n/*", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  }).toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the spaces removed.\n  >>> trim_spaces('  Hello  ')\n  'Hello'\n  */\nconst trim_spaces = (string) => {\n  return string.replace(/\\s+/g, '');\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> to_lower_case('  Hello  ')\n  'hello'\n  */\nconst to_lower_case = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  }).toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> to_upper_case('  Hello  ')\n  'HELLO'\n  */\nconst to_upper_case = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32);\n  }).toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> capitalize('  Hello  ')\n  'Hello'\n  */\nconst capitalize = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32) + c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> titlecase('  Hello  ')\n  'Hello'\n  */\nconst titlecase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) - 32) + c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> swap_case('  Hello  ')\n  'hello'\n  */\nconst swap_case = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32) + c.toLowerCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> swap_case_titlecase('  Hello  ')\n  'Hello'\n  */\nconst swap_case_titlecase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32) + c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> swap_case_capitalize('  Hello  ')\n  'Hello'\n  */\nconst swap_case_capitalize = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32) + c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> swap_case_titlecase('  Hello  ')\n  'Hello'\n  */\nconst swap_case_capitalize_titlecase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32) + c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> swap_case_capitalize_titlecase('  Hello  ')\n  'Hello'\n  */\nconst swap_case_capitalize_titlecase_swap_case = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32) + c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> swap_case_capitalize_titlecase_swap_case('  Hello  ')\n  'Hello'\n  */\nconst swap_case_capitalize_titlecase_swap_case_titlecase = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32) + c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the spaces removed, and all the\n  uppercase characters converted to lowercase.\n  >>> swap_case_capitalize_titlecase_swap_case_titlecase('  Hello  ')\n  'Hello'\n  */\nconst swap_case_capitalize_titlecase_swap_case_titlecase_swap_case = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + 32) + c.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filter_by_suffix([], 'a')\n  []\n  >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filter_by_suffix = (strings, suffix) => {\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring\n  in a given index.\n  >>> filter_by_substring_index([], 'a', 0)\n  []\n  >>> filter_by_substring_index(['abc', 'bcd', 'cde', 'array'], 'a', 0)\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring_index(['abc', 'bcd', 'cde', 'array'], 'a', 1)\n  ['bcd', 'cde']\n  */\nconst filter_by_substring_index = (strings, substring, index) => {\n  return strings.filter(s => s.includes(substring, index));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring\n  in a given index and a given prefix.\n  >>> filter_by_substring_index_prefix([], 'a', 0, 'b')\n  []\n  >>> filter_by_substring_index_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 0, 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring_index_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 1, 'b')\n  ['bcd', 'cde']\n  */\nconst filter_by_substring_index_prefix = (strings, substring, index, prefix) => {\n  return strings.filter(s => s.includes(substring, index, prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring\n  in a given index and a given prefix.\n  >>> filter_by_substring_index_suffix([], 'a', 0, 'b')\n  []\n  >>> filter_by_substring_index_suffix(['abc', 'bcd', 'cde', 'array'], 'a', 0, 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring_index_suffix(['abc', 'bcd', 'cde', 'array'], 'a', 1, 'b')\n  ['bcd', 'cde']\n  */\nconst filter_by_substring_index_suffix = (strings, substring, index, suffix) => {\n  return strings.filter(s => s.includes(substring, index, suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring\n  in a given index and a given prefix.\n  >>> filter_by_substring_index_suffix_prefix([], 'a', 0, 'b', 'c')\n  []\n  >>> filter_by_substring_index_suffix_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 0, 'b', 'c')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring_index_suffix_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 1, 'b', 'c')\n  ['bcd', 'cde']\n  */\nconst filter_by_substring_index_suffix_prefix = (strings, substring, index, suffix, prefix) => {\n  return strings.filter(s => s.includes(substring, index, suffix, prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring\n  in a given index and a given prefix.\n  >>> filter_by_substring_index_suffix_prefix_suffix([], 'a', 0, 'b', 'c', 'd')\n  []\n  >>> filter_by_substring_index_suffix_prefix_suffix(['abc', 'bcd', 'cde', 'array'], 'a', 0, 'b', 'c', 'd')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring_index_suffix_prefix_suffix(['abc', 'bcd', 'cde', 'array'], 'a', 1, 'b', 'c', 'd')\n  ['bcd', 'cde']\n  */\nconst filter_by_substring_index_suffix_prefix_suffix = (strings, substring, index, suffix, prefix, suffix2) => {\n  return strings.filter(s => s.includes(substring, index, suffix, prefix, suffix2));\n};\n\n/* Filter an input list of strings only for ones that contain a given substring\n  in a given index and a given prefix.\n  >>> filter_by_substring_index_suffix_prefix_suffix_prefix([], 'a', 0, 'b', 'c', 'd', 'e')\n  []\n  >>> filter_by_substring_index_suffix_prefix_suffix_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 0, 'b', 'c',", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  const operations_length = operations.length\n  let balance = 0\n  let i = 0\n  while (i < operations_length) {\n    balance += operations[i]\n    if (balance < 0) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nexport default below_zero\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst get_negative = (l) => {\n  return l.filter((x) => x < 0);\n};\n\n/*\n  >>> get_odd([1, 2, 3, 4, 5])\n  [1, 3, 5]\n  >>> get_odd([1, 2, 3, 4, 5, 6])\n  [1, 3, 5, 6]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7])\n  [1, 3, 5, 6, 7]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 3, 5, 6, 7, 8]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 3, 5, 6, 7, 8, 9]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 3, 5, 6, 7, 8, 9, 10]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> get_odd([1, 2, 3, 4, 5,", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*Return the number of divisors of a given number.\n  >>> divisors(1)\n  1\n  >>> divisors(2)\n  2\n  >>> divisors(3)\n  3\n  >>> divisors(4)\n  4\n  >>> divisors(5)\n  5\n  >>> divisors(6)\n  6\n  >>> divisors(7)\n  7\n  >>> divisors(8)\n  8\n  >>> divisors(9)\n  9\n  >>> divisors(10)\n  10\n  >>> divisors(11)\n  11\n  >>> divisors(12)\n  12\n  >>> divisors(13)\n  13\n  >>> divisors(14)\n  14\n  >>> divisors(15)\n  15\n  >>> divisors(16)\n  16\n  >>> divisors(17)\n  17\n  >>> divisors(18)\n  18\n  >>> divisors(19)\n  19\n  >>> divisors(20)\n  20\n  >>> divisors(21)\n  21\n  >>> divisors(22)\n  22\n  >>> divisors(23)\n  23\n  >>> divisors(24)\n  24\n  >>> divisors(25)\n  25\n  >>> divisors(26)\n  26\n  >>> divisors(27)\n  27\n  >>> divisors(28)\n  28\n  >>> divisors(29)\n  29\n  >>> divisors(30)\n  30\n  >>> divisors(31)\n  31\n  >>> divisors(32)\n  32\n  >>> divisors(33)\n  33\n  >>> divisors(34)\n  34\n  >>> divisors(35)\n  35\n  >>> divisors(36)\n  36\n  >>> divisors(37)\n  37\n  >>> divisors(38)\n  38\n  >>> divisors(39)\n  39\n  >>> divisors(40)\n  40\n  >>> divisors(41)\n  41\n  >>> divisors(42)\n  42\n  >>> divisors(43)\n  43\n  >>> divisors(44)\n  44\n  >>> divisors(45)\n  45\n  >>> divisors(46)\n  46\n  >>> divisors(47)\n  47\n  >>> divisors(48)\n  48\n  >>> divisors(49)\n  49\n  >>> divisors(50)\n  50\n  >>> divisors(51)\n  51\n  >>> divisors(52)\n  52\n  >>> divisors(53)\n  53\n  >>> divisors(54)\n  54\n  >>> divisors(55)\n  55\n  >>> divisors(56)\n  56\n  >>> divisors(57)\n  57\n  >>> divisors(58)\n  58\n  >>> divisors(59)\n  59\n  >>> divisors(60)\n  60\n  >>> divisors(61)\n  61\n  >>> divisors(62)\n  62\n  >>> divisors(63)\n  63\n  >>> divisors(64)\n  64\n  >>> divisors(65)\n  65\n  >>> divisors(66)\n  66\n  >>> divisors(67)\n  67\n  >>> divisors(68)\n  68\n  >>> divisors(69)\n  69\n  >>> divisors(70)\n  70\n  >>> divisors(71)\n  71\n  >>> divisors(72)\n  72\n  >>> divisors(73)\n  73\n  >>> divisors(74)\n  74\n  >>> divisors(75)\n  75\n  >>> divisors(76)\n  76\n  >>> divisors(77)\n  77\n  >>> divisors(78)\n  78\n  >>> divisors(79)\n  79\n  >>> divisors(80)\n  80\n  >>> divisors(81)\n  81\n  >>> divisors(82)\n  82\n  >>> divisors(83)\n  83\n  >>> divisors(84)\n  84\n  >>> divisors(85)\n  85\n  >>> divisors(86)\n  86\n  >>> divisors(87)\n  87\n  >>> divisors(88)\n  88\n  >>> divisors(89)\n  89\n  >>> divisors(90)\n  90\n  >>> divisors(91)\n  91\n  >>> divisors(92)\n  92\n  >>> divisors(93)\n  93\n  >>> divisors(94)\n  94\n  >>> divisors(95)\n  95\n  >>> divisors(96)\n  96\n  >>> divisors(97)\n  97\n  >>> divisors(98)\n  98\n  >>> divisors(99)\n  99\n  >>> divisors(100)\n  100\n  >>> divisors(101)\n  101\n  >>> divisors(102)\n  102\n  >>> divisors(103)\n  103\n  >>> divisors(104)\n  104\n  >>> divisors(105)\n  105\n  >>> divisors(106)\n  106\n  >>> divisors(107)\n  107\n  >>> divisors(108)\n  108\n  >>> divisors(109)\n  109\n  >>> divisors(110)\n  110\n  >>> divisors(111)\n  111\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2!== 0) {\n    throw new Error('list must have even number of coefficients');\n  }\n  const max = xs[len - 1];\n  const min = xs[0];\n  let x = (max - min) / 2;\n  while (x!== 0) {\n    const poly = poly(xs, x);\n    if (poly === 0) {\n      return x;\n    }\n    x = (max - min) / 2;\n  }\n  return -1;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const len = xs.length;\n  if (len % 2!== 0) {\n    throw new Error('list must have even number of coefficients');\n  }\n  const max = xs[len - 1];\n  const min = xs[0];\n  let x = (max - min) / 2;\n  while (x!== 0) {\n    const poly = poly2(xs, x);\n    if (poly === 0) {\n      return x;\n    }\n    x = (max - min) / 2;\n  }\n  return -1;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const len = xs.length;\n  if (len % 2!== 0) {\n    throw new Error('list must have even number of coefficients');\n  }\n  const max = xs[len - 1];\n  const min = xs[0];\n  let x = (max - min) / 2;\n  while (x!== 0) {\n    const poly = poly3(xs, x);\n    if (poly === 0) {\n      return x;\n    }\n    x = (max - min) / 2;\n  }\n  return -1;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sorted_third = [...l].filter((x, i) => i % 3 === 0).sort((a, b) => a - b);\n  return [...sorted,...sorted_third];\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  const seen = {};\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    if (seen[item]) {\n      continue;\n    }\n    seen[item] = true;\n    result.push(item);\n  }\n  return result;\n};\n\n/*Return the number of unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4\n  */\nconst countUnique = (l) => {\n  const result = 0;\n  for (let i = 0; i < l.length; i++) {\n    const item = l[i];\n    if (seen[item]) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  unique,\n  countUnique\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10 + 123 + 9 + 0 + 1 + 2 + 3 + 5 + 6 + 9 + 10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  (5 + 3 + -5 + 2 + -3 + 3 + 9 + 0 + 123 + 1 + -10) / 9.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length;\n};\n\n/*Return the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  (5 + 3 + -5 + 2 + -3 + 3 + 9 + 0 + 123 + 1 + -10) / 9.0\n  */\nconst median = (l) => {\n  let sorted = sorted_list(l);\n  if (sorted.length % 2 === 0) {\n    return (sorted[(sorted.length / 2) - 1] + sorted[(sorted.length / 2)]) / 2;\n  } else {\n    return sorted[(sorted.length / 2)];\n  }\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  (5 + 3 + -5 + 2 + -3 + 3 + 9 + 0 + 123 + 1 + -10) / 9.0\n  */\nconst mode = (l) => {\n  let max = max_element(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      count++;\n    }\n  }\n  return max;\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  (5 + 3 + -5 + 2 + -3 + 3 + 9 + 0 + 123 + 1 + -10) / 9.0\n  */\nconst mode_list = (l) => {\n  let max = max_element(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      count++;\n    }\n  }\n  return [max, count];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  (5 + 3 + -5 + 2 + -3 + 3 + 9 + 0 + 123 + 1 + -10) / 9.0\n  */\nconst mode_list_2 = (l) => {\n  let max = max_element(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      count++;\n    }\n  }\n  return [max, count];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  (5 + 3 + -5 + 2 + -3 + 3 + 9 + 0 + 123 + 1 + -10) / 9.0\n  */\nconst mode_list_3 = (l) => {\n  let max = max_element(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      count++;\n    }\n  }\n  return [max, count];\n};\n\n/*Return the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  (5 + 3 + -5 + 2 + -3 + 3 + 9 + 0 + 123 + 1 + -10) / 9.0\n  */\nconst mode_list_4 = (l) => {\n  let max = max_element(l);\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  const divisors = [11, 13]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 3 appears in integers less than n which are divisible by 7.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_3 = (n) => {\n  const divisors = [7]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 5 appears in integers less than n which are divisible by 5.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_5 = (n) => {\n  const divisors = [5]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 9.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_9 = (n) => {\n  const divisors = [9]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 4 appears in integers less than n which are divisible by 4.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_4 = (n) => {\n  const divisors = [4]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 8.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_8 = (n) => {\n  const divisors = [8]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 6 appears in integers less than n which are divisible by 6.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_6 = (n) => {\n  const divisors = [6]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 2 appears in integers less than n which are divisible by 2.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_2 = (n) => {\n  const divisors = [2]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 1 appears in integers less than n which are divisible by 1.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_1 = (n) => {\n  const divisors = [1]\n  const divisor_count = divisors.reduce((acc, divisor) => {\n    const count = n / divisor\n    if (count > 0) {\n      acc += count\n    }\n    return acc\n  }, 0)\n  return divisor_count\n}\n\n/*Return the number of times the digit 0 appears in integers less than n which are divisible by 0.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const even = [...l].filter((x) => x % 2 === 0);\n  return [...sorted,...even];\n};\n\nexport default sort_even;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse function. Returns decoded string.\n  */\nconst decodeCyclic_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse_reverse function. Returns decoded string.\n  */\nconst decodeCyclic_reverse_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse_reverse_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic_reverse_reverse_reverse function. Returns decoded string.\n  */\nconst decodeCyclic_reverse_reverse_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic_reverse_reverse_reverse_reverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = prime + 2;\n    }\n  }\n  return fib;\n};\n\nconsole.log(prime_fib(1));\nconsole.log(prime_fib(2));\nconsole.log(prime_fib(3));\nconsole.log(prime_fib(4));\nconsole.log(prime_fib(5));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = mean_of(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation of this\n  dataset.\n  Standard deviation is the square root of the sum of the squares of the\n  differences from the mean:\n  SD = sqrt(sum((x - mean)^2) / (n - 1))\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation = (numbers) => {\n  const mean = mean_of(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.sqrt(sum(deviations) / (numbers.length - 1));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error of this\n  dataset.\n  Standard error is the square root of the sum of the squares of the\n  differences from the mean divided by the standard deviation:\n  SE = sqrt(sum((x - mean)^2 / SD) / (n - 1))\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error = (numbers) => {\n  const mean = mean_of(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const sd = standard_deviation(numbers);\n  return Math.sqrt(sum(deviations) / (numbers.length - 1)) / sd;\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  of this dataset.\n  Coefficient of variation is the ratio of the standard deviation to the\n  mean:\n  CV = SD / Mean\n  >>> coefficient_of_variation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficient_of_variation = (numbers) => {\n  const sd = standard_deviation(numbers);\n  const mean = mean_of(numbers);\n  return sd / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the skewness of this dataset.\n  Skewness is the ratio of the sum of the squares of the differences from the\n  mean to the mean of the squares of the differences from the mean:\n  Skewness = sum((x - mean)^2 / (mean * SD)) / (n - 1)\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean_of(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const sd = standard_deviation(numbers);\n  return sum(deviations) / (numbers.length - 1) / sd;\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis of this dataset.\n  Kurtosis is the ratio of the sum of the squares of the differences from the\n  mean to the mean of the squares of the differences from the mean to the\n  mean of the squares of the differences from the mean:\n  Kurtosis = sum((x - mean)^2 / (mean * SD * SD)) / (n - 1)\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean_of(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const sd = standard_deviation(numbers);\n  const mean_squares = numbers.map((x) => Math.pow(x - mean, 2));\n  return sum(deviations) / (numbers.length - 1) / sd / sd / mean_squares;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis of this\n  dataset.\n  Excess kurtosis is the ratio of the sum of the squares of the differences\n  from the mean to the mean of the squares of the differences from the mean\n  to the mean of the squares of the differences from the mean to the mean\n  of the squares of the differences from the mean:\n  Excess kurtosis = sum((x - mean)^2 / (mean * SD * SD * SD)) / (n - 1)\n  >>> excess_kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst excess_kurtosis = (numbers) => {\n  const mean = mean_of(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  const sd = standard_deviation(numbers);\n  const mean_squares = numbers.map((x) => Math.pow(x - mean, 2));\n  const mean_squares_squared = numbers.map((x) => Math.pow(x - mean, 2));\n  return sum(deviations) / (numbers.length - 1) / sd / sd / sd / sd / mean_squares_squared;\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis of this\n  dataset.\n  Excess kurtosis is the ratio of the sum of the squares of the differences\n  from the mean to the mean of the squares of the differences from the mean\n  to the mean of the squares of the differences from the mean to the mean\n  of the squares of the differences from the mean to the mean of the squares\n  of the differences from the mean:\n  Excess kurtosis = sum((x - mean)^2 / (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  return false\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  return false\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  return false\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted_sorted = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  return false\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted_sorted_sorted = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if (sum === 0) return true\n  return false\n}\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted_sorted_sorted_sorted = (l) => {\n  const len = l.length\n  if (len < 3) return false\n  const sum = l.reduce((a, b) => a + b, 0)\n  if", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let car_i = 0;\n  let car_j = 0;\n  let car_k = 0;\n  let car_i_speed = 0;\n  let car_j_speed = 0;\n  let car_k_speed = 0;\n  let car_i_x = 0;\n  let car_j_x = 0;\n  let car_k_x = 0;\n  let car_i_y = 0;\n  let car_j_y = 0;\n  let car_k_y = 0;\n  let car_i_x_speed = 0;\n  let car_j_x_speed = 0;\n  let car_k_x_speed = 0;\n  let car_i_y_speed = 0;\n  let car_j_y_speed = 0;\n  let car_k_y_speed = 0;\n  while (i < n) {\n    car_i = i;\n    car_i_x = 0;\n    car_i_y = 0;\n    car_i_x_speed = 0;\n    car_i_y_speed = 0;\n    while (j < n) {\n      car_j = j;\n      car_j_x = 0;\n      car_j_y = 0;\n      car_j_x_speed = 0;\n      car_j_y_speed = 0;\n      while (k < n) {\n        car_k = k;\n        car_k_x = 0;\n        car_k_y = 0;\n        car_k_x_speed = 0;\n        car_k_y_speed = 0;\n        car_i_x_speed = car_i_x_speed + car_i_x;\n        car_i_y_speed = car_i_y_speed + car_i_y;\n        car_j_x_speed = car_j_x_speed + car_j_x;\n        car_j_y_speed = car_j_y_speed + car_j_y;\n        car_k_x_speed = car_k_x_speed + car_k_x;\n        car_k_y_speed = car_k_y_speed + car_k_y;\n        car_i_x = car_i_x + car_i_x_speed;\n        car_i_y = car_i_y + car_i_y_speed;\n        car_j_x = car_j_x + car_j_x_speed;\n        car_j_y = car_j_y + car_j_y_speed;\n        car_k_x = car_k_x + car_k_x_speed;\n        car_k_y = car_k_y + car_k_y_speed;\n        if (car_i_x_speed == 0 && car_i_y_speed == 0 && car_j_x_speed == 0 && car_j_y_speed == 0 && car_k_x_speed == 0 && car_k_y_speed == 0) {\n          collisions = collisions + 1;\n        }\n        k = k + 1;\n      }\n      j = j + 1;\n    }\n    i = i + 1;\n  }\n  return collisions;\n};\n\nconsole.log(car_race_collision(10));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_2 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_3 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_4 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_5 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_6 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_7 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_8 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_9 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_10 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_11 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 0;\n};\n\n/*\n  pairs_sum_to_zero_2 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_2([1])\n  false\n  */\nconst pairs_sum_to_zero_2 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 0;\n};\n\n/*\n  pairs_sum_to_zero_3 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_3([1])\n  false\n  */\nconst pairs_sum_to_zero_3 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 0;\n};\n\n/*\n  pairs_sum_to_zero_4 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_4([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_4([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_4([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_4([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_4([1])\n  false\n  */\nconst pairs_sum_to_zero_4 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 0;\n};\n\n/*\n  pairs_sum_to_zero_5 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_5([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_5([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_5([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_5([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_5([1])\n  false\n  */\nconst pairs_sum_to_zero_5 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length - 1; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        result.push([l[i], l[j]]);\n      }\n    }\n  }\n  return result.length === 0;\n};\n\n/*\n  pairs_sum_to_zero_6 takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_6([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_6([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_6([1, 2, 3,", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  if (x < 0) {\n    return '-' + change_base(-x, base);\n  }\n  const result = [];\n  while (x > 0) {\n    result.unshift(x % base);\n    x = Math.floor(x / base);\n  }\n  return result.join('');\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('123')\n  3\n  >>> length('12345')\n  5\n  >>> length('1234567')\n  7\n  >>> length('123456789')\n  9\n  >>> length('12345678901')\n  11\n  >>> length('1234567890123')\n  13\n  >>> length('123456789012345')\n  15\n  >>> length('12345678901234567')\n  17\n  >>> length('1234567890123456789')\n  19\n  >>> length('123456789012345678901')\n  21\n  >>> length('12345678901234567890123')\n  23\n  >>> length('1234567890123456789012345')\n  25\n  >>> length('123456789012345678901234567')\n  27\n  >>> length('12345678901234567890123456789')\n  29\n  >>> length('1234567890123456789012345678901')\n  31\n  >>> length('123456789012345678901234567890123')\n  33\n  >>> length('12345678901234567890123456789012345')\n  35\n  >>> length('1234567890123456789012345678901234567')\n  37\n  >>> length('123456789012345678901234567890123456789')\n  39\n  >>> length('12345678901234567890123456789012345678901')\n  41\n  >>> length('1234567890123456789012345678901234567890123')\n  43\n  >>> length('123456789012345678901234567890123456789012345')\n  45\n  >>> length('12345678901234567890123456789012345678901234567')\n  47\n  >>> length('1234567890123456789012345678901234567890123456789')\n  49\n  >>> length('123456789012345678901234567890123456789012345678901')\n  51\n  >>> length('12345678901234567890123456789012345678901234567890123')\n  53\n  >>> length('1234567890123456789012345678901234567890123456789012345')\n  55\n  >>> length('123456789012345678901234567890123456789012345678901234567')\n  57\n  >>> length('12345678901234567890123456789012345678901234567890123456789')\n  59\n  >>> length('1234567890123456789012345678901234567890123456789012345678901')\n  61\n  >>> length('123456789012345678901234567890123456789012345678901234567890123')\n  63\n  >>> length('12345678901234567890123456789012345678901234567890123456789012345')\n  65\n  >>> length('1234567890123456789012345678901234567890123456789012345678901234567')\n  67\n  >>> length('123456789012345678901234567890123456789012345678901234567890123456789')\n  69\n  >>> length('12345678901234567890123456789012345678901234567890123456789012345678901')\n  71\n  >>> length('1234567890123456789012345678901234567890123456789012345678901234567890123')\n  73\n  >>> length('123456789012345678901234567890123456789012345678901234567890123456789012345')\n  75\n  >>> length('12345678901234567890123456789012345678901234567890123456789012345678901234567')\n  77\n  >>> length('1234567890123456789012345678901234567890123456789012345678901234567890123456789')\n  79\n*/\nconst length = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s.charCodeAt(i);\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('123')\n  3\n  >>> length('12345')\n  5\n  >>> length('1234567')\n  7\n  >>> length('123456789')\n  9\n  >>> length('12345678901')\n  11\n  >>> length('1234567890123')\n  13\n  >>> length('123456789012345')\n  15\n  >>> length('12345678901234567')\n  17\n  >>> length('1234567890123456789')\n  19\n  >>> length('1234567890123456789", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area_24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 0\n  } else if (n === 4) {\n    return 2 + fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  return sorted[half];\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_2 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_3 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_4 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_5 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_6 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_7 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_8 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_9 = (text) => {\n    let text_length = text.length\n    let half_length = text_length / 2\n    let i = 0\n    let j = text_length - 1\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp3 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp4 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp5 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp6 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp7 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp8 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp9 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp10 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp11 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp12 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp13 = (n, p) => {\n  const r = n % p;\n  if (r === 0) return p;\n  return r;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  if (len === 0) {\n    return [];\n  }\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    result.push(numbers[i]);\n    if (i < len - 1) {\n      result.push(delimeter);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_reverse_reverse_reverse_reverse_reverse = (s) => {\n  let decoded = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const new_text = text.toLowerCase();\n  for (let i = 0; i < vowels.length; i++) {\n    new_text = new_text.replace(vowels[i], '');\n  }\n  return new_text;\n};\n\n/*\n  remove_punctuation is a function that takes string and returns string without punctuation.\n  >>> remove_punctuation('')\n  ''\n  >>> remove_punctuation(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> remove_punctuation('abcdef')\n  'abcdef'\n  >>> remove_punctuation('aaaaa')\n  ''\n  >>> remove_punctuation('aaBAA')\n  'BAA'\n  >>> remove_punctuation('zbcd')\n  'zbcd'\n  */\nconst remove_punctuation = (text) => {\n  const punctuation = ['.', ',', '?', '!', ';', ':', '-', '_', '\\'', '\"', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '\\'d', '\\'D', '\\'ll', '\\'re', '\\'ve', '\\'s', '\\'S', '\\'m', '\\'M', '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst between_thresholds = (l, t1, t2) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t1 || l[i] > t2) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst within_threshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst within_threshold_2 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst within_threshold_3 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst within_threshold_4 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst within_threshold_5 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst within_threshold_6 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  false\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  >>> below_threshold([1, 20, 4, 10], 15)\n  true\n  */\nconst within_threshold_7 = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] < t || l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return true if all numbers in the list", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0; i < args.length; i++) {\n    sum += args[i];\n  }\n  return sum;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3, 5, 7)\n  15\n  >>> add(2, 3, 5, 7, 11, 13)\n  30\n  >>> add(2, 3, 5, 7, 11, 13, 17, 19)\n  42\n  */\nconst add = (...args) => {\n  let sum = 0;\n  for (let i = 0", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_2('abcd', 'dddddddabc')\n  true\n  >>> same_chars_2('dddddddabc', 'abcd')\n  true\n  >>> same_chars_2('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_2 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_3('abcd', 'dddddddabc')\n  true\n  >>> same_chars_3('dddddddabc', 'abcd')\n  true\n  >>> same_chars_3('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_3 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_4('abcd', 'dddddddabc')\n  true\n  >>> same_chars_4('dddddddabc', 'abcd')\n  true\n  >>> same_chars_4('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_4 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_5('abcd', 'dddddddabc')\n  true\n  >>> same_chars_5('dddddddabc', 'abcd')\n  true\n  >>> same_chars_5('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_5 = (s0, s1) => {\n    const s0_len = s0.length;\n    const s1_len = s1.length;\n    if (s0_len!== s1_len) {\n        return false;\n    }\n    for (let i = 0; i < s0_len; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_6('abcd', 'dddddddabc')\n  true\n  >>> same_chars_6('dddddddabc', 'abcd')\n  true\n  >>> same_chars_6('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_6 = (s0, s1) => {\n    const s0_len = s0.length;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const open_brackets = brackets.split(\"<\")\n  const close_brackets = brackets.split(\">\")\n  const open_brackets_length = open_brackets.length\n  const close_brackets_length = close_brackets.length\n  const open_brackets_index = []\n  const close_brackets_index = []\n  for (let i = 0; i < open_brackets_length; i++) {\n    open_brackets_index.push(i)\n  }\n  for (let i = 0; i < close_brackets_length; i++) {\n    close_brackets_index.push(i)\n  }\n  for (let i = 0; i < open_brackets_length; i++) {\n    for (let j = 0; j < close_brackets_length; j++) {\n      if (open_brackets[i] === close_brackets[j]) {\n        open_brackets_index.splice(i, 1)\n        close_brackets_index.splice(j, 1)\n      }\n    }\n  }\n  return open_brackets_index.length === 0\n}\n\nmodule.exports = correct_bracketing\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0\n  let j = l.length - 1\n  while (i < j) {\n    if (l[i] > l[j]) {\n      return false\n    }\n    if (l[i] < l[j]) {\n      j--\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1s = l1.sort();\n  const l2s = l2.sort();\n  const l1e = l1s.pop();\n  const l2e = l2s.pop();\n  const l1i = l1s.indexOf(l1e);\n  const l2i = l2s.indexOf(l2e);\n  const l1s1 = l1s.slice(0, l1i);\n  const l2s1 = l2s.slice(0, l2i);\n  const l1s2 = l1s.slice(l1i + 1);\n  const l2s2 = l2s.slice(l2i + 1);\n  const l1s3 = l1s2.concat(l1s1);\n  const l2s3 = l2s2.concat(l2s1);\n  const common = l1s3.filter(x => l2s3.indexOf(x) >= 0);\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 2\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 2\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 2\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_2 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 2\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 3\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_3 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 3\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 4\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_4 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 4\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 5\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_5 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 5\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 6\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_6 = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const prime_factor = 6\n  while (n % prime_factor!== 0) {\n    n = n / prime_factor\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const stack = [paren_string];\n  const max_depth = 0;\n  const depth = 0;\n  const result = [];\n\n  while (stack.length > 0) {\n    const current_string = stack.pop();\n    const next_string = stack.pop();\n\n    if (current_string === next_string) {\n      depth++;\n    } else {\n      if (depth > max_depth) {\n        max_depth = depth;\n      }\n      stack.push(next_string);\n      depth = 0;\n    }\n  }\n\n  if (depth > max_depth) {\n    max_depth = depth;\n  }\n\n  return max_depth;\n};\n\nmodule.exports = parse_nested_parens;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else if (brackets[i] === ')') {\n      if (stack.length === 0) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string of brackets, return the number of brackets that are\n  correctly paired.\n\n  >>> count_correct_brackets(\"()\")\n  1\n  >>> count_correct_brackets(\"()()\")\n  2\n  >>> count_correct_brackets(\"(()())\")\n  3\n  >>> count_correct_brackets(\"(())\")\n  0\n  >>> count_correct_brackets(\"(()\")\n  0\n  >>> count_correct_brackets(\"(())\")\n  0\n  >>> count_correct_brackets(\"(())()\")\n  0\n  >>> count_correct_brackets(\"(())()\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count_correct_brackets(\"(())()())\")\n  0\n  >>> count", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return []\n  }\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d.push(xs[i] * (len - i))\n  }\n  return d\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @description\n  * Return the value of the polynomial at x.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return value of this polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst value = (xs, y) => {\n  const len = xs.length\n  if (len === 0) {\n    return 0\n  }\n  const d = derivative(xs)\n  return d[len - 1] + xs[len - 1] * y\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @description\n  * Return the value of the polynomial at x.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return value of this polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOf = (xs, y) => {\n  const len = xs.length\n  if (len === 0) {\n    return 0\n  }\n  const d = derivative(xs)\n  return d[len - 1] + xs[len - 1] * y\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @description\n  * Return the value of the polynomial at x.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return value of this polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOfOf = (xs, y) => {\n  const len = xs.length\n  if (len === 0) {\n    return 0\n  }\n  const d = derivative(xs)\n  return d[len - 1] + xs[len - 1] * y\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @description\n  * Return the value of the polynomial at x.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return value of this polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOfOfOf = (xs, y) => {\n  const len = xs.length\n  if (len === 0) {\n    return 0\n  }\n  const d = derivative(xs)\n  return d[len - 1] + xs[len - 1] * y\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @description\n  * Return the value of the polynomial at x.\n  * xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return value of this polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst valueOfOfOfOf = (xs, y) => {\n  const len = xs.length\n  if (len === 0) {\n    return 0\n  }\n  const d = derivative(xs)\n  return d[len - 1] + xs[len - 1] * y\n}\n\nexport {\n  derivative,\n  value,\n  valueOf,\n  valueOfOf,\n  valueOfOfOf,\n  valueOfOfOfOf\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  if (s.length > 0 && vowels.indexOf(s[s.length - 1])!== -1) {\n    count++\n  }\n  return count\n}\n\n/*Write a function count_vowels which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> count_vowels(\"abcde\")\n  2\n  >>> count_vowels(\"ACEDY\")\n  3\n  */\nconst count_vowels = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*Write a function count_consonants which takes a string representing\n  a word as input and returns the number of consonants in the string.\n  Consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\n 'm', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Example:\n  >>> count_consonants(\"abcde\")\n  2\n  >>> count_consonants(\"ACEDY\")\n  2\n  */\nconst count_consonants = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*Write a function count_consonants_vowels which takes a string representing\n  a word as input and returns the number of consonants and vowels in the string.\n  Consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\n 'm', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z' and vowels in this case are 'a', 'e', 'i', 'o', 'u' and 'y'.\n\n  Example:\n  >>> count_consonants_vowels(\"abcde\")\n  3\n  >>> count_consonants_vowels(\"ACEDY\")\n  4\n  */\nconst count_consonants_vowels = (s) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*Write a function count_vowels_consonants which takes a string representing\n  a word as input and returns the number of vowels and consonants in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u' and consonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'.\n\n  Example:\n  >>> count_vowels_consonants(\"abcde\")\n  2\n  >>> count_vowels_consonants(\"ACEDY\")\n  3\n  */\nconst count_vowels_consonants = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n    if (consonants.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*Write a function count_vowels_consonants_vowels which takes a string representing\n  a word as input and returns the number of vowels, consonants and vowels in", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const len = x.length\n  const result = x.slice(0)\n  const shift_len = shift % len\n  const shift_start = shift_len\n  const shift_end = len - shift_len\n  const start = shift_start\n  const end = shift_end\n  for (let i = start; i <= end; i++) {\n    result[i] = x[(i + shift) % len]\n  }\n  return result.join('')\n}\n\n/*\n  Given a string, return the number of characters in the string.\n  >>> length('abc')\n  3\n  >>> length('a')\n  1\n  >>> length('a' * 1000)\n  1000\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Given a string, return the number of characters in the string that are\n  not alphanumeric.\n  >>> non_alphanumeric('abc')\n  0\n  >>> non_alphanumeric('a')\n  1\n  >>> non_alphanumeric('a' * 1000)\n  999\n  */\nconst non_alphanumeric = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (!is_alphanumeric(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of alphanumeric characters in the string.\n  >>> alphanumeric('abc')\n  3\n  >>> alphanumeric('a')\n  1\n  >>> alphanumeric('a' * 1000)\n  999\n  */\nconst alphanumeric = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (is_alphanumeric(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of alphanumeric characters in the string\n  that are not digits.\n  >>> non_alphanumeric_digits('abc')\n  0\n  >>> non_alphanumeric_digits('a')\n  1\n  >>> non_alphanumeric_digits('a' * 1000)\n  999\n  */\nconst non_alphanumeric_digits = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (!is_alphanumeric(s[i]) && is_digit(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of digits in the string.\n  >>> digits('abc')\n  0\n  >>> digits('a')\n  1\n  >>> digits('a' * 1000)\n  999\n  */\nconst digits = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (is_digit(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of digits in the string that are not\n  alphanumeric.\n  >>> non_alphanumeric_digits('abc')\n  3\n  >>> non_alphanumeric_digits('a')\n  1\n  >>> non_alphanumeric_digits('a' * 1000)\n  999\n  */\nconst non_alphanumeric_digits = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (!is_alphanumeric(s[i]) && is_digit(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of alphanumeric characters in the string\n  that are not digits.\n  >>> non_alphanumeric_digits('abc')\n  0\n  >>> non_alphanumeric_digits('a')\n  1\n  >>> non_alphanumeric_digits('a' * 1000)\n  999\n  */\nconst alphanumeric_digits = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (!is_alphanumeric(s[i]) && is_digit(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of alphanumeric characters in the string\n  that are not digits.\n  >>> alphanumeric_digits('abc')\n  3\n  >>> alphanumeric_digits('a')\n  1\n  >>> alphanumeric_digits('a' * 1000)\n  999\n  */\nconst alphanumeric_digits = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (!is_alphanumeric(s[i]) && is_digit(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of alphanumeric characters in the string\n  that are not digits.\n  >>> alphanumeric_digits('abc')\n  0\n  >>> alphanumeric_digits('a')\n  1\n  >>> alphanumeric_digits('a' * 1000)\n  999\n  */\nconst alphanumeric_digits = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (!is_alphanumeric(s[i]) && is_digit(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string, return the number of alphanumeric characters in the", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nconsole.log(digit_sum(\"\"));\nconsole.log(digit_sum(\"abAB\"));\nconsole.log(digit_sum(\"abcCd\"));\nconsole.log(digit_sum(\"helloE\"));\nconsole.log(digit_sum(\"woArBld\"));\nconsole.log(digit_sum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const apple_count = s.match(/apple/g) || [];\n  const orange_count = s.match(/orange/g) || [];\n  const mango_count = s.match(/mango/g) || [];\n\n  const apple_total = apple_count.reduce((a, c) => a + Number(c), 0);\n  const orange_total = orange_count.reduce((a, c) => a + Number(c), 0);\n  const mango_total = mango_count.reduce((a, c) => a + Number(c), 0);\n\n  return n - apple_total - orange_total - mango_total;\n};\n\nfruit_distribution(\"5 apples and 6 oranges\", 19);\nfruit_distribution(\"0 apples and 1 oranges\", 3);\nfruit_distribution(\"2 apples and 3 oranges\", 100);\nfruit_distribution(\"100 apples and 1 oranges\", 120);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (min === arr[i]) {\n        index = i;\n      } else if (min > arr[i]) {\n        min = arr[i];\n        index = i;\n      }\n    }\n  }\n  return [min, index];\n};\n\nexport default pluck;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const maxFreq = lst.reduce((acc, curr) => Math.max(acc, curr), 0);\n  const maxFreqIndex = lst.findIndex((curr) => curr === max);\n  if (maxFreqIndex === -1) return -1;\n  return lst[maxFreqIndex];\n};\n\nexport default search;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_2 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_3 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_4 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_5 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_6 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_7 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_8 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_9 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_10 = (strings, substring) => {\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bac", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  if (lst.length === 0) {\n    return lst\n  }\n\n  const min = lst[0]\n  const max = lst[lst.length - 1]\n\n  const sorted = lst.slice()\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    }\n    return 0\n  })\n\n  const sorted_min = sorted.indexOf(min)\n  const sorted_max = sorted.indexOf(max)\n\n  if (sorted_min === -1) {\n    return sorted\n  }\n\n  if (sorted_max === -1) {\n    return sorted.slice(0, sorted_min + 1)\n  }\n\n  return sorted.slice(0, sorted_min + 1).concat(sorted.slice(sorted_max + 1))\n}\n\nmodule.exports = strange_sort_list\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area = (a, b", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  if (q.length === 0) return false;\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w && sum % 2 === 0;\n};\n\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3, 2, 3], 5));\nconsole.log(will_it_fly([3], 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  let count = 0;\n  let min_change = arr.length;\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      count++;\n      min_change = Math.min(min_change, count);\n    }\n    i++;\n    j--;\n  }\n  return min_change;\n};\n\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallest_change([1, 2, 3, 2, 1]));\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const result = []\n  for (let i = 0; i < len1; i++) {\n    if (lst1[i].length === len2) {\n      result.push(lst1[i])\n    }\n  }\n  return result\n}\n\nconst total_match_test = total_match([], [])\nconsole.log(total_match_test)\n\nconst total_match_test2 = total_match([], [])\nconsole.log(total_match_test2)\n\nconst total_match_test3 = total_match([], [])\nconsole.log(total_match_test3)\n\nconst total_match_test4 = total_match([], [])\nconsole.log(total_match_test4)\n\nconst total_match_test5 = total_match([], [])\nconsole.log(total_match_test5)\n\nconst total_match_test6 = total_match([], [])\nconsole.log(total_match_test6)\n\nconst total_match_test7 = total_match([], [])\nconsole.log(total_match_test7)\n\nconst total_match_test8 = total_match([], [])\nconsole.log(total_match_test8)\n\nconst total_match_test9 = total_match([], [])\nconsole.log(total_match_test9)\n\nconst total_match_test10 = total_match([], [])\nconsole.log(total_match_test10)\n\nconst total_match_test11 = total_match([], [])\nconsole.log(total_match_test11)\n\nconst total_match_test12 = total_match([], [])\nconsole.log(total_match_test12)\n\nconst total_match_test13 = total_match([], [])\nconsole.log(total_match_test13)\n\nconst total_match_test14 = total_match([], [])\nconsole.log(total_match_test14)\n\nconst total_match_test15 = total_match([], [])\nconsole.log(total_match_test15)\n\nconst total_match_test16 = total_match([], [])\nconsole.log(total_match_test16)\n\nconst total_match_test17 = total_match([], [])\nconsole.log(total_match_test17)\n\nconst total_match_test18 = total_match([], [])\nconsole.log(total_match_test18)\n\nconst total_match_test19 = total_match([], [])\nconsole.log(total_match_test19)\n\nconst total_match_test20 = total_match([], [])\nconsole.log(total_match_test20)\n\nconst total_match_test21 = total_match([], [])\nconsole.log(total_match_test21)\n\nconst total_match_test22 = total_match([], [])\nconsole.log(total_match_test22)\n\nconst total_match_test23 = total_match([], [])\nconsole.log(total_match_test23)\n\nconst total_match_test24 = total_match([], [])\nconsole.log(total_match_test24)\n\nconst total_match_test25 = total_match([], [])\nconsole.log(total_match_test25)\n\nconst total_match_test26 = total_match([], [])\nconsole.log(total_match_test26)\n\nconst total_match_test27 = total_match([], [])\nconsole.log(total_match_test27)\n\nconst total_match_test28 = total_match([], [])\nconsole.log(total_match_test28)\n\nconst total_match_test29 = total_match([], [])\nconsole.log(total_match_test29)\n\nconst total_match_test30 = total_match([], [])\nconsole.log(total_match_test30)\n\nconst total_match_test31 = total_match([], [])\nconsole.log(total_match_test31)\n\nconst total_match_test32 = total_match([], [])\nconsole.log(total_match_test32)\n\nconst total_match_test33 = total_match([], [])\nconsole.log(total_match_test33)\n\nconst total_match_test34 = total_match([], [])\nconsole.log(total_match_test34)\n\nconst total_match_test35 = total_match([], [])\nconsole.log(total_match_test35)\n\nconst total_match_test36 = total_match([], [])\nconsole.log(total_match_test36)\n\nconst total_match_test37 = total_match([], [])\nconsole.log(total_match_test37)\n\nconst total_match_test38 = total_match([], [])\nconsole.log(total_match_test38)\n\nconst total_match_test39 = total_match([], [])\nconsole.log(total_match_test39)\n\nconst total_match_test40 = total_match([], [])\nconsole.log(total_match_test40)\n\nconst total_match_test41 = total_match([], [])\nconsole.log(total_match_test41)\n\nconst total_match_test42 = total_match([], [])\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const is_prime = (n) => {\n    return prime_numbers.indexOf(n) === -1;\n  };\n  const is_multiply_prime = (n) => {\n    const factors = [];\n    for (let i = 2; i < n; i++) {\n      if (is_prime(i) && n % i === 0) {\n        factors.push(i);\n      }\n    }\n    return factors.length === 2;\n  };\n  return is_multiply_prime(a);\n};\n\nconsole.log(is_multiply_prime(30));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (x === 0) return false;\n  if (x === 1) return true;\n  if (x === n) return true;\n  if (x % n === 0) return false;\n  return is_simple_power(x / n, n);\n};\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && iscube(a / 6)\n}\n\nconst iscube2 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && iscube2(a / 6)\n}\n\nconst iscube3 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && iscube3(a / 6)\n}\n\nconst iscube4 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && iscube4(a / 6)\n}\n\nconst iscube5 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && iscube5(a / 6)\n}\n\nconst iscube6 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && iscube6(a / 6)\n}\n\nconst iscube7 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube7(a / 6)\n}\n\nconst iscube8 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube8(a / 6)\n}\n\nconst iscube9 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube9(a / 6)\n}\n\nconst iscube10 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube10(a / 6)\n}\n\nconst iscube11 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube11(a / 6)\n}\n\nconst iscube12 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube12(a / 6)\n}\n\nconst iscube13 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube13(a / 6)\n}\n\nconst iscube14 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube14(a / 6)\n}\n\nconst iscube15 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (a % 0 === 0) && iscube15(a / 6)\n}\n\nconst iscube16 = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  return (a % 6 === 0) && (a % 5 === 0) && (a % 4 === 0) && (a % 3 === 0) && (a % 2 === 0) && (a % 1 === 0) && (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let prime = 0;\n  let prime_count = 0;\n  let hex_num = num.toUpperCase();\n  for (let i = 0; i < hex_num.length; i++) {\n    if (isPrime(parseInt(hex_num[i], 16))) {\n      prime_count++;\n    }\n  }\n  return prime_count;\n};\n\nconst isPrime = (num) => {\n  if (num === 0) {\n    return false;\n  }\n  if (num === 1) {\n    return true;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let decimal_str = '';\n  let decimal_str_len = 0;\n  let decimal_str_len_max = 0;\n  let decimal_str_len_min = 0;\n  let decimal_str_len_max_index = 0;\n  let decimal_str_len_min_index = 0;\n  let decimal_str_len_max_index_index = 0;\n  let decimal_str_len_min_index_index = 0;\n  let decimal_str_len_max_index_index_index = 0;\n  let decimal_str_len_min_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let decimal_str_len_min_index_index_index_index_index_index_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_2 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_3 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_4 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_5 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_6([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_6 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_7([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_7 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_8([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_8 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_9([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_9 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_10([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_10 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_11([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_11 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_12([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_12 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  >>> sum_product_13([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [15, 120]\n  */\nconst sum_product_13 = (numbers) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const arr = s.split('')\n  const is_happy = (a, b) => {\n    if (a === b) return true\n    if (a === b + 1) return true\n    if (a === b + 2) return true\n    if (a === b + 3) return true\n    return false\n  }\n  for (let i = 0; i < len - 2; i++) {\n    if (is_happy(arr[i], arr[i + 1]) && is_happy(arr[i + 1], arr[i + 2])) {\n      return true\n    }\n  }\n  return false\n}\n\nconsole.log(is_happy('a'))\nconsole.log(is_happy('aa'))\nconsole.log(is_happy('abcd'))\nconsole.log(is_happy('aabb'))\nconsole.log(is_happy('adb'))\nconsole.log(is_happy('xyy'))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_as_floats = grades.map(Number)\n  const grades_as_floats_sorted = grades_as_floats.sort((a, b) => a - b)\n  const grades_as_floats_sorted_length = grades_as_floats_sorted.length\n  const grades_as_floats_sorted_index = grades_as_floats_sorted.indexOf(3.0)\n  const grades_as_floats_sorted_index_plus_one = grades_as_floats_sorted_index + 1\n  const grades_as_floats_sorted_index_minus_one = grades_as_floats_sorted_index - 1\n  const grades_as_floats_sorted_index_plus_two = grades_as_floats_sorted_index_plus_one + 1\n  const grades_as_floats_sorted_index_minus_two = grades_as_floats_sorted_index_minus_one + 1\n  const grades_as_floats_sorted_index_plus_three = grades_as_floats_sorted_index_plus_two + 1\n  const grades_as_floats_sorted_index_minus_three = grades_as_floats_sorted_index_minus_two + 1\n  const grades_as_floats_sorted_index_plus_four = grades_as_floats_sorted_index_plus_three + 1\n  const grades_as_floats_sorted_index_minus_four = grades_as_floats_sorted_index_minus_three + 1\n  const grades_as_floats_sorted_index_plus_five = grades_as_floats_sorted_index_plus_four + 1\n  const grades_as_floats_sorted_index_minus_five = grades_as_floats_sorted_index_minus_four + 1\n  const grades_as_floats_sorted_index_plus_six = grades_as_floats_sorted_index_plus_five + 1\n  const grades_as_floats_sorted_index_minus_six = grades_as_floats_sorted_index_minus_five + 1\n  const grades_as_floats_sorted_index_plus_seven = grades_as_floats_sorted_index_plus_six + 1\n  const grades_as_floats_sorted_index_minus_seven = grades_as_floats_sorted_index_minus_six + 1\n  const grades_as_floats_sorted_index_plus_eight = grades_as_floats_sorted_index_plus_seven + 1\n  const grades_as_floats_sorted_index_minus_eight = grades_as_floats_sorted_index_minus_seven + 1\n  const grades_as_floats_sorted_index_plus_nine = grades_as_floats_sorted_index_plus_eight + 1\n  const grades_as_floats_sorted_index_minus_nine = grades_as_floats_sorted_index_minus_eight + 1\n  const grades_as_floats_sorted_index_plus_ten = grades_as_floats_sorted_index_plus_nine + 1\n  const grades_as_floats_sorted_index_minus_ten = grades_as_floats_sorted_index_minus_nine + 1\n  const grades_as_floats_sorted_index_plus_eleven = grades_as_floats_sorted_index_plus_ten + 1\n  const grades_as_floats_sorted_index_minus_eleven = grades_as_floats_sorted_index_minus_ten + 1\n  const grades_as_floats_sorted_index_plus_twelve = grades_as_floats_sorted_index_plus_eleven + 1\n  const grades_as_floats_sorted_index_minus_twelve = grades_as_floats_sorted_index_minus_eleven + 1\n  const grades_as_floats_sorted_index_plus_thirteen = grades_as_floats_sorted_index_plus_twelve + 1\n  const grades_as_floats_sorted_index_minus_thirteen = grades_as_floats_sorted_index_minus_twelve + 1\n  const grades_as_floats_sorted_index_plus_fourteen = grades_as_floats_sorted_index_plus_thirteen + 1\n  const grades_as_floats_sorted_index_minus_fourteen = grades_as_floats_sorted_index_minus_thirteen + 1\n  const grades_as_floats_sorted_index_plus_fifteen = grades_as_floats_sorted_index_plus_fourteen + 1\n  const grades_as_floats_sorted_index_minus_fifteen = grades_as_floats_sorted_index_minus_fourteen + 1\n  const grades_as_floats_sorted_index_plus_sixteen = grades_as_floats_sorted_index_plus_fifteen + 1\n  const grades_as_floats_sorted_index_minus_sixteen = grades_as_floats_sorted_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  const prime = (n) => {\n    let i = 2\n    while (i < n) {\n      if (n % i === 0) {\n        return false\n      }\n      i++\n    }\n    return true\n  }\n  return prime(string.length)\n}\n\n/*Write a function that takes a string and returns true if the string\n  contains all the characters of another string\n  Examples\n  contains_all('Hello', 'ell') == true\n  contains_all('Hello', 'lo') == false\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', 'Hello') == true\n  contains_all('Hello', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i;\n    while (start > 0) {\n      if (start % 10 === 1) {\n        count++;\n      }\n      start = start / 10;\n    }\n    while (end < n) {\n      if (end % 10 === 1) {\n        count++;\n      }\n      end = end / 10;\n    }\n  }\n  return count;\n};\n\nconsole.log(starts_one_ends(10));\nconsole.log(starts_one_ends(100));\nconsole.log(starts_one_ends(1000));\nconsole.log(starts_one_ends(10000));\nconsole.log(starts_one_ends(100000));\nconsole.log(starts_one_ends(1000000));\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += i % 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 1) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let result = '';\n  let words = s.split(' ');\n  let word = '';\n  let word_length = 0;\n  let word_index = 0;\n  let word_index_next = 0;\n  let word_index_prev = 0;\n  let word_index_next_next = 0;\n  let word_index_prev_prev = 0;\n  let word_index_next_next_next = 0;\n  let word_index_prev_prev_prev = 0;\n  let word_index_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next = 0;\n  let word_index_prev_prev_prev_prev_prev_prev = 0;\n  let word_index_next_next_next_next_next_next", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => a - b)\n  const rows_sorted = cols_sorted.sort((a, b) => b - a)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => a - b)\n  const rows_sorted = cols_sorted.sort((a, b) => b - a)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.length\n  const cols_sorted = row.sort((a, b) => b - a)\n  const rows_sorted = cols_sorted.sort((a, b) => a - b)\n  return rows_sorted.map((row, i) => [x, i])\n}\n\nconst get_row_sorted_reverse_desc_desc_desc_desc = (lst, x) => {\n  const row = lst[x]\n  const cols = row.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const sorted_array = array.slice(0);\n  const sorted_array_length = sorted_array.length;\n  let i = 0;\n  let j = sorted_array_length - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sorted_array[i] + sorted_array[j];\n    if (sum % 2 === 1) {\n      sorted_array[i] = sorted_array[j];\n      sorted_array[j] = array[i];\n      j--;\n    } else {\n      sorted_array[j] = sorted_array[i];\n      sorted_array[i] = array[j];\n      i++;\n    }\n  }\n  return sorted_array;\n};\n\nexport default sort_array;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    encrypted += alphabet[(index + 1) % 26];\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    decrypted += alphabet[(index - 1) % 26];\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'ix'\n  encrypt('gf') returns 'et'\n  encrypt('kj') returns 'lm'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    encrypted += alphabet[(index + 26) % 26];\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('gf') returns 'hi'\n  decrypt('ix') returns 'asdfghjkl'\n  decrypt('lm') returns 'kj'\n  decrypt('et') returns 'gf'\n  */\nconst decrypt2 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    decrypted += alphabet[(index - 26) % 26];\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'ix'\n  encrypt('gf') returns 'et'\n  encrypt('kj') returns 'lm'\n  */\nconst encrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    encrypted += alphabet[(index + 1) % 26];\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('gf') returns 'hi'\n  decrypt('ix') returns 'asdfghjkl'\n  decrypt('lm') returns 'kj'\n  decrypt('et') returns 'gf'\n  */\nconst decrypt3 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let decrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    decrypted += alphabet[(index - 1) % 26];\n  }\n  return decrypted;\n};\n\n/*\n  Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'ix'\n  encrypt('gf') returns 'et'\n  encrypt('kj') returns 'lm'\n  */\nconst encrypt4 = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let encrypted = '';\n  for (let i = 0; i < s.length; i++) {\n    let index = alphabet.indexOf(s[i]);\n    encrypted += alphabet[(index + 26) % 26];\n  }\n  return encrypted;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const max = numbers[0];\n  const max_index = 0;\n  const max_index_index = 0;\n  const max_index_index_index = 0;\n  const max_index_index_index_index = 0;\n  const max_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  const max_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (!lst || lst.length === 0) return null;\n  let min = lst[0];\n  let index = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  return lst[index + 1];\n};\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5, 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1, 1]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  const words = S.split('.').filter(x => x.length > 0);\n  const boredoms = words.filter(x => x.startsWith('I'));\n  return boredoms.length;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentences = (S) => {\n  const words = S.split('.').filter(x => x.length > 0);\n  const boredoms = words.filter(x => x.startsWith('I'));\n  const sentences = boredoms.map(x => x.split('.').filter(x => x.length > 0));\n  return sentences.length;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentences_with_boredoms = (S) => {\n  const words = S.split('.').filter(x => x.length > 0);\n  const boredoms = words.filter(x => x.startsWith('I'));\n  const sentences = boredoms.map(x => x.split('.').filter(x => x.length > 0));\n  const sentences_with_boredoms = sentences.concat(boredoms);\n  return sentences_with_boredoms.length;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentences_with_boredoms_and_boredoms = (S) => {\n  const words = S.split('.').filter(x => x.length > 0);\n  const boredoms = words.filter(x => x.startsWith('I'));\n  const sentences = boredoms.map(x => x.split('.').filter(x => x.length > 0));\n  const sentences_with_boredoms = sentences.concat(boredoms);\n  const boredoms_with_boredoms = boredoms.concat(boredoms);\n  return sentences_with_boredoms.concat(boredoms_with_boredoms);\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentences_with_boredoms_and_boredoms_and_boredoms = (S) => {\n  const words = S.split('.').filter(x => x.length > 0);\n  const boredoms = words.filter(x => x.startsWith('I'));\n  const sentences = boredoms.map(x => x.split('.').filter(x => x.length > 0));\n  const sentences_with_boredoms = sentences.concat(boredoms);\n  const boredoms_with_boredoms = boredoms.concat(boredoms);\n  const boredoms_with_boredoms_and_boredoms = boredoms.concat(boredoms);\n  return sentences_with_boredoms.concat(boredoms_with_boredoms).concat(boredoms_with_boredoms_and_boredoms);\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentences_with_boredoms_and_boredoms_and_boredoms_and_boredoms = (S) => {\n  const words = S.split('.').filter(x => x.length > 0);\n  const boredoms = words.filter(x => x.startsWith('I'));\n  const sentences = boredoms.map(x => x.split('.').filter(x => x.length > 0));\n  const sentences_with_boredoms = sentences.concat(boredoms);\n  const boredoms_with_boredoms = boredoms.concat(boredoms);\n  const boredoms_with_boredoms_and_boredoms = boredoms.concat(boredoms", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return (x + y === z) || (x === z && y === z);\n};\n\nexport default any_int;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = message.indexOf(letter);\n    let nextLetter = message[index + 2];\n    let nextIndex = message.indexOf(nextLetter);\n    let nextNextLetter = message[nextIndex + 2];\n    let nextNextIndex = message.indexOf(nextNextLetter);\n    let nextNextNextLetter = message[nextNextIndex + 2];\n    let nextNextNextIndex = message.indexOf(nextNextNextLetter);\n    let nextNextNextNextLetter = message[nextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNextNextLetter = message[nextNextNextNextIndex + 2];\n    let nextNextNext", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  const primeSum = (n) => {\n    let sum = 0;\n    while (n > 0) {\n      sum += n % 10;\n      n = n / 10;\n    }\n    return sum;\n  };\n  const maxPrime = (n) => {\n    let i = 2;\n    while (i <= n) {\n      if (prime(i)) {\n        return i;\n      }\n      i++;\n    }\n    return false;\n  };\n  return primeSum(maxPrime(max));\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  const lower_keys = keys.map(key => key.toLowerCase())\n  const upper_keys = keys.map(key => key.toUpperCase())\n  return lower_keys.every(key => dict[key]) || upper_keys.every(key => dict[key])\n}\n\n/*\n  Given a string, return true if the string is a valid number, else return false.\n  Examples:\n  check_number(\"123\") should return true.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123a\") should return false.\n  check_number(\"123", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\nconsole.log(count_up_to(5))\nconsole.log(count_up_to(11))\nconsole.log(count_up_to(0))\nconsole.log(count_up_to(20))\nconsole.log(count_up_to(1))\nconsole.log(count_up_to(18))\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_2 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_3 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_4 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_5 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_6 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_7 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_8 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_9 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_10 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_11 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_12 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_13 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_14 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_15 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_16 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_unit;\n  return result + a_digit * b_digit;\n};\n\nconst multiply_17 = (a, b) => {\n  const a_unit = a % 10;\n  const b_unit = b % 10;\n  const a_digit = a / 10;\n  const b_digit = b / 10;\n  const result = a_unit * b_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 1\n  */\nconst count_lower = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 1; i < len; i += 2) {\n    if (s[i].toLowerCase() === s[i + 1].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  count_vowels('aBCdEf') returns 1\n  count_vowels('abcdefg') returns 2\n  count_vowels('dBBE') returns 2\n  */\nconst count_vowels = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 2\n  count_consonants('dBBE') returns 2\n  */\nconst count_consonants = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 2\n  count_consonants('dBBE') returns 2\n  */\nconst count_consonants_2 = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 2\n  count_consonants('dBBE') returns 2\n  */\nconst count_consonants_3 = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 2\n  count_consonants('dBBE') returns 2\n  */\nconst count_consonants_4 = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 2\n  count_consonants('dBBE') returns 2\n  */\nconst count_consonants_5 = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 2\n  count_consonants('dBBE') returns 2\n  */\nconst count_consonants_6 = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 1\n  count_consonants('abcdefg') returns 2\n  count_consonants('dBBE') returns 2\n  */\nconst count_consonants_7 = (s) => {\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i].", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const num = parseInt(value, 10);\n  const abs_num = Math.abs(num);\n  const abs_num_floor = Math.floor(abs_num);\n  const abs_num_ceil = Math.ceil(abs_num);\n  const abs_num_diff = Math.abs(abs_num - abs_num_floor);\n  const abs_num_diff_ceil = Math.abs(abs_num - abs_num_ceil);\n  const abs_num_diff_floor = Math.abs(abs_num - abs_num_floor);\n  if (abs_num_diff_ceil < abs_num_diff) {\n    return abs_num_ceil;\n  } else if (abs_num_diff_floor < abs_num_diff) {\n    return abs_num_floor;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports = closest_integer;\n<|endoftext|>", "passed": 0, "run_status": 1}
