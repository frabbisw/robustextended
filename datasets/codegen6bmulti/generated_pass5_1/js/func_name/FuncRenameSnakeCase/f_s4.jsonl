{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_2 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_3 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_4 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_5 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_6 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_7 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_8 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs(curr - numbers[0])\n  }, 0)\n  return diff < threshold\n}\n\n/*\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements_9 = (numbers, threshold) => {\n  const len = numbers.length\n  if (len < 2) {\n    return false\n  }\n  const diff = numbers.slice(1, len).reduce((acc, curr) => {\n    return acc + Math.abs", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n    if (c === '(') {\n      stack.push(current_group);\n      current_group = '';\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      current_group += c;\n      stack.pop();\n    } else {\n      current_group += c;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack.map(s => s.trim());\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_2 = (paren_string) => {\n  const stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n    if (c === '(') {\n      stack.push(current_group);\n      current_group = '';\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      current_group += c;\n      stack.pop();\n    } else {\n      current_group += c;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack.map(s => s.trim());\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_3 = (paren_string) => {\n  const stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n    if (c === '(') {\n      stack.push(current_group);\n      current_group = '';\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      current_group += c;\n      stack.pop();\n    } else {\n      current_group += c;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack.map(s => s.trim());\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_4 = (paren_string) => {\n  const stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n    if (c === '(') {\n      stack.push(current_group);\n      current_group = '';\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      current_group += c;\n      stack.pop();\n    } else {\n      current_group += c;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack.map(s => s.trim());\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_5 = (paren_string) => {\n  const stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n    if (c === '(') {\n      stack.push(current_group);\n      current_group = '';\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      current_group += c;\n      stack.pop();\n    } else {\n      current_group += c;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack.map(s => s.trim());\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_6 = (paren_string) => {\n  const stack = [];\n  let current_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    const c = paren_string[i];\n    if (c === '(') {\n      stack.push(current_group);\n      current_group = '';\n    } else if (c === ')') {\n      if (stack.length === 0) {\n        throw new Error('Unbalanced parentheses');\n      }\n      current_group += c;\n      stack.pop();\n    } else {\n      current_group += c;\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error('Unbalanced parentheses');\n  }\n  return stack.map(s => s.trim());\n};\n\n/*\n  Input:\n  '( ) (( )) (( )( ))'\n  Output:\n  ['()', '(())", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const postfix = prefix + suffix;\n  const postfix_is_palindrome = is_palindrome(postfix);\n  const postfix_length = postfix.length;\n  const postfix_prefix = postfix.slice(0, postfix_length - 1);\n  const postfix_suffix = postfix.slice(1, postfix_length);\n  const postfix_prefix_is_palindrome = is_palindrome(postfix_prefix);\n  const postfix_suffix_is_palindrome = is_palindrome(postfix_suffix);\n  const postfix_prefix_length = postfix_prefix.length;\n  const postfix_suffix_length = postfix_suffix.length;\n  const postfix_prefix_is_palindrome_length = postfix_prefix_is_palindrome.length;\n  const postfix_suffix_is_palindrome_length = postfix_suffix_is_palindrome.length;\n  const longest_postfix_prefix = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome_length = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome_length = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome_length = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome_length = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome_length = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome_length = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > postfix_prefix_is_palindrome_length? postfix_prefix_length : postfix_prefix_is_palindrome_length;\n  const longest_postfix_suffix_is_palindrome_length = postfix_suffix_length > postfix_suffix_is_palindrome_length? postfix_suffix_length : postfix_suffix_is_palindrome_length;\n  const longest_postfix_prefix_is_palindrome_length = postfix_prefix_length > post", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(i)\n  }\n  return pile\n}\n\n/*\n  Given a positive integer n, return the number of ways to make a pile of n\n  levels.\n\n  Examples:\n  >>> number_of_ways_to_make_a_pile(3)\n  3\n  >>> number_of_ways_to_make_a_pile(4)\n  4\n  >>> number_of_ways_to_make_a_pile(5)\n  5\n  >>> number_of_ways_to_make_a_pile(6)\n  6\n  >>> number_of_ways_to_make_a_pile(7)\n  7\n  >>> number_of_ways_to_make_a_pile(8)\n  8\n  >>> number_of_ways_to_make_a_pile(9)\n  9\n  >>> number_of_ways_to_make_a_pile(10)\n  10\n  >>> number_of_ways_to_make_a_pile(11)\n  11\n  >>> number_of_ways_to_make_a_pile(12)\n  12\n  >>> number_of_ways_to_make_a_pile(13)\n  13\n  >>> number_of_ways_to_make_a_pile(14)\n  14\n  >>> number_of_ways_to_make_a_pile(15)\n  15\n  >>> number_of_ways_to_make_a_pile(16)\n  16\n  >>> number_of_ways_to_make_a_pile(17)\n  17\n  >>> number_of_ways_to_make_a_pile(18)\n  18\n  >>> number_of_ways_to_make_a_pile(19)\n  19\n  >>> number_of_ways_to_make_a_pile(20)\n  20\n  >>> number_of_ways_to_make_a_pile(21)\n  21\n  >>> number_of_ways_to_make_a_pile(22)\n  22\n  >>> number_of_ways_to_make_a_pile(23)\n  23\n  >>> number_of_ways_to_make_a_pile(24)\n  24\n  >>> number_of_ways_to_make_a_pile(25)\n  25\n  >>> number_of_ways_to_make_a_pile(26)\n  26\n  >>> number_of_ways_to_make_a_pile(27)\n  27\n  >>> number_of_ways_to_make_a_pile(28)\n  28\n  >>> number_of_ways_to_make_a_pile(29)\n  29\n  >>> number_of_ways_to_make_a_pile(30)\n  30\n  >>> number_of_ways_to_make_a_pile(31)\n  31\n  >>> number_of_ways_to_make_a_pile(32)\n  32\n  >>> number_of_ways_to_make_a_pile(33)\n  33\n  >>> number_of_ways_to_make_a_pile(34)\n  34\n  >>> number_of_ways_to_make_a_pile(35)\n  35\n  >>> number_of_ways_to_make_a_pile(36)\n  36\n  >>> number_of_ways_to_make_a_pile(37)\n  37\n  >>> number_of_ways_to_make_a_pile(38)\n  38\n  >>> number_of_ways_to_make_a_pile(39)\n  39\n  >>> number_of_ways_to_make_a_pile(40)\n  40\n  >>> number_of_ways_to_make_a_pile(41)\n  41\n  >>> number_of_ways_to_make_a_pile(42)\n  42\n  >>> number_of_ways_to_make_a_pile(43)\n  43\n  >>> number_of_ways_to_make_a_pile(44)\n  44\n  >>> number_of_ways_to_make_a_pile(45)\n  45\n  >>> number_of_ways_to_make_a_pile(46)\n  46\n  >>> number_of_ways_to_make_a_pile(47)\n  47\n  >>> number_of_ways_to_make_a_pile(48)\n  48\n  >>> number_of_ways_to_make_a_pile(49)\n  49\n  >>> number_of_ways_to_make_a_pile(50)\n  50\n  >>> number_of_ways_to_make_a_pile(51)\n  51\n  >>> number_of_ways_to_make_a_pile(52)\n  52\n  >>> number_of_ways_to_make_a_pile(53)\n  53\n  >>> number_of_ways_to_make_a_pile(54)\n  54\n  >>> number_of_ways_to_make_a_pile(55)\n  55\n  >>> number_of_ways_to_make_a_pile(56)\n  56\n  >>> number_of_ways_to_make_a_pile(57)\n  57\n  >>> number_of_ways_to_make_a_pile(58)\n  58\n  >>> number_of_ways_to_make_a_pile(59)\n  59\n  >>> number_of_ways_to_make_", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\n/*\n  Given an array of words, return an array of the words in sorted order.\n  \n  For example:\n  words_sorted([]) == []\n  words_sorted([]) == []\n  words_sorted([]) == []\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one\", \"two\", \"three\"]) == [\"one\", \"two\", \"three\"]\n  words_sorted([\"one", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  const mid = Math.floor((x + y) / 2);\n  if (mid % 2 === 0) {\n    return mid;\n  } else {\n    return -1;\n  }\n};\n\nconst choose_num_test = [\n  [12, 15],\n  [13, 12],\n  [15, 12],\n  [12, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n  [13, 14],\n  [14, 15],\n  [15, 14],\n  [14, 13],\n", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded_avg = Math.round(avg)\n  return rounded_avg.toString(2)\n}\n\nmodule.exports = rounded_avg\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const result = [];\n  let i = 0;\n  while (i < x) {\n    const digit = x % 10;\n    if (digit % 2 === 0) {\n      result.push(x);\n      x = x / 10;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nconsole.log(unique_digits(15));\nconsole.log(unique_digits(152));\nconsole.log(unique_digits(323));\nconsole.log(unique_digits(1422));\nconsole.log(unique_digits(10));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  const sorted = arr.sort((a, b) => a - b)\n  const reversed = sorted.reverse()\n  const names = reversed.map(x => {\n    const name = names_by_digit[x]\n    return name\n  })\n  return names\n}\n\nconst names_by_digit = {\n  1: 'One',\n  2: 'Two',\n  3: 'Three',\n  4: 'Four',\n  5: 'Five',\n  6: 'Six',\n  7: 'Seven',\n  8: 'Eight',\n  9: 'Nine'\n}\n\nconst by_length_test = () => {\n  const arr = [1, -1, 55]\n  const names = by_length(arr)\n  console.log(names)\n}\n\nby_length_test()\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(1);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst f_2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_9 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_10 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_11 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_12 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_13 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_14 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_15 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_16 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_17 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_18 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_19 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_20 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_21 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_22 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_23 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_24 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_25 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_26 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst f_27 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  ", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const odd_palindromes = []\n  const even_palindromes = []\n  const is_odd = (n) => n % 2 === 1\n  const is_even = (n) => n % 2 === 0\n  const is_palindrome = (n) => n === reverse(n)\n\n  for (let i = 1; i <= n; i++) {\n    if (is_odd(i)) {\n      odd_palindromes.push(i)\n    } else if (is_even(i)) {\n      even_palindromes.push(i)\n    }\n  }\n\n  return [odd_palindromes.length, even_palindromes.length]\n}\n\nconst reverse = (n) => {\n  let reversed = 0\n  let reversed_digit = 0\n  let reversed_digit_index = 0\n\n  while (n > 0) {\n    reversed_digit = n % 10\n    reversed_digit_index = reversed_digit_index + 1\n    reversed = reversed * 10 + reversed_digit\n    n = n / 10\n  }\n\n  return reversed\n}\n\nconsole.log(even_odd_palindrome(12))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  let i = 0, j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      let temp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = temp;\n      i++;\n      j--;\n    } else {\n      j--;\n    }\n  }\n  return arr.every(x => x >= 0);\n};\n\nconst move_one_ball_test = () => {\n  assert.equal(move_one_ball([3, 4, 5, 1, 2]), true);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3, 5, 4, 1, 2]), false);\n  assert.equal(move_one_ball([3", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '00'\n  */\nconst string_and = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '110'\n  */\nconst string_or = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_not('010')\n  '101'\n  */\nconst string_not = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~a[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> string_andnot('010', '110')\n  '00'\n  */\nconst string_andnot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & ~b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XORNOT on these inputs and return result also as a string.\n  >>> string_xornot('010', '110')\n  '101'\n  */\nconst string_xornot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ ~b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ORNOT on these inputs and return result also as a string.\n  >>> string_ornot('010', '110')\n  '110'\n  */\nconst string_ornot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | ~b[i];\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_notnot('010')\n  '011'\n  */\nconst string_notnot = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~(~a[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> string_andnotnot('010', '110')\n  '00'\n  */\nconst string_andnotnot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] & ~(~b[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XORNOT on these inputs and return result also as a string.\n  >>> string_xornotnot('010', '110')\n  '111'\n  */\nconst string_xornotnot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ ~(~b[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ORNOT on these inputs and return result also as a string.\n  >>> string_ornotnot('010', '110')\n  '110'\n  */\nconst string_ornotnot = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] | ~(~b[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> string_notnot('010')\n  '011'\n  */\nconst string_notnot = (a) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += ~(~a[i]);\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary ANDNOT on these inputs and return result also as a string.\n  >>> string_andnotnot('010', '110')\n  '00'\n  */\nconst string_andnotnot = (a, b) => {\n  let result = '';\n  for", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  const len2 = lst2.length;\n  if (len!== len2) {\n    return \"NO\";\n  }\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len2) {\n    if (lst1[i] % 2!== lst2[j] % 2) {\n      return \"NO\";\n    }\n    i++;\n    j++;\n  }\n  return \"YES\";\n};\n\nconst lst1 = [1, 2, 3, 4];\nconst lst2 = [1, 5, 3, 4];\n\nconsole.log(exchange(lst1, lst2));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (histogram[letters[i]] === undefined) {\n      histogram[letters[i]] = 1;\n    } else {\n      histogram[letters[i]]++;\n    }\n  }\n  return histogram;\n};\n\n/*\n  Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b':", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  const result = [];\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      j--;\n    } else {\n      result.push(s[i]);\n      i++;\n    }\n  }\n  return [result.reverse().join(''), result.length === 0];\n};\n\nexport default reverse_delete;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  const odd_count = (str) => {\n    const odd_count = (str) => {\n      const odd_count = (str) => {\n        const odd_count = (str) => {\n          const odd_count = (str) => {\n            const odd_count = (str) => {\n              const odd_count = (str) => {\n                const odd_count = (str) => {\n                  const odd_count = (str) => {\n                    const odd_count = (str) => {\n                      const odd_count = (str) => {\n                        const odd_count = (str) => {\n                          const odd_count = (str) => {\n                            const odd_count = (str) => {\n                              const odd_count = (str) => {\n                                const odd_count = (str) => {\n                                  const odd_count = (str) => {\n                                    const odd_count = (str) => {\n                                      const odd_count = (str) => {\n                                        const odd_count = (str) => {\n                                          const odd_count = (str) => {\n                                            const odd_count = (str) => {\n                                              const odd_count = (str) => {\n                                                const odd_count = (str) => {\n                                                  const odd_count = (str) => {\n                                                    const odd_count = (str) => {\n                                                      const odd_count = (str) => {\n                                                        const odd_count = (str) => {\n                                                          const odd_count = (str) => {\n                                                           const odd_count = (str) => {\n                                                            const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str) => {\n                                                              const odd_count = (str)", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let min = nums[0];\n  let sum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;\n};\n\nconst min_sub_array_sum_test = () => {\n  assert.equal(min_sub_array_sum([2, 3, 4, 1, 2, 4]), 1);\n  assert.equal(min_sub_array_sum([-1, -2, -3]), -6);\n};\n\ndescribe('min_sub_array_sum', () => {\n  it('should return the minimum sum of any non-empty sub-array', () => {\n    min_sub_array_sum_test();\n  });\n});\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const fill = new Array(rows)\n  const buckets = new Array(cols)\n  const buckets_used = new Array(cols)\n  const buckets_remain = new Array(cols)\n\n  for (let i = 0; i < rows; i++) {\n    fill[i] = 0\n  }\n\n  for (let i = 0; i < cols; i++) {\n    buckets[i] = 0\n    buckets_used[i] = 0\n    buckets_remain[i] = capacity\n  }\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets[j] += 1\n        fill[i] += 1\n      }\n    }\n  }\n\n  let count = 0\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (buckets[j] > 0) {\n        count += fill[i]\n        buckets_used[j] += fill[i]\n        buckets_remain[j] -= fill[i]\n      }\n    }\n  }\n\n  return count\n}\n\nconst test = () => {\n  const grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n  const capacity = 1\n  console.log(max_fill(grid, capacity))\n}\n\ntest()\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const a_int = parseInt(a, 2);\n    const b_int = parseInt(b, 2);\n    if (a_int > b_int) return 1;\n    if (a_int < b_int) return -1;\n    return 0;\n  });\n  return sorted;\n};\n\nexport default sort_array;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const words = [];\n  const words_length = s.length;\n  const words_length_minus_n = words_length - n;\n  const i = 0;\n  while (i < words_length_minus_n) {\n    const word = s.substr(i, n);\n    if (word.length === n) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\n/*\nGiven a string s and a non-negative integer n, you have to return the number of \nsubstrings of s that contain exactly n distinct characters.\n\nExamples:\ncount_substrings(\"abcabcabc\", 3) ==> 3\ncount_substrings(\"abcabcabc\", 4) ==> 1\ncount_substrings(\"abcabcabc\", 5) ==> 0\ncount_substrings(\"abcabcabc\", 6) ==> 0\ncount_substrings(\"abcabcabc\", 7) ==> 0\ncount_substrings(\"abcabcabc\", 8) ==> 0\ncount_substrings(\"abcabcabc\", 9) ==> 0\ncount_substrings(\"abcabcabc\", 10) ==> 0\ncount_substrings(\"abcabcabc\", 11) ==> 0\ncount_substrings(\"abcabcabc\", 12) ==> 0\ncount_substrings(\"abcabcabc\", 13) ==> 0\ncount_substrings(\"abcabcabc\", 14) ==> 0\ncount_substrings(\"abcabcabc\", 15) ==> 0\ncount_substrings(\"abcabcabc\", 16) ==> 0\ncount_substrings(\"abcabcabc\", 17) ==> 0\ncount_substrings(\"abcabcabc\", 18) ==> 0\ncount_substrings(\"abcabcabc\", 19) ==> 0\ncount_substrings(\"abcabcabc\", 20) ==> 0\ncount_substrings(\"abcabcabc\", 21) ==> 0\ncount_substrings(\"abcabcabc\", 22) ==> 0\ncount_substrings(\"abcabcabc\", 23) ==> 0\ncount_substrings(\"abcabcabc\", 24) ==> 0\ncount_substrings(\"abcabcabc\", 25) ==> 0\ncount_substrings(\"abcabcabc\", 26) ==> 0\ncount_substrings(\"abcabcabc\", 27) ==> 0\ncount_substrings(\"abcabcabc\", 28) ==> 0\ncount_substrings(\"abcabcabc\", 29) ==> 0\ncount_substrings(\"abcabcabc\", 30) ==> 0\ncount_substrings(\"abcabcabc\", 31) ==> 0\ncount_substrings(\"abcabcabc\", 32) ==> 0\ncount_substrings(\"abcabcabc\", 33) ==> 0\ncount_substrings(\"abcabcabc\", 34) ==> 0\ncount_substrings(\"abcabcabc\", 35) ==> 0\ncount_substrings(\"abcabcabc\", 36) ==> 0\ncount_substrings(\"abcabcabc\", 37) ==> 0\ncount_substrings(\"abcabcabc\", 38) ==> 0\ncount_substrings(\"abcabcabc\", 39) ==> 0\ncount_substrings(\"abcabcabc\", 40) ==> 0\ncount_substrings(\"abcabcabc\", 41) ==> 0\ncount_substrings(\"abcabcabc\", 42) ==> 0\ncount_substrings(\"abcabcabc\", 43) ==> 0\ncount_substrings(\"abcabcabc\", 44) ==> 0\ncount_substrings(\"abcabcabc\", 45) ==> 0\ncount_substrings(\"abcabcabc\", 46) ==> 0\ncount_substrings(\"abcabcabc\", 47) ==> 0\ncount_substrings(\"abcabcabc\", 48) ==> 0\ncount_substrings(\"abcabcabc\", 49) ==> 0\ncount_substrings(\"abcabcabc\", 50) ==> 0\ncount_substrings(\"abcabcabc\", 51) ==> 0\ncount_substrings(\"abcabcabc\", 52) ==> 0\ncount_substrings(\"abcabcabc\", 53) ==> 0\ncount_substrings(\"abcabcabc\", 54) ==> 0\ncount_substrings(\"abcabcabc\", 55) ==> 0\ncount_substrings(\"abcabcabc\", 56) ==> 0\ncount_substrings(\"abcabcabc\", 57) ==> 0\ncount_substrings(\"abcabcabc\", 58) ==> 0\ncount_substrings(\"abcabcabc\", 59) ==> 0\ncount_substrings(\"abcabcabc\", 60) ==> 0\ncount_substrings(\"abcabcabc\", 61) ==> 0\ncount_substrings(\"abcabcabc\", 62) ==> 0\ncount_substrings(\"abcabcabc\", 63) ==> 0\ncount_substrings(\"abcabcabc\", 64) ==> 0\ncount_substrings(\"abcabcabc\", 65) ==> 0\ncount_substrings(\"abcabcabc\", 66) ==> 0\ncount_substrings(\"abcabcabc\", 67) ==> 0\ncount_substrings(\"abcabcabc\", 68) ==> 0\ncount_substrings(\"abcabcabc\", 69) ==> 0\ncount_substrings(\"abcabcabc\", 70) ==> 0\ncount_substrings(\"abcabcabc\", 71) ==> 0\ncount_substrings(\"abcabcabc\", 72) ==> 0\ncount_substrings(\"abcabcabc\", 73) ==> 0\ncount_substrings(\"abcabcabc\", 74) ==> 0\ncount_substrings(\"abcabcabc\", 75) ==> 0\ncount_substrings(\"abcabcabc\", 76) ==> 0\ncount_substrings(\"abcabcabc\", 77) ==> 0\ncount_substrings(\"abcabcabc\", 78) ==> 0\ncount_substrings(\"abcabcabc\", 79) ==> 0\ncount_substrings(\"abcabcabc\", 80) ==> 0\ncount_substrings(\"abcabcabc\", 81) ==> 0\ncount_substrings(\"abcabcabc\", 82", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const closest_vowel = ''\n  const closest_vowel_index = -1\n  const closest_vowel_distance = Infinity\n  const word_length = word.length\n  for (let i = word_length - 1; i >= 0; i--) {\n    const vowel = word[i]\n    if (vowels.indexOf(vowel)!== -1) {\n      const distance = Math.abs(i - word_length)\n      if (distance < closest_vowel_distance) {\n        closest_vowel = vowel\n        closest_vowel_index = i\n        closest_vowel_distance = distance\n      }\n    }\n  }\n  return closest_vowel\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"))\nconsole.log(get_closest_vowel(\"FULL\"))\nconsole.log(get_closest_vowel(\"quick\"))\nconsole.log(get_closest_vowel(\"ab\"))\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = []\n  let i = 0\n  let j = 0\n  while (i < lst.length && j < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n      i++\n    } else if (lst[j] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      stack.pop()\n      j++\n    } else if (lst[i] === '(') {\n      stack.push(lst[i])\n      i++\n    } else if (lst[j] === ')') {\n      stack.pop()\n      j++\n    }\n  }\n  return stack.length === 0? 'Yes' : 'No'\n}\n\nconsole.log(match_parens(['()', ')']));\nconsole.log(match_parens([')', ')']));\nconsole.log(match_parens(['(', ')']));\nconsole.log(match_parens(['(', ')', ')']));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sorted = arr.slice().sort((a, b) => a - b);\n  return sorted.slice(0, k);\n};\n\nconst test = (arr, k) => {\n  const sorted = maximum(arr, k);\n  console.log(sorted);\n};\n\ntest([-3, -4, 5], 3);\ntest([4, -4, 4], 2);\ntest([-3, 2, 1, 2, -1, -2, 1], 1);\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const odd = lst.filter((x) => x % 2 === 1)\n  const even = lst.filter((x) => x % 2 === 0)\n  return odd.reduce((acc, x) => acc + x, 0) + even.reduce((acc, x) => acc + x, 0)\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_15 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_16 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_17 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_18 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_19 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_20 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_21 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_22 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_23 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_24 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_25 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_26 = (arr, k) => {\n  let sum = 0\n  ", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  const odd_collatz = []\n  const collatz = (n) => {\n    if (n === 1) {\n      return [1]\n    }\n    if (n % 2 === 0) {\n      return [n, n / 2]\n    }\n    return [n, 3 * n + 1]\n  }\n  const collatz_list = collatz(n)\n  collatz_list.forEach((n) => {\n    odd_collatz.push(n)\n  })\n  return odd_collatz.sort()\n}\n\nconst get_odd_collatz_test = () => {\n  const odd_collatz = get_odd_collatz(5)\n  console.log(odd_collatz)\n  return odd_collatz\n}\n\nmodule.exports = get_odd_collatz_test\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const month = parseInt(date.substr(0, 2), 10);\n  const day = parseInt(date.substr(3, 2), 10);\n  const year = parseInt(date.substr(6, 4), 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1000 || year > 9999) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date_2 = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n  const month = parseInt(date.substr(0, 2), 10);\n  const day = parseInt(date.substr(3, 2), 10);\n  const year = parseInt(date.substr(6, 4), 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (year < 1000 || year > 9999) {\n    return false;\n  }\n  return true;\n};\n\nconst date_validator = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_2 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_3 = (date) => {\n  if (valid_date_2(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_4 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_5 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_6 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_7 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_8 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_9 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_10 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_11 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_12 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_13 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};\n\nconst date_validator_14 = (date) => {\n  if (valid_date(date)) {\n    return true;\n  }\n  return false;\n};", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_2 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_3 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_4 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_5 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_6 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_7 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words_8 = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.filter(w => w.length > 0);\n};\n\n/*\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  return lst.length === sorted.length && sorted.every((x, i) => lst[i] === x);\n};\n\nexport default is_sorted;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n  if (interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const sign_arr = arr.map((x) => x > 0? 1 : x < 0? -1 : 0)\n  const prod = arr.reduce((acc, x) => acc * x, 1)\n  return sign_arr.reduce((acc, x) => acc + x * x, 0) * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_2 = (arr) => {\n  const sign_arr = arr.map((x) => x > 0? 1 : x < 0? -1 : 0)\n  const prod = arr.reduce((acc, x) => acc * x, 1)\n  return sign_arr.reduce((acc, x) => acc + x * x, 0) * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_3 = (arr) => {\n  const sign_arr = arr.map((x) => x > 0? 1 : x < 0? -1 : 0)\n  const prod = arr.reduce((acc, x) => acc * x, 1)\n  return sign_arr.reduce((acc, x) => acc + x * x, 0) * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_4 = (arr) => {\n  const sign_arr = arr.map((x) => x > 0? 1 : x < 0? -1 : 0)\n  const prod = arr.reduce((acc, x) => acc * x, 1)\n  return sign_arr.reduce((acc, x) => acc + x * x, 0) * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_5 = (arr) => {\n  const sign_arr = arr.map((x) => x > 0? 1 : x < 0? -1 : 0)\n  const prod = arr.reduce((acc, x) => acc * x, 1)\n  return sign_arr.reduce((acc, x) => acc + x * x, 0) * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_6 = (arr) => {\n  const sign_arr = arr.map((x) => x > 0? 1 : x < 0? -1 : 0)\n  const prod = arr.reduce((acc, x) => acc * x, 1)\n  return sign_arr.reduce((acc, x) => acc + x * x, 0) * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_7 = (arr) => {\n  const sign_arr = arr.map((x) => x > 0? 1 : x < 0? -1 : 0)\n  const prod = arr.reduce((acc, x) => acc * x, 1)\n  return sign_arr.reduce((acc, x) => acc + x * x, 0) * prod\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs_", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const N = grid.length;\n  const dp = new Array(N);\n  dp[0] = grid[0];\n  dp[N - 1] = grid[N - 1];\n  for (let i = N - 2; i >= 0; i--) {\n    dp[i] = grid[i][0] < grid[i + 1][0]? grid[i] : grid[i + 1];\n  }\n  const result = [];\n  for (let i = 0; i < k; i++) {\n    result.push(dp[i]);\n  }\n  return result;\n};\n\nconst test = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test2 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test3 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test4 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test5 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test6 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test7 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test8 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test9 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test10 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test11 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test12 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [7, 8, 2]\n  ]\n];\n\nconst test13 = [\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ],\n  [\n    [5, 9, 3],\n    [4, 1, 6],\n    [", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {Number} a\n  * @param {Number} b\n  * @returns {Number}\n  * @example\n  * least_common_multiple(3, 5)\n  * // => 15\n  */\nconst least_common_multiple = (a, b) => {\n  return a * greatest_common_divisor(a, b);\n};\n\n/**\n  * Return a greatest common divisor of two integers a and b\n  * @param {Number} a\n  * @param {Number} b\n  * @returns {Number}\n  * @example\n  * greatest_common_divisor(3, 5)\n  * // => 1\n  */\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * @param {Number} a\n  * @param {Number} b\n  * @returns {Number}\n  * @example\n  * least_common_multiple(3, 5)\n  * // => 15\n  */\nconst lcm = (a, b) => {\n  return a * greatest_common_divisor(a, b);\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_digits(12345)\n  * // => 5\n  */\nconst number_of_digits = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10));\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_digits(12345)\n  * // => 5\n  */\nconst number_of_decimal_places = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) - 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_digits = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_significant_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_decimal_places = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_significant_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_decimal_places_with_decimal = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_significant_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_decimal_places_with_decimal_decimal = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_significant_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_decimal_places_with_decimal_decimal_decimal = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_significant_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_decimal_places_with_decimal_decimal_decimal_decimal = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_significant_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_decimal_places_with_decimal_decimal_decimal_decimal_decimal = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return the number of digits in a number\n  * @param {Number} n\n  * @returns {Number}\n  * @example\n  * number_of_significant_digits(12345)\n  * // => 5\n  */\nconst number_of_significant_decimal_places_with_decimal_decimal_decimal_decimal_decimal_decimal = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10)) + 1;\n};\n\n/**\n  * Return", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n\nconst tri = (n) => {\n  const tri = [];\n  tri[0] = 1;\n  tri[1] = 3;\n  for (let i = 2; i <= n; i++) {\n    tri[i] = tri[i - 1] + tri[i - 2] + tri[i - 3];\n  }\n  return tri;\n};\n", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      result *= i;\n    }\n  }\n  return result;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = [];\n  const brackets = /\\[|\\]/g;\n  let index = 0;\n  let count = 0;\n  let valid = false;\n  while (index < string.length) {\n    const char = string[index];\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack.pop();\n      if (top === '[') {\n        count++;\n      } else if (top === ']') {\n        count--;\n      }\n      if (count === 0) {\n        valid = true;\n        break;\n      }\n    }\n    index++;\n  }\n  return valid;\n};\n\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + val * val, 0);\n  return sum;\n};\n\nconst sum_squares_ceil = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_floor = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.floor(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.round(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_ceil_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_floor_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.floor(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_ceil = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.floor(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_ceil_floor = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_ceil_floor_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.floor(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round_floor = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round_floor = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round_floor_round = (lst) => {\n  const sum = lst.reduce((acc, val) => acc + Math.ceil(val * val), 0);\n  return sum;\n};\n\nconst sum_squares_round_floor_round_ceil_round_floor_round_ceil_round_floor_round_floor_round = (lst", "passed": 0}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_letter = last_char.match(/[a-zA-Z]/);\n  return is_letter &&!is_letter.match(/[a-zA-Z]+/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"apple pie\") ➞ false\n  check_if_last_char_is_a_number(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_number(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_number = last_char.match(/[0-9]/);\n  return is_number &&!is_number.match(/[0-9]+/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a punctuation mark and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_punctuation_mark(\"apple pie\") ➞ false\n  check_if_last_char_is_a_punctuation_mark(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_punctuation_mark(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_punctuation_mark(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_punctuation_mark = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_punctuation = last_char.match(/[.,;:?!()\\[\\]{}<>/]/);\n  return is_punctuation &&!is_punctuation.match(/[.,;:?!()\\[\\]{}<>/]+/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_space = last_char.match(/[ ]/);\n  return is_space &&!is_space.match(/[ ]+/);\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space_and_not_a_word = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_space = last_char.match(/[ ]/);\n  const is_not_word = last_char.match(/[a-zA-Z]+/);\n  return is_space &&!is_space.match(/[ ]+/) &&!is_not_word;\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a space and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_space_and_not_a_word(\"apple pie\") ➞ false\n  check_if_last_char_is_a_space_and_not_a_word(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_space_and_not_a_word(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_space_and_not_a_word(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_space_and_not_a_word_and_not_a_number = (txt) => {\n  const last_char = txt.slice(-1);\n  const is_space = last_char.match(/[ ]/);\n  const is_not_word = last_char.match(/[a-zA-Z]+/);\n  const", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  const len = arr.length;\n  let i = 0;\n  let j = len - 1;\n  let max = -1;\n\n  while (i < j) {\n    const mid = Math.floor((i + j) / 2);\n    if (arr[mid] < arr[i]) {\n      i = mid + 1;\n    } else if (arr[mid] > arr[i]) {\n      j = mid;\n    } else {\n      max = mid;\n      j = mid - 1;\n    }\n  }\n\n  return max;\n};\n\nexport default can_arrange;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const largest = lst.reduce((a, b) => a > b? a : b, -Infinity);\n  const smallest = lst.reduce((a, b) => a < b? a : b, Infinity);\n  return largest === -Infinity? (null, null) : (largest, smallest);\n};\n\n/*\n  Create a function that returns the largest of the given\n  numbers.\n  Examples:\n  largest_number([2, 4, 1, 3, 5, 7]) == 7\n  largest_number([]) == null\n  largest_number([0]) == 0\n  largest_number([-2, -4, -1, -3, -5, -7]) == -7\n  largest_number([-2, -4, -1, -3, -5, -7, -9]) == -9\n  */\nconst largest_number = (nums) => {\n  const largest = nums.reduce((a, b) => a > b? a : b);\n  return largest === -Infinity? null : largest;\n};\n\n/*\n  Create a function that returns the smallest of the given\n  numbers.\n  Examples:\n  smallest_number([2, 4, 1, 3, 5, 7]) == 1\n  smallest_number([]) == null\n  smallest_number([0]) == 0\n  smallest_number([-2, -4, -1, -3, -5, -7]) == -1\n  smallest_number([-2, -4, -1, -3, -5, -7, -9]) == -1\n  */\nconst smallest_number = (nums) => {\n  const smallest = nums.reduce((a, b) => a < b? a : b);\n  return smallest === Infinity? null : smallest;\n};\n\n/*\n  Create a function that returns the largest of the given\n  numbers.\n  Examples:\n  largest_number([2, 4, 1, 3, 5, 7]) == 7\n  largest_number([]) == null\n  largest_number([0]) == 0\n  largest_number([-2, -4, -1, -3, -5, -7]) == -7\n  largest_number([-2, -4, -1, -3, -5, -7, -9]) == -9\n  */\nconst largest_number_of_numbers = (nums) => {\n  const largest = nums.reduce((a, b) => a > b? a : b);\n  return largest === -Infinity? null : largest;\n};\n\n/*\n  Create a function that returns the smallest of the given\n  numbers.\n  Examples:\n  smallest_number([2, 4, 1, 3, 5, 7]) == 1\n  smallest_number([]) == null\n  smallest_number([0]) == 0\n  smallest_number([-2, -4, -1, -3, -5, -7]) == -1\n  smallest_number([-2, -4, -1, -3, -5, -7, -9]) == -1\n  */\nconst smallest_number_of_numbers = (nums) => {\n  const smallest = nums.reduce((a, b) => a < b? a : b);\n  return smallest === Infinity? null : smallest;\n};\n\n/*\n  Create a function that returns the largest of the given\n  numbers.\n  Examples:\n  largest_number([2, 4, 1, 3, 5, 7]) == 7\n  largest_number([]) == null\n  largest_number([0]) == 0\n  largest_number([-2, -4, -1, -3, -5, -7]) == -7\n  largest_number([-2, -4, -1, -3, -5, -7, -9]) == -9\n  */\nconst largest_number_of_numbers_of_numbers = (nums) => {\n  const largest = nums.reduce((a, b) => a > b? a : b);\n  return largest === -Infinity? null : largest;\n};\n\n/*\n  Create a function that returns the smallest of the given\n  numbers.\n  Examples:\n  smallest_number([2, 4, 1, 3, 5, 7]) == 1\n  smallest_number([]) == null\n  smallest_number([0]) == 0\n  smallest_number([-2, -4, -1, -3, -5, -7]) == -1\n  smallest_number([-2, -4, -1, -3, -5, -7, -9]) == -1\n  */\nconst smallest_number_of_numbers_of_numbers = (nums) => {\n  const smallest = nums.reduce((a, b) => a < b? a : b);\n  return smallest === Infinity? null : smallest;\n};\n\n/*\n  Create a function that returns the largest of the given\n  numbers.\n  Examples:\n  largest_number([2, 4, 1, 3, 5, 7]) == 7\n  largest_number([]) == null\n  largest_number([0]) == 0\n  largest_number([-2, -4, -1, -3, -5, -7]) == -7\n  largest_number([-2, -4, -1, -3, -5, -7, -9]) == -9\n  */\nconst largest_number_of_numbers_of_numbers_of_numbers = (nums) => {\n  const largest = nums.reduce((a, b) => a > b? a : b);\n  return largest === -Infinity? null : largest;\n};\n\n/*\n  Create a function that returns the smallest of the given\n  numbers.\n  Examples:\n  smallest_number([2, 4, 1, 3, 5, 7]) ==", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_two = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_three = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_four = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_five = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_six = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_seven = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_eight = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b;\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b;\n  } else {\n    return null;\n  }\n};\n\nconst compare_nine = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b;\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if (typeof a === 'number", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == true\n  is_equal_to_sum_odd(8) == false\n  */\nconst is_equal_to_sum_odd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative even numbers\n  Example\n  is_equal_to_sum_even(4) == true\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_neg = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 negative odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == true\n  is_equal_to_sum_odd(8) == false\n  */\nconst is_equal_to_sum_neg_odd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive or negative even numbers\n  Example\n  is_equal_to_sum_even(4) == true\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == true\n  is_equal_to_sum_even(10) == false\n  */\nconst is_equal_to_sum_pos_neg = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0 || sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive or negative odd numbers\n  Example\n  is_equal_to_sum_odd(4) == true\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  is_equal_to_sum_odd(10) == false\n  */\nconst is_equal_to_sum_pos_neg_odd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0 || sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive or negative even numbers\n  Example\n  is_equal_to_sum_even(4) == true\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == true\n  is_equal_to_sum_even(10) == true\n  is_equal_to_sum_even(12) == false\n  */\nconst is_equal_to_sum_pos_neg_even = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0 || sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive or negative odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  is_equal_to_sum_odd(10) == false\n  */\nconst is_equal_to_sum_pos_neg_odd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0 || sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive or negative even numbers\n  Example\n  is_equal_to_sum_even(4) == true\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == true\n  is_equal_to_sum_even(10) == true\n  is_equal_to_sum_even(12) == true\n  is_equal_to_sum_even(14) == false\n  */\nconst is_equal_to_sum_pos_neg_even = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0 || sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive or negative odd numbers\n  Example\n  is_equal_to_sum_odd(4) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == true\n  is_equal_to_sum_odd(10) == false\n  */\nconst is_equal_to_sum_pos_neg_odd = (n) => {\n  const sum = n + n + n + n;\n  return sum % 2 === 0 || sum % 2 === -1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive or negative even numbers\n  Example\n  is_equal_to_sum_even(4) == true\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == true\n  is_equal_to_sum_even(10) == true\n  is_equal_to_sum_even(12) == true\n  is_equal_to_sum_even(14) == true\n  is_equal_to_sum_", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  const factorial = (n) => {\n    if (n === 1) {\n      return 1;\n    }\n    return n * factorial(n - 1);\n  };\n  return factorial(n);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * factorial_recursive(n - 1);\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_4 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_5 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_recursive_iterative_6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this integer.\n  */\nconst factorial_iterative_6 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  The function will receive an integer as input and should return the\n  factorial of this", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = []\n  const prefix = string.split('')\n  for (let i = 0; i < prefix.length; i++) {\n    const prefix_string = prefix.slice(0, i + 1)\n    const prefix_length = prefix_string.length\n    const prefix_string_reversed = prefix_string.reverse()\n    const prefix_string_reversed_length = prefix_string_reversed.length\n    const prefix_string_reversed_reversed = prefix_string_reversed.reverse()\n    const prefix_string_reversed_reversed_length = prefix_string_reversed_reversed.length\n    const prefix_string_reversed_reversed_reversed = prefix_string_reversed_reversed.reverse()\n    const prefix_string_reversed_reversed_reversed_length = prefix_string_reversed_reversed_reversed.length\n    const prefix_string_reversed_reversed_reversed_reversed = prefix_string_reversed_reversed_reversed.reverse()\n    const prefix_string_reversed_reversed_reversed_reversed_length = prefix_string_reversed_reversed_reversed_reversed.length\n    const prefix_string_reversed_reversed_reversed_reversed_reversed = prefix_string_reversed_reversed_reversed_reversed.reverse()\n    prefixes.push(prefix_string)\n    prefixes.push(prefix_string_reversed)\n    prefixes.push(prefix_string_reversed_length)\n    prefixes.push(prefix_string_reversed_reversed)\n    prefixes.push(prefix_string_reversed_reversed_length)\n    prefixes.push(prefix_string_reversed_reversed_reversed)\n    prefixes.push(prefix_string_reversed_reversed_reversed_length)\n    prefixes.push(prefix_string_reversed_reversed_reversed_reversed)\n    prefixes.push(prefix_string_reversed_reversed_reversed_reversed_length)\n    prefixes.push(prefix_string_reversed_reversed_reversed_reversed_reversed)\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> all_suffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst all_suffixes = (string) => {\n  const suffixes = []\n  const suffix = string.split('')\n  for (let i = 0; i < suffix.length; i++) {\n    const suffix_string = suffix.slice(0, i + 1)\n    const suffix_length = suffix_string.length\n    const suffix_string_reversed = suffix_string.reverse()\n    const suffix_string_reversed_length = suffix_string_reversed.length\n    const suffix_string_reversed_reversed = suffix_string_reversed.reverse()\n    const suffix_string_reversed_reversed_length = suffix_string_reversed_reversed.length\n    const suffix_string_reversed_reversed_reversed = suffix_string_reversed_reversed.reverse()\n    const suffix_string_reversed_reversed_reversed_length = suffix_string_reversed_reversed_reversed.length\n    const suffix_string_reversed_reversed_reversed_reversed = suffix_string_reversed_reversed_reversed.reverse()\n    const suffix_string_reversed_reversed_reversed_reversed_length = suffix_string_reversed_reversed_reversed_reversed.length\n    const suffix_string_reversed_reversed_reversed_reversed_reversed = suffix_string_reversed_reversed_reversed_reversed.reverse()\n    const suffix_string_reversed_reversed_reversed_reversed_reversed_length = suffix_string_reversed_reversed_reversed_reversed_reversed.length\n    const suffix_string_reversed_reversed_reversed_reversed_reversed_reversed = suffix_string_reversed_reversed_reversed_reversed_reversed.reverse()\n    suffixes.push(suffix_string)\n    suffixes.push(suffix_string_reversed)\n    suffixes.push(suffix_string_reversed_length)\n    suffixes.push(suffix_string_reversed_reversed)\n    suffixes.push(suffix_string_reversed_reversed_length)\n    suffixes.push(suffix_string_reversed_reversed_reversed)\n    suffixes.push(suffix_string_reversed_reversed_reversed_length)\n    suffixes.push(suffix_string_reversed_reversed_reversed_reversed)\n    suffixes.push(suffix_string_reversed_reversed_reversed_reversed_length)\n    suffixes.push(suffix_string_reversed_reversed_reversed_reversed_reversed)\n  }\n  return suffixes\n}\n\n/* Return list of all permutations of the input string\n  >>> all_permutations('abc')\n  ['abc', 'bac', 'cba', 'abcd', 'dabc', 'abce', 'abcd', 'cbad', 'cbad', 'abcd', 'cbad', 'cbad', 'abcd', 'cbad', 'cbad', 'abcd', 'cbad', 'cbad', 'abcd', 'cbad', 'cbad', 'abcd", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  const text_without_spaces = text.replace(/\\s+/g, '_');\n  if (text_without_spaces.length > 2) {\n    const text_without_consecutive_spaces = text_without_spaces.replace(/\\s+/g, '-');\n    return text_without_consecutive_spaces;\n  } else {\n    return text_without_spaces;\n  }\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fix_underscores(\"Example\") == \"Example\"\n  fix_underscores(\"Example 1\") == \"Example 1\"\n  fix_underscores(\" Example 2\") == \"Example 2\"\n  fix_underscores(\" Example   3\") == \"Example 3\"\n  */\nconst fix_underscores = (text) => {\n  const text_without_underscores = text.replace(/\\_+/g,'');\n  if (text_without_underscores.length > 2) {\n    const text_without_consecutive_underscores = text_without_underscores.replace(/\\_+/g, '-');\n    return text_without_consecutive_underscores;\n  } else {\n    return text_without_underscores;\n  }\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_dashes(\"Example\") == \"Example\"\n  fix_dashes(\"Example 1\") == \"Example 1\"\n  fix_dashes(\" Example 2\") == \"Example 2\"\n  fix_dashes(\" Example   3\") == \"Example 3\"\n  */\nconst fix_dashes = (text) => {\n  const text_without_dashes = text.replace(/-+/g,'');\n  if (text_without_dashes.length > 2) {\n    const text_without_consecutive_dashes = text_without_dashes.replace(/-+/g, '-');\n    return text_without_consecutive_dashes;\n  } else {\n    return text_without_dashes;\n  }\n}\n\n/*\n  Given a string text, replace all - in it with underscores, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_underscores(\"Example\") == \"Example\"\n  fix_underscores(\"Example 1\") == \"Example 1\"\n  fix_underscores(\" Example 2\") == \"Example 2\"\n  fix_underscores(\" Example   3\") == \"Example 3\"\n  */\nconst fix_underscores_and_dashes = (text) => {\n  const text_without_underscores_and_dashes = text.replace(/-+/g, '_');\n  if (text_without_underscores_and_dashes.length > 2) {\n    const text_without_consecutive_underscores_and_dashes = text_without_underscores_and_dashes.replace(/-+/g, '-');\n    return text_without_consecutive_underscores_and_dashes;\n  } else {\n    return text_without_underscores_and_dashes;\n  }\n}\n\n/*\n  Given a string text, replace all - in it with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_underscores(\"Example\") == \"Example\"\n  fix_underscores(\"Example 1\") == \"Example 1\"\n  fix_underscores(\" Example 2\") == \"Example 2\"\n  fix_underscores(\" Example   3\") == \"Example 3\"\n  */\nconst fix_underscores_and_dashes_and_spaces = (text) => {\n  const text_without_underscores_and_dashes_and_spaces = text.replace(/-+/g,'');\n  if (text_without_underscores_and_dashes_and_spaces.length > 2) {\n    const text_without_consecutive_underscores_and_dashes_and_spaces = text_without_underscores_and_dashes_and_spaces.replace(/-+/g, '-');\n    return text_without_consecutive_underscores_and_dashes_and_spaces;\n  } else {\n    return text_without_underscores_and_dashes_and_spaces;\n  }\n}\n\n/*\n  Given a string text, replace all - in it with underscores, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with - \n  \n  fix_underscores(\"Example\") == \"Example\"\n  fix_underscores(\"Example 1\") == \"Example 1\"\n  fix_underscores(\" Example 2\") == \"Example 2\"\n  fix_underscores(\" Example   3\") == \"Example 3\"\n  */\nconst fix_underscores_and_dashes_and_spaces_and_underscores = (text) => {\n  const text_without_underscores_and_dashes_and_spaces_and_underscores = text.replace(/-+/g, '_');\n  if (text_without_underscores_and_dashes_and_spaces_and_underscores.length > 2) {\n    const text_without_consecutive_underscores_and_dashes_and_spaces_and_underscores = text_without_underscores_and_dashes_and_spaces_and_underscores.replace(/-+/g, '-');\n    ", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  if (file_name.match(/^[0-9]{3}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}[a-zA", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n    if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_all = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_all_squares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_all_cubes = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_all_all = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  let words = sentence.split(' ')\n  let new_words = []\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let new_word = ''\n    while (isPrime(word.length)) {\n      new_word += word\n      new_words.push(new_word)\n      word = getNextPrime(word)\n    }\n  }\n  return new_words.join(' ')\n}\n\nconst isPrime = (num) => {\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst getNextPrime = (num) => {\n  let i = 2\n  while (i < num) {\n    if (num % i === 0) {\n      return i + 1\n    }\n    i++\n  }\n  return num\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const x_num = parseInt(x.split('/')[0]);\n  const x_den = parseInt(x.split('/')[1]);\n  const n_num = parseInt(n.split('/')[0]);\n  const n_den = parseInt(n.split('/')[1]);\n\n  if (x_num === n_num && x_den === n_den) {\n    return true;\n  }\n\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_2 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_3 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_4 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_5 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_6 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_7 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_8 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_9 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_10 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_11 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_12 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_13 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_14 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_15 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_16 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_17 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_18 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_19 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_20 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return sorted\n}\n\nconst order_by_points_21 = (nums) => {\n  const sorted = nums.slice().sort((a, b) => {\n    if (a < b) return -1\n    if", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(special_filter([15, -73, 14, -15]));\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  const result = []\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result.push([a[i], a[j], a[k]])\n        }\n      }\n    }\n  }\n  return result.length\n}\n\nconsole.log(get_max_triples(5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const planet1Index = planets.indexOf(planet1)\n  const planet2Index = planets.indexOf(planet2)\n  const planet1Orbit = planet1Index\n  const planet2Orbit = planet2Index\n  const planet1OrbitLength = planet1Orbit.length\n  const planet2OrbitLength = planet2Orbit.length\n  const planet1OrbitLengthDifference = planet1OrbitLength - planet2OrbitLength\n  const planet2OrbitLengthDifference = planet2OrbitLength - planet1OrbitLength\n  const planet1OrbitLengthDifferenceAbs = Math.abs(planet1OrbitLengthDifference)\n  const planet2OrbitLengthDifferenceAbs = Math.abs(planet2OrbitLengthDifference)\n  const planet1OrbitLengthDifferenceAbsMax = Math.max(planet1OrbitLengthDifferenceAbs, planet2OrbitLengthDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsMin = Math.min(planet1OrbitLengthDifferenceAbs, planet2OrbitLengthDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifference = planet1OrbitLengthDifferenceAbsMax - planet1OrbitLengthDifferenceAbsMin\n  const planet1OrbitLengthDifferenceAbsDifferenceAbs = Math.abs(planet1OrbitLengthDifferenceAbsDifference)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsMax = Math.max(planet1OrbitLengthDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsMin = Math.min(planet1OrbitLengthDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifference = planet1OrbitLengthDifferenceAbsDifferenceAbsMax - planet1OrbitLengthDifferenceAbsDifferenceAbsMin\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbs = Math.abs(planet1OrbitLengthDifferenceAbsDifferenceAbsDifference)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsMax = Math.max(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsMin = Math.min(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifference = planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceMax - planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceMin\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs = Math.abs(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifference)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsMax = Math.max(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsMin = Math.min(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifference = planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceMax - planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceMin\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs = Math.abs(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifference)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsMax = Math.max(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsMin = Math.min(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs = planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceMax - planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceMin\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsMax = Math.max(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs)\n  const planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsMin = Math.min(planet1OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbs, planet2OrbitLengthDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDifferenceAbsDiff", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2 === 1) {\n      sorted.push(lst[i])\n      sum -= lst[i].length\n    }\n  }\n  return sorted\n}\n\nconst list_sort_by_length_sorted_reverse_reverse_reverse_reverse = (lst) => {\n  const len = lst.length\n  const sorted = []\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += lst[i].length\n    if (sum % 2", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-')\n  '0'\n  >>> string_sequence(5, '-')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-', '*')\n  '0'\n  >>> string_sequence(5, '-', '*')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='', repeat = '*') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${repeat}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-', '*', '+')\n  '0'\n  >>> string_sequence(5, '-', '*', '+')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='', repeat = '*', plus = '+') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-', '*', '+', '#')\n  '0'\n  >>> string_sequence(5, '-', '*', '+', '#')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='', repeat = '*', plus = '+', hash = '#') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${hash}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-', '*', '+', '#', '!')\n  '0'\n  >>> string_sequence(5, '-', '*', '+', '#', '!')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='', repeat = '*', plus = '+', hash = '#', bang = '!') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${hash}${bang}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-', '*', '+', '#', '!', '@')\n  '0'\n  >>> string_sequence(5, '-', '*', '+', '#', '!', '@')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='', repeat = '*', plus = '+', hash = '#', bang = '!', at = '@') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${hash}${bang}${at}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-', '*', '+', '#', '!', '@', '#')\n  '0'\n  >>> string_sequence(5, '-', '*', '+', '#', '!', '@', '#')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='', repeat = '*', plus = '+', hash = '#', bang = '!', at = '@', hash2 = '#') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${hash}${bang}${at}${hash2}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, '-', '*', '+', '#', '!', '@', '#', '#')\n  '0'\n  >>> string_sequence(5, '-', '*', '+', '#', '!', '@', '#', '#')\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, delimiter ='', repeat = '*', plus = '+', hash = '#', bang = '!', at = '@', hash2 = '#', hash3 = '#') => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}${delimiter}${repeat}${plus}${hash}${bang}${at}${hash2}${hash3}`;\n  }\n  return s;\n};\n\n/* Return a string containing space-delimited", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 5;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nconst x_or_y_test = [\n  [7, 34, 12],\n  [15, 8, 5],\n  [19, 9, 5],\n  [21, 9, 5],\n  [23, 9, 5],\n  [29, 9, 5],\n  [31, 9, 5],\n  [37, 9, 5],\n  [41, 9, 5],\n  [43, 9, 5],\n  [47, 9, 5],\n  [53, 9, 5],\n  [59, 9, 5],\n  [61, 9, 5],\n  [67, 9, 5],\n  [71, 9, 5],\n  [73, 9, 5],\n  [79, 9, 5],\n  [83, 9, 5],\n  [89, 9, 5],\n  [97, 9, 5],\n  [101, 9, 5],\n  [103, 9, 5],\n  [107, 9, 5],\n  [109, 9, 5],\n  [113, 9, 5],\n  [119, 9, 5],\n  [121, 9, 5],\n  [127, 9, 5],\n  [131, 9, 5],\n  [137, 9, 5],\n  [139, 9, 5],\n  [149, 9, 5],\n  [151, 9, 5],\n  [157, 9, 5],\n  [163, 9, 5],\n  [167, 9, 5],\n  [173, 9, 5],\n  [179, 9, 5],\n  [181, 9, 5],\n  [191, 9, 5],\n  [193, 9, 5],\n  [197, 9, 5],\n  [199, 9, 5],\n  [211, 9, 5],\n  [223, 9, 5],\n  [227, 9, 5],\n  [229, 9, 5],\n  [233, 9, 5],\n  [239, 9, 5],\n  [241, 9, 5],\n  [251, 9, 5],\n  [257, 9, 5],\n  [263, 9, 5],\n  [269, 9, 5],\n  [271, 9, 5],\n  [277, 9, 5],\n  [281, 9, 5],\n  [283, 9, 5],\n  [289, 9, 5],\n  [293, 9, 5],\n  [307, 9, 5],\n  [311, 9, 5],\n  [313, 9, 5],\n  [317, 9, 5],\n  [331, 9, 5],\n  [337, 9, 5],\n  [347, 9, 5],\n  [349, 9, 5],\n  [353, 9, 5],\n  [359, 9, 5],\n  [367, 9, 5],\n  [373, 9, 5],\n  [379, 9, 5],\n  [383, 9, 5],\n  [389, 9, 5],\n  [397, 9, 5],\n  [401, 9, 5],\n  [409, 9, 5],\n  [419, 9, 5],\n  [421, 9, 5],\n  [431, 9, 5],\n  [433, 9, 5],\n  [439, 9, 5],\n  [443, 9, 5],\n  [449, 9, 5],\n  [457, 9, 5],\n  [461, 9, 5],\n  [463, 9, 5],\n  [467, 9, 5],\n  [479, 9, 5],\n  [487, 9, 5],\n  [491, 9, 5],\n  [499, 9, 5],\n  [503, 9, 5],\n  [509, 9, 5],\n  [521, 9, 5],\n  [523, 9, 5],\n  [541, 9, 5],\n  [547, 9, 5],\n  [557, 9, 5],\n  [563, 9, 5],\n  [569, 9, 5],\n  [571, 9, 5],\n  [577, 9, 5],\n  [587, 9, 5],\n  [593, 9, 5],\n  [599, 9, 5],\n  [601, 9, 5],\n  [607, 9, 5],\n  [613, 9, 5],\n  [617, 9, 5],\n  [619, 9, 5],\n  [631, 9, 5],\n  [641, 9, 5],\n  [643, 9, 5],\n  [647, 9, 5],\n  [653, 9, 5],\n  [659, 9, 5],\n  [661, 9, 5],\n  [673, 9, 5],\n  [677, 9, 5],\n  [683, 9, 5],\n  [691, 9, 5],\n  [701, 9, 5],\n  [709, 9, 5],\n  [719, 9, 5],\n  [727, 9, 5],\n  [733, 9, 5],\n  [739, 9, 5],\n  [743, 9, 5],\n  [751, 9, 5],\n  [757, 9, 5],\n  [761, 9, 5],\n  [769, 9, 5],\n  [773, 9, 5],\n  [787, 9, 5],\n  [797, 9, 5", "passed": 0}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  const sum = (a, b) => a + b;\n  const double_difference = (a, b) => a * b;\n  const double_difference_sum = (a, b) => sum(double_difference(a, b));\n  const double_difference_sum_list = (lst) => lst.reduce(double_difference_sum);\n  const double_difference_sum_list_sum = (lst) => sum(double_difference_sum_list(lst));\n  const double_difference_sum_list_sum_sum = (lst) => sum(double_difference_sum_list_sum(lst));\n  return double_difference_sum_list_sum_sum(lst);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_sum = (lst) => {\n  const sum = (a, b) => a + b;\n  const double_difference = (a, b) => a * b;\n  const double_difference_sum = (a, b) => sum(double_difference(a, b));\n  const double_difference_sum_list = (lst) => lst.reduce(double_difference_sum);\n  const double_difference_sum_list_sum = (lst) => sum(double_difference_sum_list(lst));\n  return double_difference_sum_list_sum_sum(lst);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_sum_list = (lst) => {\n  const sum = (a, b) => a + b;\n  const double_difference = (a, b) => a * b;\n  const double_difference_sum = (a, b) => sum(double_difference(a, b));\n  const double_difference_sum_list = (lst) => lst.reduce(double_difference_sum);\n  const double_difference_sum_list_sum = (lst) => sum(double_difference_sum_list(lst));\n  return double_difference_sum_list_sum_sum(lst);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_sum_list_sum = (lst) => {\n  const sum = (a, b) => a + b;\n  const double_difference = (a, b) => a * b;\n  const double_difference_sum = (a, b) => sum(double_difference(a, b));\n  const double_difference_sum_list = (lst) => lst.reduce(double_difference_sum);\n  const double_difference_sum_list_sum = (lst) => sum(double_difference_sum_list(lst));\n  return double_difference_sum_list_sum_sum(lst);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 4 + 0 = 16\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference_sum_list_sum_sum = (lst) => {\n  const sum = (a, b) => a + b;\n  const double_difference = (a, b) => a * b;\n  const double_difference_sum = (a, b) => sum(double_difference(a, b));\n  const double_difference_sum_list = (lst) => lst.reduce(double_difference_sum);\n  const double_difference_sum_list_sum = (lst) => sum(double_difference_sum_list(lst));\n  return double_difference_sum_list_sum_sum(lst);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  double_the_difference([1,", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLength = game.length\n  const guessLength = guess.length\n  const diff = []\n  for (let i = 0; i < gameLength; i++) {\n    const gameValue = game[i]\n    const guessValue = guess[i]\n    if (gameValue === guessValue) {\n      diff.push(0)\n    } else {\n      diff.push(Math.abs(gameValue - guessValue))\n    }\n  }\n  return diff\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  \n  example:\n\n  sum([1,2,3,4,5,6,7,8,9,10]) -> 45\n  */\nconst sum = (numbers) => {\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return sum\n}\n\n/*\n  Given a list of numbers, return the average of the numbers.\n  \n  example:\n\n  average([1,2,3,4,5,6,7,8,9,10]) -> 5.5\n  */\nconst average = (numbers) => {\n  const sum = sum(numbers)\n  return sum / numbers.length\n}\n\n/*\n  Given a list of numbers, return the median of the numbers.\n  \n  example:\n\n  median([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst median = (numbers) => {\n  const sorted = sorted(numbers)\n  const middle = Math.floor(numbers.length / 2)\n  if (numbers.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2\n  } else {\n    return sorted[middle]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n\n  mode([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst mode = (numbers) => {\n  const sorted = sorted(numbers)\n  const middle = Math.floor(numbers.length / 2)\n  if (numbers.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2\n  } else {\n    return sorted[middle]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n\n  mode([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst sorted = (numbers) => {\n  const sorted = []\n  for (let i = 0; i < numbers.length; i++) {\n    sorted.push(numbers[i])\n  }\n  sorted.sort()\n  return sorted[sorted.length / 2]\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n\n  mode([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst mode = (numbers) => {\n  const sorted = sorted(numbers)\n  const middle = Math.floor(numbers.length / 2)\n  if (numbers.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2\n  } else {\n    return sorted[middle]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n\n  mode([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst sorted = (numbers) => {\n  const sorted = []\n  for (let i = 0; i < numbers.length; i++) {\n    sorted.push(numbers[i])\n  }\n  sorted.sort()\n  return sorted[sorted.length / 2]\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n\n  mode([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst mode = (numbers) => {\n  const sorted = sorted(numbers)\n  const middle = Math.floor(numbers.length / 2)\n  if (numbers.length % 2 === 0) {\n    return (sorted[middle] + sorted[middle - 1]) / 2\n  } else {\n    return sorted[middle]\n  }\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n\n  mode([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst sorted = (numbers) => {\n  const sorted = []\n  for (let i = 0; i < numbers.length; i++) {\n    sorted.push(numbers[i])\n  }\n  sorted.sort()\n  return sorted[sorted.length / 2]\n}\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  \n  example:\n\n  mode([1,2,3,4,5,6,7,8,9,10]) -> 5\n  */\nconst mode = (numbers) => {\n  const sorted = sorted(", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_2 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_3 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_4 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_5 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_6 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_7 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_8 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_9 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm = extension.match(/[a-z]/g).length;\n    return (cap - sm) / cap;\n  }, -1);\n  return strength === 0? class_name : `${class_name}.${extensions[strength]}`;\n};\n\nconst strongest_extension_test_10 = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, extension) => {\n    const cap = extension.match(/[A-Z]/g).length;\n    const sm =", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const a_str = a.split(\"\");\n  const b_str = b.split(\"\");\n  const a_sub = a_str.find(x => b_str.includes(x));\n  if (a_sub === -1) {\n    return false;\n  }\n  const b_sub = b_str.find(x => a_str.includes(x));\n  if (b_sub === -1) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Given a string, return a string where all the occurrences of the substring \"ab\" are replaced with \"aa\".\n  ababcc -> aaacc\n  ababccc -> aaaccc\n  ababcccc -> aaaccccc\n  ababccccc -> aaaccccccc\n  ababcccccc -> aaaccccccccc\n  ababccccccc -> aaaccccccccccc\n  ababcccccccc -> aaaccccccccccccc\n  ababccccccccc -> aaaccccccccccccccc\n  ababcccccccccc -> aaaccccccccccccccccc\n  ababccccccccccc -> aaaccccccccccccccccccc\n  ababcccccccccccc -> aaaccccccccccccccccccccc\n  ababccccccccccccc -> aaaccccccccccccccccccccccc\n  ababcccccccccccccc -> aaaccccccccccccccccccccccccc\n  ababccccccccccccccc -> aaaccccccccccccccccccccccccccc\n  ababcccccccccccccccc -> aaaccccccccccccccccccccccccccccc\n  ababccccccccccccccccc -> aaaccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababccccccccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccccccccccccccccccccccccccccccc -> aaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n  ababcccccccc", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n    let count = 0;\n    let odd = 0;\n    let even = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count += 1;\n        } else {\n            odd += 1;\n        }\n        num = num / 2;\n    }\n    return [count, odd];\n};\n\nconsole.log(even_odd_count(12));\nconsole.log(even_odd_count(123));\nconsole.log(even_odd_count(1234));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  const num = number;\n  const result = [];\n  let i = 0;\n  while (num > 0) {\n    if (num >= 4) {\n      result.push(`${num - 4}v`);\n      num -= 4;\n    } else if (num >= 9) {\n      result.push(`${num - 9}ix`);\n      num -= 9;\n    } else if (num >= 5) {\n      result.push(`${num - 5}x`);\n      num -= 5;\n    } else if (num >= 1) {\n      result.push(`${num - 1}`);\n      num -= 1;\n    }\n  }\n  return result.reverse().join('');\n};\n\nmodule.exports = int_to_mini_roman;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the length of the\n  longest side.\n  Example:\n  longest_side(3, 4, 5) == 5\n  longest_side(1, 2, 3) == 3\n  */\nconst longest_side = (a, b, c) => {\n  return Math.max(a, Math.max(b, c));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the area.\n  Example:\n  area(3, 4, 5) == 15\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n  return (longest_side(a, b, c) * (longest_side(a, b, c) - 2 * longest_side(a, b)) / 2);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter.\n  Example:\n  perimeter(3, 4, 5) == 15\n  perimeter(1, 2, 3) == 6\n  */\nconst perimeter = (a, b, c) => {\n  return longest_side(a, b, c) + longest_side(b, c, a) + longest_side(c, a, b);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the hypotenuse.\n  Example:\n  hypotenuse(3, 4, 5) == 5\n  hypotenuse(1, 2, 3) == 3\n  */\nconst hypotenuse = (a, b, c) => {\n  return Math.sqrt(area(a, b, c));\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  return hypotenuse(a, b, c) === a * b / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the right angle\n  triangle.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1,", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (map.has(word)) {\n      map.set(word, map.get(word) + 1);\n    } else {\n      map.set(word, 1);\n    }\n  }\n  const max = words[0];\n  for (let [key, value] of map) {\n    if (value > map.get(max)) {\n      max = key;\n    }\n  }\n  return max;\n};\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining];\n  }\n  if (remaining < need) {\n    return [number, remaining];\n  }\n  return [number, need - remaining];\n}\n\nconst test = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test2 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test3 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test4 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test5 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test6 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test7 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test8 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test9 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test10 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test11 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test12 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test13 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test14 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test15 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test16 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test17 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test18 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test19 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test20 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test21 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test22 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test23 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test24 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test25 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test26 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n]\n\nconst test27 = [\n  [5, 6, 10],\n  [4, 8, 9],\n  [1, 10, 10],\n  ", "passed": 0}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_2 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_3 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_4 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_5 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_6 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_7 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_8 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_9 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_10 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    char_set.add(char_to_lower(char));\n    char_set.add(char_to_upper(char));\n  }\n  return char_set.size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters_11 = (string) => {\n  const char_set = new Set();\n  for (const char of string) {\n    ", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  const operator_length = operator.length\n  const operand_length = operand.length\n  const operator_index = 0\n  const operand_index = 1\n  const result = []\n\n  while (operator_index < operator_length) {\n    const operator_value = operator[operator_index]\n    const operand_value = operand[operand_index]\n    const result_value = 0\n\n    if (operator_value === '+') {\n      result_value = operand_value + result[operand_index - 1]\n    } else if (operator_value === '-') {\n      result_value = operand_value - result[operand_index - 1]\n    } else if (operator_value === '*') {\n      result_value = operand_value * result[operand_index - 1]\n    } else if (operator_value === '/') {\n      result_value = operand_value / result[operand_index - 1]\n    } else if (operator_value === '**') {\n      result_value = Math.pow(operand_value, result[operand_index - 1])\n    }\n\n    result.push(result_value)\n    operator_index++\n    operand_index++\n  }\n\n  return result\n}\n\nconst do_algebra_test = () => {\n  const operator = ['+', '-', '*', '/', '**']\n  const operand = [2, 3, 4, 5]\n  const result = do_algebra(operator, operand)\n\n  console.log(`The result of ${operator.join('')} is ${result.join('')}`)\n}\n\ndo_algebra_test()\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length;\n  let i = 0;\n  let j = len - 1;\n  let flag = false;\n  while (i < j) {\n    if (s[i].toLowerCase() === s[j].toUpperCase()) {\n      s[i] = s[i].toUpperCase();\n      s[j] = s[j].toLowerCase();\n      flag = true;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return s;\n  }\n  return s.split('').reverse().join('');\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = string_to_md5;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_2 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_3 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_4 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_5 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_6 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_7 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_8 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_9 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_10 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_11 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_12 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_13 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_14 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_15 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_16 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_17 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_18 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_19 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_20 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_21 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_22 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_23 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_24 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_25 = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generate_integers_26 = (a, b) => {\n  const result =", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const music_list = music_string.split(' ');\n  const beats = [];\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o') {\n      beats.push(4);\n    } else if (music_list[i] === 'o|') {\n      beats.push(2);\n    } else if (music_list[i] === '.') {\n      beats.push(1);\n    }\n  }\n  return beats;\n};\n\nmodule.exports = parse_music;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const len = string.length;\n  const count = 0;\n  for (let i = 0; i < len; i++) {\n    const char = string[i];\n    const sub_len = substring.length;\n    for (let j = 0; j < sub_len; j++) {\n      if (substring[j] === char) {\n        count++;\n        break;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, find the longest substring that contains only\n  characters in the given set of characters.\n  >>> longest_substring('', ['a', 'b', 'c'])\n  ''\n  >>> longest_substring('abc', ['a', 'b', 'c'])\n  'abc'\n  >>> longest_substring('abcd', ['a', 'b', 'c'])\n  'abcd'\n  >>> longest_substring('abcdef', ['a', 'b', 'c'])\n  'abcdef'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'])\n  'abcdefg'\n  >>> longest_substring('abcdefg', ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'eight nine seven six five four three two one zero'\n  */\nconst sort_numbers_2 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_3 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_4 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_5 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_6 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_7 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_8 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_9 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_10 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_11 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_12 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b))\n  return sorted_numbers.reverse().join(' ')\n}\n\n/*\n  Input:\n  'zero one two three four five six seven eight nine'.\n  Output:\n  'one two three four five six seven eight nine zero'\n  */\nconst sort_numbers_13 = (numbers) => {\n  const numbers_array = numbers.split(' ')\n  const sorted_numbers = numbers_array.sort((a, b) => parseInt(a) - parseInt(b", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const number_as_int = parseInt(number);\n  const number_as_decimal = number - number_as_int;\n  return number_as_decimal;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_2 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_3 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_4 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_5 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_6 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_7 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_8 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_9 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_10 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_11 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncate_number(3.5)\n  3\n  */\nconst truncate_number_int_12 = (number) => {\n  const number_as_int = parseInt(number);\n  return number_as_int;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const closest_elements = [];\n  const closest_elements_index = [];\n  const closest_elements_distance = [];\n  const closest_elements_distance_index = [];\n  const closest_elements_distance_index_index = [];\n  const closest_elements_distance_index_index_index = [];\n  const closest_elements_distance_index_index_index_index = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const distance = Math.abs(numbers[i] - numbers[j]);\n      closest_elements.push(numbers[i]);\n      closest_elements_index.push(i);\n      closest_elements_distance.push(distance);\n      closest_elements_distance_index.push(i);\n      closest_elements_distance_index_index.push(j);\n      closest_elements_distance_index_index_index.push(i, j);\n    }\n  }\n\n  return [\n    closest_elements[closest_elements_distance_index[0]],\n    closest_elements[closest_elements_distance_index[1]]\n  ];\n};\n\nexport default find_closest_elements;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return numbers.map(scale)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers = (numbers) => {\n  return numbers.map(Math.log)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the largest number will be 1\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_one = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x))\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the smallest number will be 0\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_zero = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x) - 1)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the largest number will be 1\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_one_and_zero = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x) + 1)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the smallest number will be 0\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_zero_and_one = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x) - 1)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the largest number will be 1\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_one_and_zero_and_one = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x) + 1)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the smallest number will be 0\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_zero_and_one_and_one = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x) - 1)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the smallest number will be 0\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_zero_and_one_and_one_and_one = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x) + 1)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that number,\n  and the smallest number will be 0\n  >>> log_numbers([1, 2, 3, 4, 5])\n  [0.0, 0.6931471805599453, 1.0986122886681098, 1.3862943611198906, 1.6094379124341008]\n  */\nconst log_numbers_to_zero_and_one_and_one_and_one_and_one = (numbers) => {\n  return log_numbers(numbers).map(x => Math.exp(x) - 1)\n}\n\n/* Given a list of numbers, return a list of the same length,\n  where each number is the log of that", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_booleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_objects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_arrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_functions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_numbers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_booleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_objects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_arrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_functions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_numbers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_strings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_booleans = (values) => {\n  return values.filter(v => typeof v === 'boolean');\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_objects = (values) => {\n  return values.filter(v => typeof v === 'object');\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_arrays = (values) => {\n  return values.filter(v => Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for dictionaries\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_dictionaries = (values) => {\n  return values.filter(v => typeof v === 'object' &&!Array.isArray(v));\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filter_functions = (values) => {\n  return values.filter(v => typeof v === 'function');\n};\n\n/**\n  * Filter given list of any python values only for numbers\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst", "passed": 0}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOf = (string, substr) => {\n  return string.indexOf(substr)\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOf = (string, substr) => {\n  return string.lastIndexOf(substr)\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfAny = (string, substr) => {\n  return string.indexOf(substr)\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfAny = (string, substr) => {\n  return string.lastIndexOf(substr)\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfIgnoreCase = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfIgnoreCase = (string, substr) => {\n  return string.toLowerCase().lastIndexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().lastIndexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfAnyIgnoreCase = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfAnyIgnoreCase = (string, substr) => {\n  return string.toLowerCase().lastIndexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().lastIndexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().lastIndexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().lastIndexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfAnyIgnoreCaseAny = (string, substr) => {\n  return string.toLowerCase().lastIndexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst indexOfAnyIgnoreCase = (string, substr) => {\n  return string.toLowerCase().indexOf(substr.toLowerCase())\n}\n\n/**\n  * Return index of given string\n  * @param {string} string\n  * @param {string} substr\n  * @return {number}\n  */\nconst lastIndexOfAny", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > largest) largest = i;\n    }\n  }\n  return largest;\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor_14 = (n) => {\n  let largest =", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseFactorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseFactorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverseReverseReverseReverseReverseFactorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors.reverse();\n};\n\nmodule.exports = {\n  factorize,\n  reverseFactorize,\n  reverse", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const unique_numbers = new Set(numbers);\n  return [...unique_numbers];\n};\n\nexport default remove_duplicates;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase.\n  >>> lowercase('Hello')\n  'hello'\n  */\nconst lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase.\n  >>> uppercase('Hello')\n  'HELLO'\n  */\nconst uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase and uppercase.\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> uncapitalize('Hello')\n  'hello'\n  */\nconst uncapitalize = (string) => {\n  return uppercase(lowercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in lowercase and uppercase.\n  >>> swapcase('Hello')\n  'hELLO'\n  */\nconst swapcase = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase('Hello')\n  'hELLO'\n  */\nconst swapcase_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/*\n  Given a string, return a string with all the characters in uppercase and lowercase.\n  >>> swapcase_all('Hello')\n  'hELLO'\n  */\nconst swapcase_all_all_all_all_all = (string) => {", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, 3, 4, 5])\n  '12345'\n  >>> concatenate([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '1234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '1234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '1234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678901234567890'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '123456789012345678901'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '1234567890123456789012'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678901234567890123'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '123456789012345678901234'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '1234567890123456789012345'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  '12345678901234567890123456'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  '123456789012345678901234567'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  '1234567890123456789012345678'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  '12345678901234567890123456789'\n  >>> concatenate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  '123456789012345678901234567890'\n  >>> concatenate([1, 2", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_2 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_3 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_4 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_5 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_6 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_7 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_8 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_9 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_10 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_11 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_12 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_13 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_14 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_15 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix_16 = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', '", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default below_zero;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 123, 1]\n  */\nconst get_negative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return the number of primes less than or equal to n.\n  >>> count_primes(1)\n  0\n  >>> count_primes(2)\n  1\n  >>> count_primes(3)\n  2\n  >>> count_primes(4)\n  3\n  >>> count_primes(5)\n  4\n  >>> count_primes(6)\n  5\n  >>> count_primes(7)\n  6\n  >>> count_primes(8)\n  7\n  >>> count_primes(9)\n  8\n  >>> count_primes(10)\n  9\n  >>> count_primes(11)\n  10\n  >>> count_primes(12)\n  11\n  >>> count_primes(13)\n  12\n  >>> count_primes(14)\n  13\n  >>> count_primes(15)\n  14\n  >>> count_primes(16)\n  15\n  >>> count_primes(17)\n  16\n  >>> count_primes(18)\n  17\n  >>> count_primes(19)\n  18\n  >>> count_primes(20)\n  19\n  >>> count_primes(21)\n  20\n  >>> count_primes(22)\n  21\n  >>> count_primes(23)\n  22\n  >>> count_primes(24)\n  23\n  >>> count_primes(25)\n  24\n  >>> count_primes(26)\n  25\n  >>> count_primes(27)\n  26\n  >>> count_primes(28)\n  27\n  >>> count_primes(29)\n  28\n  >>> count_primes(30)\n  29\n  >>> count_primes(31)\n  30\n  >>> count_primes(32)\n  31\n  >>> count_primes(33)\n  32\n  >>> count_primes(34)\n  33\n  >>> count_primes(35)\n  34\n  >>> count_primes(36)\n  35\n  >>> count_primes(37)\n  36\n  >>> count_primes(38)\n  37\n  >>> count_primes(39)\n  38\n  >>> count_primes(40)\n  39\n  >>> count_primes(41)\n  40\n  >>> count_primes(42)\n  41\n  >>> count_primes(43)\n  42\n  >>> count_primes(44)\n  43\n  >>> count_primes(45)\n  44\n  >>> count_primes(46)\n  45\n  >>> count_primes(47)\n  46\n  >>> count_primes(48)\n  47\n  >>> count_primes(49)\n  48\n  >>> count_primes(50)\n  49\n  >>> count_primes(51)\n  50\n  >>> count_primes(52)\n  51\n  >>> count_primes(53)\n  52\n  >>> count_primes(54)\n  53\n  >>> count_primes(55)\n  54\n  >>> count_primes(56)\n  55\n  >>> count_primes(57)\n  56\n  >>> count_primes(58)\n  57\n  >>> count_primes(59)\n  58\n  >>> count_primes(60)\n  59\n  >>> count_primes(61)\n  60\n  >>> count_primes(62)\n  61\n  >>> count_primes(63)\n  62\n  >>> count_primes(64)\n  63\n  >>> count_primes(65)\n  64\n  >>> count_primes(66)\n  65\n  >>> count_primes(67)\n  66\n  >>> count_primes(68)\n  67\n  >>> count_primes(69)\n  68\n  >>> count_primes(70)\n  69\n  >>> count_primes(71)\n  70\n  >>> count_primes(72)\n  71\n  >>> count_primes(73)\n  72\n  >>> count_primes(74)\n  73\n  >>> count_primes(75)\n  74\n  >>> count_primes(76)\n  75\n  >>> count_primes(77)\n  76\n  >>> count_primes(78)\n  77\n  >>> count_primes(79)\n  78\n  >>> count_primes(80)\n  79\n  >>> count_primes(81)\n  80\n  >>> count_primes(82)\n  81\n  >>> count_primes(83)\n  82\n  >>> count_primes(84)\n  83\n  >>> count_primes(85)\n  84\n  >>> count_primes(86)\n  85\n  >>> count_primes(87)\n  86\n  >>> count_primes(88)\n  87\n  >>> count_primes(89)\n  88\n  >>> count_primes(90)\n  89\n  >>> count_primes(91)\n  90\n  >>> count_primes(92)\n  91\n  >>> count_primes(93)\n  92\n  >>> count_primes(94)\n  93\n  >>> count_primes(95)\n  94\n  >>> count_primes(96)\n  95\n  >>> count_primes(97)\n  96\n  >>> count_primes(98)\n  97\n  >>> count_primes(99)\n  98\n  >>> count_primes(100)\n  99\n  >>> count_primes", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n % 2!== 0) {\n    throw new Error('list must have even number of coefficients');\n  }\n  const max = Math.max(...xs);\n  const min = Math.min(...xs);\n  if (max === min) {\n    throw new Error('list must have non zero coefficients');\n  }\n  const x = (max - min) / (2 * n);\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x;\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const n = xs.length;\n  if (n % 2!== 0) {\n    throw new Error('list must have even number of coefficients');\n  }\n  const max = Math.max(...xs);\n  const min = Math.min(...xs);\n  if (max === min) {\n    throw new Error('list must have non zero coefficients');\n  }\n  const x = (max - min) / (2 * n);\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x;\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  const n = xs.length;\n  if (n % 2!== 0) {\n    throw new Error('list must have even number of coefficients');\n  }\n  const max = Math.max(...xs);\n  const min = Math.min(...xs);\n  if (max === min) {\n    throw new Error('list must have non zero coefficients');\n  }\n  const x = (max - min) / (2 * n);\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * x * x * x;\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  const n = xs.length;\n  if (n % 2!== 0) {\n    throw new Error('list must have even number of coefficients');\n  }\n  const max = Math.max(...xs);\n  const min = Math.min(...xs);\n  if", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sorted_third = [...l].filter((v, i) => i % 3 === 0).map((v, i) => sorted[i]);\n  return sorted_third;\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n  >>> sort_fifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,", "passed": 0}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique.indexOf(l[i]) === -1) {\n      unique.push(l[i]);\n    }\n  }\n  return unique;\n};\n\nexport default unique;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  const min = Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return the median of the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst median = (l) => {\n  const half = Math.floor(l.length / 2);\n  const median = (l.length % 2 === 0)? (l[half] + l[half - 1]) / 2 : l[half];\n  return median;\n};\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the sum of squares of the list.\n  >>> sum_of_squares([1, 2, 3])\n  9\n  >>> sum_of_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum_of_squares = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i], 2);\n  }\n  return sum;\n};\n\n/*Return the sum of the squares of the list.\n  >>> sum_of_squares([1, 2, 3])\n  9\n  >>> sum_of_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum_of_squares_of_sorted_list = (l) => {\n  const sorted_list = sorted(l);\n  let sum = 0;\n  for (let i = 0; i < sorted_list.length; i++) {\n    sum += Math.pow(sorted_list[i], 2);\n  }\n  return sum;\n};\n\n/*Return the mean of the list.\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.5\n  */\nconst mean = (l) => {\n  const sum = sum_of_squares(l);\n  return sum / l.length;\n};\n\n/*Return the variance of the list.\n  >>> variance([1, 2, 3])\n  0\n  >>> variance([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.5\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const sum_of_squares = sum_of_squares(l);\n  return (sum_of_squares - Math.pow(mean, 2)) / l.length;\n};\n\n/*Return the standard deviation of the list.\n  >>> standard_deviation([1, 2, 3])\n  0\n  >>> standard_deviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.5\n  */\nconst standard_deviation = (l) => {\n  const variance = variance(l);\n  return Math.sqrt(variance);\n};\n\n/*Return the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode = (l) => {\n  const max = max_element(l);\n  const min = min_element(l);\n  const median = median(l);\n  if (max === min) {\n    return max;\n  } else if (max === median) {\n    return max;\n  } else if (min === median) {\n    return min;\n  } else {\n    return max;\n  }\n};\n\n/*Return the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst mode_of_sorted_list = (l) => {\n  const sorted_list = sorted(l);\n  const max = max_element(sorted_list);\n  const min = min_element(sorted_list);\n  const median = median(sorted_list);\n  if (max === min) {\n    return max;\n  } else if (max === median) {\n    return max;\n  } else if (min === median) {\n    return min;\n  } else {\n    return max;\n  }\n};\n\n/*Return the mode of the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  const divisors = [11, 13];\n  const divisor_count = divisors.reduce((acc, d) => {\n    const divisor = n / d;\n    return acc + (divisor === 1? 0 : divisor === 3? 1 : 2);\n  }, 0);\n  return divisor_count;\n};\n\nmodule.exports = fizz_buzz;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_odd = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return a - b;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return b - a;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return a - b;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return b - a;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return a - b;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return b - a;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse_reverse_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse_reverse_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse_reverse_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse_reverse_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse_reverse_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    if (a % 2 === 1 && b % 2 === 0) {\n      return b - a;\n    } else if (a % 2 === 0 && b % 2 === 1) {\n      return a - b;\n    } else {\n      return 0;\n    }\n  });\n  return sorted;\n};\n\nconst sort_even_and_odd_sorted_reverse_reverse_reverse = (l) => {\n  const sorted = l.slice();\n  sorted.sort((a, b) => {\n    ", "passed": 0}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 9), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 9), s.length), Math.min((3 * i + 12), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 12), s.length), Math.min((3 * i + 15), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 15), s.length), Math.min((3 * i + 18), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 18), s.length), Math.min((3 * i + 21), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 21), s.length), Math.min((3 * i + 24), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  while (prime < n) {\n    fib = fib + prime;\n    if (fib % 2 === 0) {\n      prime = fib;\n    }\n  }\n  return fib;\n};\n\nconsole.log(prime_fib(10));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return Math.round(mean + (deviations.reduce((a, b) => a + b) / numbers.length));\n};\n\n/*\n  For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MSD = average | x - x_mean |^2\n  >>> mean_squared_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_squared_deviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.round(mean + (deviations.reduce((a, b) => a + b) / numbers.length));\n};\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  SD = sqrt(average | x - x_mean |^2)\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_deviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.round(Math.sqrt(mean + (deviations.reduce((a, b) => a + b) / numbers.length)));\n};\n\n/*\n  For a given list of input numbers, calculate the variance\n  around the mean of this dataset.\n  Variance is the average squared difference between each element and a\n  centerpoint (mean in this case):\n  VAR = average | x - x_mean |^2\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.round(mean + (deviations.reduce((a, b) => a + b) / numbers.length));\n};\n\n/*\n  For a given list of input numbers, calculate the standard error\n  around the mean of this dataset.\n  Standard Error is the square root of the average squared difference\n  between each element and a centerpoint (mean in this case):\n  SE = sqrt(average | x - x_mean |^2)\n  >>> standard_error([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standard_error = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.round(Math.sqrt(mean + (deviations.reduce((a, b) => a + b) / numbers.length)));\n};\n\n/*\n  For a given list of input numbers, calculate the coefficient of variation\n  around the mean of this dataset.\n  Coefficient of Variation is the ratio of the standard deviation to the\n  mean:\n  CV = SD / MEAN\n  >>> coefficient_of_variation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst coefficient_of_variation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.round(Math.sqrt(mean + (deviations.reduce((a, b) => a + b) / numbers.length)) / mean);\n};\n\n/*\n  For a given list of input numbers, calculate the skewness\n  around the mean of this dataset.\n  Skewness is the ratio of the mean to the standard deviation:\n  SK = MEAN / SD\n  >>> skewness([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.round(mean / Math.sqrt(mean + (deviations.reduce((a, b) => a + b) / numbers.length)));\n};\n\n/*\n  For a given list of input numbers, calculate the kurtosis\n  around the mean of this dataset.\n  Kurtosis is the ratio of the mean to the variance:\n  KU = MEAN / VAR\n  >>> kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers.map((x) => Math.pow(x - mean, 2));\n  return Math.round(mean / Math.pow(mean + (deviations.reduce((a, b) => a + b) / numbers.length), 2));\n};\n\n/*\n  For a given list of input numbers, calculate the excess kurtosis\n  around the mean of this dataset.\n  Excess Kurtosis is the ratio of the mean to the standard deviation:\n  EXK = MEAN / SD\n  >>> excess_kurtosis([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst excess_kurtosis = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = numbers", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const sum = l[i] + l[i + 1] + l[i + 2];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n      set.add(l[i + 2]);\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  triples_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const sum = l[i] + l[i + 1] + l[i + 2];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n      set.add(l[i + 2]);\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  triples_sum_to_zero_sorted_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const sum = l[i] + l[i + 1] + l[i + 2];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n      set.add(l[i + 2]);\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  triples_sum_to_zero_sorted_sorted_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted_sorted_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted_sorted_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted_sorted_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted_sorted_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted_sorted_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_sorted_sorted = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    const sum = l[i] + l[i + 1] + l[i + 2];\n    if (sum === 0) {\n      set.add(l[i]);\n      set.add(l[i + 1]);\n      set.add(l[i + 2]);\n    }\n  }\n  return set.size === 3;\n};\n\n/*\n  triples_sum_to_zero_sorted_sorted_sorted_sorted takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero_sorted_sorted_sorted_sorted([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero_sorted_sorted_sorted_sorted([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero_sorted_sorted_sorted_sorted([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero_sorted_sorted_sorted_sorted([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero_sorted_sorted_sorted_sorted([1])\n  false\n  */\nconst triples_sum_to_zero_sorted_s", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (car_race_collision_helper(i, j)) {\n        collisions++;\n      }\n    }\n  }\n  return collisions;\n};\n\nconst car_race_collision_helper = (i, j) => {\n  let x1 = car_race_cars[i].x;\n  let y1 = car_race_cars[i].y;\n  let x2 = car_race_cars[j].x;\n  let y2 = car_race_cars[j].y;\n  let dx = x2 - x1;\n  let dy = y2 - y1;\n  let dist = Math.sqrt(dx * dx + dy * dy);\n  let angle = Math.atan2(dy, dx);\n  let speed = car_race_cars[i].speed;\n  let speed2 = car_race_cars[j].speed;\n  let speed_diff = speed2 - speed;\n  let speed_diff_squared = speed_diff * speed_diff;\n  let speed_diff_squared_divided_by_two = speed_diff_squared / 2;\n  let speed_diff_squared_divided_by_two_plus_dist = speed_diff_squared_divided_by_two + dist;\n  let speed_diff_squared_divided_by_two_minus_dist = speed_diff_squared_divided_by_two - dist;\n  let speed_diff_squared_divided_by_two_plus_dist_squared = speed_diff_squared_divided_by_two_plus_dist * speed_diff_squared_divided_by_two_plus_dist;\n  let speed_diff_squared_divided_by_two_minus_dist_squared = speed_diff_squared_divided_by_two_minus_dist * speed_diff_squared_divided_by_two_minus_dist;\n  let speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_plus_dist_squared - speed_diff_squared_divided_by_two;\n  let speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_minus_dist_squared - speed_diff_squared_divided_by_two;\n  let speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_plus_dist_squared - speed_diff_squared_divided_by_two_minus_dist_squared;\n  let speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_minus_dist_squared - speed_diff_squared_divided_by_two_plus_dist_squared;\n  let speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared_minus_speed_diff_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_plus_dist_squared - speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared;\n  let speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared_minus_speed_diff_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared - speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared;\n  let speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared_minus_speed_diff_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared - speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared;\n  let speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared_minus_speed_diff_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared - speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared;\n  let speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared_minus_speed_diff_squared_minus_speed_diff_squared = speed_diff_squared_divided_by_two_plus_dist_squared_minus_speed_diff_squared - speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff_squared;\n  let speed_diff_squared_divided_by_two_minus_dist_squared_minus_speed_diff", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [0, 1, 2]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decr_list = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_2 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [0, 1, 2]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decr_list_2 = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_3 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [0, 1, 2]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decr_list_3 = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_4 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [0, 1, 2]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decr_list_4 = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_5 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n/*Return list with elements decremented by 1.\n  >>> decr_list([1, 2, 3])\n  [0, 1, 2]\n  >>> decr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 9, 0, 122]\n  */\nconst decr_list_5 = (l) => {\n  const decr = (x) => x - 1;\n  return l.reduce((acc, x) => [...acc, decr(x)], []);\n};\n\n/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_6 = (l) => {\n  const incr = (x) => x + 1;\n  return l.reduce((acc, x) => [...acc, incr(x)], []);\n};\n\n", "passed": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairs_sum_to_zero_sorted takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_sorted([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_sorted([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_sorted([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_sorted([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_sorted([1])\n  false\n  */\nconst pairs_sum_to_zero_sorted = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairs_sum_to_zero_sorted_sorted takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_sorted_sorted([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_sorted_sorted([1])\n  false\n  */\nconst pairs_sum_to_zero_sorted_sorted = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairs_sum_to_zero_sorted_sorted_sorted takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_sorted_sorted_sorted([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted_sorted([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted_sorted([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted_sorted([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_sorted_sorted_sorted([1])\n  false\n  */\nconst pairs_sum_to_zero_sorted_sorted_sorted = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  pairs_sum_to_zero_sorted_sorted_sorted_sorted takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero_sorted_sorted_sorted_sorted([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted_sorted_sorted([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted_sorted_sorted([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_sorted_sorted_sorted_sorted([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_sorted_sorted_sorted_sorted([1])\n  false\n  */\nconst pairs_sum_to_zero_sorted_sorted_sorted_sorted = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  main takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> main([1, 3, 5, 0])\n  false\n  >>> main([1, 3, -2, 1])\n  false\n  >>> main([1, 2, 3, 7])\n  false\n  >>> main([2, 4, -5, 3, 5, 7])\n  true\n  >>> main([1])\n  false\n  */\nconst main = (l) => {\n  return pairs_sum", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_2 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_3 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_4 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_5 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_6 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_7 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_8 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_9 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_10 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_11 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_12 = (x, base) => {\n  let result = '';\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base_13 = (x, base) => {\n  let result = '';\n  while (x > 0)", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area2 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area3 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area4 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area5 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area6 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area7 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area8 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area9 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area10 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area11 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area12 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area13 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area14 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area15 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area16 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area17 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area18 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area19 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area20 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area21 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area22 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area23 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area24 = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area25 = (a, h) => {\n  ", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  return sorted[half];\n};\n\n/*Return the median of", "passed": 0}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_2 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_3 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_4 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_5 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_6 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_7 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_8 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome_9 = (text) => {\n    let text_length = text.length;\n    let half_length = text_length / 2;\n    let i = 0;\n    let j = text_length - 1;\n    while (i < half_length) {\n        if (text[i]!== text[j]) {\n            return false;", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const a = n % p\n  if (a === 0) return 1\n  return (a * modp(Math.floor(n / p), p)) % p\n}\n\n/*Return the number of digits of n.\n  >>> digits(123)\n  3\n  >>> digits(0)\n  0\n  >>> digits(1)\n  1\n  >>> digits(1.1)\n  2\n  >>> digits(1.1e-2)\n  2\n  >>> digits(1.1e+2)\n  2\n  >>> digits(1.1e+2)\n  3\n  >>> digits(1.1e+2)\n  4\n  >>> digits(1.1e+2)\n  5\n  >>> digits(1.1e+2)\n  6\n  */\nconst digits = n => {\n  const d = n.toString().split('.')\n  return d.length - 1\n}\n\n/*Return the number of decimal places of n.\n  >>> decplaces(123)\n  0\n  >>> decplaces(0)\n  0\n  >>> decplaces(1)\n  1\n  >>> decplaces(1.1)\n  1\n  >>> decplaces(1.1e-2)\n  2\n  >>> decplaces(1.1e+2)\n  2\n  >>> decplaces(1.1e+2)\n  3\n  >>> decplaces(1.1e+2)\n  4\n  >>> decplaces(1.1e+2)\n  5\n  >>> decplaces(1.1e+2)\n  6\n  */\nconst decplaces = n => {\n  const d = n.toString().split('.')\n  return d[1].length\n}\n\n/*Return the number of significant digits of n.\n  >>> sigdigits(123)\n  3\n  >>> sigdigits(0)\n  0\n  >>> sigdigits(1)\n  1\n  >>> sigdigits(1.1)\n  2\n  >>> sigdigits(1.1e-2)\n  2\n  >>> sigdigits(1.1e+2)\n  2\n  >>> sigdigits(1.1e+2)\n  3\n  >>> sigdigits(1.1e+2)\n  4\n  >>> sigdigits(1.1e+2)\n  5\n  >>> sigdigits(1.1e+2)\n  6\n  */\nconst sigdigits = n => {\n  const d = n.toString().split('.')\n  return d[0].length\n}\n\n/*Return the number of significant digits of n.\n  >>> sigdigits(123)\n  3\n  >>> sigdigits(0)\n  0\n  >>> sigdigits(1)\n  1\n  >>> sigdigits(1.1)\n  2\n  >>> sigdigits(1.1e-2)\n  2\n  >>> sigdigits(1.1e+2)\n  2\n  >>> sigdigits(1.1e+2)\n  3\n  >>> sigdigits(1.1e+2)\n  4\n  >>> sigdigits(1.1e+2)\n  5\n  >>> sigdigits(1.1e+2)\n  6\n  */\nconst sigdigits = n => {\n  const d = n.toString().split('.')\n  return d[0].length\n}\n\n/*Return the number of significant digits of n.\n  >>> sigdigits(123)\n  3\n  >>> sigdigits(0)\n  0\n  >>> sigdigits(1)\n  1\n  >>> sigdigits(1.1)\n  2\n  >>> sigdigits(1.1e-2)\n  2\n  >>> sigdigits(1.1e+2)\n  2\n  >>> sigdigits(1.1e+2)\n  3\n  >>> sigdigits(1.1e+2)\n  4\n  >>> sigdigits(1.1e+2)\n  5\n  >>> sigdigits(1.1e+2)\n  6\n  */\nconst sigdigits = n => {\n  const d = n.toString().split('.')\n  return d[1].length\n}\n\n/*Return the number of significant digits of n.\n  >>> sigdigits(123)\n  3\n  >>> sigdigits(0)\n  0\n  >>> sigdigits(1)\n  1\n  >>> sigdigits(1.1)\n  2\n  >>> sigdigits(1.1e-2)\n  2\n  >>> sigdigits(1.1e+2)\n  2\n  >>> sigdigits(1.1e+2)\n  3\n  >>> sigdigits(1.1e+2)\n  4\n  >>> sigdigits(1.1e+2)\n  5\n  >>> sigdigits(1.1e+2)\n  6\n  */\nconst sigdigits = n => {\n  const d = n.toString().split('.')\n  return d[1].length\n}\n\n/*Return the number of significant digits of n.\n  >>> sigdigits(123)\n  3\n  >>> sigdigits(0)\n  0\n  >>> sigdigits(1)\n  1\n  >>> sigdigits(1.1)\n  2\n  >>> sigdigits(1.1e-2)\n  2\n  >>> sigdigits(1.1e+2)\n  2\n  >>> sigdigits(1.1e+2)\n  3\n  >>> sigdigits(1.1e+2)\n  4\n  >>> sigdigits(1.1e+2)\n  5\n  >>> sigdigits(1.1e+2)\n  6\n  */\nconst sigdigits = n => {\n  const d = n.toString().split('.')\n  return d[0].length\n}\n\n/*Return the number of significant digits of n.\n  >>> sigdigits(123)\n  3\n  >>> sigdigits(0)", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!numbers ||!numbers.length) {\n    return []\n  }\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    if (i === 0) {\n      result.push(numbers[i])\n    } else {\n      result.push(delimeter)\n      result.push(numbers[i])\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n  [1 4 2 4 3]\n  >>> intersperse([1, 2, 3], 4,'')\n", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_reverse = (s) => {\n  return decodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse = (s) => {\n  return encodeShift(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse = (s) => {\n  return decode_shift_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse = (s) => {\n  return encode_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse = (s) => {\n  return decode_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse_reverse = (s) => {\n  return encode_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse_reverse = (s) => {\n  return decode_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse_reverse_reverse = (s) => {\n  return encode_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse_reverse_reverse = (s) => {\n  return decode_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encode_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return decode_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return decode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return decode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return decode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return encode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_reverse_reverse_reverse_reverse_reverse = (s) => {\n  return decode_reverse_reverse_reverse_reverse_reverse(s).split(\"\").reverse().join(\"\");\n}\n\n/*\n  ", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = text.replace(/[aeiouAEIOU]/g, '');\n  return result;\n};\n\n/*\n  remove_punctuation is a function that takes string and returns string without punctuation.\n  >>> remove_punctuation('')\n  ''\n  >>> remove_punctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> remove_punctuation('abcdef')\n  'abcdef'\n  >>> remove_punctuation('aaaaa')\n  'aaaaa'\n  >>> remove_punctuation('aaBAA')\n  'aBAA'\n  >>> remove_punctuation('zbcd')\n  'zbcd'\n  */\nconst remove_punctuation = (text) => {\n  const punctuation = [',', '.', '!', '?', ';', ':', '-', '_', '\\'', '\\\"', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re', '\\'ve', '\\'m', '\\'ll', '\\'s', '\\'re',", "passed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  return l.every(x => x <= t);\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n  return l.every(x => x >= t);\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n  >>> between_threshold([1, 2, 4, 10], 100, 200)\n  true\n  >>> between_threshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst between_threshold = (l, t1, t2) => {\n  return below_threshold(l, t1) && above_threshold(l, t2);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_2 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_3 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_4 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_5 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_6 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_7 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_8 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_9 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_10 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_11 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst within_threshold_12 = (l, t) => {\n  return l.every(x => x >= t && x <= t + 1);\n};\n\n/*Return true if all numbers in the list l are within threshold t.\n  >>> within_threshold([1, 2, 4, 10], 100)\n  true\n  >>> within_threshold([1, 20, 4, 10], 5)", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * subtract(2, 3)\n  * //Returns 1\n  * subtract(5, 7)\n  * //Returns 4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * multiply(2, 3)\n  * //Returns 6\n  * multiply(5, 7)\n  * //Returns 35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * divide(2, 3)\n  * //Returns 0.6666666666666666\n  * divide(5, 7)\n  * //Returns 2.5\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Modulo two numbers x and y\n  * @param x\n  * @param y\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * modulo(2, 3)\n  * //Returns 1\n  * modulo(5, 7)\n  * //Returns 4\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  * Return the absolute value of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * abs(2)\n  * //Returns 2\n  * abs(-2)\n  * //Returns 2\n  */\nconst abs = x => {\n  return Math.abs(x);\n};\n\n/*\n  * Return the sign of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * sign(2)\n  * //Returns 1\n  * sign(-2)\n  * //Returns -1\n  */\nconst sign = x => {\n  return x > 0? 1 : x < 0? -1 : 0;\n};\n\n/*\n  * Return the square root of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * sqrt(2)\n  * //Returns 1\n  * sqrt(-2)\n  * //Returns NaN\n  */\nconst sqrt = x => {\n  return Math.sqrt(x);\n};\n\n/*\n  * Return the cube root of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * cubeRoot(2)\n  * //Returns 1\n  * cubeRoot(-2)\n  * //Returns NaN\n  */\nconst cubeRoot = x => {\n  return Math.pow(x, 1 / 3);\n};\n\n/*\n  * Return the natural logarithm of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * log(2)\n  * //Returns 0.693147180559945\n  * log(-2)\n  * //Returns NaN\n  */\nconst log = x => {\n  return Math.log(x);\n};\n\n/*\n  * Return the base 10 logarithm of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * log10(2)\n  * //Returns 0.301029995663981\n  * log10(-2)\n  * //Returns NaN\n  */\nconst log10 = x => {\n  return Math.log(x) / Math.LN10;\n};\n\n/*\n  * Return the hyperbolic cosine of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * cos(2)\n  * //Returns 0.54030230586814\n  * cos(-2)\n  * //Returns NaN\n  */\nconst cos = x => {\n  return Math.cos(x);\n};\n\n/*\n  * Return the hyperbolic sine of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * sin(2)\n  * //Returns 0.8414709848078965\n  * sin(-2)\n  * //Returns NaN\n  */\nconst sin = x => {\n  return Math.sin(x);\n};\n\n/*\n  * Return the hyperbolic tangent of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * tan(2)\n  * //Returns 0.5463024898437905\n  * tan(-2)\n  * //Returns NaN\n  */\nconst tan = x => {\n  return Math.tan(x);\n};\n\n/*\n  * Return the hyperbolic cotangent of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * cot(2)\n  * //Returns 0.5\n  * cot(-2)\n  * //Returns NaN\n  */\nconst cot = x => {\n  return 1 / Math.tan(x);\n};\n\n/*\n  * Return the hyperbolic secant of a number\n  * @param x\n  * @returns {number}\n  * @example\n  * //Add two numbers x and y\n  * sec(2)\n  * //Returns 1.0", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_2('abcd', 'dddddddabc')\n  true\n  >>> same_chars_2('dddddddabc', 'abcd')\n  true\n  >>> same_chars_2('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_2('abcd', 'dddddddabce')\n  false\n  >>> same_chars_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_2 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_3('abcd', 'dddddddabc')\n  true\n  >>> same_chars_3('dddddddabc', 'abcd')\n  true\n  >>> same_chars_3('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_3('abcd', 'dddddddabce')\n  false\n  >>> same_chars_3('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_3 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_4('abcd', 'dddddddabc')\n  true\n  >>> same_chars_4('dddddddabc', 'abcd')\n  true\n  >>> same_chars_4('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_4('abcd', 'dddddddabce')\n  false\n  >>> same_chars_4('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_4 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_5('abcd', 'dddddddabc')\n  true\n  >>> same_chars_5('dddddddabc', 'abcd')\n  true\n  >>> same_chars_5('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_5('abcd', 'dddddddabce')\n  false\n  >>> same_chars_5('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars_5 = (s0, s1) => {\n  const s0_len = s0.length\n  const s1_len = s1.length\n  if (s0_len!== s1_len) return false\n  for (let i = 0; i < s0_len; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two words have the same characters.\n  >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars_6('abcd', 'dddddddabc')\n  true\n  >>> same_chars_6('dddddddabc', 'abcd')\n  true\n  >>> same_chars_6('eabcd', 'dddddddabce')\n  false\n  >>> same_chars_6('abcd', 'dddddddabce')\n  false\n  >>> same_chars_6('eabcdzzzz', 'dddzzzzzzzddddabc')\n  ", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib2(n - 1) + fib2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib3(n - 1) + fib3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib5(n - 1) + fib5(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib6(n - 1) + fib6(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib7(n - 1) + fib7(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib8(n - 1) + fib8(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib9(n - 1) + fib9(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib10(n - 1) + fib10(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib11(n - 1) + fib11(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib12(n - 1) + fib12(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib13(n - 1) + fib13(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib14(n - 1) + fib14(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib15(n - 1) + fib15(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib16(n - 1) + fib16(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10)\n  ", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let stack = brackets.split(\"\").map(char => char === \"<\"? 1 : -1);\n  let bracket_count = 0;\n  while (stack.length > 0) {\n    if (stack.length === 1) {\n      return false;\n    }\n    if (stack.pop() === 1) {\n      bracket_count++;\n    } else {\n      bracket_count--;\n    }\n  }\n  return bracket_count === 0;\n};\n\n/*\n  Given a string, return the number of brackets in the string.\n  A bracket is a pair of brackets, like \"<>\", \"[]\", or \"()\".\n\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<\")\n  1\n  >>> number_of_brackets(\"<>\")\n  2\n  >>> number_of_brackets(\"<[\")\n  2\n  >>> number_of_brackets(\"[<\")\n  1\n  >>> number_of_brackets(\"[<[\")\n  3\n  >>> number_of_brackets(\"[<[<\")\n  4\n  >>> number_of_brackets(\"[<[<[\")\n  5\n  >>> number_of_brackets(\"[<[<[<\")\n  6\n  >>> number_of_brackets(\"[<[<[<[\")\n  7\n  >>> number_of_brackets(\"[<[<[<[<\")\n  8\n  >>> number_of_brackets(\"[<[<[<[<[\")\n  9\n  >>> number_of_brackets(\"[<[<[<[<[<\")\n  10\n  >>> number_of_brackets(\"[<[<[<[<[<[\")\n  11\n  >>> number_of_brackets(\"[<[<[<[<[<[<\")\n  12\n  >>> number_of_brackets(\"[<[<[<[<[<[<[\")\n  13\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[\")\n  14\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[\")\n  15\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<\")\n  16\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[\")\n  17\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<\")\n  18\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<\")\n  19\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  20\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  21\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  22\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  23\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  24\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  25\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  26\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  27\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  28\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  29\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  30\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  31\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  32\n  >>> number_of_brackets(\"[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<[<\")\n  33\n  >>> number_of_brackets", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i - 1] > l[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*Return true if list is sorted.\n  >>> sorted([1, 2, 4, 20])\n  true\n  >>> sorted([1, 20, 4, 10])\n  false\n  >>> sorted([4, 1, 0, -10])\n  true\n  */\nconst sorted = (l) => {\n  return monotonic(l);\n};\n\n/*Return true if list is sorted in ascending order.\n  >>> sortedAsc([1, 2, 4, 20])\n  true\n  >>> sortedAsc([1, 20, 4, 10])\n  false\n  >>> sortedAsc([4, 1, 0, -10])\n  true\n  */\nconst sortedAsc = (l) => {\n  return monotonic(l) && l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in descending order.\n  >>> sortedDesc([1, 2, 4, 20])\n  false\n  >>> sortedDesc([1, 20, 4, 10])\n  true\n  >>> sortedDesc([4, 1, 0, -10])\n  true\n  */\nconst sortedDesc = (l) => {\n  return monotonic(l) && l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in ascending order.\n  >>> sortedAsc([1, 2, 4, 20])\n  true\n  >>> sortedAsc([1, 20, 4, 10])\n  false\n  >>> sortedAsc([4, 1, 0, -10])\n  true\n  */\nconst sortedAscBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in descending order.\n  >>> sortedDesc([1, 2, 4, 20])\n  false\n  >>> sortedDesc([1, 20, 4, 10])\n  true\n  >>> sortedDesc([4, 1, 0, -10])\n  true\n  */\nconst sortedDescBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in ascending order.\n  >>> sortedAscBy([1, 2, 4, 20], (x) => x)\n  true\n  >>> sortedAscBy([1, 20, 4, 10], (x) => x)\n  false\n  >>> sortedAscBy([4, 1, 0, -10], (x) => x)\n  true\n  */\nconst sortedAscBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in descending order.\n  >>> sortedDescBy([1, 2, 4, 20], (x) => x)\n  false\n  >>> sortedDescBy([1, 20, 4, 10], (x) => x)\n  true\n  >>> sortedDescBy([4, 1, 0, -10], (x) => x)\n  true\n  */\nconst sortedDescBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in ascending order.\n  >>> sortedAscBy([1, 2, 4, 20], (x) => x)\n  true\n  >>> sortedAscBy([1, 20, 4, 10], (x) => x)\n  false\n  >>> sortedAscBy([4, 1, 0, -10], (x) => x)\n  true\n  */\nconst sortedAscBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in descending order.\n  >>> sortedDescBy([1, 2, 4, 20], (x) => x)\n  false\n  >>> sortedDescBy([1, 20, 4, 10], (x) => x)\n  true\n  >>> sortedDescBy([4, 1, 0, -10], (x) => x)\n  true\n  */\nconst sortedDescBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in ascending order.\n  >>> sortedAscBy([1, 2, 4, 20], (x) => x)\n  true\n  >>> sortedAscBy([1, 20, 4, 10], (x) => x)\n  false\n  >>> sortedAscBy([4, 1, 0, -10], (x) => x)\n  true\n  */\nconst sortedAscBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x >= 0);\n};\n\n/*Return true if list is sorted in descending order.\n  >>> sortedDescBy([1, 2, 4, 20], (x) => x)\n  false\n  >>> sortedDescBy([1, 20, 4, 10], (x) => x)\n  true\n  >>> sortedDescBy([4, 1, 0, -10], (x) => x)\n  true\n  */\nconst sortedDescBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x <= 0);\n};\n\n/*Return true if list is sorted in ascending order.\n  >>> sortedAscBy([1, 2, 4, 20], (x) => x)\n  true\n  >>> sortedAscBy([1, 20, 4, 10], (x) => x)\n  false\n  >>> sortedAscBy([4, 1, 0, -10], (x) => x)\n  true\n  */\nconst sortedAscBy = (l, f) => {\n  return monotonic(l) && l.every((x) => x >= 0);\n};\n\n/*Return true if", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1_set = new Set(l1);\n  const l2_set = new Set(l2);\n  const intersection = new Set(l1_set.intersection(l2_set));\n  return intersection.values();\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_2 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_3 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_4 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_5 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallest_prime_factor(13195)\n  29\n  >>> smallest_prime_factor(2048)\n  2\n  */\nconst smallest_prime_factor_6 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_7 = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    ", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_stack = [];\n  const paren_stack_index = 0;\n  const paren_stack_length = paren_stack.length;\n  const paren_string_length = paren_string.length;\n  let paren_index = 0;\n  let paren_depth = 0;\n  let paren_depth_index = 0;\n  let paren_depth_length = paren_depth.length;\n  let paren_depth_index_next = 0;\n  let paren_depth_index_next_next = 0;\n  let paren_depth_index_next_next_next = 0;\n  let paren_depth_index_next_next_next_next = 0;\n  let paren_depth_index_next_next_next_next_next = 0;\n  let paren_depth_index_next_next_next_next_next_next = 0;\n  let paren_depth_index_next_next_next_next_next_next_next = 0;\n  let paren_depth_index_next_next_next_next_next_next_next_next = 0;\n  let paren_depth_index_next_next_next_next_next_next_next_next_next = 0;\n  while (paren_index < paren_string_length) {\n    if (paren_string[paren_index] === '(') {\n      paren_stack.push(paren_index);\n      paren_index++;\n      paren_depth.push(paren_depth_index);\n      paren_depth_index++;\n      paren_depth_index_next = paren_depth_index;\n      paren_depth_index_next_next = paren_depth_index_next;\n      paren_depth_index_next_next_next = paren_depth_index_next_next;\n      paren_depth_index_next_next_next_next = paren_depth_index_next_next_next;\n      paren_depth_index_next_next_next_next_next = paren_depth_index_next_next_next_next;\n      paren_depth_index_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next;\n      paren_depth_index_next_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next;\n      paren_depth_index_next_next_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next_next;\n    } else if (paren_string[paren_index] === ')') {\n      paren_index++;\n      paren_depth_index = paren_depth_index_next;\n      paren_depth_index_next = paren_depth_index_next_next;\n      paren_depth_index_next_next = paren_depth_index_next_next_next;\n      paren_depth_index_next_next_next = paren_depth_index_next_next_next_next;\n      paren_depth_index_next_next_next_next = paren_depth_index_next_next_next_next_next;\n      paren_depth_index_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next;\n      paren_depth_index_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next_next;\n      paren_depth_index_next_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next_next_next;\n      paren_depth_index_next_next_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next_next_next_next;\n      if (paren_stack.length === paren_stack_length) {\n        paren_depth_index = paren_depth[paren_stack.pop()];\n        paren_depth_index_next = paren_depth_index_next_next;\n        paren_depth_index_next_next = paren_depth_index_next_next_next;\n        paren_depth_index_next_next_next = paren_depth_index_next_next_next_next;\n        paren_depth_index_next_next_next_next = paren_depth_index_next_next_next_next_next;\n        paren_depth_index_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next;\n        paren_depth_index_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next_next;\n      } else {\n        paren_depth_index = paren_depth[paren_depth.length - 1];\n        paren_depth_index_next = paren_depth_index_next_next;\n        paren_depth_index_next_next = paren_depth_index_next_next_next;\n        paren_depth_index_next_next_next = paren_depth_index_next_next_next_next;\n        paren_depth_index_next_next_next_next = paren_depth_index_next_next_next_next_next;\n        paren_depth_index_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next;\n        paren_depth_index_next_next_next_next_next_next = paren_depth_index_next_next_next_next_next_next_next;\n      }\n    } else {\n      paren_index++;\n    }\n  }\n  return paren_depth;\n};\n\nmodule.exports = parse_nested_parens", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const c = brackets[i]\n    if (c === \"(\" || c === \")\") {\n      stack.push(c)\n    } else if (stack.length === 0) {\n      return false\n    } else {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given a string, return a list of all the words in the string.\n\n  >>> words(\"Hello, world!\")\n  ['Hello', 'world']\n  >>> words(\"Hello, world! How are you?\")\n  ['Hello', 'world', 'How', 'are', 'you?']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you.']\n  >>> words(\"Hello, world! How are you? I'm fine. Thank you.\")\n  ['Hello', 'world', 'How', 'are', 'you?', 'I', ''m', 'fine.', 'Thank', 'you", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const d = new Array(len);\n  for (let i = 0; i < len; i++) {\n    d[i] = xs[i];\n  }\n  for (let i = 1; i < len; i++) {\n    d[i] = xs[i] * (len - i);\n  }\n  return d;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluate = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative2 = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative3 = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative4 = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative5 = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative6 = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative7 = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += d[i] * Math.pow(x, i);\n  }\n  return sum;\n};\n\n/*\n  Given a polynomial, return the value of the polynomial at x.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst evaluateDerivative8 = (xs, x) => {\n  const len = xs.length;\n  const d = derivative(xs);\n  const sum", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1, c = 1, d = 0;\n  while (a < n) {\n    c = a + b;\n    d = b;\n    b = a;\n    a = c;\n  }\n  return d;\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string.\n\n  Example:\n  >>> length(\"abc\")\n  3\n  >>> length(\"abcd\")\n  4\n  >>> length(\"\")\n  0\n  */\nconst length = (s) => {\n  return s.length\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are not vowels.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  >>> vowels_count(\"\")\n  0\n  */\nconst consonants_count = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) === -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are not vowels.\n\n  Example:\n  >>> consonants_count(\"abcde\")\n  2\n  >>> consonants_count(\"ACEDY\")\n  3\n  >>> consonants_count(\"\")\n  0\n  */\nconst consonants_length = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) === -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are not vowels.\n\n  Example:\n  >>> consonants_count(\"abcde\")\n  2\n  >>> consonants_count(\"ACEDY\")\n  3\n  >>> consonants_count(\"\")\n  0\n  */\nconst consonants_length_2 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) === -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are not vowels.\n\n  Example:\n  >>> consonants_count(\"abcde\")\n  2\n  >>> consonants_count(\"ACEDY\")\n  3\n  >>> consonants_count(\"\")\n  0\n  */\nconst consonants_length_3 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) === -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are not vowels.\n\n  Example:\n  >>> consonants_count(\"abcde\")\n  2\n  >>> consonants_count(\"ACEDY\")\n  3\n  >>> consonants_count(\"\")\n  0\n  */\nconst consonants_length_4 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) === -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are not vowels.\n\n  Example:\n  >>> consonants_count(\"abcde\")\n  2\n  >>> consonants_count(\"ACEDY\")\n  3\n  >>> consonants_count(\"\")\n  0\n  */\nconst consonants_length_5 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) === -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the number of\n  characters in the string that are not vowels.\n\n  Example:\n  >>> consonants_count(\"abcde\")\n  2\n  >>> consonants_count(\"ACEDY\")\n  3\n  >>> consonants_count(\"\")\n  0\n  */\nconst consonants_length_6 = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) === -1) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes a string and returns the", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let result = x;\n  if (shift > 0) {\n    for (let i = 0; i < shift; i++) {\n      result = result * 10 + x % 10;\n      x = Math.floor(x / 10);\n    }\n  } else {\n    for (let i = 0; i > shift; i--) {\n      result = result * 10 + x % 10;\n      x = Math.floor(x / 10);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_2 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_3 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_4 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_5 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_6 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_7 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_8 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_9 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_10 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  >>> reverse(\"abc\")\n  \"cba\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(\"a\")\n  \"a\"\n  */\nconst reverse_string_11 = (s) => {\n  let result = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    result += s[i];\n  }\n  return result;\n};\n\n/*\n  Given a string, return the string reversed.\n  ", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(digit_sum(\"\"));\nconsole.log(digit_sum(\"abAB\"));\nconsole.log(digit_sum(\"abcCd\"));\nconsole.log(digit_sum(\"helloE\"));\nconsole.log(digit_sum(\"woArBld\"));\nconsole.log(digit_sum(\"aAaaaXa\"));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let total = 0;\n  let count = 0;\n  let index = 0;\n  while (index < s.length) {\n    if (s[index] === 'a') {\n      total += parseInt(s.slice(index + 1, index + 2));\n      count += 1;\n    } else if (s[index] === 'o') {\n      total += parseInt(s.slice(index + 1, index + 2));\n      count += 1;\n    } else if (s[index] ==='m') {\n      total += parseInt(s.slice(index + 1, index + 2));\n      count += 1;\n    }\n    index += 1;\n  }\n  return n - count - total;\n};\n\nfruit_distribution(\"5 apples and 6 oranges\", 19);\nfruit_distribution(\"0 apples and 1 oranges\", 3);\nfruit_distribution(\"2 apples and 3 oranges\", 100);\nfruit_distribution(\"100 apples and 1 oranges\", 120);\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const min = arr.reduce((a, b) => a < b? a : b, Infinity)\n  const minIdx = arr.findIndex((x) => x === min)\n  if (minIdx === -1) return []\n  return [min, minIdx]\n}\n\nexport default pluck\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nexport default search;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_2 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_3 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_4 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_5 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_6 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_7 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_8 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_9 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_10 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_11 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_12 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_13 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring_14 = (strings, substring) => {\n  return strings.filter(s => s.indexOf(substring) >= 0);\n};\n\n/*\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde',", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return []\n  }\n  const sorted = lst.slice()\n  sorted.sort((a, b) => a - b)\n  const odd = sorted.length % 2\n  const even = sorted.length - odd\n  const min = sorted[0]\n  const max = sorted[odd]\n  const min_index = sorted.indexOf(min)\n  const max_index = sorted.indexOf(max)\n  const min_index_plus_one = min_index + 1\n  const max_index_plus_one = max_index + 1\n  const min_index_plus_two = min_index + 2\n  const max_index_plus_two = max_index + 2\n  const min_index_plus_three = min_index + 3\n  const max_index_plus_three = max_index + 3\n  const min_index_plus_four = min_index + 4\n  const max_index_plus_four = max_index + 4\n  const min_index_plus_five = min_index + 5\n  const max_index_plus_five = max_index + 5\n  const min_index_plus_six = min_index + 6\n  const max_index_plus_six = max_index + 6\n  const min_index_plus_seven = min_index + 7\n  const max_index_plus_seven = max_index + 7\n  const min_index_plus_eight = min_index + 8\n  const max_index_plus_eight = max_index + 8\n  const min_index_plus_nine = min_index + 9\n  const max_index_plus_nine = max_index + 9\n  const min_index_plus_ten = min_index + 10\n  const max_index_plus_ten = max_index + 10\n  const min_index_plus_eleven = min_index + 11\n  const max_index_plus_eleven = max_index + 11\n  const min_index_plus_twelve = min_index + 12\n  const max_index_plus_twelve = max_index + 12\n  const min_index_plus_thirteen = min_index + 13\n  const max_index_plus_thirteen = max_index + 13\n  const min_index_plus_fourteen = min_index + 14\n  const max_index_plus_fourteen = max_index + 14\n  const min_index_plus_fifteen = min_index + 15\n  const max_index_plus_fifteen = max_index + 15\n  const min_index_plus_sixteen = min_index + 16\n  const max_index_plus_sixteen = max_index + 16\n  const min_index_plus_seventeen = min_index + 17\n  const max_index_plus_seventeen = max_index + 17\n  const min_index_plus_eighteen = min_index + 18\n  const max_index_plus_eighteen = max_index + 18\n  const min_index_plus_nineteen = min_index + 19\n  const max_index_plus_nineteen = max_index + 19\n  const min_index_plus_twenty = min_index + 20\n  const max_index_plus_twenty = max_index + 20\n  const min_index_plus_twenty_one = min_index + 21\n  const max_index_plus_twenty_one = max_index + 21\n  const min_index_plus_twenty_two = min_index + 22\n  const max_index_plus_twenty_two = max_index + 22\n  const min_index_plus_twenty_three = min_index + 23\n  const max_index_plus_twenty_three = max_index + 23\n  const min_index_plus_twenty_four = min_index + 24\n  const max_index_plus_twenty_four = max_index + 24\n  const min_index_plus_twenty_five = min_index + 25\n  const max_index_plus_twenty_five = max_index + 25\n  const min_index_plus_twenty_six = min_index + 26\n  const max_index_plus_twenty_six = max_index + 26\n  const min_index_plus_twenty_seven = min_index + 27\n  const max_index_plus_twenty_seven = max_index + 27\n  const min_index_plus_twenty_eight = min_index + 28\n  const max_index_plus_twenty_eight = max_index + 28\n  const min_index_plus_twenty_nine = min_index + 29\n  const max_index_plus_twenty_nine = max_index + 29\n  const min_index_plus_thirty = min_index + 30\n  const max_index_plus_thirty = max_index + 30\n  const min_index_plus_thirty_one = min_index + 31\n  const max_index_plus_thirty_one = max_index + 31\n  const min_index_plus_thirty_two = min_index + 32\n  const max_index_plus_thirty_two = max_index + 32\n  const min_index_plus_thirty_three = min_index + 33\n  const max_index_plus_thirty_three = max_index + 33\n  const min_index_plus_thirty_four = min_index + 34\n  const max_index_plus_thirty_four = max_index + 34\n  const min_index_plus_thirty_five = min_index + 35\n  const max_index_plus_thirty_five = max_index + 35\n  const min_index_plus_thirty_six = min_index + 36\n  const max_index_plus_thirty_six = max_index + 36\n  const min_index_plus_thirty_seven = min_index + 37\n  const max", "passed": 0}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_2 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_3 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_4 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_5 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_6 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_7 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_8 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_9 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_10 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_11 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_12 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_13 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_14 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_15 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_16 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_17 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_18 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_19 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1;\n  }\n  return Math.abs(Math.sqrt(a * b * c) / 2);\n};\n\nconst triangle_area_20 = (a, b, c) => {\n  if (a + b <= c || b + c <= a || c + a <= b) {\n    return -1", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  const is_balanced = q.every(x => x === q.pop() && x === q.pop())\n  return is_balanced && q.every(x => x <= w)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_2 = (q, w) => {\n  const is_balanced = q.every(x => x === q.pop() && x === q.pop())\n  return is_balanced && q.every(x => x <= w)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_3 = (q, w) => {\n  const is_balanced = q.every(x => x === q.pop() && x === q.pop())\n  return is_balanced && q.every(x => x <= w)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_4 = (q, w) => {\n  const is_balanced = q.every(x => x === q.pop() && x === q.pop())\n  return is_balanced && q.every(x => x <= w)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly_5 = (q, w) => {\n  const is_balanced = q.every(x => x === q.pop() && x === q.pop())\n  return is_balanced && q.every(x => x <= w)\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2, 3], 5) ➞ false\n  # 1+2+3 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let i = 0;\n  let j = len - 1;\n  let count = 0;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      min = Math.min(min, j - i);\n      count++;\n    }\n    i++;\n    j--;\n  }\n  return count;\n};\n\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallest_change([1, 2, 3, 2, 1]));\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 2, 1, 2, 3,", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1 === len2) {\n    return lst1\n  }\n  const diff = len1 - len2\n  const lst = []\n  for (let i = 0; i < len1; i++) {\n    if (lst2.indexOf(lst1[i]) === -1) {\n      lst.push(lst1[i])\n    }\n  }\n  return lst\n}\n\nconst lst = [\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi',\n  'hi", "passed": 0}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  const prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const is_prime = (n) => {\n    return prime_numbers.indexOf(n)!== -1;\n  };\n  const is_multiply = (n1, n2) => {\n    return n1 * n2 === a;\n  };\n  const is_prime_multiply = (n1, n2) => {\n    return is_prime(n1) && is_prime(n2) && is_multiply(n1, n2);\n  };\n  return is_prime_multiply(a, a);\n};\n\nconsole.log(is_multiply_prime(30));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  const x_int = x % n;\n  const n_int = n % x;\n  return x_int === 0 && n_int === 0;\n};\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let i = 1;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  const hex_key_array = num.split('');\n  const hex_key_array_length = hex_key_array.length;\n  const prime_number_array = [];\n  const prime_number_array_length = prime_number_array.length;\n  const prime_number_array_index = prime_number_array_length - 1;\n  const prime_number_array_index_plus_one = prime_number_array_index + 1;\n  const prime_number_array_index_plus_two = prime_number_array_index + 2;\n  const prime_number_array_index_plus_three = prime_number_array_index + 3;\n  const prime_number_array_index_plus_four = prime_number_array_index + 4;\n  const prime_number_array_index_plus_five = prime_number_array_index + 5;\n  const prime_number_array_index_plus_six = prime_number_array_index + 6;\n  const prime_number_array_index_plus_seven = prime_number_array_index + 7;\n  const prime_number_array_index_plus_eight = prime_number_array_index + 8;\n  const prime_number_array_index_plus_nine = prime_number_array_index + 9;\n  const prime_number_array_index_plus_ten = prime_number_array_index + 10;\n  const prime_number_array_index_plus_eleven = prime_number_array_index + 11;\n  const prime_number_array_index_plus_twelve = prime_number_array_index + 12;\n  const prime_number_array_index_plus_thirteen = prime_number_array_index + 13;\n  const prime_number_array_index_plus_fourteen = prime_number_array_index + 14;\n  const prime_number_array_index_plus_fifteen = prime_number_array_index + 15;\n  const prime_number_array_index_plus_sixteen = prime_number_array_index + 16;\n  const prime_number_array_index_plus_seventeen = prime_number_array_index + 17;\n  const prime_number_array_index_plus_eighteen = prime_number_array_index + 18;\n  const prime_number_array_index_plus_nineteen = prime_number_array_index + 19;\n  const prime_number_array_index_plus_twenty = prime_number_array_index + 20;\n  const prime_number_array_index_plus_twenty_one = prime_number_array_index + 21;\n  const prime_number_array_index_plus_twenty_two = prime_number_array_index + 22;\n  const prime_number_array_index_plus_twenty_three = prime_number_array_index + 23;\n  const prime_number_array_index_plus_twenty_four = prime_number_array_index + 24;\n  const prime_number_array_index_plus_twenty_five = prime_number_array_index + 25;\n  const prime_number_array_index_plus_twenty_six = prime_number_array_index + 26;\n  const prime_number_array_index_plus_twenty_seven = prime_number_array_index + 27;\n  const prime_number_array_index_plus_twenty_eight = prime_number_array_index + 28;\n  const prime_number_array_index_plus_twenty_nine = prime_number_array_index + 29;\n  const prime_number_array_index_plus_thirty = prime_number_array_index + 30;\n  const prime_number_array_index_plus_thirty_one = prime_number_array_index + 31;\n  const prime_number_array_index_plus_thirty_two = prime_number_array_index + 32;\n  const prime_number_array_index_plus_thirty_three = prime_number_array_index + 33;\n  const prime_number_array_index_plus_thirty_four = prime_number_array_index + 34;\n  const prime_number_array_index_plus_thirty_five = prime_number_array_index + 35;\n  const prime_number_array_index_plus_thirty_six = prime_number_array_index + 36;\n  const prime_number_array_index_plus_thirty_seven = prime_number_array_index + 37;\n  const prime_number_array_index_plus_thirty_eight = prime_number_array_index + 38;\n  const prime_number_array_index_plus_thirty_nine = prime_number_array_index + 39;\n  const prime_number_array_index_plus_forty = prime_number_array_index + 40;\n  const prime_number_array_index_plus_forty_one = prime_number_array_index + 41;\n  const prime_number_array_index_plus_forty_two = prime_number_array_index + 42;\n  const prime_number_array_index_plus_forty_three = prime_number_array_index +", "passed": 0}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let binary_digit = 0;\n  let decimal_digit = 0;\n  let decimal_digit_count = 0;\n  let decimal_digit_max = Math.pow(2, decimal_digit_count);\n  let decimal_digit_max_minus_one = decimal_digit_max - 1;\n\n  while (decimal_digit_count < decimal.length) {\n    decimal_digit = decimal.charCodeAt(decimal_digit_count);\n    decimal_digit_count++;\n\n    if (decimal_digit < decimal_digit_max) {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n\n  binary += 'db';\n\n  return binary;\n};\n\nmodule.exports = decimal_to_binary;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n};\n\nexport default sum_product;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    const c = s[i]\n    if (arr.indexOf(c)!== -1) return false\n    arr.push(c)\n  }\n  return true\n}\n\nconsole.log(is_happy('a'))\nconsole.log(is_happy('aa'))\nconsole.log(is_happy('abcd'))\nconsole.log(is_happy('aabb'))\nconsole.log(is_happy('adb'))\nconsole.log(is_happy('xyy'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const grades_sorted = grades.sort((a, b) => a - b);\n  const grades_sorted_length = grades_sorted.length;\n  const grades_sorted_index = grades_sorted.map((grade, index) => {\n    if (index === grades_sorted_length - 1) {\n      return grade;\n    }\n    return grade + (grades_sorted[index + 1] - grade) / (grades_sorted_length - index - 1);\n  });\n  return grades_sorted_index.map(grade => grade.toUpperCase());\n};\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  const prime_length = (string) => {\n    const prime_length = (string) => {\n      const prime_length = (string) => {\n        const prime_length = (string) => {\n          const prime_length = (string) => {\n            const prime_length = (string) => {\n              const prime_length = (string) => {\n                const prime_length = (string) => {\n                  const prime_length = (string) => {\n                    const prime_length = (string) => {\n                      const prime_length = (string) => {\n                        const prime_length = (string) => {\n                          const prime_length = (string) => {\n                            const prime_length = (string) => {\n                              const prime_length = (string) => {\n                                const prime_length = (string) => {\n                                  const prime_length = (string) => {\n                                    const prime_length = (string) => {\n                                      const prime_length = (string) => {\n                                        const prime_length = (string) => {\n                                          const prime_length = (string) => {\n                                            const prime_length = (string) => {\n                                              const prime_length = (string) => {\n                                                const prime_length = (string) => {\n                                                  const prime_length = (string) => {\n                                                    const prime_length = (string) => {\n                                                      const prime_length = (string) => {\n                                                        const prime_length = (string) => {\n                                                          const prime_length = (string) => {\n                                                           const prime_length = (string) => {\n                                                            const prime_length = (string) => {\n                                                              const prime_length = (string) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return prime_length(string)\n}\n\nconst prime_length = (string) => {\n  const prime_length = (string) => {\n    const prime_length = (string) => {\n      const prime_length = (string) => {\n        const prime_length = (string) => {\n          const prime_length = (string) => {\n            const prime_length = (string) => {\n              const prime_length = (string) => {\n                const prime_length = (string) => {\n                  const prime_length = (string) => {\n                    const prime_length = (string) => {\n                      const prime_length = (string) => {\n                        const prime_length = (string) => {\n                          const prime_length = (string) => {\n                            const prime_length = (string) => {\n                              const prime_length = (string) => {\n                                const prime_length = (string) => {\n                                  const prime_length = (string) => {\n                                    const prime_length = (string) => {\n                                      const prime_length = (string) => {\n                                        const prime_length = (string) => {\n                                          const prime_length = (string) => {\n                                            const prime_length = (string) => {\n                                              const prime_length = (string) => {\n                                                const prime_length = (string) => {\n                                                  const prime_length = (string) => {\n                                                    const prime_length = (string) => {\n                                                      const prime_length = (string) => {\n                                                        const prime_length = (string) => {\n                                                          const prime_length = (string) => {\n                                                           const prime_length = (string) => {\n                                                            const prime_length = (string) => {\n                                                              const prime_length = (string) => {\n                                                              }\n                                                            }\n                                                           }\n                                                          }\n                                                        }\n                                                      }\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return prime_length(string)\n}\n\nconst prime_length = (string) => {\n  const prime_length = (string) => {\n    const prime_length = (string) => {\n      const prime_length = (string) => {\n        const prime_length = (string) => {\n          const prime_length = (string) => {\n            const prime_length = (string) => {\n              const prime_length = (string) => {\n                const prime_length = (string) => {\n                  const prime_length = (string) => {\n                    const prime_length = (string) => {\n                      const prime_length = (string", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let num = i;\n    while (num > 0) {\n      if (num % 10 === 1) {\n        count++;\n      }\n      num = num / 10;\n    }\n  }\n  return count;\n};\n\nconsole.log(starts_one_ends(10));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = N / 2;\n  }\n  return sum;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const words = s.split(' ');\n  const new_words = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const new_word = '';\n    for (let j = 0; j < word.length; j++) {\n      const char = word[j];\n      const ascii = char.charCodeAt(0);\n      const next_char = word[j + 1];\n      const next_ascii = next_char.charCodeAt(0);\n      const next_next_char = word[j + 2];\n      const next_next_ascii = next_next_char.charCodeAt(0);\n      const next_next_next_char = word[j + 3];\n      const next_next_next_ascii = next_next_next_char.charCodeAt(0);\n      const next_next_next_next_char = word[j + 4];\n      const next_next_next_next_ascii = next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_char = word[j + 5];\n      const next_next_next_next_next_ascii = next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_char = word[j + 6];\n      const next_next_next_next_next_next_ascii = next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_char = word[j + 7];\n      const next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_char = word[j + 8];\n      const next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_char = word[j + 9];\n      const next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_char = word[j + 10];\n      const next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_next_char = word[j + 11];\n      const next_next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_next_next_char = word[j + 12];\n      const next_next_next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_char = word[j + 13];\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_char = word[j + 14];\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_char = word[j + 15];\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_char = word[j + 16];\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_next_next_next_next_next_next_next_next_next_char.charCodeAt(0);\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_char = word[j + 17];\n      const next_next_next_next_next_next_next_next_next_next_next_next_next_next_ascii = next_next_next_next_", "passed": 0}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_2 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_3 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_4 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_5 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_6 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_7 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_8 = (lst, x) => {\n  const rows = lst.length\n  const cols = lst[0].length\n  const result = []\n  for (let i = 0; i < rows; i++) {\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      row.push(lst[i][j])\n    }\n    row.sort((a, b) => a - b)\n    row.sort((a, b) => b - a, (a, b) => a - b)\n    result.push(row)\n  }\n  return result\n}\n\nconst get_row_9 = (lst, x) => {\n  const rows = lst.length\n  const cols = l", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  const sorted_array = array.slice(0);\n  const sorted_array_length = sorted_array.length;\n  let i = 0;\n  let j = sorted_array_length - 1;\n  let sum = 0;\n  while (i < j) {\n    sum = sorted_array[i] + sorted_array[j];\n    if (sum % 2 === 1) {\n      sorted_array[i] = sorted_array[j];\n      sorted_array[j] = array[i];\n      j--;\n    } else {\n      sorted_array[j] = sorted_array[i];\n      sorted_array[i] = array[j];\n      i++;\n    }\n  }\n  return sorted_array;\n};\n\nexport default sort_array;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  const alphabetLength = alphabet.length;\n  const encrypted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let letter = 0;\n  let encryptedLetter = 0;\n  let encryptedLength = 0;\n  let encryptedString = '';\n  let encryptedStringLength = 0;\n  let encryptedStringLengthLength = 0;\n  let encryptedStringLengthLength = 0;\n  let encryptedStringLengthLengthLength = 0;\n  let encryptedStringLengthLengthLength = 0;\n  let encryptedStringLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength = 0;\n  let encryptedStringLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLengthLength length of the given string.\n\t * @param {string} str\n\t * @returns {string}\n\t */\n\tfunction encrypt(str) {\n\t\tvar result = \"\";\n\t\tvar i = 0;\n\t\tvar j = 0;\n\t\tvar k = 0;\n\t\tvar l = 0;\n\t\tvar m = 0;\n\t\tvar n = 0;\n\t\tvar o = 0;\n\t\tvar p = 0;\n\t\tvar q = 0;\n\t\tvar r = 0;\n", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const max_element = (numbers, index) => {\n    if (index === 0) {\n      return numbers[0];\n    }\n    if (index === numbers.length - 1) {\n      return numbers[numbers.length - 1];\n    }\n    return Math.max(numbers[index], max_element(numbers, index + 1));\n  };\n  return numbers.map(max_element);\n};\n\nmodule.exports = rolling_max;\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  let smallest = null;\n  let smallest_index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (smallest === null || lst[i] < smallest) {\n      smallest = lst[i];\n      smallest_index = i;\n    }\n  }\n  return smallest_index === -1? null : lst[smallest_index + 1];\n};\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]));\nconsole.log(next_smallest([5, 1, 4, 3, 2]));\nconsole.log(next_smallest([]));\nconsole.log(next_smallest([1, 1]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  const words = S.split('.').filter(w => w.length > 0)\n  const count = words.reduce((acc, w) => {\n    if (w.startsWith('I')) {\n      acc.boredom++\n    }\n    return acc\n  }, { boredom: 0 })\n  return count.boredom\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentence = (S) => {\n  const words = S.split('.').filter(w => w.length > 0)\n  const count = words.reduce((acc, w) => {\n    if (w.startsWith('I')) {\n      acc.bored++\n    }\n    return acc\n  }, { boredom: 0, bored: 0 })\n  return count.bored\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n \n  For example:\n  >>> is_bored_sentence(\"Hello world\")\n  0\n  >>> is_bored_sentence(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentence_2 = (S) => {\n  const words = S.split('.').filter(w => w.length > 0)\n  const count = words.reduce((acc, w) => {\n    if (w.startsWith('I')) {\n      acc.bored++\n    }\n    return acc\n  }, { boredom: 0, bored: 0 })\n  return count.bored\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n \n  For example:\n  >>> is_bored_sentence(\"Hello world\")\n  0\n  >>> is_bored_sentence(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentence_3 = (S) => {\n  const words = S.split('.').filter(w => w.length > 0)\n  const count = words.reduce((acc, w) => {\n    if (w.startsWith('I')) {\n      acc.bored++\n    }\n    return acc\n  }, { boredom: 0, bored: 0 })\n  return count.bored\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n \n  For example:\n  >>> is_bored_sentence(\"Hello world\")\n  0\n  >>> is_bored_sentence(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentence_4 = (S) => {\n  const words = S.split('.').filter(w => w.length > 0)\n  const count = words.reduce((acc, w) => {\n    if (w.startsWith('I')) {\n      acc.bored++\n    }\n    return acc\n  }, { boredom: 0, bored: 0 })\n  return count.bored\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n \n  For example:\n  >>> is_bored_sentence(\"Hello world\")\n  0\n  >>> is_bored_sentence(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentence_5 = (S) => {\n  const words = S.split('.').filter(w => w.length > 0)\n  const count = words.reduce((acc, w) => {\n    if (w.startsWith('I')) {\n      acc.bored++\n    }\n    return acc\n  }, { boredom: 0, bored: 0 })\n  return count.bored\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n \n  For example:\n  >>> is_bored_sentence(\"Hello world\")\n  0\n  >>> is_bored_sentence(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored_sentence_6 = (S) => {\n  const words = S.split('.').filter(w => w.length > 0)\n  const count = words.reduce((acc, w) => {\n    if (w.startsWith('I')) {\n      acc.bored++\n    }\n    return acc\n  }, { boredom: 0, bored: 0 })\n  return count.bored\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boring sentences. A sentence is a string of words, delimited by '.',\n  '?' or '!'.\n \n  For example:\n  >>> is_bored_sentence(\"Hello world\")\n  0\n  >>> is_bored_sentence(\"The sky is", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return (x + y === z) && (x + y === x + y) && (x + y === z + y) && (x + y === x + y + z) && (x + y === x + y + x) && (x + y === x + y + z + x) && (x + y === x + y + x + z) && (x + y === x + y + x + z + x) && (x + y === x + y + x + z + x + z) && (x + y === x + y + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z) && (x + y === x + y + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z) && (x + y === x + y + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x) && (x + y === x + y + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x + z + x +", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const messageLength = message.length;\n  const encodedMessage = [];\n  for (let i = 0; i < messageLength; i++) {\n    const letter = message[i];\n    const nextLetter = message[i + 1];\n    const nextNextLetter = message[i + 2];\n    const nextNextNextLetter = message[i + 3];\n    const nextNextNextNextLetter = message[i + 4];\n    const nextNextNextNextNextLetter = message[i + 5];\n    const nextNextNextNextNextLetter = message[i + 6];\n    const nextNextNextNextNextNextLetter = message[i + 7];\n    const nextNextNextNextNextNextLetter = message[i + 8];\n    const nextNextNextNextNextNextLetter = message[i + 9];\n    const nextNextNextNextNextNextLetter = message[i + 10];\n    const nextNextNextNextNextNextLetter = message[i + 11];\n    const nextNextNextNextNextNextLetter = message[i + 12];\n    const nextNextNextNextNextNextLetter = message[i + 13];\n    const nextNextNextNextNextNextLetter = message[i + 14];\n    const nextNextNextNextNextNextLetter = message[i + 15];\n    const nextNextNextNextNextNextLetter = message[i + 16];\n    const nextNextNextNextNextNextLetter = message[i + 17];\n    const nextNextNextNextNextNextLetter = message[i + 18];\n    const nextNextNextNextNextNextLetter = message[i + 19];\n    const nextNextNextNextNextNextLetter = message[i + 20];\n    const nextNextNextNextNextNextLetter = message[i + 21];\n    const nextNextNextNextNextNextLetter = message[i + 22];\n    const nextNextNextNextNextNextLetter = message[i + 23];\n    const nextNextNextNextNextNextLetter = message[i + 24];\n    const nextNextNextNextNextNextLetter = message[i + 25];\n    const nextNextNextNextNextNextLetter = message[i + 26];\n    const nextNextNextNextNextNextLetter = message[i + 27];\n    const nextNextNextNextNextNextLetter = message[i + 28];\n    const nextNextNextNextNextNextLetter = message[i + 29];\n    const nextNextNextNextNextNextLetter = message[i + 30];\n    const nextNextNextNextNextNextLetter = message[i + 31];\n    const nextNextNextNextNextNextLetter = message[i + 32];\n    const nextNextNextNextNextNextLetter = message[i + 33];\n    const nextNextNextNextNextNextLetter = message[i + 34];\n    const nextNextNextNextNextNextLetter = message[i + 35];\n    const nextNextNextNextNextNextLetter = message[i + 36];\n    const nextNextNextNextNextNextLetter = message[i + 37];\n    const nextNextNextNextNextNextLetter = message[i + 38];\n    const nextNextNextNextNextNextLetter = message[i + 39];\n    const nextNextNextNextNextNextLetter = message[i + 40];\n    const nextNextNextNextNextNextLetter = message[i + 41];\n    const nextNextNextNextNextNextLetter = message[i + 42];\n    const nextNextNextNextNextNextLetter = message[i + 43];\n    const nextNextNextNextNextNextLetter = message[i + 44];\n    const nextNextNextNextNextNextLetter = message[i + 45];\n    const nextNextNextNextNextNextLetter = message[i + 46];\n    const nextNextNextNextNextNextLetter = message[i + 47];\n    const nextNextNextNextNextNextLetter = message[i + 48];\n    const nextNextNextNextNextNextLetter = message[i + 49];\n    const nextNextNextNextNextNextLetter = message[i + 50];\n    const nextNextNextNextNextNextLetter = message[i + 51];\n    const nextNextNextNextNextNextLetter = message[i + 52];\n    const nextNextNextNextNextNextLetter = message[i + 53];\n    const nextNextNextNextNextNextLetter = message[i + 54];\n    const nextNextNextNextNextNextLetter = message[i + 55];\n    const nextNextNextNextNextNextLetter = message[i + 56];\n    const nextNextNextNextNextNextLetter = message[i + 57];\n    const nextNextNextNextNextNextLetter = message[i + 58];\n    const nextNextNextNextNextNextLetter = message[i + 59];\n    const nextNextNextNextNextNextLetter = message[i + 60];\n    const nextNextNextNextNextNextLetter = message[i + 61];\n    const nextNextNextNextNextNextLetter = message[i + 62];\n    const nextNextNextNextNextNextLetter = message[i + 63];\n    const nextNextNextNextNextNextLetter = message[i + 64];\n    const nextNextNextNextNextNextLetter = message[i + 65];\n    const nextNextNextNextNextNextLetter = message[i + 66];\n    const nextNextNextNextNextNextLetter = message[i + 67];\n    const nextNextNextNextNextNextLetter = message[i + 68];\n    const nextNextNextNextNextNextLetter = message[i + 69];\n    const nextNextNextNextNextNextLetter = message[i + 70];\n    const nextNextNextNextNextNextLetter = message[i + 71];\n    const nextNextNextNextNextNextLetter = message[i + 72];\n    const nextNextNextNextNextNextLetter = message[i + 73];\n    const nextNextNextNextNextNextLetter = message[i + 74];\n    const nextNextNextNextNextNextLetter = message[i + 75];\n    const nextNextNextNextNextNextLetter = message[i + 76];\n    const nextNextNextNextNextNextLetter = message[i + 77];\n    const nextNextNextNextNextNextLetter = message[i + 78];\n    const nextNextNextNextNextNextLetter = message[i + 79];\n    const nextNextNextNextNextNextLetter = message[i + 80];\n    const nextNextNextNextNextNextLetter = message[i + 81];\n    const nextNextNextNextNextNextLetter", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const prime = (n) => {\n    let i = 2;\n    while (i < n) {\n      if (n % i === 0) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  };\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (prime(lst[i])) {\n      max = Math.max(max, lst[i]);\n    }\n  }\n  let sum = 0;\n  for (let i = max; i > 0; i--) {\n    sum += lst.indexOf(i);\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_2 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_3 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_4 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_5 = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) return false\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof dict[keys[i]]!=='string') return false\n    if (keys[i].toUpperCase()!== keys[i].toLowerCase()) return false\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(count_up_to(5))\nconsole.log(count_up_to(11))\nconsole.log(count_up_to(0))\nconsole.log(count_up_to(20))\nconsole.log(count_up_to(1))\nconsole.log(count_up_to(18))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const aDigits = a.toString().split('').reverse().join('');\n  const bDigits = b.toString().split('').reverse().join('');\n  const aDigitsLength = aDigits.length;\n  const bDigitsLength = bDigits.length;\n  const product = [];\n  for (let i = 0; i < aDigitsLength; i++) {\n    for (let j = 0; j < bDigitsLength; j++) {\n      product.push(aDigits.charAt(i) * bDigits.charAt(j));\n    }\n  }\n  return product.reverse().join('');\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 1\n  count_lower('abcdefg') returns 0\n  count_lower('dBBE') returns 1\n  */\nconst count_lower = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i] === s[i + 1].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  count_vowels('aBCdEf') returns 3\n  count_vowels('abcdefg') returns 0\n  count_vowels('dBBE') returns 2\n  */\nconst count_vowels = (s) => {\n  return count_upper(s) + count_lower(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_upper = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_lower = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_upper_lower = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_lower_upper = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_lower_lower = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_upper_upper = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns 1\n  */\nconst count_consonants_vowels_upper_lower_upper = (s) => {\n  return count_upper(s) + count_lower(s) - count_vowels(s);\n};\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  count_consonants('aBCdEf') returns 2\n  count_consonants('abcdefg') returns 1\n  count_consonants('dBBE') returns", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const num = parseFloat(value);\n  const int_num = Math.floor(num);\n  const frac_num = num - int_num;\n  const frac_num_abs = Math.abs(frac_num);\n  const frac_num_abs_int = Math.floor(frac_num_abs);\n  const frac_num_abs_int_int = Math.floor(frac_num_abs_int);\n  const int_num_int = Math.floor(int_num);\n  const int_num_int_int = Math.floor(int_num_int);\n  if (frac_num_abs_int_int === int_num_int_int) {\n    return int_num_int;\n  } else if (frac_num_abs_int_int > int_num_int_int) {\n    return int_num_int + 1;\n  } else {\n    return int_num_int - 1;\n  }\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer_2 = (value) => {\n  const num = parseFloat(value);\n  const int_num = Math.floor(num);\n  const frac_num = num - int_num;\n  const frac_num_abs = Math.abs(frac_num);\n  const frac_num_abs_int = Math.floor(frac_num_abs);\n  const frac_num_abs_int_int = Math.floor(frac_num_abs_int);\n  const int_num_int = Math.floor(int_num);\n  const int_num_int_int = Math.floor(int_num_int);\n  if (frac_num_abs_int_int === int_num_int_int) {\n    return int_num_int;\n  } else if (frac_num_abs_int_int > int_num_int_int) {\n    return int_num_int + 1;\n  } else {\n    return int_num_int - 1;\n  }\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer_3 = (value) => {\n  const num = parseFloat(value);\n  const int_num = Math.floor(num);\n  const frac_num = num - int_num;\n  const frac_num_abs = Math.abs(frac_num);\n  const frac_num_abs_int = Math.floor(frac_num_abs);\n  const frac_num_abs_int_int = Math.floor(frac_num_abs_int);\n  const int_num_int = Math.floor(int_num);\n  const int_num_int_int = Math.floor(int_num_int);\n  if (frac_num_abs_int_int === int_num_int_int) {\n    return int_num_int;\n  } else if (frac_num_abs_int_int > int_num_int_int) {\n    return int_num_int + 1;\n  } else {\n    return int_num_int - 1;\n  }\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer_4 = (value) => {\n  const num = parseFloat(value);\n  const int_num = Math.floor(num);\n  const frac_num = num - int_num;\n  const frac_num_abs = Math.abs(frac_num);\n  const frac_num_abs_int = Math.floor(frac_num_abs);\n  const frac_num_abs_int_int = Math.floor(frac_num_abs_int);\n  const int_num_int = Math.floor(int_num);\n  const int_num_int_int = Math.floor(int_num_int);\n  if (frac_num_abs_int_int === int_num_int_int) {\n    return int_num_int;\n  } else if (frac_num_abs_int", "passed": 0}
