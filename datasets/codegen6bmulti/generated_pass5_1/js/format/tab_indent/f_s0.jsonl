{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i != j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tCheck if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements2 = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tCheck if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements3 = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tCheck if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements4 = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tCheck if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements5 = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tCheck if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements6 = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tCheck if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements7 = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tCheck if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0,", "passed": 0}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t\tif (current_depth == 0) {\n\t\t\t\tresult.push(current_string.join(''));\n\t\t\t\tcurrent_string = [];\n\t\t\t}\n\t\t} else {\n\t\t\tcurrent_string.push(c);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups2 = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t\tif (current_depth == 0) {\n\t\t\t\tresult.push(current_string.join(''));\n\t\t\t\tcurrent_string = [];\n\t\t\t}\n\t\t} else {\n\t\t\tcurrent_string.push(c);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups3 = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t\tif (current_depth == 0) {\n\t\t\t\tresult.push(current_string.join(''));\n\t\t\t\tcurrent_string = [];\n\t\t\t}\n\t\t} else {\n\t\t\tcurrent_string.push(c);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups4 = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t\tif (current_depth == 0) {\n\t\t\t\tresult.push(current_string.join(''));\n\t\t\t\tcurrent_string = [];\n\t\t\t}\n\t\t} else {\n\t\t\tcurrent_string.push(c);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups5 = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t\tif (current_depth == 0) {\n\t\t\t\tresult.push(current_string.join(''));\n\t\t\t\tcurrent_string = [];\n\t\t\t}\n\t\t} else {\n\t\t\tcurrent_string.push(c);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups6 = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {", "passed": 0}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n\treturn string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'catac'\n\t>>> makePalindrome('cata')\n\t'catac'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n\treturn string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'catac'\n\t>>> makePalindrome('cata')\n\t'catac'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n\tvar beginning_of_prefix = 0;\n\tvar longest_suffix = 0;\n\tvar longest_prefix = 0;\n\tvar suffix = '';\n\tvar prefix = '';\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (isPalindrome(string.substring(i, i + 1))) {\n\t\t\tif (longest_suffix < i) {\n\t\t\t\tlongest_suffix = i;\n\t\t\t\tsuffix = string.substring(i, i + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (longest_prefix < i) {\n\t\t\t\tlongest_prefix = i;\n\t\t\t\tprefix = string.substring(i, i + 1);\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn prefix + string.substring(0, longest_prefix) + suffix;\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'cat'\n\t>>> makePalindrome('cata')\n\t'cata'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n\tvar beginning_of_prefix = 0;\n\tvar longest_suffix = 0;\n\tvar longest_prefix = 0;\n\tvar suffix = '';\n\tvar prefix = '';\n\tvar i = string.length - 1;\n\twhile (i >= 0) {\n\t\tif (isPalindrome(string.substring(i, i + 1))) {\n\t\t\tif (longest_prefix < i) {\n\t\t\t\tlongest_prefix = i;\n\t\t\t\tprefix = string.substring(i, i + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (longest_suffix < i) {\n\t\t\t\tlongest_suffix = i;\n\t\t\t\tsuffix = string.substring(i, i + 1);\n\t\t\t}\n\t\t}\n\t\ti--;\n\t}\n\treturn string.substring(0, longest_prefix) + suffix + string.substring(longest_prefix + 1, string.length);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the beginning of the string reverse of a string prefix that comes after the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'cat'\n\t>>> makePalindrome('cata')\n\t'cata'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n\tvar beginning_of_prefix = 0;\n\tvar longest_suffix = 0;\n\tvar longest_prefix = 0;\n\tvar suffix = '';\n\tvar prefix = '';\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (isPalindrome(string.substring(i, i + 1))) {\n\t\t\tif (longest_prefix < i) {\n\t\t\t\tlongest_prefix = i;\n\t\t\t\tprefix = string.substring(i, i + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (longest_suffix < i) {\n\t\t\t\tlongest_suffix = i;\n\t\t\t\tsuffix = string.substring(i, i + 1);\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn string.substring(longest_prefix + 1, string.length) + prefix + string.substring(0, longest_prefix);\n}\n\n/* Find the longest palindrome that contains a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the beginning of the string reverse of a string prefix that comes after the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'cat'\n\t>>> makePalindrome('cata')\n\t'cata'\n\t>>> makePalindrome('cata')\n\t'cata'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n\tvar beginning_of_prefix = 0;\n\tvar longest_suffix = 0;\n\tvar longest_prefix = 0;\n\tvar suffix = '';\n\tvar prefix = '';\n\tvar i = 0;\n\twhile (i < string.length) {\n\t\tif (isPalindrome(string.substring(i, i + 1))) {\n\t\t\tif (longest_prefix < i) {\n\t\t\t\tlongest_prefix = i;\n\t\t\t\tprefix = string.substring(i, i + 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (longest_suffix < i) {\n\t\t\t\tlongest_suffix = i;\n\t\t\t\tsuffix = string.substring(i, i + 1);\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn string.substring(0, longest_prefix) + suffix + string.substring(longest_prefix + 1, string.length);\n}\n\n/* Find the longest palindrome that contains a supplied string.\n\tAl", "passed": 0}
{"task_id": "JavaScript/100", "prompt": "/*\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t\t- the next odd number if n is odd.\n\t\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> makeAPile(3)\n\t[3, 5, 7]\n\t*/\nconst makeAPile = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t\t- the next odd number if n is odd.\n\t\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> makeAPile(3)\n\t[3, 5, 7]\n\t*/\nconst makeAPile = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\n/*\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t\t- the next odd number if n is odd.\n\t\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> makeAPile(3)\n\t[3, 5, 7]\n\t*/\nconst makeAPile2 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile3 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile4 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile5 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile6 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile7 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile8 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile9 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile10 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile11 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile12 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile13 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile14 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile15 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile16 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile17 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile18 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile19 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile20 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile21 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile22 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconst makeAPile23 = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n", "passed": 0}
{"task_id": "JavaScript/101", "prompt": "/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t} else {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (k == 0) {\n\t\tp.push(t);\n\t}\n\treturn p;\n}\n\n/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t} else {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (k == 0) {\n\t\tp.push(t);\n\t}\n\treturn p;\n}\n\n/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t} else {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (k == 0) {\n\t\tp.push(t);\n\t}\n\treturn p;\n}\n\n/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t} else {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (k == 0) {\n\t\tp.push(t);\n\t}\n\treturn p;\n}\n\n/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t} else {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (k == 0) {\n\t\tp.push(t);\n\t}\n\treturn p;\n}\n\n/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t} else {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (k == 0) {\n\t\tp.push(t);", "passed": 0}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 14\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNum = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 14\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNum = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2 == 0) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest odd number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 11\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNumOdd = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2!= 0) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest even number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNumEven = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2 == 0) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMin = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i < y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMax = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i > y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMinMax = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i < y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMinMaxOdd = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2!= 0 && i < y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMaxMin = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i > y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMaxMinOdd = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2!= 0 && i > y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMaxMinOddMax = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2!= 0 && i > y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers x and y and returns the\n\tsmallest number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 12\n\tchooseNum(13, 12) = 13\n\t*/\nconst chooseNumMaxMinOddMaxOdd = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2!= 0 && i > y) {return i }\n\t}\n\treturn -1\n}\n\n/*This function takes two positive numbers", "passed": 0}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\troundedAvg(1, 5) => \"0b11\"\n\troundedAvg(7, 5) => -1\n\troundedAvg(10, 20) => \"0b1111\"\n\troundedAvg(20, 33) => \"0b11010\"\n\t*/\nconst roundedAvg = (n, m) => {\n\tif (n > m) { return -1 }\n\tlet k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\troundedAvg(1, 5) => \"0b11\"\n\troundedAvg(7, 5) => -1\n\troundedAvg(10, 20) => \"0b1111\"\n\troundedAvg(20, 33) => \"0b11010\"\n\t*/\nconst roundedAvg = (n, m) => {\n\tif (n > m) { return -1 }\n\tlet k = (n + m) / 2\n\tlet sum = 0\n\tfor (let i = n; i <= m; i++) {\n\t\tsum += i\n\t}\n\treturn Math.round(sum / (m - n + 1))\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n  \n\tFor example:\n\t>>> uniqueDigits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> uniqueDigits([152, 323, 1422, 10])\n\t[]\n\t*/\nconst uniqueDigits = (x) => {\n\tlet p = []\n\tfor (let i = 0; i < x.length; i++) {\n\t\tlet h = x[i]\n\t\tlet boo = 1\n\t\twhile (h > 0) {\n\t\t\tlet r = h % 10\n\t\t\tif (r % 2 == 0) {\n\t\t\t\tboo = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\th = (h - r) / 10\n\t\t}\n\t\tif (boo) {\n\t\t\tp.push(x[i])\n\t\t}\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n  \n\tFor example:\n\t>>> uniqueDigits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> uniqueDigits([152, 323, 1422, 10])\n\t[]\n\t*/\nconst uniqueDigits = (x) => {\n\tlet p = []\n\tfor (let i = 0; i < x.length; i++) {\n\t\tlet h = x[i]\n\t\tlet boo = 1\n\t\twhile (h > 0) {\n\t\t\tlet r = h % 10\n\t\t\tif (r % 2 == 0) {\n\t\t\t\tboo = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\th = (h - r) / 10\n\t\t}\n\t\tif (boo) {\n\t\t\tp.push(x[i])\n\t\t}\n\t}\n\treturn p\n}\n\n//console.log(uniqueDigits([15, 33, 1422, 1]))\n//console.log(uniqueDigits([152, 323, 1422, 10]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t\tarr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t\treturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n\t\tIf the array is empty, return an empty array:\n\t\tarr = []\n\t\treturn []\n  \n\t\tIf the array has any strange number ignore it:\n\t\tarr = [1, -1 , 55] \n\t\t\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t\t\t-> reverse arr -> [55, 1, -1]\n\t\treturn = ['One']\n\t*/\nconst byLength = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t\tarr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t\treturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n\t\tIf the array is empty, return an empty array:\n\t\tarr = []\n\t\treturn []\n  \n\t\tIf the array has any strange number ignore it:\n\t\tarr = [1, -1, 55] \n\t\t\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t\t\t-> reverse arr -> [55, 1, -1]\n\t\treturn = ['One']\n\t*/\nconst byLength = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p.reverse()\n}\n\nconst byName = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k].toLowerCase() > p[ind].toLowerCase()) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p.reverse()\n}\n\nconst byNameLength = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k].toLowerCase().length > p[ind].toLowerCase().length) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p.reverse()\n}\n\nconst byNameLengthReverse = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k].toLowerCase().length < p[ind].toLowerCase().length) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p.reverse()\n}\n\nconst byNameLengthReverse2 = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k].toLowerCase().length > p[ind].toLowerCase().length) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p.reverse()\n}\n\nconst byNameLengthReverse3 = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k].toLowerCase().length < p[ind].toLowerCase().length) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p.reverse()\n}\n\nconst byNameLengthReverse4 = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let", "passed": 0}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t*/\nconst f = (n) => {\n\tlet f = 1\n\tlet p = 0\n\tlet k = []\n\tfor (let i = 1; i <= n; i++) {\n\t\tp += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t*/\nconst f = (n) => {\n\tlet f = 1\n\tlet p = 0\n\tlet k = []\n\tfor (let i = 1; i <= n; i++) {\n\t\tp += i;\n\t\tk.push(f)\n\t\tf *= i\n\t}\n\treturn k\n}\n\nconst factorial = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf *= i\n\t}\n\treturn f\n}\n\nconst factorial2 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t}\n\treturn f\n}\n\nconst factorial3 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t}\n\treturn f\n}\n\nconst factorial4 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t}\n\treturn f\n}\n\nconst factorial5 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t}\n\treturn f\n}\n\nconst factorial6 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t}\n\treturn f\n}\n\nconst factorial7 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t}\n\treturn f\n}\n\nconst factorial8 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t}\n\treturn f\n}\n\nconst factorial9 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t}\n\treturn f\n}\n\nconst factorial10 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t}\n\treturn f\n}\n\nconst factorial11 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t}\n\treturn f\n}\n\nconst factorial12 = (n) => {\n\tlet f = 1\n\tfor (let i = 1; i <= n; i++) {\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n\t\tf *= i\n\t\tf += i\n", "passed": 0}
{"task_id": "JavaScript/107", "prompt": "/*\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\t\tInput: 3\n\t\t\tOutput: (1, 2)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\t\tInput: 12\n\t\t\tOutput: (4, 6)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t\t1. 1 <= n <= 10^3\n\t\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t*/\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j] != k[k.length - j - 1]) {\n\t\t\t\tp = 0;\n\t\t\t\tbreak;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\t\tInput: 3\n\t\t\tOutput: (1, 2)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\t\tInput: 12\n\t\t\tOutput: (4, 6)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t\t1. 1 <= n <= 10^3\n\t\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t*/\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\te += 1\n\t\t} else {\n\t\t\to += 1\n\t\t}\n\t}\n\treturn [e, o]\n}\n", "passed": 0}
{"task_id": "JavaScript/108", "prompt": "/*\n\tWrite a function countNums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> countNums([]) == 0\n\t>>> countNums([-1, 11, -11]) == 1\n\t>>> countNums([1, 1, 2]) == 3\n\t*/\nconst countNums = (arr) => {\n\tlet p = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet h = arr[i]\n\t\tif (h > 0) {\n\t\t\tp++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet k = 0\n\t\th = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n\tWrite a function countNums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> countNums([]) == 0\n\t>>> countNums([-1, 11, -11]) == 1\n\t>>> countNums([1, 1, 2]) == 3\n\t*/\nconst countNums = (arr) => {\n\tlet p = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet h = arr[i]\n\t\tif (h > 0) {\n\t\t\tp++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet k = 0\n\t\th = -h\n\t\twhile (h > 0) {\n\t\t\tk++;\n\t\t\th = h / 10;\n\t\t}\n\t\tif (k > 0) {\n\t\t\tp++;\n\t\t}\n\t}\n\treturn p;\n}\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([-1, 1, 2, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123]));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\t\tYou are allowed to perform right shift operation any number of times.\n  \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return true else return false.\n\tIf the given array is empty then return true.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n  \n\tmoveOneBall([3, 4, 5, 1, 2])==>true\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t\t\t\t be achieved for the given array.\n\tmoveOneBall([3, 5, 4, 1, 2])==>false\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\t\t\t\tarray by performing any number of right shift operations.\n              \n\t*/\nconst moveOneBall = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\t\tYou are allowed to perform right shift operation any number of times.\n  \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return true else return false.\n\tIf the given array is empty then return true.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n  \n\tmoveOneBall([3, 4, 5, 1, 2])==>true\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t\t\t\t be achieved for the given array.\n\tmoveOneBall([3, 5, 4, 1, 2])==>false\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\t\t\t\tarray by performing any number of right shift operations.\n              \n\t*/\nconst moveOneBall = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall2 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall3 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall4 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall5 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall6 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall7 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall8 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tarr[k] = arr[i];\n\t\t\tk++;\n\t\t}\n\t}\n\treturn k == len;\n}\n\nconst moveOneBall9 = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length", "passed": 0}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> stringXor('010', '110')\n\t'100'\n\t*/\nconst stringXor = (a, b) => {\n\tvar xor = function (i, j) {\n\t\tif (i == j)\n\t\t\treturn '0';\n\t\telse\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> stringXor('010', '110')\n\t'100'\n\t*/\nconst stringXor = (a, b) => {\n\tvar xor = function (i, j) {\n\t\tif (i == j)\n\t\t\treturn '0';\n\t\telse\n\t\t\treturn '1';\n\t}\n\tvar result = '';\n\tfor (var i = 0; i < a.length; i++) {\n\t\tresult += xor(a[i], b[i]);\n\t}\n\treturn result;\n}\n\n/*\n\tGiven two strings a and b, return their sum as a string.\n\t>>> stringSum('010', '110')\n\t'210'\n\t*/\nconst stringSum = (a, b) => {\n\tvar sum = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tsum += a[i] == b[i]? 1 : 0;\n\t}\n\treturn sum;\n}\n\n/*\n\tGiven two strings a and b, return their product as a string.\n\t>>> stringProduct('010', '110')\n\t'00110110'\n\t*/\nconst stringProduct = (a, b) => {\n\tvar product = 1;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tproduct *= a[i] == b[i]? 1 : 0;\n\t}\n\treturn product;\n}\n\n/*\n\tGiven two strings a and b, return their difference as a string.\n\t>>> stringDifference('010', '110')\n\t'00'\n\t*/\nconst stringDifference = (a, b) => {\n\tvar difference = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tdifference += a[i] == b[i]? 1 : 0;\n\t}\n\treturn difference;\n}\n\n/*\n\tGiven two strings a and b, return their intersection as a string.\n\t>>> stringIntersection('010', '110')\n\t'10'\n\t*/\nconst stringIntersection = (a, b) => {\n\tvar intersection = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tintersection += a[i] == b[i]? 1 : 0;\n\t}\n\treturn intersection;\n}\n\n/*\n\tGiven two strings a and b, return their symmetric difference as a string.\n\t>>> stringSymmetricDifference('010', '110')\n\t'00'\n\t*/\nconst stringSymmetricDifference = (a, b) => {\n\tvar symmetricDifference = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tsymmetricDifference += a[i] == b[i]? 1 : 0;\n\t}\n\treturn symmetricDifference;\n}\n\n/*\n\tGiven two strings a and b, return their union as a string.\n\t>>> stringUnion('010', '110')\n\t'110'\n\t*/\nconst stringUnion = (a, b) => {\n\tvar union = '';\n\tfor (var i = 0; i < a.length; i++) {\n\t\tunion += a[i] == b[i]? '1' : '0';\n\t}\n\treturn union;\n}\n\n/*\n\tGiven two strings a and b, return their XOR as a string.\n\t>>> stringXor('010', '110')\n\t'100'\n\t*/\nconst stringXor = (a, b) => {\n\tvar xor = function (i, j) {\n\t\tif (i == j)\n\t\t\treturn '0';\n\t\telse\n\t\t\treturn '1';\n\t}\n\tvar result = '';\n\tfor (var i = 0; i < a.length; i++) {\n\t\tresult += xor(a[i], b[i]);\n\t}\n\treturn result;\n}\n\n/*\n\tGiven two strings a and b, return their sum as a string.\n\t>>> stringSum('010', '110')\n\t'210'\n\t*/\nconst stringSum = (a, b) => {\n\tvar sum = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tsum += a[i] == b[i]? 1 : 0;\n\t}\n\treturn sum;\n}\n\n/*\n\tGiven two strings a and b, return their product as a string.\n\t>>> stringProduct('010', '110')\n\t'00110110'\n\t*/\nconst stringProduct = (a, b) => {\n\tvar product = 1;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tproduct *= a[i] == b[i]? 1 : 0;\n\t}\n\treturn product;\n}\n\n/*\n\tGiven two strings a and b, return their difference as a string.\n\t>>> stringDifference('010', '110')\n\t'00'\n\t*/\nconst stringDifference = (a, b) => {\n\tvar difference = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tdifference += a[i] == b[i]? 1 : 0;\n\t}\n\treturn difference;\n}\n\n/*\n\tGiven two strings a and b, return their intersection as a string.\n\t>>> stringIntersection('010', '110')\n\t'10'\n\t*/\nconst stringIntersection = (a, b) => {\n\tvar intersection = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tintersection += a[i] == b[i]? 1 : 0;\n\t}\n\treturn intersection;\n}\n\n/*\n\tGiven two strings a and b, return their symmetric difference as a string.\n\t>>> stringSymmetricDifference('010', '110')\n\t'00'\n\t*/\nconst stringSymmetricDifference = (a, b) => {\n\tvar symmetricDifference = 0;\n\tfor (var i = 0; i < a.length; i++) {\n\t\tsymmetricDifference += a[i] == b[i]? 1 : 0;\n\t}\n\treturn symmetricDifference;\n}\n\n/*\n\tGiven two strings a and b, return their union as a string.\n\t>>> stringUnion('010', '110')\n\t'110'\n\t*/\nconst string", "passed": 0}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t*/\nconst exchange = (lst1, lst2) => {\n\tlet k = lst1.length\n\tlet t = 0\n\tfor (let i = 0; i < lst1.length; i++) {\n\t\tif (lst1[i] % 2 == 0) { t++ }\n\t}\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t*/\nconst exchange = (lst1, lst2) => {\n\tlet k = lst1.length\n\tlet t = 0\n\tfor (let i = 0; i < lst1.length; i++) {\n\t\tif (lst1[i] % 2 == 0) { t++ }\n\t}\n\tlet j = lst2.length\n\tfor (let i = 0; i < lst2.length; i++) {\n\t\tif (lst2[i] % 2 == 0) { t++ }\n\t}\n\tif (t == k) { return \"YES\" }\n\treturn \"NO\"\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n  \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t*/\nconst histogram = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n  \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t*/\nconst histogram = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n*/\nconst histogram2 = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n*/\nconst histogram3 = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n*/\nconst histogram4 = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n*/\nconst histogram5 = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n*/\nconst histogram6 = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\n", "passed": 0}
{"task_id": "JavaScript/112", "prompt": "/*Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and true/false for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n\t*/\nconst reverseDelete = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and true/false for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n\t*/\nconst reverseDelete = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest2 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest3 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest4 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest5 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest6 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest7 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest8 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest9 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\treturn [t, s.length == t.length]\n}\n\nconst reverseDeleteTest10 = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}", "passed": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> oddCount(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> oddCount(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t*/\nconst oddCount = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0;\n\t\tlet h = lst[i].length\n\t\tfor (let j = 0; j < h; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> oddCount(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> oddCount(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t*/\nconst oddCount = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0;\n\t\tlet h = lst[i].length\n\t\tfor (let j = 0; j < h; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\n/*\nGiven a list of strings, where each string consists of only digits, return a list.\n\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> oddCount(['1234567'])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> oddCount(['3',\"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n*/\nconst oddCount2 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount3 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount4 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount5 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount6 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount7 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount8 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount9 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount10 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount11 = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\nconst oddCount12 = (l", "passed": 0}
{"task_id": "JavaScript/114", "prompt": "/*\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t*/\nconst minSubArraySum = (nums) => {\n\tlet min = nums[0]\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tfor (let j = i + 1; j <= nums.length; j++) {\n\t\t\tlet s = 0;\n\t\t\tfor (let k = i; k < j; k++) {\n\t\t\t\ts += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t*/\nconst minSubArraySum = (nums) => {\n\tlet min = nums[0]\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tfor (let j = i + 1; j <= nums.length; j++) {\n\t\t\tlet s = 0;\n\t\t\tfor (let k = i; k < j; k++) {\n\t\t\t\ts += nums[k]\n\t\t\t}\n\t\t\tif (s < min) {\n\t\t\t\tmin = s\n\t\t\t}\n\t\t}\n\t}\n\treturn min\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\nconsole.log(minSubArraySum([-1, -2, -3]) === -6)\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\t\t\tbucket_capacity : 1\n\t\t\tOutput: 6\n\n\tExample 2:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\t\t\tbucket_capacity : 2\n\t\t\tOutput: 5\n  \n\tExample 3:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\t\t\tbucket_capacity : 5\n\t\t\tOutput: 0\n\n\tConstraints:\n\t\t\t* all wells have the same length\n\t\t\t* 1 <= grid.length <= 10^2\n\t\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t\t* grid[i][j] -> 0 | 1\n\t\t\t* 1 <= capacity <= 10\n\t*/\nconst maxFill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\t\t\tbucket_capacity : 1\n\t\t\tOutput: 6\n\n\tExample 2:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\t\t\tbucket_capacity : 2\n\t\t\tOutput: 5\n  \n\tExample 3:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\t\t\tbucket_capacity : 5\n\t\t\tOutput: 0\n\n\tConstraints:\n\t\t\t* all wells have the same length\n\t\t\t* 1 <= grid.length <= 10^2\n\t\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t\t* grid[i][j] -> 0 | 1\n\t\t\t* 1 <= capacity <= 10\n\t*/\nconst maxFill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n\t\tif (m > p) { p = m }\n\t}\n\treturn p\n}\n\nconst fill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n\t\tif (m > p) { p = m }\n\t}\n\treturn p\n}\n\nconst main = () => {\n\tlet grid = [\n\t\t[0,0,1,0],\n\t\t[0,1,0,0],\n\t\t[1,1,1,1]\n\t]\n\tlet capacity = 1\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill(grid, capacity))\n\tconsole.log(fill", "passed": 0}
{"task_id": "JavaScript/116", "prompt": "/*\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t*/\nconst sortArray = (arr) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tlet w1 = p[ind].toString(2)\n\t\t\tlet f1 = 0\n\t\t\tfor (let u = 0; u < w1.length; u++) {\n\t\t\t\tif (w1[u] == '1') { f1++ }\n\t\t\t}\n\t\t\tlet w2 = p[k].toString(2)\n\t\t\tlet f2 = 0\n\t\t\tfor (let u = 0; u < w2.length; u++) {\n\t\t\t\tif (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t*/\nconst sortArray = (arr) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tlet w1 = p[ind].toString(2)\n\t\t\tlet f1 = 0\n\t\t\tfor (let u = 0; u < w1.length; u++) {\n\t\t\t\tif (w1[u] == '1') { f1++ }\n\t\t\t}\n\t\t\tlet w2 = p[k].toString(2)\n\t\t\tlet f2 = 0\n\t\t\tfor (let u = 0; u < w2.length; u++) {\n\t\t\t\tif (w2[u] == '1') { f2++ }\n\t\t\t}\n\t\t\tif (f1 > f2) {\n\t\t\t\tlet tmp = p[ind]\n\t\t\t\tp[ind] = p[k]\n\t\t\t\tp[k] = tmp\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconsole.log(sortArray([1, 0, 2, 3, 4]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n\tselectWords(\"simple white space\", 2) ==> []\n\tselectWords(\"Hello world\", 4) ==> [\"world\"]\n\tselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t*/\nconst selectWords = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n\tselectWords(\"simple white space\", 2) ==> []\n\tselectWords(\"Hello world\", 4) ==> [\"world\"]\n\tselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t*/\nconst selectWords = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl++\n\t\t\t}\n\t\t}\n\t\tif (l == n) {\n\t\t\tk.push(t[i])\n\t\t}\n\t}\n\treturn k\n}\n\n/*\nGiven a string s and a non-negative integer n, you need to return the string with all the \ncharacters of the string replaced by the nth one from the end of the string.\nIf the nth character does not exist, then the output must be the empty string.\nExamples:\nreplaceEnd(\"abcdefg\", 2) ==> \"bcdeg\"\nreplaceEnd(\"abcdefg\", 3) ==> \"cdefg\"\nreplaceEnd(\"abcdefg\", 4) ==> \"defg\"\nreplaceEnd(\"abcdefg\", 5) ==> \"efg\"\nreplaceEnd(\"abcdefg\", 6) ==> \"fg\"\nreplaceEnd(\"abcdefg\", 7) ==> \"g\"\nreplaceEnd(\"abcdefg\", 8) ==> \"\"\nreplaceEnd(\"abcdefg\", 9) ==> \"\"\nreplaceEnd(\"abcdefg\", -1) ==> \"abcdefg\"\nreplaceEnd(\"abcdefg\", -2) ==> \"bcdefg\"\nreplaceEnd(\"abcdefg\", -3) ==> \"cdefg\"\nreplaceEnd(\"abcdefg\", -4) ==> \"defg\"\nreplaceEnd(\"abcdefg\", -5) ==> \"efg\"\nreplaceEnd(\"abcdefg\", -6) ==> \"fg\"\nreplaceEnd(\"abcdefg\", -7) ==> \"g\"\nreplaceEnd(\"abcdefg\", -8) ==> \"\"\nreplaceEnd(\"abcdefg\", -9) ==> \"\"\n*/\nconst replaceEnd = (s, n) => {\n\tif (s == '') { return '' }\n\tlet t = s.split('')\n\tlet k = t.length - 1\n\tif (n < 0) {\n\t\treturn ''\n\t}\n\tif (n > k) {\n\t\treturn s\n\t}\n\tlet r = ''\n\tfor (let i = 0; i <= k; i++) {\n\t\tr += t[i]\n\t}\n\tfor (let i = k; i < n; i++) {\n\t\tr += t[i]\n\t}\n\treturn r\n}\n\n/*\nGiven a string s and a non-negative integer n, you need to return the string with all the \ncharacters of the string replaced by the nth one from the end of the string.\nIf the nth character does not exist, then the output must be the empty string.\nExamples:\nreplaceEnd(\"abcdefg\", 2) ==> \"bcdeg\"\nreplaceEnd(\"abcdefg\", 3) ==> \"cdefg\"\nreplaceEnd(\"abcdefg\", 4) ==> \"defg\"\nreplaceEnd(\"abcdefg\", 5) ==> \"efg\"\nreplaceEnd(\"abcdefg\", 6) ==> \"fg\"\nreplaceEnd(\"abcdefg\", 7) ==> \"g\"\nreplaceEnd(\"abcdefg\", 8) ==> \"\"\nreplaceEnd(\"abcdefg\", 9) ==> \"\"\nreplaceEnd(\"abcdefg\", -1) ==> \"abcdefg\"\nreplaceEnd(\"abcdefg\", -2) ==> \"bcdefg\"\nreplaceEnd(\"abcdefg\", -3) ==> \"cdefg\"\nreplaceEnd(\"abcdefg\", -4) ==> \"defg\"\nreplaceEnd(\"abcdefg\", -5) ==> \"efg\"\nreplaceEnd(\"abcdefg\", -6) ==> \"fg\"\nreplaceEnd(\"abcdefg\", -7) ==> \"g\"\nreplaceEnd(\"abcdefg\", -8) ==> \"\"\nreplaceEnd(\"abcdefg\", -9) ==> \"\"\n*/\nconst replaceEnd2 = (s, n) => {\n\tif (s == '') { return '' }\n\tlet t = s.split('')\n\tlet k = t.length - 1\n\tif (n < 0) {\n\t\treturn ''\n\t}\n\tif (n > k) {\n\t\treturn s\n\t}\n\tlet r = ''\n\tfor (let i = k; i >= 0; i--) {\n\t\tr += t[i]\n\t}\n\tfor (let i = 0; i < n; i++) {\n\t\tr += t[i]\n\t}\n\treturn r\n}\n\n/*\nGiven a string s and a non-negative integer n, you need to return the string with all the \ncharacters of the string replaced by the nth one from the end of the string.\nIf the nth character does not exist, then the output must be the empty string.\nExamples:\nreplaceEnd(\"abcdefg\", 2) ==> \"bcdeg\"\nreplaceEnd(\"abcdefg\", 3) ==> \"cdefg\"\nreplaceEnd(\"abcdefg\", 4) ==> \"defg\"\nreplaceEnd(\"abcdefg\", 5) ==> \"efg\"\nreplaceEnd(\"abcdefg\", 6) ==> \"fg\"\nreplaceEnd(\"", "passed": 0}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n  \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tgetClosestVowel(\"yogurt\") ==> \"u\"\n\tgetClosestVowel(\"FULL\") ==> \"U\"\n\tgetClosestVowel(\"quick\") ==> \"\"\n\tgetClosestVowel(\"ab\") ==> \"\"\n\t*/\nconst getClosestVowel = (word) => {\n\tfor (let i = word.length - 2; i > 0; i--) {\n\t\tif (\n\t\t\t!(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n\t\t\t\tword[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n\t\t\t&&\n\t\t\t(word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n\t\t\t\tword[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n\t\t\t&&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n  \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tgetClosestVowel(\"yogurt\") ==> \"u\"\n\tgetClosestVowel(\"FULL\") ==> \"U\"\n\tgetClosestVowel(\"quick\") ==> \"\"\n\tgetClosestVowel(\"ab\") ==> \"\"\n\t*/\nconst getClosestVowel = (word) => {\n\tfor (let i = word.length - 2; i > 0; i--) {\n\t\tif (\n\t\t\t!(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n\t\t\t\tword[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n\t\t\t&&\n\t\t\t(word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n\t\t\t\tword[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n\t\t\t&&\n\t\t\t(word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n\t\t\t\tword[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n\t\t) {\n\t\t\treturn word[i + 1];\n\t\t}\n\t}\n\treturn '';\n};\n\nmodule.exports = getClosestVowel;<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\tExamples:\n\tmatchParens(['()(', ')']) == 'Yes'\n\tmatchParens([')', ')']) == 'No'\n\t*/\nconst matchParens = (lst) => {\n\tlet w1 = lst[0] + lst[1]\n\tlet y = 0\n\tlet u = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\tw1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\tExamples:\n\tmatchParens(['()(', ')']) == 'Yes'\n\tmatchParens([')', ')']) == 'No'\n\t*/\nconst matchParens = (lst) => {\n\tlet w1 = lst[0] + lst[1]\n\tlet y = 0\n\tlet u = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\tw1 = lst[1] + lst[0]\n\ty = 0\n\tu = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\treturn 'No'\n}\n\n/*\n\tGiven a list of strings, return the longest string in the list.\n\tIf there are multiple longest strings, return the first one.\n\tExamples:\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'ab'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\tlongest('abcd', 'bcd', 'ab', 'bc') == 'bc'\n\t", "passed": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return null in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\tfor (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return null in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\tfor (const s of strings) {\n\t\tif (s.length > maxlen)\n\t\t\tmaxlen = s.length;\n\t}\n\treturn strings[0].substr(0, maxlen);\n}\n\n/*\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'b', 'c', 'd'])\n\t'a'\n\t>>> longest(['a', 'b', 'c', 'd', 'e'])\n\t'e'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f'])\n\t'f'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n\t'g'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n\t'g'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n\t'i'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n\t'j'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n\t'k'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n\t'l'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'])\n\t'l'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])\n\t'n'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'])\n\t'o'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'])\n\t'p'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'])\n\t'q'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'])\n\t'r'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'])\n\t's'\n\t>>> longest(['a', 'b', 'c', 'd', 'e", "passed": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\t\tInput: arr = [-3, -4, 5], k = 3\n\t\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\t\tInput: arr = [4, -4, 4], k = 2\n\t\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\t\tOutput: [2]\n\n\tNote:\n\t\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t\t3. 0 <= k <= len(arr)\n\t*/\nconst maximum = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\t\tInput: arr = [-3, -4, 5], k = 3\n\t\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\t\tInput: arr = [4, -4, 4], k = 2\n\t\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\t\tOutput: [2]\n\n\tNote:\n\t\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t\t3. 0 <= k <= len(arr)\n\t*/\nconst maximum = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!== j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t}\n\t}\n\treturn p.slice(0, k)\n}\n\nconst test = () => {\n\tlet arr = [-3, -4, 5]\n\tlet k = 3\n\tconsole.log(maximum(arr, k))\n\tarr = [4, -4, 4]\n\tk = 2\n\tconsole.log(maximum(arr, k))\n\tarr = [-3, 2, 1, 2, -1, -2, 1]\n\tk = 1\n\tconsole.log(maximum(arr, k))\n}\n\ntest()<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t*/\nconst solution = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t*/\nconst solution = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t\t1. 1 <= len(arr) <= 100\n\t\t\t2. 1 <= k <= len(arr)\n\t*/\nconst addElements = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t\t1. 1 <= len(arr) <= 100\n\t\t\t2. 1 <= k <= len(arr)\n\t*/\nconst addElements = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements2 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements3 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements4 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements5 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements6 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements7 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements8 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements9 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements10 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements11 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements12 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements13 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements14 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements15 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements16 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements17 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements18 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements19 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements20 = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {", "passed": 0}
{"task_id": "JavaScript/123", "prompt": "/*\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t\t1. Collatz(1) is [1].\n\t\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tgetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t*/\nconst getOddCollatz = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t\t1. Collatz(1) is [1].\n\t\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tgetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t*/\nconst getOddCollatz = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz2 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz3 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz4 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz5 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz6 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz7 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz8 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz9 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nconst getOddCollatz10 = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n", "passed": 0}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n\treturns true if the date is valid otherwise false.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalidDate('03-11-2000') => true\n\n\tvalidDate('15-01-2012') => false\n\n\tvalidDate('04-0-2040') => false\n\n\tvalidDate('06-04-2020') => true\n\n\tvalidDate('06/04/2020') => false\n\t*/\nconst validDate = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length != 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n\treturns true if the date is valid otherwise false.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalidDate('03-11-2000') => true\n\n\tvalidDate('15-01-2012') => false\n\n\tvalidDate('04-0-2040') => false\n\n\tvalidDate('06-04-2020') => true\n\n\tvalidDate('06/04/2020') => false\n\t*/\nconst validDate = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[0] == 4 && t[1] > 30) { return false }\n\tif (t[0] == 6 && t[1] > 29) { return false }\n\tif (t[0] == 9 && t[1] > 30) { return false }\n\tif (t[0] == 11 && t[1] > 30) { return false }\n\tif (t[2] < 1 || t[2] > 31) { return false }\n\treturn true\n}\n\nconst validDate2 = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[0] == 4 && t[1] > 30) { return false }\n\tif (t[0] == 6 && t[1] > 29) { return false }\n\tif (t[0] == 9 && t[1] > 30) { return false }\n\tif (t[0] == 11 && t[1] > 30) { return false }\n\tif (t[2] < 1 || t[2] > 31) { return false }\n\treturn true\n}\n\nconst validDate3 = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[0] == 4 && t[1] > 30) { return false }\n\tif (t[0] == 6 && t[1] > 29) { return false }\n\tif (t[0] == 9 && t[1] > 30) { return false }\n\tif (t[0] == 11 && t[1] > 30) { return false }\n\tif (t[2] < 1 || t[2] > 31) { return false }\n\treturn true\n}\n\nconst validDate4 = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[0] == 4 && t[1] > 30) { return false }\n\tif (t[0] == 6 && t[1] > 29) { return false }\n\tif (t[0] == 9 && t[1] > 30) { return false }\n\tif (t[0] == 11 && t[1] > 30) { return false }\n\tif (t[2] < 1 || t[2] > 31) { return false }\n\treturn true\n}\n\nconst validDate5 = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[0] == 4 && t[1] > 30) { return false }\n\tif (t[0] == 6 && t[1] > 29) { return false }\n\tif (t[0] == 9 && t[1] > 30) { return false }\n\tif (t[0] == 11 && t[1] > 30) { return false }\n\tif (t[2] < 1 || t[2] > 31) { return false }\n\treturn true\n}\n\nconst validDate6 = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[0] == 4 && t[1] > 30) { return false }\n\tif (t[0] == 6 && t[1] > 29) { return false }\n\tif (t[0] == 9 && t[1] > 30) { return false }\n\tif (t[0] == 11 && t[1] > 30) { return false }\n\tif (t[2] < 1 || t[2] > 31) { return false }\n\treturn true\n}\n\nconst validDate7 = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t", "passed": 0}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\tlet l = txt.length\n\t\t\tlet s = []\n\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\tif (txt[i].match(/[a-z]/i)) {\n\t\t\t\t\ts.push(txt[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords2 = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\tlet l = txt.length\n\t\t\tlet s = []\n\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\tif (txt[i].match(/[a-z]/i)) {\n\t\t\t\t\ts.push(txt[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords3 = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\tlet l = txt.length\n\t\t\tlet s = []\n\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\tif (txt[i].match(/[a-z]/i)) {\n\t\t\t\t\ts.push(txt[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords4 = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\tlet l = txt.length\n\t\t\tlet s = []\n\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\tif (txt[i].match(/[a-z]/i)) {\n\t\t\t\t\ts.push(txt[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords5 = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\tlet l = txt.length\n\t\t\tlet s = []\n\t\t\tfor (let i = 0; i < l; i++) {\n\t\t\t\tif (txt[i].match(/[a-z]/i)) {\n\t\t\t\t\ts.push(txt[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should", "passed": 0}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return false. Assume no negative numbers and only integers.\n\tExamples\n\tisSorted([5]) ➞ true\n\tisSorted([1, 2, 3, 4, 5]) ➞ true\n\tisSorted([1, 3, 2, 4, 5]) ➞ false\n\tisSorted([1, 2, 3, 4, 5, 6]) ➞ true\n\tisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n\tisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n\tisSorted([1, 2, 2, 3, 3, 4]) ➞ true\n\tisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n\t*/\nconst isSorted = (lst) => {\n\tif (lst.length == 0) { return true }\n\tlet dup = 1\n\tlet pre = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (lst[i] < pre) { return false }\n\t\tif (lst[i] == pre) {\n\t\t\tdup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return false. Assume no negative numbers and only integers.\n\tExamples\n\tisSorted([5]) ➞ true\n\tisSorted([1, 2, 3, 4, 5]) ➞ true\n\tisSorted([1, 3, 2, 4, 5]) ➞ false\n\tisSorted([1, 2, 3, 4, 5, 6]) ➞ true\n\tisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n\tisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n\tisSorted([1, 2, 2, 3, 3, 4]) ➞ true\n\tisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n\t*/\nconst isSorted = (lst) => {\n\tif (lst.length == 0) { return true }\n\tlet dup = 1\n\tlet pre = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (lst[i] < pre) { return false }\n\t\tif (lst[i] == pre) {\n\t\t\tdup += 1;\n\t\t\tif (dup > 1) { return false }\n\t\t}\n\t\tpre = lst[i]\n\t}\n\treturn true\n}\n\n/* Given a list of numbers, return the largest number in the list.\n\tIf the list has no numbers, return 0.\n\tExamples\n\tlargestNumber([1, 2, 3, 4]) ➞ 4\n\tlargestNumber([1, 2, 3, 4, 5]) ➞ 5\n\tlargestNumber([1, 2, 3, 4, 5, 6]) ➞ 6\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 8\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9]) ➞ 9\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ➞ 10\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ➞ 11\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ➞ 12\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ➞ 13\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) ➞ 14\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) ➞ 15\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) ➞ 16\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) ➞ 17\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) ➞ 18\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) ➞ 19\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ➞ 20\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) ➞ 21\n\tlargestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29", "passed": 0}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t*/\nconst intersection = (interval1, interval2) => {\n\tlet lo = interval1[0]\n\tif (interval2[0] > lo) { lo = interval2[0] }\n\tlet hi = interval1[1]\n\tif (interval2[1] < hi) { hi = interval2[1] }\n\tlet len = 0\n\tif (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t*/\nconst intersection = (interval1, interval2) => {\n\tlet lo = interval1[0]\n\tif (interval2[0] > lo) { lo = interval2[0] }\n\tlet hi = interval1[1]\n\tif (interval2[1] < hi) { hi = interval2[1] }\n\tlet len = 0\n\tif (hi > lo) { len = hi - lo }\n\tif (len % 2 === 0) { return \"NO\" }\n\treturn \"YES\"\n}\n\n//intersection((-1, 1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((1, 2), (2, 3))\n//intersection((-1, 1), (0, 4))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3, -1), (-5, 5))\n//intersection((-3,", "passed": 0}
{"task_id": "JavaScript/128", "prompt": "/*\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> prodSigns([1, 2, 2, -4]) == -9\n\t>>> prodSigns([0, 1]) == 0\n\t>>> prodSigns([]) == null\n\t*/\nconst prodSigns = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 1\n\tlet s = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ts += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> prodSigns([1, 2, 2, -4]) == -9\n\t>>> prodSigns([0, 1]) == 0\n\t>>> prodSigns([]) == null\n\t*/\nconst prodSigns = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 1\n\tlet s = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ts += arr[i]\n\t\tif (arr[i] > 0) { n++ }\n\t\telse if (arr[i] < 0) { n-- }\n\t}\n\treturn n * s\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn += arr[i] * (arr[i] > 0? 1 : -1)\n\t}\n\treturn n\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns2 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn += arr[i] * (arr[i] > 0? 1 : -1)\n\t}\n\treturn n\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns3 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn += arr[i] * (arr[i] > 0? 1 : -1)\n\t}\n\treturn n\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns4 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn += arr[i] * (arr[i] > 0? 1 : -1)\n\t}\n\treturn n\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns5 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn += arr[i] * (arr[i] > 0? 1 : -1)\n\t}\n\treturn n\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns6 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn += arr[i] * (arr[i] > 0? 1 : -1)\n\t}\n\treturn n\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns7 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn += arr[i] * (arr[i] > 0? 1 : -1)\n\t}\n\treturn n\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tnumbers in the array multiplied by their sign.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> sumSigns([1, 2, 2, -4]) == -9\n\t>>> sumSigns([0, 1]) == 0\n\t>>> sumSigns([]) == null\n\t*/\nconst sumSigns8 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tn +=", "passed": 0}
{"task_id": "JavaScript/129", "prompt": "/*\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\t\tOutput: [1, 2, 1]\n\n\t\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\t\tOutput: [1]\n\t*/\nconst minPath = (grid, k) => {\n\tlet m = 0\n\tlet n = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tfor (let j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tm = i;\n\t\t\t\tn = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\t\tOutput: [1, 2, 1]\n\n\t\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\t\tOutput: [1]\n\t*/\nconst minPath = (grid, k) => {\n\tlet m = 0\n\tlet n = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tfor (let j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tm = i;\n\t\t\t\tn = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlet dp = [1]\n\tlet visited = [1]\n\tlet visited2 = [1]\n\tlet visited3 = [1]\n\tlet visited4 = [1]\n\tlet visited5 = [1]\n\tlet visited6 = [1]\n\tlet visited7 = [1]\n\tlet visited8 = [1]\n\tlet visited9 = [1]\n\tlet visited10 = [1]\n\tlet visited11 = [1]\n\tlet visited12 = [1]\n\tlet visited13 = [1]\n\tlet visited14 = [1]\n\tlet visited15 = [1]\n\tlet visited16 = [1]\n\tlet visited17 = [1]\n\tlet visited18 = [1]\n\tlet visited19 = [1]\n\tlet visited20 = [1]\n\tlet visited21 = [1]\n\tlet visited22 = [1]\n\tlet visited23 = [1]\n\tlet visited24 = [1]\n\tlet visited25 = [1]\n\tlet visited26 = [1]\n\tlet visited27 = [1]\n\tlet visited28 = [1]\n\tlet visited29 = [1]\n\tlet visited30 = [1]\n\tlet visited31 = [1]\n\tlet visited32 = [1]\n\tlet visited33 = [1]\n\tlet visited34 = [1]\n\tlet visited35 = [1]\n\tlet visited36 = [1]\n\tlet visited37 = [1]\n\tlet visited38 = [1]\n\tlet visited39 = [1]\n\tlet visited40 = [1]\n\tlet visited41 = [1]\n\tlet visited42 = [1]\n\tlet visited43 = [1]\n\tlet visited44 = [1]\n\tlet visited45 = [1]\n\tlet visited46 = [1]\n\tlet visited47 = [1]\n\tlet visited48 = [1]\n\tlet visited49 = [1]\n\tlet visited50 = [1]\n\tlet visited51 = [1]\n\tlet visited52 = [1]\n\tlet visited53 = [1]\n\tlet visited54 = [1]\n\tlet visited55 = [1]\n\tlet visited56 = [1]\n\tlet visited57 = [1]\n\tlet visited58 = [1]\n\tlet visited59 = [1]\n\tlet visited60 = [1]\n\tlet visited61 = [1]\n\tlet visited62 = [1]\n\tlet visited63 = [1]\n\tlet visited64 = [1]\n\tlet visited65 = [1]\n\tlet visited66 = [1]\n\tlet visited67 = [1]\n\tlet visited68 = [1]\n\tlet visited69 = [1]\n\tlet visited70 = [1]\n\tlet visited71 = [1]\n\tlet visited72 = [1]\n\tlet visited73 = [1]\n\tlet visited74 = [1]\n\tlet visited75 = [1]\n\tlet visited76 = [1]\n\tlet visited77 = [1]\n\tlet visited78 = [1]\n\tlet visited79 = [1]\n\tlet visited80 = [1]\n\tlet visited81 = [1]\n\tlet visited82 = [1]\n\tlet visited83 = [1]\n\tlet visited84 = [1]\n\tlet visited85 = [1]\n\tlet visited86 = [1]\n\tlet visited87 = [1]\n\tlet visited88 = [1]\n\tlet visited89 = [1]\n\tlet visited90 = [1]\n\tlet visited91 = [1]\n\tlet visited92 = [1]\n\tlet visited93 = [1]\n\tlet visited94 = [1]\n\tlet visited95 = [1]\n\tlet visited96 = [1]\n\tlet visited97 = [1]\n\tlet visited98 = [1]\n\tlet visited99 = [1]\n\tlet visited100 = [1]\n\tlet visited101 = [1]\n\tlet visited102 = [1]\n\tlet visited103 = [1]\n\tlet visited104 = [1]\n\tlet visited105 = [1]\n\tlet visited106 = [1]\n\tlet visited107 = [1]\n\tlet visited108 = [1]\n\tlet visited109 = [1]\n\tlet visited110 = [1]\n\tlet visited111 = [1]\n\tlet visited112 = [1]\n\tlet visited113", "passed": 0}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n\t>>> greatestCommonDivisor(3, 5)\n\t1\n\t>>> greatestCommonDivisor(25, 15)\n\t5\n\t*/\nconst greatestCommonDivisor = (a, b) => {\n\twhile (b != 0) {\n\t\tlet temp = a;\n\t\ta = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n\t>>> greatestCommonDivisor(3, 5)\n\t1\n\t>>> greatestCommonDivisor(25, 15)\n\t5\n\t*/\nconst greatestCommonDivisor = (a, b) => {\n\twhile (b!= 0) {\n\t\tlet temp = a;\n\t\ta = b;\n\t\tb = temp % b;\n\t}\n\treturn a;\n};\n\n/* Return a least common multiple of two integers a and b\n\t>>> leastCommonMultiple(3, 5)\n\t15\n\t>>> leastCommonMultiple(25, 15)\n\t25\n\t*/\nconst leastCommonMultiple = (a, b) => {\n\treturn a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the number of divisors of an integer\n\t>>> numberOfDivisors(3)\n\t1\n\t>>> numberOfDivisors(25)\n\t5\n\t>>> numberOfDivisors(15)\n\t3\n\t*/\nconst numberOfDivisors = (n) => {\n\tlet divisors = [];\n\tfor (let i = 1; i <= n; i++) {\n\t\tif (n % i === 0) {\n\t\t\tdivisors.push(i);\n\t\t}\n\t}\n\treturn divisors.length;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first n positive integers\n\t>>> sumOfSquares(3)\n\t9\n\t>>> sumOfSquares(25)\n\t25\n\t>>> sumOfSquares(15)\n\t45\n\t*/\nconst sumOfSquares = (n) => {\n\tlet sum = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tsum += i * i;\n\t}\n\treturn sum;\n};\n\n/* Return the sum of the squares of the first", "passed": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t\t\t = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t*/\nconst tri = (n) => {\n\tif (n == 0) { return [1] }\n\tif (n == 1) { return [1, 3] }\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tp.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t\t\t = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t*/\nconst tri = (n) => {\n\tif (n == 0) { return [1] }\n\tif (n == 1) { return [1, 3] }\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tp.push(1 + i / 2)\n\t\t} else {\n\t\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t\t}\n\t}\n\treturn p\n}\n\nconst tribonacci = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci2 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci3 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci4 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci5 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci6 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci7 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci8 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci9 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci10 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci11 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci12 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci13 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci14 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci15 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t}\n\treturn p\n}\n\nconst tribonacci16 = (n) => {\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])", "passed": 0}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t*/\nconst digits = (n) => {\n\tlet p = 1\n\tlet k = 1\n\twhile (n > 0) {\n\t\tlet y = n % 10\n\t\tif (y % 2 == 1) {\n\t\t\tp *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t*/\nconst digits = (n) => {\n\tlet p = 1\n\tlet k = 1\n\twhile (n > 0) {\n\t\tlet y = n % 10\n\t\tif (y % 2 == 1) {\n\t\t\tp *= y; k = 0;\n\t\t}\n\t\tn = n / 10;\n\t}\n\treturn p * k;\n}\n\n/*\nGiven a positive integer n, return the sum of the digits of n.\n\nFor example:\nsumDigits(1) == 1\nsumDigits(4) == 4\nsumDigits(235) == 7\n*/\nconst sumDigits = (n) => {\n\tlet sum = 0\n\twhile (n > 0) {\n\t\tsum += n % 10\n\t\tn = n / 10\n\t}\n\treturn sum\n}\n\n/*\nGiven two non-negative integers a and b, return the larger one.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 2\na = 2, b = 2\nreturn 2\n*/\nconst max = (a, b) => {\n\tif (a > b) {\n\t\treturn a\n\t} else {\n\t\treturn b\n\t}\n}\n\n/*\nGiven two non-negative integers a and b, return the smaller one.\n\nExample:\na = 1, b = 2\nreturn 2\na = 2, b = 1\nreturn 1\na = 2, b = 2\nreturn 1\n*/\nconst min = (a, b) => {\n\tif (a < b) {\n\t\treturn a\n\t} else {\n\t\treturn b\n\t}\n}\n\n/*\nGiven two non-negative integers a and b, return the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 2\na = 2, b = 1\nreturn 7\na = 2, b = 2\nreturn 14\n*/\nconst sum = (a, b) => {\n\treturn a * b\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 6\na = 2, b = 2\nreturn 8\n*/\nconst diff = (a, b) => {\n\treturn sum(a, b) - sum(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the product of the sum of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 2\na = 2, b = 1\nreturn 7\na = 2, b = 2\nreturn 14\n*/\nconst prod = (a, b) => {\n\treturn sum(a, b) * sum(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 2\na = 2, b = 1\nreturn 7\na = 2, b = 2\nreturn 14\n*/\nconst sumProd = (a, b) => {\n\treturn sum(a, b) + sum(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 6\na = 2, b = 2\nreturn 8\n*/\nconst diffProd = (a, b) => {\n\treturn sumProd(a, b) - sumProd(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 6\na = 2, b = 2\nreturn 8\n*/\nconst diffSumProd = (a, b) => {\n\treturn sumProd(a, b) - sumProd(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 6\na = 2, b = 2\nreturn 8\n*/\nconst diffDiffProd = (a, b) => {\n\treturn diffProd(a, b) - diffProd(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 6\na = 2, b = 2\nreturn 8\n*/\nconst diffDiffSumProd = (a, b) => {\n\treturn diffSumProd(a, b) - diffSumProd(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the difference of the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 6\na = 2, b = 2\nreturn 8\n*/\nconst diffDiffDiffProd = (a, b) => {\n\treturn diffDiffProd(a, b) - diffDiffProd(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the difference of the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\na = 2, b = 1\nreturn 6\na = 2, b = 2\nreturn 8\n*/\nconst diffDiffDiffSumProd = (a, b) => {\n\treturn diffDiffSumProd(a, b) - diffDiffSumProd(a, b)\n}\n\n/*\nGiven two non-negative integers a and b, return the difference of the difference of the difference of the sum of the product of the digits of a and b.\n\nExample:\na = 1, b = 2\nreturn 1\n", "passed": 0}
{"task_id": "JavaScript/132", "prompt": "/*\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return true if and only if there is a valid subsequence of brackets\n\twhere at least one bracket in the subsequence is nested.\n\tisNested('[[]]') ➞ true\n\tisNested('[]]]]]]][[[[[]') ➞ false\n\tisNested('[][]') ➞ false\n\tisNested('[]') ➞ false\n\tisNested('[[][]]') ➞ true\n\tisNested('[[]][[') ➞ true\n\t*/\nconst isNested = (string) => {\n\tlet opening_bracket_index = []\n\tlet closing_bracket_index1 = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == '[') {\n\t\t\topening_bracket_index.push(i)\n\t\t}\n\t\telse {\n\t\t\tclosing_bracket_index1.push(i)\n\t\t}\n\t}\n\tlet closing_bracket_index = []\n\tfor (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return true if and only if there is a valid subsequence of brackets\n\twhere at least one bracket in the subsequence is nested.\n\tisNested('[[]]') ➞ true\n\tisNested('[]]]]]]][[[[[]') ➞ false\n\tisNested('[][]') ➞ false\n\tisNested('[]') ➞ false\n\tisNested('[[][]]') ➞ true\n\tisNested('[[]][[') ➞ true\n\t*/\nconst isNested = (string) => {\n\tlet opening_bracket_index = []\n\tlet closing_bracket_index1 = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == '[') {\n\t\t\topening_bracket_index.push(i)\n\t\t}\n\t\telse {\n\t\t\tclosing_bracket_index1.push(i)\n\t\t}\n\t}\n\tlet closing_bracket_index = []\n\tfor (let i = 0; i < closing_bracket_index1.length; i++) {\n\t\tif (closing_bracket_index1[i] < opening_bracket_index[i]) {\n\t\t\tclosing_bracket_index.push(closing_bracket_index1[i])\n\t\t}\n\t}\n\treturn opening_bracket_index.length > 0 && opening_bracket_index.length == closing_bracket_index.length\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[[]][[['))\nconsole.log(isNested('[][]][[['))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n\t*/\nconst sumSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet y = lst[i]\n\t\tif (y % 1 != 0) {\n\t\t\tif (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n\t*/\nconst sumSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet y = lst[i]\n\t\tif (y % 1!= 0) {\n\t\t\tif (y > 0) { y = y - y % 1 + 1 }\n\t\t\telse { y = y - y % 1 - 1 }\n\t\t}\n\t\tp += y * y\n\t}\n\treturn p\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastCharIsALetter(\"apple pie\") ➞ false\n\tcheckIfLastCharIsALetter(\"apple pi e\") ➞ true\n\tcheckIfLastCharIsALetter(\"apple pi e \") ➞ false\n\tcheckIfLastCharIsALetter(\"\") ➞ false\n\t*/\nconst checkIfLastCharIsALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastCharIsALetter(\"apple pie\") ➞ false\n\tcheckIfLastCharIsALetter(\"apple pi e\") ➞ true\n\tcheckIfLastCharIsALetter(\"apple pi e \") ➞ false\n\tcheckIfLastCharIsALetter(\"\") ➞ false\n\t*/\nconst checkIfLastCharIsALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t\treturn false\n\t}\n\tlet z = txt[len - 2].charCodeAt()\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n\t\tif (z >= 65 && z <= 90) { return true }\n\t\treturn false\n\t}\n\treturn false\n}\n\n/* Create a function that returns true if the last two characters\n\tof a given string are both alphabetical characters and are not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n\tcheckIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n\tcheckIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n\tcheckIfLastTwoCharsAreALetter(\"\") ➞ false\n\t*/\nconst checkIfLastTwoCharsAreALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tlet z = txt[len - 2].charCodeAt()\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n\t\tif ((z >= 65 && z <= 90) || (z >= 97 && z <= 122)) { return true }\n\t\treturn false\n\t}\n\treturn false\n}\n\n/* Create a function that returns true if the last three characters\n\tof a given string are all alphabetical characters and are not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n\tcheckIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n\tcheckIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n\tcheckIfLastThreeCharsAreALetter(\"\") ➞ false\n\t*/\nconst checkIfLastThreeCharsAreALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tlet z = txt[len - 2].charCodeAt()\n\tlet w = txt[len - 3].charCodeAt()\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n\t\tif ((z >= 65 && z <= 90) || (z >= 97 && z <= 122)) {\n\t\t\tif ((w >= 65 && w <= 90) || (w >= 97 && w <= 122)) { return true }\n\t\t\treturn false\n\t\t}\n\t\treturn false\n\t}\n\treturn false\n}\n\n/* Create a function that returns true if the last four characters\n\tof a given string are all alphabetical characters and are not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n\tcheckIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n\tcheckIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n\tcheckIfLastFourCharsAreALetter(\"\") ➞ false\n\t*/\nconst checkIfLastFourCharsAreALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tlet z = txt[len - 2].charCodeAt()\n\tlet w = txt[len - 3].charCodeAt()\n\tlet x = txt[len - 4].charCodeAt()\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n\t\tif ((z >= 65 && z <= 90) || (z >= 97 && z <= 122)) {\n\t\t\tif ((w >= 65 && w <= 90) || (w >= 97 && w <= 122)) {\n\t\t\t\tif ((x >= 65 && x <= 90) || (x >= 97 && x <= 122)) { return true }\n\t\t\t\treturn false\n\t\t\t}\n\t\t\treturn false\n\t\t}\n\t\treturn false\n\t}\n\treturn false\n}\n\n/* Create a function that returns true if the last five characters\n\tof a given string are all alphabetical characters and are not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n\tcheckIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n\tcheckIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n\tcheckIfLastFiveCharsAreALetter(\"\") ➞ false\n\t*/\nconst checkIfLastFiveCharsAreALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tlet z = txt[len - 2].charCodeAt()\n\tlet w = txt[len - 3].charCodeAt()\n\tlet x = txt[len - 4].charCodeAt()\n\tlet v = txt[len - 5].charCodeAt()\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) {\n\t\tif ((z >= 65 && z <=", "passed": 0}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately preceding it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 2\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange2 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] > arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately following it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 4\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange3 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately following it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 4\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange4 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] > arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately preceding it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange5 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately following it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange6 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] > arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately following it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange7 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately preceding it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 2\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange8 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] > arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than the element immediately following it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 2\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange9 = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*\n\tCreate a function which returns the largest index of an element which\n\tis not less than", "passed": 0}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn [a, b]\n}\n\n/*\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers2 = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn [a, b]\n}\n\n/*\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers3 = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn [a, b]\n}\n\n/*\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers4 = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn [a, b]\n}\n\n/*\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers5 = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn [a, b]\n}\n\n/*\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers6 = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn [a, b]\n}\n\n/*\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallest", "passed": 0}
{"task_id": "JavaScript/137", "prompt": "/*\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be . or ,\n\n\tcompareOne(1, 2.5) ➞ 2.5\n\tcompareOne(1, \"2,3\") ➞ \"2,3\"\n\tcompareOne(\"5,1\", \"6\") ➞ \"6\"\n\tcompareOne(\"1\", 1) ➞ null\n\t*/\nconst compareOne = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareOne(1, 2.5) ➞ 2.5\n\tcompareOne(1, \"2,3\") ➞ \"2,3\"\n\tcompareOne(\"5,1\", \"6\") ➞ \"6\"\n\tcompareOne(\"1\", 1) ➞ null\n\t*/\nconst compareOne = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tif (aa == bb) { return null }\n\tif (aa > bb) { return a }\n\treturn b\n}\n\n/*\n\tCreate a function that takes two numbers and returns the larger number.\n\tReturn null if the numbers are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareTwo(1, 2.5) ➞ 2.5\n\tcompareTwo(1, \"2,3\") ➞ \"2,3\"\n\tcompareTwo(\"5,1\", \"6\") ➞ \"6\"\n\tcompareTwo(\"1\", 1) ➞ null\n\t*/\nconst compareTwo = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tif (aa == bb) { return null }\n\tif (aa > bb) { return a }\n\treturn b\n}\n\n/*\n\tCreate a function that takes two strings and returns the larger string.\n\tReturn null if the strings are equal.\n\n\tcompareTwo(\"1\", \"2\") ➞ \"2\"\n\tcompareTwo(\"1\", \"2,3\") ➞ \"2,3\"\n\tcompareTwo(\"1\", \"2,3,4\") ➞ \"2,3,4\"\n\tcompareTwo(\"1\", \"2,3,4,5\") ➞ \"2,3,4,5\"\n\tcompareTwo(\"1\", \"2,3,4,5,6\") ➞ \"2,3,4,5,6\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7\") ➞ \"2,3,4,5,6,7\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8\") ➞ \"2,3,4,5,6,7,8\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9\") ➞ \"2,3,4,5,6,7,8,9\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10\") ➞ \"2,3,4,5,6,7,8,9,10\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11\") ➞ \"2,3,4,5,6,7,8,9,10,11\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12\") ➞ \"2,3,4,5,6,7,8,9,10,11,12\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13,14\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13,14\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13,14,15\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13,14,15\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\"\n\tcompareTwo(\"1\", \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") ➞ \"2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\"\n\t", "passed": 0}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tisEqualToSumEven(4) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == true\n\t*/\nconst isEqualToSumEven = (n) => {\n\treturn (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tisEqualToSumEven(4) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == true\n\t*/\nconst isEqualToSumEven = (n) => {\n\treturn (n >= 8 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n\tExample\n\tisEqualToSumEven(5) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == false\n\tisEqualToSumEven(10) == true\n\t*/\nconst isEqualToSumEven2 = (n) => {\n\treturn (n >= 10 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n\tExample\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == false\n\tisEqualToSumEven(10) == false\n\tisEqualToSumEven(12) == true\n\t*/\nconst isEqualToSumEven3 = (n) => {\n\treturn (n >= 12 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n\tExample\n\tisEqualToSumEven(7) == false\n\tisEqualToSumEven(8) == false\n\tisEqualToSumEven(10) == false\n\tisEqualToSumEven(12) == false\n\tisEqualToSumEven(14) == true\n\t*/\nconst isEqualToSumEven4 = (n) => {\n\treturn (n >= 14 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n\tExample\n\tisEqualToSumEven(8) == true\n\tisEqualToSumEven(10) == false\n\tisEqualToSumEven(12) == false\n\tisEqualToSumEven(14) == false\n\tisEqualToSumEven(16) == true\n\t*/\nconst isEqualToSumEven5 = (n) => {\n\treturn (n >= 16 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n\tExample\n\tisEqualToSumEven(9) == true\n\tisEqualToSumEven(10) == false\n\tisEqualToSumEven(12) == false\n\tisEqualToSumEven(14) == false\n\tisEqualToSumEven(16) == false\n\tisEqualToSumEven(18) == true\n\t*/\nconst isEqualToSumEven6 = (n) => {\n\treturn (n >= 18 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n\tExample\n\tisEqualToSumEven(10) == true\n\tisEqualToSumEven(12) == false\n\tisEqualToSumEven(14) == false\n\tisEqualToSumEven(16) == false\n\tisEqualToSumEven(18) == false\n\tisEqualToSumEven(20) == true\n\t*/\nconst isEqualToSumEven7 = (n) => {\n\treturn (n >= 20 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\n\tExample\n\tisEqualToSumEven(11) == true\n\tisEqualToSumEven(12) == false\n\tisEqualToSumEven(14) == false\n\tisEqualToSumEven(16) == false\n\tisEqualToSumEven(18) == false\n\tisEqualToSumEven(20) == false\n\tisEqualToSumEven(22) == true\n\t*/\nconst isEqualToSumEven8 = (n) => {\n\treturn (n >= 22 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 12 positive even numbers\n\tExample\n\tisEqualToSumEven(12) == true\n\tisEqualToSumEven(14) == false\n\tisEqualToSumEven(16) == false\n\tisEqualToSumEven(18) == false\n\tisEqualToSumEven(20) == false\n\tisEqualToSumEven(22) == false\n\tisEqualToSumEven(24) == true\n\t*/\nconst isEqualToSumEven9 = (n) => {\n\treturn (n >= 24 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 13 positive even numbers\n\tExample\n\tisEqualToSumEven(13) == true\n\tisEqualToSumEven(14) == false\n\tisEqualToSumEven(16) == false\n\tisEqualToSumEven(18) == false\n\tisEqualToSumEven(20) == false\n\tisEqualToSumEven(22) == false\n\tisEqualToSumEven(24) == false\n\tisEqualToSumEven(26) == true\n\t*/\nconst isEqualToSumEven10 = (n) => {\n\treturn (n >= 26 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 14 positive even numbers\n\tExample\n\tisEqualToSumEven(14) == true\n\tisEqualToSumEven(16) == false\n\tisEqualToSumEven(18) == false\n\tisEqualToSumEven(20) == false\n\tisEqualToSumEven(22) == false\n\tisEqualToSumEven(24) == false\n\tisEqualToSumEven(26) == false\n\tisEqualToSumEven(28) == true\n\t*/\nconst isEqualToSumEven11 = (n) => {\n\treturn (n >= 28 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 15 positive even numbers\n\tExample\n\tisEqualToSumEven(15) == true\n\tisEqualToSumEven(16) == false\n\tisEqualToSumEven", "passed": 0}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> specialFactorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t*/\nconst specialFactorial = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> specialFactorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t*/\nconst specialFactorial = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt *= n;\n\t\t}\n\t\tp = n;\n\t\tn--;\n\t}\n\treturn t;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial2 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial3 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial4 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial5 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial6 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial7 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial8 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial9 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial10 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial11 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial12 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial13 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial14 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial15 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial16 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial17 = (n) => {\n\tlet p = 1;\n\twhile (n > 1) {\n\t\tp *= n;\n\t\tn--;\n\t}\n\treturn p;\n};\n\n/*\n\tThe function will receive an integer as input and should return the\n\tfactorial of this integer.\n\t*/\nconst factorial18 = (n) => {\n\tlet p = 1;\n\twhile (n > 1", "passed": 0}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n\t>>> allPrefixes('abc')\n\t['a', 'ab', 'abc']\n\t*/\nconst allPrefixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n\t>>> allPrefixes('abc')\n\t['a', 'ab', 'abc']\n\t*/\nconst allPrefixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(0, i+1));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'bc', 'c', 'cb', 'cba', 'bca', 'bac', 'cab', 'cba', 'bca', 'cab']\n\t*/\nconst", "passed": 0}
{"task_id": "JavaScript/140", "prompt": "/*\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n  \n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"_Example_2\"\n\tfixSpaces(\" Example   3\") == \"_Example-3\"\n\t*/\nconst fixSpaces = (text) => {\n\tlet t = ''\n\tlet c = 0\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] == ' ') { c++ }\n\t\telse if (c > 0) {\n\t\t\tif (c == 1) { t += '_' }\n\t\t\tif (c == 2) { t += '__' }\n\t\t\tif (c > 2) { t += '-' }\n\t\t\tt += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n  \n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"_Example_2\"\n\tfixSpaces(\" Example   3\") == \"_Example-3\"\n\t*/\nconst fixSpaces = (text) => {\n\tlet t = ''\n\tlet c = 0\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { c++ }\n\t\telse if (c > 0) {\n\t\t\tif (c == 1) { t += '_' }\n\t\t\tif (c == 2) { t += '__' }\n\t\t\tif (c > 2) { t += '-' }\n\t\t\tt += text[i]\n\t\t\tc = 0\n\t\t} else {\n\t\t\tt += text[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return a string with all the spaces in it replaced with underscores.\n\t\n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"Example_2\"\n\tfixSpaces(\" Example   3\") == \"Example_3\"\n\t*/\nconst fixUnderscores = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text", "passed": 0}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length != 2) { return 'No' }\n\tif (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length!= 2) { return 'No' }\n\tif (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\treturn 'Yes'\n}\n\n/*\n\tCreate a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck2 = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length!= 2) { return 'No' }\n\tif (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\treturn 'Yes'\n}\n\n/*\n\tCreate a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck3 = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length!= 2) { return 'No' }\n\tif (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\treturn 'Yes'\n}\n\n/*\n\tCreate a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck4 = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length!= 2) { return 'No' }\n\tif (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\treturn 'Yes'\n}\n\n/*\n\tCreate a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z", "passed": 0}
{"task_id": "JavaScript/142", "prompt": "/*\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquares = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquares = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n\t}\n\treturn y\n}\n\n/*\n\t\"This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\"\n\t\n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumCubes = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] * lst[i] }\n\t}\n\treturn y\n}\n\n/*\n\t\"This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\"\n\t\n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquaresAndCubes = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n\t}\n\treturn y\n}\n\n/*\n\t\"This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\"\n\t\n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquaresAndCubes2 = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n\t}\n\treturn y\n}\n\n/*\n\t\"This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\"\n\t\n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquaresAndCubes3 = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n\t}\n\treturn y\n}\n\n/*\n\t\"This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\"\n\t\n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquaresAndCubes4 = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i", "passed": 0}
{"task_id": "JavaScript/143", "prompt": "/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentence = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentence = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (t[j].substr(0, i) == t[j].substr(i, i)) {\n\t\t\t\tu = i\n\t\t\t}\n\t\t}\n\t\tp += t[j].substr(0, u)\n\t}\n\treturn p\n}\n\n/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentencePrime = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (t[j].substr(0, i) == t[j].substr(i, i)) {\n\t\t\t\tu = i\n\t\t\t}\n\t\t}\n\t\tp += t[j].substr(0, u)\n\t}\n\treturn p\n}\n\n/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentencePrime2 = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (t[j].substr(0, i) == t[j].substr(i, i)) {\n\t\t\t\tu = i\n\t\t\t}\n\t\t}\n\t\tp += t[j].substr(0, u)\n\t}\n\treturn p\n}\n\n/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentencePrime3 = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (t[j].substr(0, i) == t[j].substr(i, i)) {\n\t\t\t\tu = i\n\t\t\t}\n\t\t}\n\t\tp += t[j].substr(0, u)\n\t}\n\treturn p\n}\n\n/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentencePrime4 = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (t[j].substr(0, i) == t[j].substr(i, i)) {\n\t\t\t\tu = i\n", "passed": 0}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet n = Number(a[1]) * Number(b[1])\n\treturn m === Number(n)\n}\n\n/*\n\tYour task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify2 = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet n = Number(a[1]) * Number(b[1])\n\treturn m === Number(n)\n}\n\n/*\n\tYour task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify3 = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet n = Number(a[1]) * Number(b[1])\n\treturn m === Number(n)\n}\n\n/*\n\tYour task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify4 = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet n = Number(a[1]) * Number(b[1])\n\treturn m === Number(n)\n}\n\n/*\n\tYour task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify5 = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet n = Number(a[1]) * Number(b[1])\n\treturn m === Number(n)\n}\n\n/*\n\tYour task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify6 = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet n = Number(a[1]) * Number(b[1])\n\treturn m === Number(n)\n}\n\n/*\n\tYour task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a", "passed": 0}
{"task_id": "JavaScript/145", "prompt": "/*\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n\t\t\twhile (d >= 10) {\n\t\t\t\tn += d % 10;\n\t\t\t\td = (d - d % 10) / 10;\n\t\t\t}\n\t\t\tif (m > n) {\n\t\t\t\tp[k] = y * p[k] + u * p[k + 1];\n\t\t\t\tp[k + 1] = n * p[k + 1] + m * p[k];\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\n/*\n\tWrite a function which sorts the given list of strings\n\tin ascending order according to the sum of their characters.\n\tNote: if there are several items with similar sum of their characters,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n\t\t\twhile (d >= 10) {\n\t\t\t\tn += d % 10;\n\t\t\t\td = (d - d % 10) / 10;\n\t\t\t}\n\t\t\tif (m > n) {\n\t\t\t\tp[k] = y * p[k] + u * p[k + 1];\n\t\t\t\tp[k + 1] = n * p[k + 1] + m * p[k];\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\n/*\n\tWrite a function which sorts the given list of strings\n\tin ascending order according to the sum of their characters.\n\tNote: if there are several items with similar sum of their characters,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n\t\t\twhile (d >= 10) {\n\t\t\t\tn += d % 10;\n\t\t\t\td = (d - d % 10) / 10;\n\t\t\t}\n\t\t\tif (m > n) {\n\t\t\t\tp[k] = y * p[k] + u * p[k + 1];\n\t\t\t\tp[k + 1] = n * p[k + 1] + m * p[k];\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\n/*\n\tWrite a function which sorts the given list of strings\n\tin ascending order according to the sum of their characters.\n\tNote: if there are several items with similar sum of their characters,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n\t\t\twhile (d >= 10) {\n\t\t\t\tn += d % 10;\n\t\t\t\td = (d - d % 10) / 10;\n\t\t\t}\n\t\t\tif (m > n) {\n\t\t\t\tp[k] = y * p[k] + u * p[k + 1];\n\t\t\t\tp[k + 1] = n * p[k + 1] + m * p[k];\n\t\t\t}\n\t\t}\n\t}", "passed": 0}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t*/\nconst specialFilter = (nums) => {\n\tlet p = 0\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (nums[i] < 10) { continue }\n\t\tlet y = nums[i].toString()\n\t\tif (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t*/\nconst specialFilter = (nums) => {\n\tlet p = 0\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (nums[i] < 10) { continue }\n\t\tlet y = nums[i].toString()\n\t\tif (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n\t\t\tp++\n\t\t}\n\t}\n\treturn p\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 1\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t*/\nconst getMaxTriples = (n) => {\n\tlet y = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ty.push(i * i - i + 1)\n\t}\n\tlet u = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 1\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t*/\nconst getMaxTriples = (n) => {\n\tlet y = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ty.push(i * i - i + 1)\n\t}\n\tlet u = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n\t\t\tfor (let k = j + 1; k < n; k++) {\n\t\t\t\tif (y[i] + y[j] + y[k] % 3 === 0) {\n\t\t\t\t\tu++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn u\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2.\n\tThe function should return a tuple containing all planets whose orbits are\n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by\n\tthe proximity to the sun.\n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names.\n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t*/\nconst bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2.\n\tThe function should return a tuple containing all planets whose orbits are\n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by\n\tthe proximity to the sun.\n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names.\n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t*/\nconst bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) { return [] }\n\tfor (let i = lo; i <= hi; i++) {\n\t\tu.push(y[i])\n\t}\n\treturn u\n}\n\n/*\n\tWrite a function that takes two planet names as strings planet1 and planet2.\n\tThe function should return a tuple containing all planets whose orbits are\n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by\n\tthe proximity to the sun.\n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names.\n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t*/\nconst bf2 = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) { return [] }\n\tfor (let i = lo; i <= hi; i++) {\n\t\tu.push(y[i])\n\t}\n\treturn u\n}\n\nconst bf3 = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) { return [] }\n\tfor (let i = lo; i <= hi; i++) {\n\t\tu.push(y[i])\n\t}\n\treturn u\n}\n\nconst bf4 = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) { return [] }\n\tfor (let i = lo; i <= hi; i++) {\n\t\tu.push(y[i])\n\t}\n\treturn u\n}\n\nconst bf5 = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) { return [] }\n\tfor (let i = lo; i <= hi; i++) {\n\t\tu.push(y[i])\n\t}\n\treturn u\n}\n\nconst bf6 = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) { return [] }\n\tfor (let i = lo; i <= hi; i++) {\n\t\tu.push", "passed": 0}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t*/\nconst sortedListSum = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i].length % 2 == 0) {\n\t\t\tp.push(lst[i])\n\t\t}\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t*/\nconst sortedListSum = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i].length % 2 == 0) {\n\t\t\tp.push(lst[i])\n\t\t}\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (f == 1) {\n\t\t\t\tp.splice(k, 1)\n\t\t\t\tk--\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconst list_sort = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tp.push(lst[i])\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (f == 1) {\n\t\t\t\tp.splice(k, 1)\n\t\t\t\tk--\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconst list_sort_2 = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tp.push(lst[i])\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (f == 1) {\n\t\t\t\tp.splice(k, 1)\n\t\t\t\tk--\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconst list_sort_3 = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tp.push(lst[i])\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (f == 1) {\n\t\t\t\tp.splice(k, 1)\n\t\t\t\tk--\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconst list_sort_4 = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tp.push(lst[i])\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (f == 1) {\n\t\t\t\tp.splice(k, 1)\n\t\t\t\tk--\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconst list_sort_5 = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tp.push(lst[i])\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor", "passed": 0}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0)\n\t'0'\n\t>>> stringSequence(5)\n\t'0 1 2 3 4 5'\n\t*/\nconst stringSequence = (n) => {\n\treturn [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0)\n\t'0'\n\t>>> stringSequence(5)\n\t'0 1 2 3 4 5'\n\t*/\nconst stringSequence = (n) => {\n\treturn [...Array(n).keys(), n].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0, 5)\n\t'0 1 2 3 4 5'\n\t>>> stringSequence(5, 5)\n\t'0 1 2 3 4 5'\n\t>>> stringSequence(5, 0)\n\t'0 1 2 3 4 5'\n\t>>> stringSequence(5, 6)\n\t'0 1 2 3 4 5 6'\n\t>>> stringSequence(5, 7)\n\t'0 1 2 3 4 5 6 7'\n\t>>> stringSequence(5, 8)\n\t'0 1 2 3 4 5 6 7 8'\n\t>>> stringSequence(5, 9)\n\t'0 1 2 3 4 5 6 7 8 9'\n\t>>> stringSequence(5, 10)\n\t'0 1 2 3 4 5 6 7 8 9 10'\n\t>>> stringSequence(5, 11)\n\t'0 1 2 3 4 5 6 7 8 9 10 11'\n\t>>> stringSequence(5, 12)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12'\n\t>>> stringSequence(5, 13)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n\t>>> stringSequence(5, 14)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n\t>>> stringSequence(5, 15)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n\t>>> stringSequence(5, 16)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n\t>>> stringSequence(5, 17)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17'\n\t>>> stringSequence(5, 18)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n\t>>> stringSequence(5, 19)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n\t>>> stringSequence(5, 20)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n\t>>> stringSequence(5, 21)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'\n\t>>> stringSequence(5, 22)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22'\n\t>>> stringSequence(5, 23)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'\n\t>>> stringSequence(5, 24)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'\n\t>>> stringSequence(5, 25)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n\t>>> stringSequence(5, 26)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26'\n\t>>> stringSequence(5, 27)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27'\n\t>>> stringSequence(5, 28)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28'\n\t>>> stringSequence(5, 29)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29'\n\t*/\nconst stringSequence = (n, start = 0) => {\n\treturn [...Array(n).keys(), start].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0, 5)\n\t'0 1 2 3 4 5'\n\t>>> stringSequence(5, 5)\n\t'0 1 2 3 4 5'\n\t>>> stringSequence(5, 0)\n\t'0 1 2 3 4 5'\n\t>>> stringSequence(5, 6)\n\t'0 1 2 3 4 5 6'\n\t>>> stringSequence(5, 7)\n\t'0 1 2 3 4 5 6 7'\n\t>>> stringSequence(5, 8)\n\t'0 1 2 3 4 5 6 7 8'\n\t>>> stringSequence(5, 9)\n\t'0 1 2 3 4 5 6 7 8 9'\n\t>>> stringSequence(5, 10)\n\t'0 1 2 3 4 5 6 7 8 9 10'\n\t>>> stringSequence(5, 11)\n\t'0 1 2 3 4 5 6 7 8 9 10 11'\n\t>>> stringSequence(5, 12)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12'\n\t>>> stringSequence(5, 13)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n\t>>> stringSequence(5, 14)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n\t>>> stringSequence(5, 15)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n\t>>> stringSequence(5, 16)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n\t>>> stringSequence(5, 17)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17'\n\t>>> stringSequence(5, 18)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n\t>>> stringSequence(5, 19)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n\t>>> stringSequence(5, 20)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n\t>>> stringSequence(", "passed": 0}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor xOrY(7, 34, 12) == 34\n\tfor xOrY(15, 8, 5) == 5\n  \n\t*/\nconst xOrY = (n, x, y) => {\n\tlet len = n\n\tif (len == 1 || len == 0) { return y }\n\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor xOrY(7, 34, 12) == 34\n\tfor xOrY(15, 8, 5) == 5\n  \n\t*/\nconst xOrY = (n, x, y) => {\n\tlet len = n\n\tif (len == 1 || len == 0) { return y }\n\tfor (let i = 2; i * i <= len; i++) {\n\t\tif (n % i === 0) { return x }\n\t}\n\treturn y\n}\n\nconsole.log(xOrY(7, 34, 12))\nconsole.log(xOrY(15, 8, 5))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n\tdoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdoubleTheDifference([-1, -2, 0]) == 0\n\tdoubleTheDifference([9, -2]) == 81\n\tdoubleTheDifference([0]) == 0\n\tIf the input list is empty, return 0.\n\t*/\nconst doubleTheDifference = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1 && lst[i] > 0) {\n\t\t\tp += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n\tdoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdoubleTheDifference([-1, -2, 0]) == 0\n\tdoubleTheDifference([9, -2]) == 81\n\tdoubleTheDifference([0]) == 0\n\tIf the input list is empty, return 0.\n\t*/\nconst doubleTheDifference = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1 && lst[i] > 0) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the numbers in the list that are even.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfEven = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the numbers in the list that are odd.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfOdd = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the squares of the numbers in the list that are even.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfEvenSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the squares of the numbers in the list that are odd.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfOddSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the difference of the numbers in the list that are even.\n\nIf the input list is empty, return 0.\n*/\nconst differenceOfEven = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the difference of the numbers in the list that are odd.\n\nIf the input list is empty, return 0.\n*/\nconst differenceOfOdd = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the difference of the squares of the numbers in the list that are even.\n\nIf the input list is empty, return 0.\n*/\nconst differenceOfEvenSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the difference of the squares of the numbers in the list that are odd.\n\nIf the input list is empty, return 0.\n*/\nconst differenceOfOddSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the numbers in the list that are even.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfEvenNumbers = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the numbers in the list that are odd.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfOddNumbers = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the squares of the numbers in the list that are even.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfEvenSquaresNumbers = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven a list of numbers, return the sum of the squares of the numbers in the list that are odd.\n\nIf the input list is empty, return 0.\n*/\nconst sumOfOddSquaresNumbers = (lst) => {\n\tlet p", "passed": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t*/\nconst compare = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t*/\nconst compare = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n if (game[i]<0)\n\tgame[i] = 0\n\t}\n\treturn game\n}\n\nconst compare2 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare3 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare4 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare5 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare6 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare7 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare8 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare9 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare10 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare11 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare12 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare13 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare14 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare15 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare16 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare17 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare18 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare19 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare20 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare21 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare22 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare23 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare24 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare25 = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n\t}\n\treturn game\n}\n\nconst compare26 = (game, guess) => {\n", "passed": 0}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters\n\tin the extension's name, the strength is given by the fraction CAP - SM.\n\tYou should find the strongest extension and return a string in this\n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n\t(its strength is -1).\n\tExample:\n\tfor strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\t*/\nconst strongestExtension = (class_name, extensions) => {\n\tlet u = 0\n\tlet s = -Infinity\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tlet y = 0\n\t\tfor (let j = 0; j < extensions[i].length; j++) {\n\t\t\tlet k = extensions[i][j].charCodeAt()\n\t\t\tif (k >= 65 && k <= 90) { y += 1 }\n\t\t\tif (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters\n\tin the extension's name, the strength is given by the fraction CAP - SM.\n\tYou should find the strongest extension and return a string in this\n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n\t(its strength is -1).\n\tExample:\n\tfor strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n\t*/\nconst strongestExtension = (class_name, extensions) => {\n\tlet u = 0\n\tlet s = -Infinity\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tlet y = 0\n\t\tfor (let j = 0; j < extensions[i].length; j++) {\n\t\t\tlet k = extensions[i][j].charCodeAt()\n\t\t\tif (k >= 65 && k <= 90) { y += 1 }\n\t\t\tif (k >= 97 && k <= 122) { y -= 1 }\n\t\t}\n\t\tif (y > u) {\n\t\t\tu = y\n\t\t\ts = i\n\t\t}\n\t}\n\treturn class_name + '.' + extensions[s]\n}\n\n/*\n\tGiven a class name and a list of extensions, return a list of the\n\textensions that are not in the class.\n\tExample:\n\tfor allExtensions('my_class', ['AA', 'Be', 'CC']) == ['AA', 'Be', 'CC']\n\t*/\nconst allExtensions = (class_name, extensions) => {\n\tlet result = []\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tif (extensions[i]!== class_name) {\n\t\t\tresult.push(extensions[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tGiven a class name and a list of extensions, return a list of the\n\textensions that are in the class.\n\tExample:\n\tfor allInClass('my_class', ['AA', 'Be', 'CC']) == ['AA', 'Be']\n\t*/\nconst allInClass = (class_name, extensions) => {\n\tlet result = []\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tif (extensions[i] === class_name) {\n\t\t\tresult.push(extensions[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tGiven a class name and a list of extensions, return a list of the\n\textensions that are in the class and not in the list of extensions.\n\tExample:\n\tfor allNotInClass('my_class', ['AA', 'Be', 'CC']) == ['Be']\n\t*/\nconst allNotInClass = (class_name, extensions) => {\n\tlet result = []\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tif (extensions[i]!== class_name) {\n\t\t\tresult.push(extensions[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tGiven a class name and a list of extensions, return a list of the\n\textensions that are in the class and in the list of extensions.\n\tExample:\n\tfor allInClass('my_class', ['AA', 'Be', 'CC']) == ['AA', 'Be']\n\t*/\nconst allInClassAndExtensions = (class_name, extensions) => {\n\tlet result = []\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tif (extensions[i] === class_name) {\n\t\t\tresult.push(extensions[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tGiven a class name and a list of extensions, return a list of the\n\textensions that are in the class and not in the list of extensions.\n\tExample:\n\tfor allNotInClass('my_class', ['AA', 'Be', 'CC']) == ['Be']\n\t*/\nconst allNotInClassAndExtensions = (class_name, extensions) => {\n\tlet result = []\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tif (extensions[i]!== class_name) {\n\t\t\tresult.push(extensions[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tGiven a class name and a list of extensions, return a list of the\n\textensions that are in the class and in the list of extensions.\n\tExample:\n\tfor allInClassAndExtensions('my_class', ['AA', 'Be', 'CC']) == ['AA', 'Be']\n\t*/\nconst allInClassAndExtensionsAndExtensions = (class_name, extensions) => {\n\tlet result = []\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tif (extensions[i] === class_name) {\n\t\t\tresult.push(extensions[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tGiven a class name and a list of extensions, return a list of the\n\textensions that are in the class and not in the list of extensions.\n\tExample:\n\tfor allNotInClassAndExtensions('my_class', ['AA', 'Be', 'CC']) == ['Be']\n\t*/\nconst allNotInClassAndExtensionsAndExtensions = (class_name, extensions) => {\n\tlet result = []\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tif (extensions[i]!== class_name) {\n\t\t\tresult.push(extensions[i])\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tGiven a class name and a list", "passed": 0}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n\tcycpatternCheck(\"abcd\",\"abd\") => false\n\tcycpatternCheck(\"hello\",\"ell\") => true\n\tcycpatternCheck(\"whassup\",\"psus\") => false\n\tcycpatternCheck(\"abab\",\"baa\") => true\n\tcycpatternCheck(\"efef\",\"eeff\") => false\n\tcycpatternCheck(\"himenss\",\"simen\") => true\n\t*/\nconst cycpatternCheck = (a, b) => {\n\tlet l = b.length\n\tlet pat = b + b\n\tfor (let i = 0; i < a.length - l + 1; i++) {\n\t\tfor (let j = 0; j < l + 1; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < l; k++) {\n\t\t\t\tif (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n\tcycpatternCheck(\"abcd\",\"abd\") => false\n\tcycpatternCheck(\"hello\",\"ell\") => true\n\tcycpatternCheck(\"whassup\",\"psus\") => false\n\tcycpatternCheck(\"abab\",\"baa\") => true\n\tcycpatternCheck(\"efef\",\"eeff\") => false\n\tcycpatternCheck(\"himenss\",\"simen\") => true\n\t*/\nconst cycpatternCheck = (a, b) => {\n\tlet l = b.length\n\tlet pat = b + b\n\tfor (let i = 0; i < a.length - l + 1; i++) {\n\t\tfor (let j = 0; j < l + 1; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < l; k++) {\n\t\t\t\tif (a[i + k]!= pat[j + k]) { y = 0 }\n\t\t\t}\n\t\t\tif (y) { return true }\n\t\t}\n\t}\n\treturn false\n}\n\n/*\n\tGiven a string, find the longest palindromic substring in it.\n\t\n\tExample:\n\t\n\tInput: \"babad\"\n\tOutput: \"bab\"\n\t\n\tInput: \"cbbd\"\n\tOutput: \"bb\"\n\t\n\tInput: \"a\"\n\tOutput: \"\"\n\t\n\tInput: \"ac\"\n\tOutput: \"ac\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"abcd\"\n\tOutput: \"abcd\"\n\t\n\tInput: \"abcdefg\"\n\tOutput: \"abcdefg\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale\"\n\tOutput: \"pale\"\n\t\n\tInput: \"pale", "passed": 0}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n\tevenOddCount(-12) ==> (1, 1)\n\tevenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n\tevenOddCount(-12) ==> (1, 1)\n\tevenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = num / 2\n  }\n  return (e, o)\n}\n\n/*\nGiven an array of integers. Return the sum of the even elements in the array.\n\nExample:\n\tevenSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst evenSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 0) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the odd elements in the array.\n\nExample:\n\toddSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst oddSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 1) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the even elements in the array.\n\nExample:\n\tevenSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst evenSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 0) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the odd elements in the array.\n\nExample:\n\toddSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst oddSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 1) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the even elements in the array.\n\nExample:\n\tevenSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst evenSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 0) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the odd elements in the array.\n\nExample:\n\toddSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst oddSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 1) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the even elements in the array.\n\nExample:\n\tevenSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst evenSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 0) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the odd elements in the array.\n\nExample:\n\toddSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst oddSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 1) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the even elements in the array.\n\nExample:\n\tevenSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst evenSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 0) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the odd elements in the array.\n\nExample:\n\toddSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst oddSum = (nums) => {\n  let sum = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 == 1) {\n      sum += nums[i]\n    }\n  }\n  return sum\n}\n\n/*\nGiven an array of integers. Return the sum of the even elements in the array.\n\nExample:\n\tevenSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) ==> 45\n*/\nconst evenSum = (nums) => {\n  let sum = 0\n  for (", "passed": 0}
{"task_id": "JavaScript/156", "prompt": "/*\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> intToMiniRoman(19) == 'xix'\n\t>>> intToMiniRoman(152) == 'clii'\n\t>>> intToMiniRoman(426) == 'cdxxvi'\n\t*/\nconst intToMiniRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> intToMiniRoman(19) == 'xix'\n\t>>> intToMiniRoman(152) == 'clii'\n\t>>> intToMiniRoman(426) == 'cdxxvi'\n\t*/\nconst intToMiniRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n\t\tres = sym[i] + res\n\t\ti--\n\t\tif (div) {\n\t\t\tres = res + sym[i]\n\t\t\tnumber = number - num[i]\n\t\t}\n\t}\n\treturn res\n}\n\n/*\n\tGiven a positive integer, return its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 3999\n\n\tExamples:\n\t>>> intToRoman(19) == 'xix'\n\t>>> intToRoman(15) == 'ix'\n\t>>> intToRoman(4) == 'iv'\n\t*/\nconst intToRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000, 3000, 3999]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m', 'xm', 'ixm']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n\t\tres = sym[i] + res\n\t\ti--\n\t\tif (div) {\n\t\t\tres = res + sym[i]\n\t\t\tnumber = number - num[i]\n\t\t}\n\t}\n\treturn res\n}\n\n/*\n\tGiven a positive integer, return its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 3999\n\n\tExamples:\n\t>>> intToRoman(19) == 'xix'\n\t>>> intToRoman(15) == 'ix'\n\t>>> intToRoman(4) == 'iv'\n\t*/\nconst intToRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000, 3000, 3999]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m', 'xm', 'ixm']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n\t\tres = sym[i] + res\n\t\ti--\n\t\tif (div) {\n\t\t\tres = res + sym[i]\n\t\t\tnumber = number - num[i]\n\t\t}\n\t}\n\treturn res\n}\n\n/*\n\tGiven a positive integer, return its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 3999\n\n\tExamples:\n\t>>> intToRoman(19) == 'xix'\n\t>>> intToRoman(15) == 'ix'\n\t>>> intToRoman(4) == 'iv'\n\t*/\nconst intToRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000, 3000, 3999]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m', 'xm', 'ixm']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n\t\tres = sym[i] + res\n\t\ti--\n\t\tif (div) {\n\t\t\tres = res + sym[i]\n\t\t\tnumber = number - num[i]\n\t\t}\n\t}\n\treturn res\n}\n\n/*\n\tGiven a positive integer, return its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 3999\n\n\tExamples:\n\t>>> intToRoman(19) == 'xix'\n\t>>> intToRoman(15) == 'ix'\n\t>>> intToRoman(4) == 'iv'\n\t*/\nconst intToRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000, 3000, 3999]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m', 'xm', 'ixm']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n\t\tres = sym[i] + res\n\t\ti--\n\t\tif (div) {\n\t\t\tres = res + sym[i]\n\t\t\tnumber = number - num[i]\n\t\t}\n\t}\n\treturn res\n}\n<|endoftext|>", "passed": 0}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n\tsides form a right-angled triangle, false otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or\n\t90 degree.\n\tExample:\n\trightAngleTriangle(3, 4, 5) == true\n\trightAngleTriangle(1, 2, 3) == false\n\t*/\nconst rightAngleTriangle = (a, b, c) => {\n\treturn (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n\tsides form a right-angled triangle, false otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or\n\t90 degree.\n\tExample:\n\trightAngleTriangle(3, 4, 5) == true\n\trightAngleTriangle(1, 2, 3) == false\n\t*/\nconst rightAngleTriangle = (a, b, c) => {\n\treturn (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the length of the\n\tlongest side.\n\tExample:\n\tlongestSide(3, 4, 5) == 5\n\tlongestSide(1, 2, 3) == 3\n\t*/\nconst longestSide = (a, b, c) => {\n\treturn Math.max(Math.max(a, b), c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area.\n\tExample:\n\tarea(3, 4, 5) == 12\n\tarea(1, 2, 3) == 0\n\t*/\nconst area = (a, b, c) => {\n\treturn Math.abs(longestSide(a, b, c) * (longestSide(a, b, c) - longestSide(a, b, c) / 2))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter.\n\tExample:\n\tperimeter(3, 4, 5) == 15\n\tperimeter(1, 2, 3) == 6\n\t*/\nconst perimeter = (a, b, c) => {\n\treturn longestSide(a, b, c) + longestSide(a, b, c) + longestSide(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n\ttriangle.\n\tExample:\n\tareaOfTriangle(3, 4, 5) == 12\n\tareaOfTriangle(1, 2, 3) == 0\n\t*/\nconst areaOfTriangle = (a, b, c) => {\n\treturn area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n\ttriangle.\n\tExample:\n\tperimeterOfTriangle(3, 4, 5) == 15\n\tperimeterOfTriangle(1, 2, 3) == 6\n\t*/\nconst perimeterOfTriangle = (a, b, c) => {\n\treturn perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n\ttriangle.\n\tExample:\n\tareaOfTriangle(3, 4, 5) == 12\n\tareaOfTriangle(1, 2, 3) == 0\n\t*/\nconst areaOfTriangle = (a, b, c) => {\n\treturn area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n\ttriangle.\n\tExample:\n\tperimeterOfTriangle(3, 4, 5) == 15\n\tperimeterOfTriangle(1, 2, 3) == 6\n\t*/\nconst perimeterOfTriangle = (a, b, c) => {\n\treturn perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n\ttriangle.\n\tExample:\n\tareaOfTriangle(3, 4, 5) == 12\n\tareaOfTriangle(1, 2, 3) == 0\n\t*/\nconst areaOfTriangle = (a, b, c) => {\n\treturn area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n\ttriangle.\n\tExample:\n\tperimeterOfTriangle(3, 4, 5) == 15\n\tperimeterOfTriangle(1, 2, 3) == 6\n\t*/\nconst perimeterOfTriangle = (a, b, c) => {\n\treturn perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n\ttriangle.\n\tExample:\n\tareaOfTriangle(3, 4, 5) == 12\n\tareaOfTriangle(1, 2, 3) == 0\n\t*/\nconst areaOfTriangle = (a, b, c) => {\n\treturn area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n\ttriangle.\n\tExample:\n\tperimeterOfTriangle(3, 4, 5) == 15\n\tperimeterOfTriangle(1, 2, 3) == 6\n\t*/\nconst perimeterOfTriangle = (a, b, c) => {\n\treturn perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n\ttriangle.\n\tExample:\n\tareaOfTriangle(3, 4, 5) == 12\n\tareaOfTriangle(1, 2, 3) == 0\n\t*/\nconst areaOfTriangle = (a, b, c) => {\n\treturn area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n\ttriangle.\n\tExample:\n\tperimeterOfTriangle(3, 4, 5) == 15\n\tperimeterOfTriangle(1, 2, 3) == 6\n\t*/\nconst perimeterOfTriangle = (a, b, c) => {\n\treturn perimeter(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n\ttriangle.\n\tExample:\n\tareaOfTriangle(3, 4, 5) == 12\n\tareaOfTriangle(1, 2, 3) == 0\n\t*/\nconst areaOfTriangle = (a, b, c) => {\n\treturn area(a, b, c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n\ttriangle.\n\tExample:\n\tperimeterOfTriangle(3, 4, 5) == 15\n\tperimeterOfTriangle(1, 2, 3) == 6\n\t*/\nconst perimeterOfTriangle = (", "passed": 0}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfindMax([\"name\", \"of\", \"string\"]) === \"string\"\n\tfindMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n\tfindMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n\t*/\nconst findMax = (words) => {\n\tlet s = -1\n\tlet u = -1\n\tif (words.length == 0) { return '' }\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < words[i].length; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < j; k++) {\n\t\t\t\tif (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfindMax([\"name\", \"of\", \"string\"]) === \"string\"\n\tfindMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n\tfindMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n\t*/\nconst findMax = (words) => {\n\tlet s = -1\n\tlet u = -1\n\tif (words.length == 0) { return '' }\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < words[i].length; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < j; k++) {\n\t\t\t\tif (words[i][j] == words[i][k]) { y = 0 }\n\t\t\t}\n\t\t\tif (y == 1) {\n\t\t\t\tp++\n\t\t\t}\n\t\t}\n\t\tif (p > u) {\n\t\t\ts = i\n\t\t\tu = p\n\t\t}\n\t}\n\treturn words[s]\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]))\nconsole.log(findMax([\"name\", \"enam\", \"game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eat = (number, need, remaining) => {\n\tif (need <= remaining) {\n\t\treturn [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eat = (number, need, remaining) => {\n\tif (need <= remaining) {\n\t\treturn [need + number, remaining - need]\n\t} else {\n\t\treturn [number, remaining]\n\t}\n}\n\nconst main = () => {\n\tconst [number, need, remaining] = eat(5, 6, 10)\n\tconsole.log(number, need, remaining)\n}\n\nmain()\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\n/* Given a string, find", "passed": 0}
{"task_id": "JavaScript/160", "prompt": "/*\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\t\tOperand is a list of of non-negative integers.\n\t\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t*/\nconst doAlgebra = (operator, operand) => {\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\t\tOperand is a list of of non-negative integers.\n\t\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t*/\nconst doAlgebra = (operator, operand) => {\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '-') {\n\t\t\t\toperand[i] = -operand[i]\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '+') {\n\t\t\t\toperand[i] += operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn operand.reduce((a, b) => a + b)\n}\n\nconst doAlgebra2 = (operator, operand) => {\n\tlet result = 0\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '-') {\n\t\t\t\toperand[i] = -operand[i]\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '+') {\n\t\t\t\toperand[i] += operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn operand.reduce((a, b) => a + b)\n}\n\nconst doAlgebra3 = (operator, operand) => {\n\tlet result = 0\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n", "passed": 0}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t*/\nconst solve = (s) => {\n\tlet t = 0\n\tlet p = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = s[i].charCodeAt()\n\t\tif (y >= 65 && y <= 90) {\n\t\t\ty += 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 97 && y <= 122) {\n\t\t\ty -= 32;\n\t\t\tt = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t*/\nconst solve = (s) => {\n\tlet t = 0\n\tlet p = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = s[i].charCodeAt()\n\t\tif (y >= 65 && y <= 90) {\n\t\t\ty += 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 97 && y <= 122) {\n\t\t\ty -= 32;\n\t\t\tt = 1;\n\t\t} else {\n\t\t\tt = 0;\n\t\t}\n\t\tif (t) {\n\t\t\tp += s[i];\n\t\t}\n\t}\n\treturn p;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToMd5 = (text) => {\n\tif (text == '') { return null }\n\tvar md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToMd5 = (text) => {\n\tif (text == '') { return null }\n\tvar md5 = require('js-md5')\n\treturn md5.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha1 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha1('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha1 = (text) => {\n\tif (text == '') { return null }\n\tvar sha1 = require('js-sha1')\n\treturn sha1.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha256 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha256('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha256 = (text) => {\n\tif (text == '') { return null }\n\tvar sha256 = require('js-sha256')\n\treturn sha256.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha384 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha384('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha384 = (text) => {\n\tif (text == '') { return null }\n\tvar sha384 = require('js-sha384')\n\treturn sha384.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512.createHash(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == '3e25960a", "passed": 0}
{"task_id": "JavaScript/163", "prompt": "/*\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerateIntegers(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegers(8, 2) => [2, 4, 6, 8]\n\tgenerateIntegers(10, 14) => []\n\t*/\nconst generateIntegers = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerateIntegers(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegers(8, 2) => [2, 4, 6, 8]\n\tgenerateIntegers(10, 14) => []\n\t*/\nconst generateIntegers = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t}\n\treturn result;\n};\n\nconst generateIntegers2 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers3 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers4 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers5 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers6 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers7 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers8 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers9 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers10 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers11 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers12 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers13 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++) {\n\t\tresult.push(i);\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegers14 = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tfor (let i = a; i <= b; i++)", "passed": 0}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tconst notes = music_string.split(' ');\n\tconst result = [];\n\tfor (let i = 0; i < notes.length; i++) {\n\t\tif (note_map[notes[i]]) {\n\t\t\tresult.push(note_map[notes[i]]);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic2 = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tconst notes = music_string.split(' ');\n\tconst result = [];\n\tfor (let i = 0; i < notes.length; i++) {\n\t\tif (note_map[notes[i]]) {\n\t\t\tresult.push(note_map[notes[i]]);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic3 = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tconst notes = music_string.split(' ');\n\tconst result = [];\n\tfor (let i = 0; i < notes.length; i++) {\n\t\tif (note_map[notes[i]]) {\n\t\t\tresult.push(note_map[notes[i]]);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic4 = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tconst notes = music_string.split(' ');\n\tconst result = [];\n\tfor (let i = 0; i < notes.length; i++) {\n\t\tif (note_map[notes[i]]) {\n\t\t\tresult.push(note_map[notes[i]]);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic5 = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tconst notes = music_string.split(' ');\n\tconst result = [];\n\tfor (let i = 0; i < notes.length; i++) {\n\t\tif (note_map[notes[i]]) {\n\t\t\tresult.push(note_map[notes[i]]);\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic6 = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tconst notes = music_string.split(' ');\n\tconst result = [];\n\tfor (let i = 0; i < notes.length; i++) {\n\t\tif (note_map[notes[i", "passed": 0}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> howManyTimes('', 'a')\n\t0\n\t>>> howManyTimes('aaa', 'a')\n\t3\n\t>>> howManyTimes('aaaa', 'aa')\n\t3\n\t*/\nconst howManyTimes = (string, substring) => {\n\tvar times = 0;\n\tfor (let i = 0; i < string.length - substring.length + 1; i++) {\n\t\tif (string.slice(i, i+substring.length) == substring) {\n\t\t\ttimes += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> howManyTimes('', 'a')\n\t0\n\t>>> howManyTimes('aaa', 'a')\n\t3\n\t>>> howManyTimes('aaaa', 'aa')\n\t3\n\t*/\nconst howManyTimes = (string, substring) => {\n\tvar times = 0;\n\tfor (let i = 0; i < string.length - substring.length + 1; i++) {\n\t\tif (string.slice(i, i+substring.length) == substring) {\n\t\t\ttimes += 1;\n\t\t}\n\t}\n\treturn times;\n}\n\n/*\n\tGiven a string, find the longest substring without repeating characters.\n\t>>> longestSubstring('abcabcbb')\n\t'abcabcbb'\n\t>>> longestSubstring('bbbbb')\n\t'b'\n\t>>> longestSubstring('aaaa')\n\t'a'\n\t>>> longestSubstring('a')\n\t'a'\n\t>>> longestSubstring('a')\n\t'a'\n\t>>> longestSubstring('aa')\n\t'a'\n\t>>> longestSubstring('aaa')\n\t'a'\n\t>>> longestSubstring('aaaaa')\n\t'a'\n\t>>> longestSubstring('aaaaaa')\n\t'aaa'\n\t>>> longestSubstring('aaaaaaa')\n\t'aaaa'\n\t>>> longestSubstring('aaaaaaaa')\n\t'aaaaa'\n\t>>> longestSubstring('aaaaaaaaa')\n\t'aaaaaaaa'\n\t>>> longestSubstring('aaaaaaaaaa')\n\t'aaaaaaaaa'\n\t>>> longestSubstring('aaaaaaaaaaa')\n\t'aaaaaaaaaaaa'\n\t>>> longestSubstring('aaaaaaaaaaaaa')\n\t'aaaaaaaaaaaaaaaa'\n\t>>> longestSubstring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "passed": 0}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbers('three one five')\n\t'one three five'\n\t*/\nconst sortNumbers = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbers('three one five')\n\t'one three five'\n\t*/\nconst sortNumbers = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tconst sorted_numbers = [];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsorted_numbers.push(value_map[numbers[i]]);\n\t}\n\treturn sorted_numbers.join('');\n};\n\n/*\n\tInput is a space-delimited string of numbers from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from largest to smallest\n\t>>> sortNumbers('nine eight seven six five four three two one zero')\n\t'one two three four five six seven eight nine'\n\t*/\nconst sortNumbersReverse = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tconst sorted_numbers = [];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsorted_numbers.push(value_map[numbers[i]]);\n\t}\n\treturn sorted_numbers.reverse().join('');\n};\n\n/*\n\tInput is a space-delimited string of numbers from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from largest to smallest\n\t>>> sortNumbersReverse('nine eight seven six five four three two one zero')\n\t'one two three four five six seven eight nine'\n\t*/\nconst sortNumbersReverseReverse = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tconst sorted_numbers = [];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsorted_numbers.push(value_map[numbers[i]]);\n\t}\n\treturn sorted_numbers.reverse().reverse().join('');\n};\n\n/*\n\tInput is a space-delimited string of numbers from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbersReverseReverse('nine eight seven six five four three two one zero')\n\t'one two three four five six seven eight nine'\n\t*/\nconst sortNumbersReverseReverseReverse = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tconst sorted_numbers = [];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsorted_numbers.push(value_map[numbers[i]]);\n\t}\n\treturn sorted_numbers.reverse().reverse().reverse().join('');\n};\n\n/*\n\tInput is a space-delimited string of numbers from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbersReverseReverseReverse('nine eight seven six five four three two one zero')\n\t'one two three four five six seven eight nine'\n\t*/\nconst sortNumbersReverseReverseReverse = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tconst sorted_numbers = [];\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsorted_numbers.push(value_map[numbers[i]]);\n\t}\n\treturn sorted_numbers.reverse().reverse().reverse().reverse().join('');\n};\n\n/*\n\tInput is a space-delimited string of numbers from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from largest to smallest\n\t>>> sortNumbersReverseReverseReverse('nine eight seven six five four three two one zero')\n\t'one two three four five six seven eight nine'\n\t*/\nconst sortNumbersReverseReverseReverseReverse = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n", "passed": 0}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncateNumber(3.5)\n\t0.5\n\t*/\nconst truncateNumber = (number) => {\n\treturn number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncateNumber(3.5)\n\t0.5\n\t*/\nconst truncateNumber = (number) => {\n\treturn number % 1.0;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the integer part of the number.\n\t>>> truncateNumber(3.5)\n\t3\n\t*/\nconst truncateInteger = (number) => {\n\treturn Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals = (number) => {\n\treturn Math.floor(Math.log10(number)) + 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals2 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals3 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals4 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals5 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals6 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals7 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals8 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals9 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals10 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals11 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals12 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals13 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the number of decimals.\n\t>>> truncateNumber(3.5)\n\t1\n\t*/\nconst numberOfDecimals14 = (number) => {\n\treturn number % 1;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller", "passed": 0}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i != j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i!= j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n\t\t\t\t\tlet d = Math.abs(a - b);\n\t\t\t\t\tif (d < distance) {\n\t\t\t\t\t\tdistance = d;\n\t\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\treturn closest_pair;\n};\n\n/*\n\tFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements2 = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i!= j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n\t\t\t\t\tlet d = Math.abs(a - b);\n\t\t\t\t\tif (d < distance) {\n\t\t\t\t\t\tdistance = d;\n\t\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\treturn closest_pair;\n};\n\n/*\n\tFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements3 = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i!= j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n\t\t\t\t\tlet d = Math.abs(a - b);\n\t\t\t\t\tif (d < distance) {\n\t\t\t\t\t\tdistance = d;\n\t\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\treturn closest_pair;\n};\n\n/*\n\tFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements4 = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i!= j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n\t\t\t\t\tlet d = Math.abs(a - b);\n\t\t\t\t\tif (d < distance) {\n\t\t\t\t\t\tdistance = d;\n\t\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\treturn closest_pair;\n};\n\n/*\n\tFrom a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements5 = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i <", "passed": 0}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t*/\nconst rescaleToUnit = (numbers) => {\n\tvar min_number = Math.min(...numbers);\n\tvar max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t*/\nconst rescaleToUnit = (numbers) => {\n\tvar min_number = Math.min(...numbers);\n\tvar max_number = Math.max(...numbers);\n\tvar scale = (max_number - min_number) / (1 - min_number);\n\tvar offset = min_number;\n\treturn numbers.map(number => number * scale + offset);\n};\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) => numbers.map(number => number * number);\n\n/* Given a list of numbers, return a list of the squares of the numbers */\nconst squareNumbers = (numbers) =>", "passed": 0}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n\t>>> filterIntegers(['a', 3.14, 5])\n\t[5]\n\t>>> filterIntegers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterIntegers = (values) => {\n\treturn values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n\t>>> filterIntegers(['a', 3.14, 5])\n\t[5]\n\t>>> filterIntegers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterIntegers = (values) => {\n\treturn values.filter(x => Number.isInteger(x));\n};\n\n/**\n\t* Filter given list of any python values only for floats\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterFloats(['a', 3.14, 5])\n\t* [3.14, 5]\n\t* >>> filterFloats([1, 2, 3, 'abc', {}, []])\n\t* [1, 2, 3]\n\t*/\nconst filterFloats = (values) => {\n\treturn values.filter(x => Number.isFinite(x));\n};\n\n/**\n\t* Filter given list of any python values only for strings\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterStrings(['a', 3.14, 5])\n\t* ['a', '3.14', '5']\n\t* >>> filterStrings([1, 2, 3, 'abc', {}, []])\n\t* [1, 2, 3]\n\t*/\nconst filterStrings = (values) => {\n\treturn values.filter(x => typeof x ==='string');\n};\n\n/**\n\t* Filter given list of any python values only for objects\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterObjects(['a', 3.14, 5])\n\t* [{}, []]\n\t* >>> filterObjects([1, 2, 3, 'abc', {}, []])\n\t* [1, 2, 3]\n\t*/\nconst filterObjects = (values) => {\n\treturn values.filter(x => typeof x === 'object');\n};\n\n/**\n\t* Filter given list of any python values only for arrays\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterArrays(['a', 3.14, 5])\n\t* [[], []]\n\t* >>> filterArrays([1, 2, 3, 'abc', {}, []])\n\t* [[1, 2, 3]]\n\t*/\nconst filterArrays = (values) => {\n\treturn values.filter(x => Array.isArray(x));\n};\n\n/**\n\t* Filter given list of any python values only for dictionaries\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterDictionaries(['a', 3.14, 5])\n\t* [{}, []]\n\t* >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n\t* [{}, []]\n\t*/\nconst filterDictionaries = (values) => {\n\treturn values.filter(x => typeof x === 'object' && typeof x.get === 'function');\n};\n\n/**\n\t* Filter given list of any python values only for functions\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterFunctions(['a', 3.14, 5])\n\t* [], []\n\t* >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n\t* [], []\n\t*/\nconst filterFunctions = (values) => {\n\treturn values.filter(x => typeof x === 'function');\n};\n\n/**\n\t* Filter given list of any python values only for numbers\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterNumbers(['a', 3.14, 5])\n\t* [5], []\n\t* >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n\t* [1, 2, 3], []\n\t*/\nconst filterNumbers = (values) => {\n\treturn values.filter(x => Number.isInteger(x) || Number.isFinite(x));\n};\n\n/**\n\t* Filter given list of any python values only for booleans\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterBooleans(['a', 3.14, 5])\n\t* [], []\n\t* >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n\t* [1, 2, 3], []\n\t*/\nconst filterBooleans = (values) => {\n\treturn values.filter(x => typeof x === 'boolean');\n};\n\n/**\n\t* Filter given list of any python values only for strings\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterStrings(['a', 3.14, 5])\n\t* ['a', '3.14', '5'], []\n\t* >>> filterStrings([1, 2, 3, 'abc', {}, []])\n\t* [1, 2, 3], []\n\t*/\nconst filterStrings2 = (values) => {\n\treturn values.filter(x => typeof x ==='string');\n};\n\n/**\n\t* Filter given list of any python values only for objects\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterObjects(['a', 3.14, 5])\n\t* [{}, []]\n\t* >>> filterObjects([1, 2, 3, 'abc', {}, []])\n\t* [{}, []]\n\t*/\nconst filterObjects2 = (values) => {\n\treturn values.filter(x => typeof x === 'object');\n};\n\n/**\n\t* Filter given list of any python values only for arrays\n\t* @param {Array} values\n\t* @returns {Array}\n\t* @example\n\t* >>> filterArrays(['a', 3.14, 5])\n\t* [[], []]\n\t* >>> filterArrays([1, 2, 3, 'abc', {}, []])\n\t* [[1, 2, 3], []]\n\t*/\nconst filterArrays2 = (values) => {\n\treturn values.filter(x => Array.isArray(x));\n};\n", "passed": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t*/\nconst strlen = (string) => {\n\treturn string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t*/\nconst strlen = (string) => {\n\treturn string.length;\n};\n\n/* Return true if given string is empty\n\t>>> strlen('')\n\tTrue\n\t>>> strlen('abc')\n\tFalse\n\t*/\nconst strlen_is_empty = (string) => {\n\treturn strlen(string) === 0;\n};\n\n/* Return true if given string is not empty\n\t>>> strlen('abc')\n\tTrue\n\t>>> strlen('')\n\tFalse\n\t*/\nconst strlen_is_not_empty = (string) => {\n\treturn strlen(string)!== 0;\n};\n\n/* Return true if given string is equal to given string\n\t>>> strlen('abc') == 'abc'\n\tTrue\n\t>>> strlen('abc') == 'abcd'\n\tFalse\n\t>>> strlen('abc') == 'ab'\n\tFalse\n\t*/\nconst strlen_is_equal = (string, other) => {\n\treturn string === other;\n};\n\n/* Return true if given string is not equal to given string\n\t>>> strlen('abc')!= 'abc'\n\tFalse\n\t>>> strlen('abc')!= 'abcd'\n\tTrue\n\t>>> strlen('abc')!= 'ab'\n\tTrue\n\t*/\nconst strlen_is_not_equal = (string, other) => {\n\treturn string!== other;\n};\n\n/* Return true if given string is less than given string\n\t>>> strlen('abc') < 'abc'\n\tFalse\n\t>>> strlen('abc') < 'abcd'\n\tTrue\n\t>>> strlen('abc') < 'ab'\n\tTrue\n\t*/\nconst strlen_is_less = (string, other) => {\n\treturn string < other;\n};\n\n/* Return true if given string is less than or equal to given string\n\t>>> strlen('abc') <= 'abc'\n\tTrue\n\t>>> strlen('abc') <= 'abcd'\n\tTrue\n\t>>> strlen('abc') <= 'ab'\n\tTrue\n\t*/\nconst strlen_is_less_or_equal = (string, other) => {\n\treturn string <= other;\n};\n\n/* Return true if given string is greater than given string\n\t>>> strlen('abc') > 'abc'\n\tFalse\n\t>>> strlen('abc') > 'abcd'\n\tFalse\n\t>>> strlen('abc') > 'ab'\n\tFalse\n\t*/\nconst strlen_is_greater = (string, other) => {\n\treturn string > other;\n};\n\n/* Return true if given string is greater than or equal to given string\n\t>>> strlen('abc') >= 'abc'\n\tTrue\n\t>>> strlen('abc') >= 'abcd'\n\tTrue\n\t>>> strlen('abc') >= 'ab'\n\tTrue\n\t*/\nconst strlen_is_greater_or_equal = (string, other) => {\n\treturn string >= other;\n};\n\n/* Return true if given string is less than or equal to given string\n\t>>> strlen('abc') <= 'abc'\n\tTrue\n\t>>> strlen('abc') <= 'abcd'\n\tTrue\n\t>>> strlen('abc') <= 'ab'\n\tTrue\n\t*/\nconst strlen_is_less_or_equal = (string, other) => {\n\treturn string <= other;\n};\n\n/* Return true if given string is less than given string\n\t>>> strlen('abc') < 'abc'\n\tFalse\n\t>>> strlen('abc') < 'abcd'\n\tFalse\n\t>>> strlen('abc') < 'ab'\n\tFalse\n\t*/\nconst strlen_is_not_less = (string, other) => {\n\treturn string > other;\n};\n\n/* Return true if given string is less than or equal to given string\n\t>>> strlen('abc') <= 'abc'\n\tTrue\n\t>>> strlen('abc') <= 'abcd'\n\tTrue\n\t>>> strlen('abc') <= 'ab'\n\tTrue\n\t*/\nconst strlen_is_not_less_or_equal = (string, other) => {\n\treturn string < other;\n};\n\n/* Return true if given string is greater than given string\n\t>>> strlen('abc') > 'abc'\n\tFalse\n\t>>> strlen('abc') > 'abcd'\n\tFalse\n\t>>> strlen('abc') > 'ab'\n\tFalse\n\t*/\nconst strlen_is_not_greater = (string, other) => {\n\treturn string < other;\n};\n\n/* Return true if given string is greater than or equal to given string\n\t>>> strlen('abc') >= 'abc'\n\tTrue\n\t>>> strlen('abc') >= 'abcd'\n\tTrue\n\t>>> strlen('abc') >= 'ab'\n\tTrue\n\t*/\nconst strlen_is_not_greater_or_equal = (string, other) => {\n\treturn string > other;\n};\n\n/* Return true if given string is not equal to given string\n\t>>> strlen('abc')!= 'abc'\n\tFalse\n\t>>> strlen('abc')!= 'abcd'\n\tTrue\n\t>>> strlen('abc')!= 'ab'\n\tTrue\n\t*/\nconst strlen_is_not_equal = (string, other) => {\n\treturn string!== other;\n};\n\n/* Return true if given string is not empty\n\t>>> strlen('abc')\n\tTrue\n\t>>> strlen('')\n\tFalse\n\t*/\nconst strlen_is_not_empty = (string) => {\n\treturn strlen(string)!== 0;\n};\n\n/* Return true if given string is not equal to given string\n\t>>> strlen('abc')!= 'abc'\n\tFalse\n\t>>> strlen('abc')!= 'abcd'\n\tTrue\n\t>>> strlen('abc')!= 'ab'\n\tTrue\n\t*/\nconst strlen_is_not_equal = (string, other) => {\n\treturn string!== other;\n};\n\n/* Return true if given string is less than given string\n\t>>> strlen('abc') < 'abc'\n\tFalse\n\t>>> strlen('abc') < 'abcd'\n\tFalse\n\t>>> strlen('abc') < 'ab'\n\tFalse\n\t*/\nconst strlen_is_not_less = (string, other) => {\n\treturn string > other;\n};\n\n/* Return true if given string is less than or equal", "passed": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t*/\nconst largestDivisor = (n) => {\n\tfor (let i = n - 1; i >= 0; i--)\n\t\tif (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t*/\nconst largestDivisor = (n) => {\n\tfor (let i = n - 1; i >= 0; i--)\n\t\tif (n % i == 0)\n\t\t\treturn i;\n\treturn n;\n};\n\n/*\n\tFor a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t>>> largestDivisor(16)\n\t2\n\t>>> largestDivisor(17)\n\t3\n\t>>> largestDivisor(18)\n\t2\n\t>>> largestDivisor(19)\n\t3\n\t>>> largestDivisor(20)\n\t2\n\t>>> largestDivisor(21)\n\t3\n\t>>> largestDivisor(22)\n\t2\n\t>>> largestDivisor(23)\n\t3\n\t>>> largestDivisor(24)\n\t2\n\t>>> largestDivisor(25)\n\t3\n\t>>> largestDivisor(26)\n\t2\n\t>>> largestDivisor(27)\n\t3\n\t>>> largestDivisor(28)\n\t2\n\t>>> largestDivisor(29)\n\t3\n\t>>> largestDivisor(30)\n\t2\n\t>>> largestDivisor(31)\n\t3\n\t>>> largestDivisor(32)\n\t2\n\t>>> largestDivisor(33)\n\t3\n\t>>> largestDivisor(34)\n\t2\n\t>>> largestDivisor(35)\n\t3\n\t>>> largestDivisor(36)\n\t2\n\t>>> largestDivisor(37)\n\t3\n\t>>> largestDivisor(38)\n\t2\n\t>>> largestDivisor(39)\n\t3\n\t>>> largestDivisor(40)\n\t2\n\t>>> largestDivisor(41)\n\t3\n\t>>> largestDivisor(42)\n\t2\n\t>>> largestDivisor(43)\n\t3\n\t>>> largestDivisor(44)\n\t2\n\t>>> largestDivisor(45)\n\t3\n\t>>> largestDivisor(46)\n\t2\n\t>>> largestDivisor(47)\n\t3\n\t>>> largestDivisor(48)\n\t2\n\t>>> largestDivisor(49)\n\t3\n\t>>> largestDivisor(50)\n\t2\n\t>>> largestDivisor(51)\n\t3\n\t>>> largestDivisor(52)\n\t2\n\t>>> largestDivisor(53)\n\t3\n\t>>> largestDivisor(54)\n\t2\n\t>>> largestDivisor(55)\n\t3\n\t>>> largestDivisor(56)\n\t2\n\t>>> largestDivisor(57)\n\t3\n\t>>> largestDivisor(58)\n\t2\n\t>>> largestDivisor(59)\n\t3\n\t>>> largestDivisor(60)\n\t2\n\t>>> largestDivisor(61)\n\t3\n\t>>> largestDivisor(62)\n\t2\n\t>>> largestDivisor(63)\n\t3\n\t>>> largestDivisor(64)\n\t2\n\t>>> largestDivisor(65)\n\t3\n\t>>> largestDivisor(66)\n\t2\n\t>>> largestDivisor(67)\n\t3\n\t>>> largestDivisor(68)\n\t2\n\t>>> largestDivisor(69)\n\t3\n\t>>> largestDivisor(70)\n\t2\n\t>>> largestDivisor(71)\n\t3\n\t>>> largestDivisor(72)\n\t2\n\t>>> largestDivisor(73)\n\t3\n\t>>> largestDivisor(74)\n\t2\n\t>>> largestDivisor(75)\n\t3\n\t>>> largestDivisor(76)\n\t2\n\t>>> largestDivisor(77)\n\t3\n\t>>> largestDivisor(78)\n\t2\n\t>>> largestDivisor(79)\n\t3\n\t>>> largestDivisor(80)\n\t2\n\t>>> largestDivisor(81)\n\t3\n\t>>> largestDivisor(82)\n\t2\n\t>>> largestDivisor(83)\n\t3\n\t>>> largestDivisor(84)\n\t2\n\t>>> largestDivisor(85)\n\t3\n\t>>> largestDivisor(86)\n\t2\n\t>>> largestDivisor(87)\n\t3\n\t>>> largestDivisor(88)\n\t2\n\t>>> largestDivisor(89)\n\t3\n\t>>> largestDivisor(90)\n\t2\n\t>>> largestDivisor(91)\n\t3\n\t>>> largestDivisor(92)\n\t2\n\t>>> largestDivisor(93)\n\t3\n\t>>> largestDivisor(94)\n\t2\n\t>>> largestDivisor(95)\n\t3\n\t>>> largestDivisor(96)\n\t2\n\t>>> largestDivisor(97)\n\t3\n\t>>> largestDivisor(98)\n\t2\n\t>>> largestDivisor(99)\n\t3\n\t>>> largestDivisor(100)\n\t2\n\t>>> largestDivisor(101)\n\t3\n\t>>> largestDivisor(102)\n\t2\n\t>>> largestDivisor(103)\n\t3\n\t>>> largestDivisor(104)\n\t2\n\t>>> largestDivisor(105)\n\t3\n\t>>> largestDivisor(106)\n\t2\n\t>>> largestDivisor(107)\n\t3\n\t>>> largestDivisor(108)\n\t2\n\t>>> largestDivisor(109)\n\t3\n\t>>> largestDivisor(110)\n\t2\n\t>>> largestDivisor(111)\n\t3\n\t>>> largestDivisor(112)\n\t2\n\t>>> largestDivisor(113)\n\t3\n\t>>> largestDivisor(114)\n\t2\n\t>>> largestDivisor(115)\n\t3\n\t>>> largestDivisor(116)\n\t2\n\t>>> largestDivisor(117)\n\t3\n\t>>> largestDivisor(118)\n\t2\n\t>>> largestDivisor(119)\n\t3\n\t>>> largestDivisor(120)\n\t2\n\t>>> largestDivisor(121)\n\t3\n\t>>> largestDivisor(122)\n\t2\n\t>>> largestDivisor(123)\n\t3\n\t>>> largestDivisor(124", "passed": 0}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t*/\nconst factorize = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t*/\nconst factorize = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact;\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t*/\nconst factorizeReverse = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorizeReverse(8)\n\t[2, 2, 2]\n\t>>> factorizeReverse(25)\n\t[5, 5]\n\t>>> factorizeReverse(70)\n\t[2, 5, 7]\n\t*/\nconst factorizeReverse2 = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorizeReverse2(8)\n\t[2, 2, 2]\n\t>>> factorizeReverse2(25)\n\t[5, 5]\n\t>>> factorizeReverse2(70)\n\t[2, 5, 7]\n\t*/\nconst factorizeReverse3 = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorizeReverse3(8)\n\t[2, 2, 2]\n\t>>> factorizeReverse3(25)\n\t[5, 5]\n\t>>> factorizeReverse3(70)\n\t[2, 5, 7]\n\t*/\nconst factorizeReverse4 = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorizeReverse4(8)\n\t[2, 2, 2]\n\t>>> factorizeReverse4(25)\n\t[5, 5]\n\t>>> factorizeReverse4(70)\n\t[2, 5, 7]\n\t*/\nconst factorizeReverse5 = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact.reverse();\n};\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorizeReverse5(8)\n\t[2, 2, 2]\n\t>>> factorizeReverse5(25)\n\t[5, 5]\n\t>>> factorizeReverse5(70)\n\t[2, 5, 7]\n\t*/\nconst factorizeReverse6 = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {", "passed": 0}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t*/\nconst removeDuplicates = (numbers) => {\n\tvar dict = new Object();\n\tfor (const num of numbers) {\n\t\tif (num in dict) {\n\t\t\tdict[num] += 1;\n\t\t} else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t*/\nconst removeDuplicates = (numbers) => {\n\tvar dict = new Object();\n\tfor (const num of numbers) {\n\t\tif (num in dict) {\n\t\t\tdict[num] += 1;\n\t\t} else {\n\t\t\tdict[num] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates2 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates3 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates4 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates5 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates6 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates7 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates8 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates9 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str of strings) {\n\t\tif (str in dict) {\n\t\t\tdict[str] += 1;\n\t\t} else {\n\t\t\tdict[str] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).map((key) => dict[key]);\n};\n\n/*\n\tFrom a list of strings, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates(['a', 'b', 'c', 'b', 'd'])\n\t['a', 'c', 'd']\n\t*/\nconst removeDuplicates10 = (strings) => {\n\tvar dict = new Object();\n\tfor (const str", "passed": 0}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase2 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase3 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase4 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase5 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase6 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase7 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase8 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase9 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase10 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase11 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase12 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase13 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase14 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase15 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase16 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase17 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase18 = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n}\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flip", "passed": 0}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1, 2, 3])\n\t'123'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate([1", "passed": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix2 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix3 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix4 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix5 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix6 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix7 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix8 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix9 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix10 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix11 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix12 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix13 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix14 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix15 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix16 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix17 = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n};\n\n/*\n\t>>> filterByPrefix", "passed": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t*/\nconst belowZero = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t*/\nconst belowZero = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tGiven a list of deposit and withdrawal operations on a bank account that starts with zero balance,\n\tyour task is to detect if at any point the balance of account falls below zero, and at that point\n\tfunction should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t>>> belowZero([1, 2, -4, 5, 6])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5, 6, 7])\n\ttrue\n\t*/\nconst belowZero2 = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tGiven a list of deposit and withdrawal operations on a bank account that starts with zero balance,\n\tyour task is to detect if at any point the balance of account falls below zero, and at that point\n\tfunction should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t>>> belowZero([1, 2, -4, 5, 6])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5, 6, 7])\n\ttrue\n\t*/\nconst belowZero3 = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tGiven a list of deposit and withdrawal operations on a bank account that starts with zero balance,\n\tyour task is to detect if at any point the balance of account falls below zero, and at that point\n\tfunction should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t>>> belowZero([1, 2, -4, 5, 6])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5, 6, 7])\n\ttrue\n\t*/\nconst belowZero4 = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tGiven a list of deposit and withdrawal operations on a bank account that starts with zero balance,\n\tyour task is to detect if at any point the balance of account falls below zero, and at that point\n\tfunction should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t>>> belowZero([1, 2, -4, 5, 6])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5, 6, 7])\n\ttrue\n\t*/\nconst belowZero5 = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tGiven a list of deposit and withdrawal operations on a bank account that starts with zero balance,\n\tyour task is to detect if at any point the balance of account falls below zero, and at that point\n\tfunction should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t>>> belowZero([1, 2, -4, 5, 6])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5, 6, 7])\n\ttrue\n\t*/\nconst belowZero6 = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tGiven a list of deposit and withdrawal operations on a bank account that starts with zero balance,\n\tyour task is to detect if at any point the balance of account falls below zero, and at that point\n\tfunction should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t>>> belowZero([1, 2, -4, 5, 6])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5, 6, 7])\n\ttrue\n\t*/\nconst belowZero7 = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/*\n\tGiven a list of deposit and withdrawal operations on a bank account that starts with zero balance,\n\tyour task is to detect if at any point the balance of account falls below zero, and at that point\n\tfunction should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t>>> belowZero([1, 2, -4, 5, 6])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5, 6, 7])\n\ttrue\n\t*/\nconst belowZero8 = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;", "passed": 0}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n\t>>> getPositive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t*/\nconst getPositive = (l) => {\n\treturn l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n\t>>> getPositive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t*/\nconst getPositive = (l) => {\n\treturn l.filter(e => e > 0);\n};\n\n/*\n\t>>> getNegative([-1, 2, -4, 5, 6])\n\t[-4, -5, -6]\n\t>>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[-5, -3, -2, -3, -9, -123, -1]\n\t*/\nconst getNegative = (l) => {\n\treturn l.filter(e => e < 0);\n};\n\n/*\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n\t[2, 4, 6, 8, 10]\n\t>>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,", "passed": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n\t>>> isPrime(6)\n\tfalse\n\t>>> isPrime(101)\n\ttrue\n\t>>> isPrime(11)\n\ttrue\n\t>>> isPrime(13441)\n\ttrue\n\t>>> isPrime(61)\n\ttrue\n\t>>> isPrime(4)\n\tfalse\n\t>>> isPrime(1)\n\tfalse\n\t*/\nconst isPrime = (n) => {\n\tif (n < 2)\n\t\treturn false;\n\tfor (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n\t>>> isPrime(6)\n\tfalse\n\t>>> isPrime(101)\n\ttrue\n\t>>> isPrime(11)\n\ttrue\n\t>>> isPrime(13441)\n\ttrue\n\t>>> isPrime(61)\n\ttrue\n\t>>> isPrime(4)\n\tfalse\n\t>>> isPrime(1)\n\tfalse\n\t*/\nconst isPrime = (n) => {\n\tif (n < 2)\n\t\treturn false;\n\tfor (let k = 2; k < n - 1; k++)\n\t\tif (n % k == 0)\n\t\t\treturn false;\n\treturn true;\n}\n\n/*Return the number of primes below a given number.\n\t>>> countPrimes(1)\n\t0\n\t>>> countPrimes(2)\n\t1\n\t>>> countPrimes(3)\n\t2\n\t>>> countPrimes(4)\n\t3\n\t>>> countPrimes(5)\n\t4\n\t>>> countPrimes(6)\n\t5\n\t>>> countPrimes(7)\n\t6\n\t>>> countPrimes(8)\n\t7\n\t>>> countPrimes(9)\n\t8\n\t>>> countPrimes(10)\n\t9\n\t>>> countPrimes(11)\n\t10\n\t>>> countPrimes(12)\n\t11\n\t>>> countPrimes(13)\n\t12\n\t>>> countPrimes(14)\n\t13\n\t>>> countPrimes(15)\n\t14\n\t>>> countPrimes(16)\n\t15\n\t>>> countPrimes(17)\n\t16\n\t>>> countPrimes(18)\n\t17\n\t>>> countPrimes(19)\n\t18\n\t>>> countPrimes(20)\n\t19\n\t>>> countPrimes(21)\n\t20\n\t>>> countPrimes(22)\n\t21\n\t>>> countPrimes(23)\n\t22\n\t>>> countPrimes(24)\n\t23\n\t>>> countPrimes(25)\n\t24\n\t>>> countPrimes(26)\n\t25\n\t>>> countPrimes(27)\n\t26\n\t>>> countPrimes(28)\n\t27\n\t>>> countPrimes(29)\n\t28\n\t>>> countPrimes(30)\n\t29\n\t>>> countPrimes(31)\n\t30\n\t>>> countPrimes(32)\n\t31\n\t>>> countPrimes(33)\n\t32\n\t>>> countPrimes(34)\n\t33\n\t>>> countPrimes(35)\n\t34\n\t>>> countPrimes(36)\n\t35\n\t>>> countPrimes(37)\n\t36\n\t>>> countPrimes(38)\n\t37\n\t>>> countPrimes(39)\n\t38\n\t>>> countPrimes(40)\n\t39\n\t>>> countPrimes(41)\n\t40\n\t>>> countPrimes(42)\n\t41\n\t>>> countPrimes(43)\n\t42\n\t>>> countPrimes(44)\n\t43\n\t>>> countPrimes(45)\n\t44\n\t>>> countPrimes(46)\n\t45\n\t>>> countPrimes(47)\n\t46\n\t>>> countPrimes(48)\n\t47\n\t>>> countPrimes(49)\n\t48\n\t>>> countPrimes(50)\n\t49\n\t>>> countPrimes(51)\n\t50\n\t>>> countPrimes(52)\n\t51\n\t>>> countPrimes(53)\n\t52\n\t>>> countPrimes(54)\n\t53\n\t>>> countPrimes(55)\n\t54\n\t>>> countPrimes(56)\n\t55\n\t>>> countPrimes(57)\n\t56\n\t>>> countPrimes(58)\n\t57\n\t>>> countPrimes(59)\n\t58\n\t>>> countPrimes(60)\n\t59\n\t>>> countPrimes(61)\n\t60\n\t>>> countPrimes(62)\n\t61\n\t>>> countPrimes(63)\n\t62\n\t>>> countPrimes(64)\n\t63\n\t>>> countPrimes(65)\n\t64\n\t>>> countPrimes(66)\n\t65\n\t>>> countPrimes(67)\n\t66\n\t>>> countPrimes(68)\n\t67\n\t>>> countPrimes(69)\n\t68\n\t>>> countPrimes(70)\n\t69\n\t>>> countPrimes(71)\n\t70\n\t>>> countPrimes(72)\n\t71\n\t>>> countPrimes(73)\n\t72\n\t>>> countPrimes(74)\n\t73\n\t>>> countPrimes(75)\n\t74\n\t>>> countPrimes(76)\n\t75\n\t>>> countPrimes(77)\n\t76\n\t>>> countPrimes(78)\n\t77\n\t>>> countPrimes(79)\n\t78\n\t>>> countPrimes(80)\n\t79\n\t>>> countPrimes(81)\n\t80\n\t>>> countPrimes(82)\n\t81\n\t>>> countPrimes(83)\n\t82\n\t>>> countPrimes(84)\n\t83\n\t>>> countPrimes(85)\n\t84\n\t>>> countPrimes(86)\n\t85\n\t>>> countPrimes(87)\n\t86\n\t>>> countPrimes(88)\n\t87\n\t>>> countPrimes(89)\n\t88\n\t>>> countPrimes(90)\n\t89\n\t>>> countPrimes(91)\n\t90\n\t>>> countPrimes(92)\n\t91\n\t>>> countPrimes(93)\n\t92\n\t>>> countPrimes(94)\n\t93\n\t>>> countPrimes(95)\n\t94\n\t>>> countPrimes(96)\n\t95\n\t>>> countPrimes(97)\n\t96\n\t>>> countPrimes(98)\n\t97\n\t>>> countPrimes(99)\n\t98\n\t>>> countPrimes(100)\n\t99\n\t>>> countPrimes(101)\n\t100\n\t>>> countPrimes(102)\n\t101\n\t>>> countPrimes(103)\n\t102\n\t>>> countPrimes(104)\n\t103\n\t>>> countPrimes(105)\n\t104\n\t>>> countPrimes(106)\n\t105\n\t>>> countPrimes(107)\n\t106\n\t>>> countPrimes(108)\n\t107\n\t>>> countPrimes(109)\n\t108\n\t>>> countPrimes(110)\n\t109\n\t>>> countPrimes(111)\n\t110\n\t>>> countPrimes(112)\n\t111\n\t>>> countPrimes(113)\n\t112\n\t>>> countPrimes(114)", "passed": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n\t\tif (poly(xs, center) === 0) {\n\t\t\treturn center;\n\t\t}\n\t\tif (poly(xs, center) < 0) {\n\t\t\tbegin = center;\n\t\t} else {\n\t\t\tend = center;\n\t\t}\n\t}\n\treturn begin;\n}\n\n/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n\t\tif (poly(xs, center) === 0) {\n\t\t\treturn center;\n\t\t}\n\t\tif (poly(xs, center) < 0) {\n\t\t\tbegin = center;\n\t\t} else {\n\t\t\tend = center;\n\t\t}\n\t}\n\treturn begin;\n}\n\n/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n\t\tif (poly(xs, center) === 0) {\n\t\t\treturn center;\n\t\t}\n\t\tif (poly(xs, center) < 0) {\n\t\t\tbegin = center;\n\t\t} else {\n\t\t\tend = center;\n\t\t}\n\t}\n\treturn begin;\n}\n\n/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t", "passed": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sortThird([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortThird([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t*/\nconst sortThird = (l) => {\n\tvar three = l.filter((item, index) => index % 3 == 0);\n\tthree.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sortThird([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortThird([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t*/\nconst sortThird = (l) => {\n\tvar three = l.filter((item, index) => index % 3 == 0);\n\tthree.sort((a, b) => (a - b));\n\tvar sorted = l.filter((item, index) => index % 3!= 0);\n\tsorted.push(...three);\n\treturn sorted;\n};\n\nmodule.exports = sortThird;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t*/\nconst unique = (l) => {\n\treturn Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t*/\nconst unique = (l) => {\n\treturn Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t5\n\t*/\nconst count = (l) => {\n\treturn new Set(l).size;\n};\n\n/*Return the number of unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3", "passed": 0}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n\t>>> maxElement([1, 2, 3])\n\t3\n\t>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t*/\nconst maxElement = (l) => {\n\treturn Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n\t>>> maxElement([1, 2, 3])\n\t3\n\t>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t*/\nconst maxElement = (l) => {\n\treturn Math.max(...l);\n};\n\n/*Return minimum element in the list.\n\t>>> minElement([1, 2, 3])\n\t1\n\t>>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-10\n\t*/\nconst minElement = (l) => {\n\treturn Math.min(...l);\n};\n\n/*Return the sum of all elements in the list.\n\t>>> sum([1, 2, 3])\n\t6\n\t>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-10\n\t*/\nconst sum = (l) => {\n\treturn l.reduce((a, b) => a + b, 0);\n};\n\n/*Return the product of all elements in the list.\n\t>>> product([1, 2, 3])\n\t6\n\t>>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-10\n\t*/\nconst product = (l) => {\n\treturn l.reduce((a, b) => a * b, 1);\n};\n\n/*Return the average of all elements in the list.\n\t>>> average([1, 2, 3])\n\t2\n\t>>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-2.5\n\t*/\nconst average = (l) => {\n\treturn sum(l) / l.length;\n};\n\n/*Return the median of all elements in the list.\n\t>>> median([1, 2, 3])\n\t2\n\t>>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-2.5\n\t*/\nconst median = (l) => {\n\tconst sorted = l.sort();\n\tconst half = sorted.length / 2;\n\treturn sorted[half];\n};\n\n/*Return the mode of all elements in the list.\n\t>>> mode([1, 2, 3])\n\t2\n\t>>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-3\n\t*/\nconst mode = (l) => {\n\tconst modes = [];\n\tconst sorted = l.sort();\n\tfor (let i = 0; i < sorted.length; i++) {\n\t\tconst count = 1;\n\t\tconst current = sorted[i];\n\t\tfor (let j = i + 1; j < sorted.length; j++) {\n\t\t\tif (sorted[j] === current) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === 1) {\n\t\t\tmodes.push(current);\n\t\t}\n\t}\n\treturn modes[0];\n};\n\n/*Return the mode of all elements in the list.\n\t>>> mode([1, 2, 3])\n\t2\n\t>>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-3\n\t*/\nconst mode = (l) => {\n\tconst modes = [];\n\tconst sorted = l.sort();\n\tfor (let i = 0; i < sorted.length; i++) {\n\t\tconst count = 1;\n\t\tconst current = sorted[i];\n\t\tfor (let j = i + 1; j < sorted.length; j++) {\n\t\t\tif (sorted[j] === current) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === 1) {\n\t\t\tmodes.push(current);\n\t\t}\n\t}\n\treturn modes[0];\n};\n\n/*Return the mode of all elements in the list.\n\t>>> mode([1, 2, 3])\n\t2\n\t>>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-3\n\t*/\nconst mode = (l) => {\n\tconst modes = [];\n\tconst sorted = l.sort();\n\tfor (let i = 0; i < sorted.length; i++) {\n\t\tconst count = 1;\n\t\tconst current = sorted[i];\n\t\tfor (let j = i + 1; j < sorted.length; j++) {\n\t\t\tif (sorted[j] === current) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === 1) {\n\t\t\tmodes.push(current);\n\t\t}\n\t}\n\treturn modes[0];\n};\n\n/*Return the mode of all elements in the list.\n\t>>> mode([1, 2, 3])\n\t2\n\t>>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-3\n\t*/\nconst mode = (l) => {\n\tconst modes = [];\n\tconst sorted = l.sort();\n\tfor (let i = 0; i < sorted.length; i++) {\n\t\tconst count = 1;\n\t\tconst current = sorted[i];\n\t\tfor (let j = i + 1; j < sorted.length; j++) {\n\t\t\tif (sorted[j] === current) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === 1) {\n\t\t\tmodes.push(current);\n\t\t}\n\t}\n\treturn modes[0];\n};\n\n/*Return the mode of all elements in the list.\n\t>>> mode([1, 2, 3])\n\t2\n\t>>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-3\n\t*/\nconst mode = (l) => {\n\tconst modes = [];\n\tconst sorted = l.sort();\n\tfor (let i = 0; i < sorted.length; i++) {\n\t\tconst count = 1;\n\t\tconst current = sorted[i];\n\t\tfor (let j = i + 1; j < sorted.length; j++) {\n\t\t\tif (sorted[j] === current) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === 1) {\n\t\t\tmodes.push(current);\n\t\t}\n\t}\n\treturn modes[0];", "passed": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizzBuzz(50)\n\t0\n\t>>> fizzBuzz(78)\n\t2\n\t>>> fizzBuzz(79)\n\t3\n\t*/\nconst fizzBuzz = (n) => {\n\tvar ns = [], ans = 0;\n\tfor (let i = 0; i < n; i++)\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t\tns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizzBuzz(50)\n\t0\n\t>>> fizzBuzz(78)\n\t2\n\t>>> fizzBuzz(79)\n\t3\n\t*/\nconst fizzBuzz = (n) => {\n\tvar ns = [], ans = 0;\n\tfor (let i = 0; i < n; i++)\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t\tns.push(i);\n\tfor (let i = 0; i < ns.length; i++)\n\t\tans += 1;\n\treturn ans;\n}\n\n/*\n\t>>> fizzBuzz(100)\n\t0\n\t>>> fizzBuzz(101)\n\t1\n\t>>> fizzBuzz(102)\n\t2\n\t>>> fizzBuzz(103)\n\t3\n\t>>> fizzBuzz(104)\n\t4\n\t>>> fizzBuzz(105)\n\t5\n\t>>> fizzBuzz(106)\n\t6\n\t>>> fizzBuzz(107)\n\t7\n\t>>> fizzBuzz(108)\n\t8\n\t>>> fizzBuzz(109)\n\t9\n\t>>> fizzBuzz(110)\n\t10\n\t>>> fizzBuzz(111)\n\t11\n\t>>> fizzBuzz(112)\n\t12\n\t>>> fizzBuzz(113)\n\t13\n\t>>> fizzBuzz(114)\n\t14\n\t>>> fizzBuzz(115)\n\t15\n\t>>> fizzBuzz(116)\n\t16\n\t>>> fizzBuzz(117)\n\t17\n\t>>> fizzBuzz(118)\n\t18\n\t>>> fizzBuzz(119)\n\t19\n\t>>> fizzBuzz(120)\n\t20\n\t>>> fizzBuzz(121)\n\t21\n\t>>> fizzBuzz(122)\n\t22\n\t>>> fizzBuzz(123)\n\t23\n\t>>> fizzBuzz(124)\n\t24\n\t>>> fizzBuzz(125)\n\t25\n\t>>> fizzBuzz(126)\n\t26\n\t>>> fizzBuzz(127)\n\t27\n\t>>> fizzBuzz(128)\n\t28\n\t>>> fizzBuzz(129)\n\t29\n\t>>> fizzBuzz(130)\n\t30\n\t>>> fizzBuzz(131)\n\t31\n\t>>> fizzBuzz(132)\n\t32\n\t>>> fizzBuzz(133)\n\t33\n\t>>> fizzBuzz(134)\n\t34\n\t>>> fizzBuzz(135)\n\t35\n\t>>> fizzBuzz(136)\n\t36\n\t>>> fizzBuzz(137)\n\t37\n\t>>> fizzBuzz(138)\n\t38\n\t>>> fizzBuzz(139)\n\t39\n\t>>> fizzBuzz(140)\n\t40\n\t>>> fizzBuzz(141)\n\t41\n\t>>> fizzBuzz(142)\n\t42\n\t>>> fizzBuzz(143)\n\t43\n\t>>> fizzBuzz(144)\n\t44\n\t>>> fizzBuzz(145)\n\t45\n\t>>> fizzBuzz(146)\n\t46\n\t>>> fizzBuzz(147)\n\t47\n\t>>> fizzBuzz(148)\n\t48\n\t>>> fizzBuzz(149)\n\t49\n\t>>> fizzBuzz(150)\n\t50\n\t>>> fizzBuzz(151)\n\t51\n\t>>> fizzBuzz(152)\n\t52\n\t>>> fizzBuzz(153)\n\t53\n\t>>> fizzBuzz(154)\n\t54\n\t>>> fizzBuzz(155)\n\t55\n\t>>> fizzBuzz(156)\n\t56\n\t>>> fizzBuzz(157)\n\t57\n\t>>> fizzBuzz(158)\n\t58\n\t>>> fizzBuzz(159)\n\t59\n\t>>> fizzBuzz(160)\n\t60\n\t>>> fizzBuzz(161)\n\t61\n\t>>> fizzBuzz(162)\n\t62\n\t>>> fizzBuzz(163)\n\t63\n\t>>> fizzBuzz(164)\n\t64\n\t>>> fizzBuzz(165)\n\t65\n\t>>> fizzBuzz(166)\n\t66\n\t>>> fizzBuzz(167)\n\t67\n\t>>> fizzBuzz(168)\n\t68\n\t>>> fizzBuzz(169)\n\t69\n\t>>> fizzBuzz(170)\n\t70\n\t>>> fizzBuzz(171)\n\t71\n\t>>> fizzBuzz(172)\n\t72\n\t>>> fizzBuzz(173)\n\t73\n\t>>> fizzBuzz(174)\n\t74\n\t>>> fizzBuzz(175)\n\t75\n\t>>> fizzBuzz(176)\n\t76\n\t>>> fizzBuzz(177)\n\t77\n\t>>> fizzBuzz(178)\n\t78\n\t>>> fizzBuzz(179)\n\t79\n\t>>> fizzBuzz(180)\n\t80\n\t>>> fizzBuzz(181)\n\t81\n\t>>> fizzBuzz(182)\n\t82\n\t>>> fizzBuzz(183)\n\t83\n\t>>> fizzBuzz(184)\n\t84\n\t>>> fizzBuzz(185)\n\t85\n\t>>> fizzBuzz(186)\n\t86\n\t>>> fizzBuzz(187)\n\t87\n\t>>> fizzBuzz(188)\n\t88\n\t>>> fizzBuzz(189)\n\t89\n\t>>> fizzBuzz(190)\n\t90\n\t>>> fizzBuzz(191)\n\t91\n\t>>> fizzBuzz(192)\n\t92\n\t>>> fizzBuzz(193)\n\t93\n\t>>> fizzBuzz(194)\n\t94\n\t>>> fizzBuzz(195)\n\t95\n\t>>> fizzBuzz(196)\n\t96\n\t>>> fizzBuzz(197)\n\t97\n\t>>> fizzBuzz(198)\n\t98\n\t>>> fizzBuzz(199)\n\t99\n\t>>> fizzBuzz(200)\n\t100\n\t>>> fizzBuzz(201)\n\t101\n\t>>> fizzBuzz(202)\n\t102\n\t>>> fizzBuzz(203)\n\t103\n\t>>> fizzBuzz(204)\n\t104\n\t>>> fizzBuzz(205)\n\t105\n\t>>> fizzBuzz(206)\n\t106\n\t>>> fizzBuzz(207)\n\t107\n\t>>> fizzBuzz(208)\n\t108\n\t>>> fizzBuzz(209)\n\t109\n\t>>> fizzBuzz(210)\n\t110\n\t>>> fizzBuzz(211)\n\t111\n\t>>> fizzBuzz(212)\n\t112\n\t>>> fizzBuzz(213)\n\t113\n\t>>> fizzBuzz(214)\n\t", "passed": 0}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortEven = (l) => {\n\tvar even = l.filter((item, index) => index % 2 == 0);\n\teven.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortEven = (l) => {\n\tvar even = l.filter((item, index) => index % 2 == 0);\n\teven.sort((a, b) => (a - b));\n\treturn even;\n};\n\n/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortOdd([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortOdd([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortOdd = (l) => {\n\tvar odd = l.filter((item, index) => index % 2 == 1);\n\todd.sort((a, b) => (a - b));\n\treturn odd;\n};\n\n/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sort = (l) => {\n\tvar even = sortEven(l);\n\tvar odd = sortOdd(l);\n\treturn even.concat(odd);\n};\n\nmodule.exports = sort;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n\treturns encoded string by cycling groups of three characters.\n\t*/\nconst encodeCyclic = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n\t\tgroups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 3)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\treturns encoded string by cycling groups of three characters.\n\t*/\nconst encodeCyclic = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n\t\tgroups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 3)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic2 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic3 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic4 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic5 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic6 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic7 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic8 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic9 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic10 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic11 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic12 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic13 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic14 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic15 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic16 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic17 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic18 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic19 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic20 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic21 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic22 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic23 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic24 = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\t", "passed": 0}
{"task_id": "JavaScript/39", "prompt": "/*\n\tprimeFib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib(1)\n\t2\n\t>>> primeFib(2)\n\t3\n\t>>> primeFib(3)\n\t5\n\t>>> primeFib(4)\n\t13\n\t>>> primeFib(5)\n\t89\n\t*/\nconst primeFib = (n) => {\n\tvar isPrime = function (p) {\n\t\tif (p < 2)\n\t\t\treturn false;\n\t\tfor (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n\t\t\tif (p % k == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n\tprimeFib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib(1)\n\t2\n\t>>> primeFib(2)\n\t3\n\t>>> primeFib(3)\n\t5\n\t>>> primeFib(4)\n\t13\n\t>>> primeFib(5)\n\t89\n\t*/\nconst primeFib = (n) => {\n\tvar isPrime = function (p) {\n\t\tif (p < 2)\n\t\t\treturn false;\n\t\tfor (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n\t\t\tif (p % k == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tvar fib = [1, 2]\n\tvar i = 2\n\twhile (i < n) {\n\t\tfib.push(fib[i - 1] + fib[i - 2])\n\t\tif (isPrime(fib[i]))\n\t\t\treturn fib[i]\n\t\ti++\n\t}\n\treturn fib[n - 1]\n}\n\n/*\n\tprimeFib2 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib2(1)\n\t2\n\t>>> primeFib2(2)\n\t3\n\t>>> primeFib2(3)\n\t5\n\t>>> primeFib2(4)\n\t13\n\t>>> primeFib2(5)\n\t89\n\t*/\nconst primeFib2 = (n) => {\n\tvar fib = [1, 2]\n\tvar i = 2\n\twhile (i < n) {\n\t\tfib.push(fib[i - 1] + fib[i - 2])\n\t\tif (fib[i] % 2 == 0)\n\t\t\treturn fib[i]\n\t\ti++\n\t}\n\treturn fib[n - 1]\n}\n\n/*\n\tprimeFib3 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib3(1)\n\t2\n\t>>> primeFib3(2)\n\t3\n\t>>> primeFib3(3)\n\t5\n\t>>> primeFib3(4)\n\t13\n\t>>> primeFib3(5)\n\t89\n\t*/\nconst primeFib3 = (n) => {\n\tvar fib = [1, 2]\n\tvar i = 2\n\twhile (i < n) {\n\t\tfib.push(fib[i - 1] + fib[i - 2])\n\t\tif (fib[i] % 3 == 0)\n\t\t\treturn fib[i]\n\t\ti++\n\t}\n\treturn fib[n - 1]\n}\n\n/*\n\tprimeFib4 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib4(1)\n\t2\n\t>>> primeFib4(2)\n\t3\n\t>>> primeFib4(3)\n\t5\n\t>>> primeFib4(4)\n\t13\n\t>>> primeFib4(5)\n\t89\n\t*/\nconst primeFib4 = (n) => {\n\tvar fib = [1, 2]\n\tvar i = 2\n\twhile (i < n) {\n\t\tfib.push(fib[i - 1] + fib[i - 2])\n\t\tif (fib[i] % 5 == 0)\n\t\t\treturn fib[i]\n\t\ti++\n\t}\n\treturn fib[n - 1]\n}\n\n/*\n\tprimeFib5 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib5(1)\n\t2\n\t>>> primeFib5(2)\n\t3\n\t>>> primeFib5(3)\n\t5\n\t>>> primeFib5(4)\n\t13\n\t>>> primeFib5(5)\n\t89\n\t*/\nconst primeFib5 = (n) => {\n\tvar fib = [1, 2]\n\tvar i = 2\n\twhile (i < n) {\n\t\tfib.push(fib[i - 1] + fib[i - 2])\n\t\tif (fib[i] % 7 == 0)\n\t\t\treturn fib[i]\n\t\ti++\n\t}\n\treturn fib[n - 1]\n}\n\n/*\n\tprimeFib6 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib6(1)\n\t2\n\t>>> primeFib6(2)\n\t3\n\t>>> primeFib6(3)\n\t5\n\t>>> primeFib6(4)\n\t13\n\t>>> primeFib6(5)\n\t89\n\t*/\nconst primeFib6 = (n) => {\n\tvar fib = [1, 2]\n\tvar i = 2\n\twhile (i < n) {\n\t\tfib.push(fib[i - 1] + fib[i - 2])\n\t\tif (fib[i] % 11 == 0)\n\t\t\treturn fib[i]\n\t\ti++\n\t}\n\treturn fib[n - 1]\n}\n\n/*\n\tprimeFib7 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib7(1)\n\t2\n\t>>> primeFib7(2)\n\t3\n\t>>> primeFib7(3)\n\t5\n\t>>> primeFib7(4)\n\t13\n\t>>> primeFib7(5)\n\t89\n\t*/\nconst primeFib7 = (n) => {\n\tvar fib = [1, 2]\n\tvar i = 2\n\twhile (i < n) {\n\t\tfib.push(fib[i - 1] + fib[i - 2])\n\t\tif (fib[i] % 13 == 0)\n\t\t\treturn fib[i]\n\t\ti++\n\t}\n\treturn fib[n - 1]\n}\n\n/*\n\tprimeFib8 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib8(1)\n\t2\n\t>>> primeFib8(2)\n\t3\n\t>>> primeFib8(3)\n\t5\n\t>>> primeFib8(4)\n\t13\n\t>>> primeFib8(5)\n\t89\n\t*/\nconst primeFib8 = (n) => {\n\tvar fib = [1, 2", "passed": 0}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst meanAbsoluteDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst meanAbsoluteDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn Math.abs(item - mean);\n\t}, 0) / numbers.length;\n};\n\n/*\n\tFor a given list of input numbers, calculate Mean Squared Deviation\n\taround the mean of this dataset.\n\tMean Squared Deviation is the average squared difference between each\n\telement and a centerpoint (mean in this case):\n\tMSD = average | x - x_mean |^2\n\t>>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst meanSquaredDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn Math.pow(item - mean, 2);\n\t}, 0) / numbers.length;\n};\n\n/*\n\tFor a given list of input numbers, calculate the standard deviation\n\taround the mean of this dataset.\n\tStandard Deviation is the square root of the average squared difference\n\tbetween each element and a centerpoint (mean in this case):\n\tSD = sqrt(average | x - x_mean |^2)\n\t>>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst standardDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn Math.sqrt(numbers.reduce((prev, item) => {\n\t\treturn Math.pow(item - mean, 2);\n\t}, 0) / numbers.length);\n};\n\n/*\n\tFor a given list of input numbers, calculate the variance\n\taround the mean of this dataset.\n\tVariance is the average squared difference between each element and a\n\tcenterpoint (mean in this case):\n\tVariance = average | x - x_mean |^2\n\t>>> variance([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst variance = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn Math.pow(item - mean, 2);\n\t}, 0) / numbers.length;\n};\n\n/*\n\tFor a given list of input numbers, calculate the skewness\n\taround the mean of this dataset.\n\tSkewness is the average of the absolute values of the differences\n\tbetween each element and a centerpoint (mean in this case):\n\tSkewness = average | x - x_mean |\n\t>>> skewness([1.0, 2.0, 3.0, 4.0])\n\t0.0\n\t*/\nconst skewness = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn Math.abs(item - mean);\n\t}, 0) / numbers.length;\n};\n\n/*\n\tFor a given list of input numbers, calculate the kurtosis\n\taround the mean of this dataset.\n\tKurtosis is the average of the squared differences between each element\n\tand a centerpoint (mean in this case):\n\tKurtosis = average | x - x_mean |^2\n\t>>> kurtosis([1.0, 2.0, 3.0, 4.0])\n\t2.0\n\t*/\nconst kurtosis = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn Math.pow(item - mean, 2);\n\t}, 0) / numbers.length;\n};\n\n/*\n\tFor a given list of input numbers, calculate the mode\n\taround the mean of this dataset.\n\tMode is the most common number in the dataset.\n\t>>> mode([1.0, 2.0, 3.0, 4.0])\n\t2.0\n\t*/\nconst mode = (numbers) => {\n\tvar max = 0;\n\tvar maxIndex = 0;\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t\tmaxIndex = i;\n\t\t}\n\t}\n\treturn maxIndex;\n};\n\n/*\n\tFor a given list of input numbers, calculate the median\n\taround the mean of this dataset.\n\tMedian is the middle number in the dataset.\n\t>>> median([1.0, 2.0, 3.0, 4.0])\n\t2.0\n\t*/\nconst median = (numbers) => {\n\tvar half = numbers.length / 2;\n\tvar sorted = numbers.sort();\n\treturn sorted[half];\n};\n\n/*\n\tFor a given list of input numbers, calculate the range\n\taround the mean of this dataset.\n\tRange is the difference between the highest and lowest number in the\n\tdataset.\n\t>>> range([1.0, 2.0, 3.0, 4.0])\n\t2.0\n\t*/\nconst range = (numbers) => {\n\tvar max = 0;\n\tvar min = 0;\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] > max) {\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tif (numbers[i] < min) {\n\t\t\tmin = numbers[i];\n\t\t}\n\t", "passed": 0}
{"task_id": "JavaScript/40", "prompt": "/*\n\ttriplesSumToZero takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero([1])\n\tfalse\n\t*/\nconst triplesSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n\ttriplesSumToZero takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero([1])\n\tfalse\n\t*/\nconst triplesSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0)\n\t\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\ttriplesSumToZero2 takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero2([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero2([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero2([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero2([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero2([1])\n\tfalse\n\t*/\nconst triplesSumToZero2 = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0)\n\t\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\ttriplesSumToZero3 takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero3([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero3([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero3([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero3([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero3([1])\n\tfalse\n\t*/\nconst triplesSumToZero3 = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0)\n\t\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\ttriplesSumToZero4 takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero4([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero4([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero4([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero4([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero4([1])\n\tfalse\n\t*/\nconst triplesSumToZero4 = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0)\n\t\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\ttriplesSumToZero5 takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero5([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero5([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero5([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero5([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero5([1])\n\tfalse\n\t*/\nconst triplesSumToZero5 = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0)\n\t\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\ttriplesSumToZero6 takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero6([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero6([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero6([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero6([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero6([1])\n\tfalse\n\t*/\nconst triplesSumToZero6 = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0)\n\t\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\ttriplesSumToZero7 takes a list of", "passed": 0}
{"task_id": "JavaScript/41", "prompt": "/*\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t*/\nconst carRaceCollision = (n) => {\n\treturn Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t*/\nconst carRaceCollision = (n) => {\n\treturn Math.pow(n, 2);\n};\n\nconst carRace = (cars) => {\n\tlet collisions = 0;\n\tcars.forEach((car) => {\n\t\tlet nextCar = cars.shift();\n\t\twhile (nextCar) {\n\t\t\tif (car.x < nextCar.x) {\n\t\t\t\tcar.x += car.speed;\n\t\t\t} else if (car.x > nextCar.x) {\n\t\t\t\tcar.x -= car.speed;\n\t\t\t}\n\t\t\tif (car.y < nextCar.y) {\n\t\t\t\tcar.y += car.speed;\n\t\t\t} else if (car.y > nextCar.y) {\n\t\t\t\tcar.y -= car.speed;\n\t\t\t}\n\t\t\tcollisions += carRaceCollision(car.x - nextCar.x);\n\t\t\tcollisions += carRaceCollision(car.y - nextCar.y);\n\t\t\tnextCar = cars.shift();\n\t\t}\n\t});\n\treturn collisions;\n};\n\nconst carRace2 = (cars) => {\n\tlet collisions = 0;\n\tcars.forEach((car) => {\n\t\tlet nextCar = cars.shift();\n\t\twhile (nextCar) {\n\t\t\tif (car.x < nextCar.x) {\n\t\t\t\tcar.x += car.speed;\n\t\t\t} else if (car.x > nextCar.x) {\n\t\t\t\tcar.x -= car.speed;\n\t\t\t}\n\t\t\tif (car.y < nextCar.y) {\n\t\t\t\tcar.y += car.speed;\n\t\t\t} else if (car.y > nextCar.y) {\n\t\t\t\tcar.y -= car.speed;\n\t\t\t}\n\t\t\tcollisions += carRaceCollision(car.x - nextCar.x);\n\t\t\tcollisions += carRaceCollision(car.y - nextCar.y);\n\t\t\tnextCar = cars.shift();\n\t\t}\n\t});\n\treturn collisions;\n};\n\nconst carRace3 = (cars) => {\n\tlet collisions = 0;\n\tcars.forEach((car) => {\n\t\tlet nextCar = cars.shift();\n\t\twhile (nextCar) {\n\t\t\tif (car.x < nextCar.x) {\n\t\t\t\tcar.x += car.speed;\n\t\t\t} else if (car.x > nextCar.x) {\n\t\t\t\tcar.x -= car.speed;\n\t\t\t}\n\t\t\tif (car.y < nextCar.y) {\n\t\t\t\tcar.y += car.speed;\n\t\t\t} else if (car.y > nextCar.y) {\n\t\t\t\tcar.y -= car.speed;\n\t\t\t}\n\t\t\tcollisions += carRaceCollision(car.x - nextCar.x);\n\t\t\tcollisions += carRaceCollision(car.y - nextCar.y);\n\t\t\tnextCar = cars.shift();\n\t\t}\n\t});\n\treturn collisions;\n};\n\nconst carRace4 = (cars) => {\n\tlet collisions = 0;\n\tcars.forEach((car) => {\n\t\tlet nextCar = cars.shift();\n\t\twhile (nextCar) {\n\t\t\tif (car.x < nextCar.x) {\n\t\t\t\tcar.x += car.speed;\n\t\t\t} else if (car.x > nextCar.x) {\n\t\t\t\tcar.x -= car.speed;\n\t\t\t}\n\t\t\tif (car.y < nextCar.y) {\n\t\t\t\tcar.y += car.speed;\n\t\t\t} else if (car.y > nextCar.y) {\n\t\t\t\tcar.y -= car.speed;\n\t\t\t}\n\t\t\tcollisions += carRaceCollision(car.x - nextCar.x);\n\t\t\tcollisions += carRaceCollision(car.y - nextCar.y);\n\t\t\tnextCar = cars.shift();\n\t\t}\n\t});\n\treturn collisions;\n};\n\nconst carRace5 = (cars) => {\n\tlet collisions = 0;\n\tcars.forEach((car) => {\n\t\tlet nextCar = cars.shift();\n\t\twhile (nextCar) {\n\t\t\tif (car.x < nextCar.x) {\n\t\t\t\tcar.x += car.speed;\n\t\t\t} else if (car.x > nextCar.x) {\n\t\t\t\tcar.x -= car.speed;\n\t\t\t}\n\t\t\tif (car.y < nextCar.y) {\n\t\t\t\tcar.y += car.speed;\n\t\t\t} else if (car.y > nextCar.y) {\n\t\t\t\tcar.y -= car.speed;\n\t\t\t}\n\t\t\tcollisions += carRaceCollision(car.x - nextCar.x);\n\t\t\tcollisions += carRaceCollision(car.y - nextCar.y);\n\t\t\tnextCar = cars.shift();\n\t\t}\n\t});\n\treturn collisions;\n};\n\nconst carRace6 = (cars) => {\n\tlet collisions = 0;\n\tcars.forEach((car) => {\n\t\tlet nextCar = cars.shift();\n\t\twhile (nextCar) {\n\t\t\tif (car.x < nextCar.x) {\n\t\t\t\tcar.x += car.speed;\n\t\t\t} else if (car.x > nextCar.x) {\n\t\t\t\tcar.x -= car.speed;\n\t\t\t}\n\t\t\tif (car.y < nextCar.y) {\n\t\t\t\tcar.y += car.speed;\n\t\t\t} else if (car.y > nextCar.y) {\n\t\t\t\tcar.y -= car.speed;\n\t\t\t}\n\t\t\tcollisions += carRaceCollision(car.x - nextCar.x);\n\t\t\tcollisions += carRaceCollision(car.y - nextCar.y);\n\t\t\tnextCar = cars.shift();\n\t\t}\n\t});\n\treturn collisions;\n};\n\nconst carRace7 = (cars) => {\n\tlet collisions = 0;\n\tcars.forEach((car) => {\n\t\tlet nextCar = cars.shift();\n\t\twhile (nextCar) {\n\t\t\tif (car.x < nextCar.x) {\n\t\t\t\tcar.x += car.speed;\n\t\t\t} else if (car.x > nextCar", "passed": 0}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t>>> incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124])\n\t[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t>>> incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124])\n\t[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t>>> incrList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72", "passed": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n\tpairsSumToZero takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to zero, and false otherwise.\n\t>>> pairsSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToZero([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToZero([1])\n\tfalse\n\t*/\nconst pairsSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n\tpairsSumToZero takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to zero, and false otherwise.\n\t>>> pairsSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToZero([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToZero([1])\n\tfalse\n\t*/\nconst pairsSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 0)\n\t\t\t\treturn true;\n\treturn false;\n}\n\n/*\n\tpairsSumToOne takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to one, and false otherwise.\n\t>>> pairsSumToOne([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToOne([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToOne([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToOne([1])\n\tfalse\n\t*/\nconst pairsSumToOne = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 1)\n\t\t\t\treturn true;\n\treturn false;\n}\n\n/*\n\tpairsSumToTwo takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to two, and false otherwise.\n\t>>> pairsSumToTwo([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToTwo([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToTwo([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToTwo([1])\n\tfalse\n\t*/\nconst pairsSumToTwo = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 2)\n\t\t\t\treturn true;\n\treturn false;\n}\n\n/*\n\tpairsSumToThree takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to three, and false otherwise.\n\t>>> pairsSumToThree([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToThree([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToThree([1])\n\tfalse\n\t*/\nconst pairsSumToThree = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 3)\n\t\t\t\treturn true;\n\treturn false;\n}\n\n/*\n\tpairsSumToFour takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to four, and false otherwise.\n\t>>> pairsSumToFour([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToFour([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToFour([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToFour([1])\n\tfalse\n\t*/\nconst pairsSumToFour = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 4)\n\t\t\t\treturn true;\n\treturn false;\n}\n\n/*\n\tpairsSumToFive takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to five, and false otherwise.\n\t>>> pairsSumToFive([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToFive([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToFive([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToFive([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToFive([1])\n\tfalse\n\t*/\nconst pairsSumToFive = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 5)\n\t\t\t\treturn true;\n\treturn false;\n}\n\n/*\n\tpairsSumToSix takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to six, and false otherwise.\n\t>>> pairsSumToSix([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToSix([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToSix([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToSix([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToSix([1])\n\tfalse\n\t*/\nconst pairsSumToSix = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 6)\n\t\t\t\treturn true;\n\treturn false;\n}\n\n/*\n\tpairsSumToSeven takes a", "passed": 0}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> changeBase(8, 3)\n\t'22'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t*/\nconst changeBase = (x, base) => {\n\tvar ret = \"\";\n\twhile (x > 0) {\n\t\tret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> changeBase(8, 3)\n\t'22'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t*/\nconst changeBase = (x, base) => {\n\tvar ret = \"\";\n\twhile (x > 0) {\n\t\tret = (x % base).toString() + ret;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn ret;\n}\n\n/*\n\t>>> changeBase(8, 3)\n\t'22'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n", "passed": 0}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea = (a, h) => {\n\treturn a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea2 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea3 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea4 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea5 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea6 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea7 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea8 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea9 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea10 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea11 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea12 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea13 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea14 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea15 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea16 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea17 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea18 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea19 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea20 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea21 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea22 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea23 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea24 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea25 = (a, h) => {\n\treturn a * h / 2.0;\n};\n\n/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea26", "passed": 0}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t*/\nconst fib4 = (n) => {\n\tvar results = [0, 0, 2, 0];\n\tif (n < 4)\n\t\treturn results[n];\n\tfor (let i = 4; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t*/\nconst fib4 = (n) => {\n\tvar results = [0, 0, 2, 0];\n\tif (n < 4)\n\t\treturn results[n];\n\tfor (let i = 4; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n\t\t\tresults.at(-3) + results.at(-4));\n\t}\n\treturn results.at(n - 1);\n}\n\n/*\n\tThe Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib5(0) -> 0\n\tfib5(1) -> 0\n\tfib5(2) -> 2\n\tfib5(3) -> 0\n\tfib5(4) -> 0\n\tfib5(5) -> 1\n\tfib5(6) -> 0\n\tfib5(7) -> 0\n\tfib5(8) -> 2\n\tfib5(9) -> 0\n\tfib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5) + fib5(n-6) + fib5(n-7) + fib5(n-8) + fib5(n-9) + fib5(n-10) + fib5(n-11) + fib5(n-12) + fib5(n-13) + fib5(n-14) + fib5(n-15) + fib5(n-16) + fib5(n-17) + fib5(n-18) + fib5(n-19) + fib5(n-20) + fib5(n-21) + fib5(n-22) + fib5(n-23) + fib5(n-24) + fib5(n-25) + fib5(n-26) + fib5(n-27) + fib5(n-28) + fib5(n-29) + fib5(n-30) + fib5(n-31) + fib5(n-32) + fib5(n-33) + fib5(n-34) + fib5(n-35) + fib5(n-36) + fib5(n-37) + fib5(n-38) + fib5(n-39) + fib5(n-40) + fib5(n-41) + fib5(n-42) + fib5(n-43) + fib5(n-44) + fib5(n-45) + fib5(n-46) + fib5(n-47) + fib5(n-48) + fib5(n-49) + fib5(n-50) + fib5(n-51) + fib5(n-52) + fib5(n-53) + fib5(n-54) + fib5(n-55) + fib5(n-56) + fib5(n-57) + fib5(n-58) + fib5(n-59) + fib5(n-60) + fib5(n-61) + fib5(n-62) + fib5(n-63) + fib5(n-64) + fib5(n-65) + fib5(n-66) + fib5(n-67) + fib5(n-68) + fib5(n-69) + fib5(n-70) + fib5(n-71) + fib5(n-72) + fib5(n-73) + fib5(n-74) + fib5(n-75) + fib5(n-76) + fib5(n-77) + fib5(n-78) + fib5(n-79) + fib5(n-80) + fib5(n-81) + fib5(n-82) + fib5(n-83) + fib5(n-84) + fib5(n-85) + fib5(n-86) + fib5(n-87) + fib5(n-88) + fib5(n-89) + fib5(n-90) + fib5(n-91) + fib5(n-92) + fib5(n-93) + fib5(n-94) + fib5(n-95) + fib5(n-96) + fib5(n-97) + fib5(n-98) + fib5(n-99) + fib5(n-100) + fib5(n-101) + fib5(n-102) + fib5(n-103) + fib5(n-104) + fib5(n-105) + fib5(n-106) + fib5(n-107) + fib5(n-108) + fib5(n-109) + fib5(n-110) + fib5(n-111) + fib5(n-112) + fib5(n-113) + fib5(n-114) + fib5(n-115) + fib5(n-116) + fib5(n-117) + fib5(n-118) + fib5(n-119) + fib5(n-120) + fib5(n-121) + fib5(n-122) + fib5(n-123) + fib5(n-124) + fib5(n-125) + fib5(n-126) + fib5(n-127) + fib5(n-128) + fib5(n-129) + fib5(n-130) + fib5(n-131) + fib5(n-132) + fib5(n-133) + fib5(n-134) + fib5(n-135) + fib5(n-136) + fib5(n-137) + fib5(n-138) + fib5(n-139) + fib5(n-140) + fib5(", "passed": 0}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t8.0\n\t*/\nconst median = (l) => {\n\tl.sort((a, b) => a - b);\n\tvar len = l.length;\n\tif (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t8.0\n\t*/\nconst median = (l) => {\n\tl.sort((a, b) => a - b);\n\tvar len = l.length;\n\tif (l.length % 2 == 1)\n\t\treturn l[len / 2];\n\telse\n\t\treturn (l[len / 2 - 1] + l[len / 2]) / 2;\n};\n\n/*\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t8.0\n\t*/\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('')\n\ttrue\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('')\n\ttrue\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n", "passed": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * p) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp2 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * n) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp3 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * n) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp4 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n - i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp5 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n + i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp6 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n - i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp7 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n + i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp8 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n + i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp9 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n - i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp10 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n - i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp11 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (n + i)) % p;\n\treturn ret;\n};\n\n/*\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp12 = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * (", "passed": 0}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t*/\nconst intersperse = (numbers, delimeter) => {\n\tif (!Array.isArray(numbers) || numbers.length == 0)\n\t\treturn [];\n\tvar result = [];\n\tfor (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t*/\nconst intersperse = (numbers, delimeter) => {\n\tif (!Array.isArray(numbers) || numbers.length == 0)\n\t\treturn [];\n\tvar result = [];\n\tfor (const n of numbers) {\n\t\tif (result.length > 0)\n\t\t\tresult.push(delimeter);\n\t\tresult.push(n);\n\t}\n\treturn result;\n};\n\n/*\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t>>> intersperse([1, 2, 3], 4, 'x')\n\t[1, 4, 2, 4, 3, 'x']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y')\n\t[1, 4, 2, 4, 3, 'x', 'y']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g', 'f')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g', 'f']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g', 'f', 'd')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g', 'f', 'd']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g', 'f', 'd', 'c')\n\t[1, 4, 2, 4, 3, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g', 'f', 'd', 'c']\n\t>>> intersperse([1, 2, 3], 4, 'x', 'y', 'z', 'w', 'v', 'u', 't','s', 'r', 'p', 'e', 'h', 'g', 'f', 'd', 'c', 'b')\n\t[1, 4, 2, 4, 3, 'x', 'y', '", "passed": 0}
{"task_id": "JavaScript/50", "prompt": "/*\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t*/\nconst encodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t*/\nconst encodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift2 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift3 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift4 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift5 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift6 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift7 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift8 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift9 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift10 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift11 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift12 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift13 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift14 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift15 = (s) => {\n\treturn s.split(\"\").map", "passed": 0}
{"task_id": "JavaScript/51", "prompt": "/*\n\tremoveVowels is a function that takes string and returns string without vowels.\n\t>>> removeVowels('')\n\t''\n\t>>> removeVowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> removeVowels('abcdef')\n\t'bcdf'\n\t>>> removeVowels('aaaaa')\n\t''\n\t>>> removeVowels('aaBAA')\n\t'B'\n\t>>> removeVowels('zbcd')\n\t'zbcd'\n\t*/\nconst removeVowels = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t\t .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\t\t\t\t\t\t\t\t\t\t.includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n\tremoveVowels is a function that takes string and returns string without vowels.\n\t>>> removeVowels('')\n\t''\n\t>>> removeVowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> removeVowels('abcdef')\n\t'bcdf'\n\t>>> removeVowels('aaaaa')\n\t''\n\t>>> removeVowels('aaBAA')\n\t'B'\n\t>>> removeVowels('zbcd')\n\t'zbcd'\n\t*/\nconst removeVowels = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t\t.filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\t\t\t\t\t\t\t\t\t\t.includes(s.toLowerCase())\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t.join(\"\");\n}\n\n/*\n\tremovePunctuation is a function that takes string and returns string without punctuation.\n\t>>> removePunctuation('')\n\t''\n\t>>> removePunctuation(\"abcdef\\nghijklm\")\n\t'abcdefghijklm'\n\t>>> removePunctuation('abcdef')\n\t'abcdef'\n\t>>> removePunctuation('aaaaa')\n\t''\n\t>>> removePunctuation('aaBAA')\n\t'aB'\n\t>>> removePunctuation('zbcd')\n\t'zbcd'\n\t*/\nconst removePunctuation = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t.filter(spassed": 0}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n\t>>> belowThreshold([1, 2, 4, 10], 100)\n\ttrue\n\t>>> belowThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t*/\nconst belowThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n\t>>> belowThreshold([1, 2, 4, 10], 100)\n\ttrue\n\t>>> belowThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t*/\nconst belowThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e >= t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are above threshold t.\n\t>>> aboveThreshold([1, 2, 4, 10], 100)\n\tfalse\n\t>>> aboveThreshold([1, 20, 4, 10], 5)\n\ttrue\n\t*/\nconst aboveThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e <= t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n\t>>> betweenThreshold([1, 2, 4, 10], 100, 200)\n\ttrue\n\t>>> betweenThreshold([1, 20, 4, 10], 5, 10)\n\tfalse\n\t>>> betweenThreshold([1, 20, 4, 10], 5, 20)\n\ttrue\n\t>>> betweenThreshold([1, 20, 4, 10], 5, 30)\n\tfalse\n\t*/\nconst betweenThreshold = (l, t1, t2) => {\n\tfor (const e of l)\n\t\tif (e < t1 || e > t2)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are equal to threshold t.\n\t>>> equalThreshold([1, 2, 4, 10], 10)\n\ttrue\n\t>>> equalThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t>>> equalThreshold([1, 20, 4, 10], 20)\n\tfalse\n\t*/\nconst equalThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e!= t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are not equal to threshold t.\n\t>>> notEqualThreshold([1, 2, 4, 10], 10)\n\tfalse\n\t>>> notEqualThreshold([1, 20, 4, 10], 5)\n\ttrue\n\t>>> notEqualThreshold([1, 20, 4, 10], 20)\n\ttrue\n\t*/\nconst notEqualThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e == t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are less than threshold t.\n\t>>> lessThanThreshold([1, 2, 4, 10], 100)\n\tfalse\n\t>>> lessThanThreshold([1, 20, 4, 10], 5)\n\ttrue\n\t>>> lessThanThreshold([1, 20, 4, 10], 20)\n\tfalse\n\t*/\nconst lessThanThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e >= t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are less than or equal to threshold t.\n\t>>> lessThanOrEqualThreshold([1, 2, 4, 10], 100)\n\ttrue\n\t>>> lessThanOrEqualThreshold([1, 20, 4, 10], 5)\n\ttrue\n\t>>> lessThanOrEqualThreshold([1, 20, 4, 10], 20)\n\ttrue\n\t*/\nconst lessThanOrEqualThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e > t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are greater than threshold t.\n\t>>> greaterThanThreshold([1, 2, 4, 10], 100)\n\tfalse\n\t>>> greaterThanThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t>>> greaterThanThreshold([1, 20, 4, 10], 20)\n\ttrue\n\t*/\nconst greaterThanThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e <= t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are greater than or equal to threshold t.\n\t>>> greaterThanOrEqualThreshold([1, 2, 4, 10], 100)\n\tfalse\n\t>>> greaterThanOrEqualThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t>>> greaterThanOrEqualThreshold([1, 20, 4, 10], 20)\n\ttrue\n\t*/\nconst greaterThanOrEqualThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e < t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are between threshold t1 and t2.\n\t>>> betweenThreshold([1, 2, 4, 10], 100, 200)\n\tfalse\n\t>>> betweenThreshold([1, 20, 4, 10], 5, 10)\n\ttrue\n\t>>> betweenThreshold([1, 20, 4, 10], 5, 20)\n\ttrue\n\t>>> betweenThreshold([1, 20, 4, 10], 5, 30)\n\tfalse\n\t*/\nconst betweenThreshold = (l, t1, t2) => {\n\tfor (const e of l)\n\t\tif (e < t1 || e > t2)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are not between threshold t1 and t2.\n\t>>> notBetweenThreshold([1, 2, 4, 10], 100, 200)\n\tfalse\n\t>>> notBetweenThreshold([1, 20, 4, 10], 5, 10)\n\tfalse\n\t>>> notBetweenThreshold([1, 20, 4, 10], 5, 20)\n\tfalse\n\t>>> notBetweenThreshold([1, 20, 4, 10], 5, 30)\n\ttrue\n\t*/\nconst notBetweenThreshold = (l, t1, t2) => {\n\tfor (const e of l)\n\t\tif (e >= t1 && e <= t2)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return true if all numbers in the list l are equal to threshold t.\n\t>>> equalThreshold([1,", "passed": 0}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t*/\nconst add = (x, y) => {\n\treturn x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t*/\nconst add = (x, y) => {\n\treturn x + y;\n};\n\n/*\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t*/\nconst subtract = (x, y) => {\n\treturn x - y;\n};\n\n/*\n\t>>> subtract(2, 3)\n\t1\n\t>>> subtract(5, 7)\n\t4\n\t*/\nconst multiply = (x, y) => {\n\treturn x * y;\n};\n\n/*\n\t>>> multiply(2, 3)\n\t6\n\t>>> multiply(5, 7)\n\t35\n\t*/\nconst divide = (x, y) => {\n\treturn x / y;\n};\n\n/*\n\t>>> divide(2, 3)\n\t1\n\t>>> divide(5, 7)\n\t2\n\t*/\nconst modulo = (x, y) => {\n\treturn x % y;\n};\n\n/*\n\t>>> modulo(2, 3)\n\t0\n\t>>> modulo(5, 7)\n\t5\n\t*/\nconst power = (x, y) => {\n\treturn Math.pow(x, y);\n};\n\n/*\n\t>>> power(2, 3)\n\t8\n\t>>> power(5, 7)\n\t625\n\t*/\nconst square = (x) => {\n\treturn x * x;\n};\n\n/*\n\t>>> square(2)\n\t4\n\t>>> square(5)\n\t25\n\t*/\nconst squareRoot = (x) => {\n\treturn Math.sqrt(x);\n};\n\n/*\n\t>>> squareRoot(2)\n\t1\n\t>>> squareRoot(5)\n\t2\n\t*/\nconst factorial = (x) => {\n\treturn x < 0? 0 : x > 1? 1 : x * factorial(x - 1);\n};\n\n/*\n\t>>> factorial(2)\n\t2\n\t>>> factorial(5)\n\t120\n\t*/\nconst factorial2 = (x) => {\n\treturn x < 0? 0 : x > 1? 1 : x * factorial2(x - 1);\n};\n\n/*\n\t>>> factorial2(2)\n\t2\n\t>>> factorial2(5)\n\t120\n\t*/\nconst fibonacci = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci(x - 1) + fibonacci(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci(2)\n\t1\n\t>>> fibonacci(5)\n\t8\n\t*/\nconst fibonacci2 = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci2(x - 1) + fibonacci2(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci2(2)\n\t1\n\t>>> fibonacci2(5)\n\t8\n\t*/\nconst fibonacci3 = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci3(x - 1) + fibonacci3(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci3(2)\n\t1\n\t>>> fibonacci3(5)\n\t8\n\t*/\nconst fibonacci4 = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci4(x - 1) + fibonacci4(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci4(2)\n\t1\n\t>>> fibonacci4(5)\n\t8\n\t*/\nconst fibonacci5 = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci5(x - 1) + fibonacci5(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci5(2)\n\t1\n\t>>> fibonacci5(5)\n\t8\n\t*/\nconst fibonacci6 = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci6(x - 1) + fibonacci6(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci6(2)\n\t1\n\t>>> fibonacci6(5)\n\t8\n\t*/\nconst fibonacci7 = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci7(x - 1) + fibonacci7(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci7(2)\n\t1\n\t>>> fibonacci7(5)\n\t8\n\t*/\nconst fibonacci8 = (x) => {\n\tif (x < 0) {\n\t\treturn 0;\n\t} else if (x == 0) {\n\t\treturn 0;\n\t} else if (x == 1) {\n\t\treturn 1;\n\t} else {\n\t\treturn fibonacci8(x - 1) + fibonacci8(x - 2);\n\t}\n};\n\n/*\n\t>>> fibonacci8(2)\n\t1\n\t>>> fibonacci8(5)\n\t8", "passed": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n\tCheck if two words have the same characters.\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\ttrue\n\t>>> sameChars('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameChars('dddddddabc', 'abcd')\n\ttrue\n\t>>> sameChars('eabcd', 'dddddddabc')\n\tfalse\n\t>>> sameChars('abcd', 'dddddddabce')\n\tfalse\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t*/\nconst sameChars = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\tCheck if two words have the same characters.\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\ttrue\n\t>>> sameChars('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameChars('dddddddabc', 'abcd')\n\ttrue\n\t>>> sameChars('eabcd', 'dddddddabc')\n\tfalse\n\t>>> sameChars('abcd', 'dddddddabce')\n\tfalse\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t*/\nconst sameChars = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t*/\nconst sameWord = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t*/\nconst sameWord2 = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t*/\nconst sameWord3 = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t*/\nconst sameWord4 = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t*/\nconst sameWord5 = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t*/\nconst sameWord6 = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t*/\nconst sameWord7 = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words are the same.\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameWord('eabcd', 'dddddddabce')\n\tfalse\n\t>>> sameWord('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t>>> sameWord('eabcd', 'dddddddabc')\n\ttrue", "passed": 0}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib2(10)\n\t55\n\t>>> fib2(1)\n\t1\n\t>>> fib2(8)\n\t21\n\t*/\nconst fib2 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib2(n - 1) + fib2(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib3(10)\n\t55\n\t>>> fib3(1)\n\t1\n\t>>> fib3(8)\n\t21\n\t*/\nconst fib3 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib3(n - 1) + fib3(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib4(10)\n\t55\n\t>>> fib4(1)\n\t1\n\t>>> fib4(8)\n\t21\n\t*/\nconst fib4 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib4(n - 1) + fib4(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib5(10)\n\t55\n\t>>> fib5(1)\n\t1\n\t>>> fib5(8)\n\t21\n\t*/\nconst fib5 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib5(n - 1) + fib5(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib6(10)\n\t55\n\t>>> fib6(1)\n\t1\n\t>>> fib6(8)\n\t21\n\t*/\nconst fib6 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib6(n - 1) + fib6(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib7(10)\n\t55\n\t>>> fib7(1)\n\t1\n\t>>> fib7(8)\n\t21\n\t*/\nconst fib7 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib7(n - 1) + fib7(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib8(10)\n\t55\n\t>>> fib8(1)\n\t1\n\t>>> fib8(8)\n\t21\n\t*/\nconst fib8 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib8(n - 1) + fib8(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib9(10)\n\t55\n\t>>> fib9(1)\n\t1\n\t>>> fib9(8)\n\t21\n\t*/\nconst fib9 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib9(n - 1) + fib9(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib10(10)\n\t55\n\t>>> fib10(1)\n\t1\n\t>>> fib10(8)\n\t21\n\t*/\nconst fib10 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib10(n - 1) + fib10(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib11(10)\n\t55\n\t>>> fib11(1)\n\t1\n\t>>> fib11(8)\n\t21\n\t*/\nconst fib11 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib11(n - 1) + fib11(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib12(10)\n\t55\n\t>>> fib12(1)\n\t1\n\t>>> fib12(8)\n\t21\n\t*/\nconst fib12 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib12(n - 1) + fib12(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib13(10)\n\t55\n\t>>> fib13(1)\n\t1\n\t>>> fib13(8)\n\t21\n\t*/\nconst fib13 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib13(n - 1) + fib13(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib14(10)\n\t55\n\t>>> fib14(1)\n\t1\n\t>>> fib14(8)\n\t21\n\t*/\nconst fib14 = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fib14(n - 1) + fib14(n - 2);\n}\n\n/*\n\tReturn n-th Fibonacci number.\n\t>>> fib15(10)\n\t55\n\t>>> fib15(1)\n\t1\n\t>>> fib15(8)\n\t21\n\t*/\nconst fib15 = (n) => {\n\t", "passed": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n\treturn false if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"<\")\n\tfalse\n\t>>> correctBracketing(\"<>\")\n\tfalse\n\t>>> correctBracketing(\"<<><>>\")\n\tfalse\n\t>>> correctBracketing(\"><<>\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"<\")\n\t\t\tdepth += 1;\n\t\telse\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n\treturn false if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"<\")\n\tfalse\n\t>>> correctBracketing(\"<>\")\n\tfalse\n\t>>> correctBracketing(\"<<><>>\")\n\tfalse\n\t>>> correctBracketing(\"><<>\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"<\")\n\t\t\tdepth += 1;\n\t\telse\n\t\t\tdepth -= 1;\n\t\tif (depth < 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\n/*\n\tGiven a string, return a string with the opening and closing brackets\n\treplaced by a single character.\n\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<<>>\")\n\t'<<>>'\n\t>>> replaceBrackets(\"<\")\n\t'<'\n\t>>> replaceBrackets(\"\")\n\t''\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n\t>>> replaceBrackets(\"<>\")\n\t'><'\n", "passed": 0}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic2 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic3 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic4 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic5 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic6 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic7 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic8 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n\n/*\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic9 = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn", "passed": 0}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t*/\nconst common = (l1, l2) => {\n\tvar ret = new Set();\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t*/\nconst common = (l1, l2) => {\n\tvar ret = new Set();\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n\t\t\tif (e1 === e2)\n\t\t\t\tret.add(e1);\n\treturn Array.from(ret);\n};\n\n/*\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,", "passed": 0}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> smallestPrimeFactor(13195)\n\t29\n\t>>> smallestPrimeFactor(2048)\n\t2\n\t*/\nconst smallestPrimeFactor = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor2 = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> smallestPrimeFactor(13195)\n\t29\n\t>>> smallestPrimeFactor(2048)\n\t2\n\t*/\nconst smallestPrimeFactor2 = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor3 = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> smallestPrimeFactor(13195)\n\t29\n\t>>> smallestPrimeFactor(2048)\n\t2\n\t*/\nconst smallestPrimeFactor3 = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor4 = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> smallestPrimeFactor(13195)\n\t29\n\t>>> smallestPrimeFactor(2048)\n\t2\n\t*/\nconst smallestPrimeFactor4 = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i)) {\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn n;\n};\n\n/*Return the largest prime factor of n. Ass", "passed": 0}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\tvar parseNestedParens = (paren_string) => {\n\t\tvar depth = 0, max_depth = 0;\n\t\tfor (const c of paren_string) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\treturn paren_string.split(' ').map(parseParenGroup);\n};\n\n/*\n\tInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens2 = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\tvar parseNestedParens = (paren_string) => {\n\t\tvar depth = 0, max_depth = 0;\n\t\tfor (const c of paren_string) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\treturn paren_string.split(' ').map(parseParenGroup);\n};\n\n/*\n\tInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens3 = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\tvar parseNestedParens = (paren_string) => {\n\t\tvar depth = 0, max_depth = 0;\n\t\tfor (const c of paren_string) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\treturn paren_string.split(' ').map(parseParenGroup);\n};\n\n/*\n\tInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens4 = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\tvar parseNestedParens = (paren_string) => {\n\t\tvar depth = 0, max_depth = 0;\n\t\tfor (const c of paren_string) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\treturn paren_string.split(' ').map(parseParenGroup);\n};\n\n/*\n\tInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t", "passed": 0}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n\t>>> sumToN(30)\n\t465\n\t>>> sumToN(100)\n\t5050\n\t>>> sumToN(5)\n\t15\n\t>>> sumToN(10)\n\t55\n\t>>> sumToN(1)\n\t1\n\t*/\nconst sumToN = (n) => {\n\treturn n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n\t>>> sumToN(30)\n\t465\n\t>>> sumToN(100)\n\t5050\n\t>>> sumToN(5)\n\t15\n\t>>> sumToN(10)\n\t55\n\t>>> sumToN(1)\n\t1\n\t*/\nconst sumToN = (n) => {\n\treturn n * (n + 1) / 2;\n};\n\n/*\n\t>>> sumToN(30)\n\t465\n\t>>> sumToN(100)\n\t5050\n\t>>> sumToN(5)\n\t15\n\t>>> sumToN(10)\n\t55\n\t>>> sumToN(1)\n\t1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) = 1\n\t*/\n\n/*\n\tsumToN(30) = 465\n\tsumToN(100) = 5050\n\tsumToN(5) = 15\n\tsumToN(10) = 55\n\tsumToN(1) =", "passed": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n\treturn true if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"(\")\n\tfalse\n\t>>> correctBracketing(\"()\")\n\ttrue\n\t>>> correctBracketing(\"(()())\")\n\ttrue\n\t>>> correctBracketing(\")(()\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"(\")\n\t\t\tdepth += 1;\n\t\telse\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n\treturn true if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"(\")\n\tfalse\n\t>>> correctBracketing(\"()\")\n\ttrue\n\t>>> correctBracketing(\"(()())\")\n\ttrue\n\t>>> correctBracketing(\")(()\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"(\")\n\t\t\tdepth += 1;\n\t\telse\n\t\t\tdepth -= 1;\n\t\tif (depth < 0)\n\t\t\treturn false;\n\t}\n\treturn depth == 0;\n};\n\n/*\n\tGiven a string, return a string with the opening and closing brackets\n\treplaced with the actual characters.\n\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>> replaceBrackets(\"(())\")\n\t'(()())'\n\t>>>", "passed": 0}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 + ....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t*/\nconst derivative = (xs) => {\n\treturn xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 +....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t*/\nconst derivative = (xs) => {\n\treturn xs.map((x, i) => x * i).slice(1);\n};\n\n/*\n\tGiven a polynomial, return the roots of the polynomial.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t>>> derivative([1, 2, 3, 4, 5, 6])\n\t[1, 4, 12, 20, 30, 42]\n\t>>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[1, 4, 12, 20, 30, 42, 56, 72, 90, 108]\n\t>>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180]\n\t>>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\t[1, 4, 12, 20, 30, 42, 56, 72, 90, 108, 144, 180, 240, 300, 360, 420, 480, 540, 600, 720]\n\t>>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n\t>>> derivative([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,", "passed": 0}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t*/\nconst fibfib = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\tif (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t*/\nconst fibfib = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\treturn fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib(0) == 0\n\tfib(1) == 1\n\tfib(n) == fib(n-1) + fib(n-2) + fib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibonacci number sequence.\n\t>>> fib(1)\n\t0\n\t>>> fib(5)\n\t4\n\t>>> fib(8)\n\t13\n\t*/\nconst fib = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\treturn fib(n - 1) + fib(n - 2) + fib(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib(0) == 0\n\tfib(1) == 1\n\tfib(n) == fib(n-1) + fib(n-2) + fib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibonacci number sequence.\n\t>>> fib(1)\n\t0\n\t>>> fib(5)\n\t4\n\t>>> fib(8)\n\t13\n\t*/\nconst fib2 = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\treturn fib2(n - 1) + fib2(n - 2) + fib2(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib(0) == 0\n\tfib(1) == 1\n\tfib(n) == fib(n-1) + fib(n-2) + fib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibonacci number sequence.\n\t>>> fib(1)\n\t0\n\t>>> fib(5)\n\t4\n\t>>> fib(8)\n\t13\n\t*/\nconst fib3 = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\treturn fib3(n - 1) + fib3(n - 2) + fib3(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib(0) == 0\n\tfib(1) == 1\n\tfib(n) == fib(n-1) + fib(n-2) + fib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibonacci number sequence.\n\t>>> fib(1)\n\t0\n\t>>> fib(5)\n\t4\n\t>>> fib(8)\n\t13\n\t*/\nconst fib4 = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\treturn fib4(n - 1) + fib4(n - 2) + fib4(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib(0) == 0\n\tfib(1) == 1\n\tfib(n) == fib(n-1) + fib(n-2) + fib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibonacci number sequence.\n\t>>> fib(1)\n\t0\n\t>>> fib(5)\n\t4\n\t>>> fib(8)\n\t13\n\t*/\nconst fib5 = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\treturn fib5(n - 1) + fib5(n - 2) + fib5(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib(0) == 0\n\tfib(1) == 1\n\tfib(n) == fib(n-1) + fib(n-2) + fib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibonacci number sequence.\n\t>>> fib(1)\n\t0\n\t>>> fib(5)\n\t4\n\t>>> fib(8)\n\t13\n\t*/\nconst fib6 = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\treturn fib6(n - 1) + fib6(n - 2) + fib6(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib(0) == 0\n\tfib(1) == 1\n\tfib(n) == fib(n-1) + fib(n-2) + fib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibonacci number sequence.\n\t>>> fib(1)\n\t0\n\t>>> fib(5)\n\t4\n\t>>> fib(8)\n\t13\n\t*/\nconst fib7 = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\treturn fib7(n - 1) + fib7(n - 2) + fib7(n - 3);\n}\n\n/*\n\tThe Fibonacci number sequence is a sequence similar to the Fib", "passed": 0}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowelsCount(\"abcde\")\n\t2\n\t>>> vowelsCount(\"ACEDY\")\n\t3\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowelsCount(\"abcde\")\n\t2\n\t>>> vowelsCount(\"ACEDY\")\n\t3\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n\treturn n_vowels;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tletters in the string.\n\n\tExample:\n\t>>> lettersCount(\"abc\")\n\t3\n\t>>> lettersCount(\"a\")\n\t1\n\t>>> lettersCount(\"\")\n\t0\n\t*/\nconst lettersCount = (s) => {\n\treturn s.split('').reduce((prev, item) => {\n\t\treturn prev + 1;\n\t}, 0);\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\twords in the string.\n\n\tExample:\n\t>>> wordsCount(\"abc\")\n\t1\n\t>>> wordsCount(\"a\")\n\t1\n\t>>> wordsCount(\"\")\n\t0\n\t*/\nconst wordsCount = (s) => {\n\treturn s.split(' ').length;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tlines in the string.\n\n\tExample:\n\t>>> linesCount(\"abc\")\n\t1\n\t>>> linesCount(\"a\")\n\t1\n\t>>> linesCount(\"\")\n\t0\n\t*/\nconst linesCount = (s) => {\n\treturn s.split('\\n').length;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tcharacters in the string.\n\n\tExample:\n\t>>> charactersCount(\"abc\")\n\t3\n\t>>> charactersCount(\"a\")\n\t1\n\t>>> charactersCount(\"\")\n\t0\n\t*/\nconst charactersCount = (s) => {\n\treturn s.length;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tcharacters in the string that are not vowels.\n\n\tExample:\n\t>>> consonantsCount(\"abc\")\n\t2\n\t>>> consonantsCount(\"a\")\n\t1\n\t>>> consonantsCount(\"\")\n\t0\n\t*/\nconst consonantsCount = (s) => {\n\tvar consonants = \"bcdfghjklmnpqrstvwxz\";\n\tvar n_consonants = s.split('').reduce((prev, item) => {\n\t\treturn prev + (consonants.includes(item));\n\t}, 0);\n\treturn n_consonants;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tcharacters in the string that are not vowels.\n\n\tExample:\n\t>>> consonantsCount(\"abc\")\n\t2\n\t>>> consonantsCount(\"a\")\n\t1\n\t>>> consonantsCount(\"\")\n\t0\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n\treturn n_vowels;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tcharacters in the string that are not vowels.\n\n\tExample:\n\t>>> consonantsCount(\"abc\")\n\t2\n\t>>> consonantsCount(\"a\")\n\t1\n\t>>> consonantsCount(\"\")\n\t0\n\t*/\nconst consonantsCount = (s) => {\n\tvar consonants = \"bcdfghjklmnpqrstvwxz\";\n\tvar n_consonants = s.split('').reduce((prev, item) => {\n\t\treturn prev + (consonants.includes(item));\n\t}, 0);\n\treturn n_consonants;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tcharacters in the string that are not vowels.\n\n\tExample:\n\t>>> consonantsCount(\"abc\")\n\t2\n\t>>> consonantsCount(\"a\")\n\t1\n\t>>> consonantsCount(\"\")\n\t0\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n\treturn n_vowels;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tcharacters in the string that are not vowels.\n\n\tExample:\n\t>>> consonantsCount(\"abc\")\n\t2\n\t>>> consonantsCount(\"a\")\n\t1\n\t>>> consonantsCount(\"\")\n\t0\n\t*/\nconst consonantsCount = (s) => {\n\tvar consonants = \"bcdfghjklmnpqrstvwxz\";\n\tvar n_consonants = s.split('').reduce((prev, item) => {\n\t\treturn prev + (consonants.includes(item));\n\t}, 0);\n\treturn n_consonants;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tlines in the string.\n\n\tExample:\n\t>>> linesCount(\"abc\")\n\t1\n\t>>> linesCount(\"a\")\n\t1\n\t>>> linesCount(\"\")\n\t0\n\t*/\nconst linesCount = (s) => {\n\treturn s.split('\\n').length;\n}\n\n/*\n\tWrite a function that takes a string as input and returns the number of\n\tlines in the string.\n\n\tExample:\n\t>>> linesCount(\"abc\")\n\t1\n\t>>> linesCount(\"a\")\n\t1\n\t>>> linesCount(\"\")\n\t0\n\t*/\nconst charactersCount = (s) => {\n\treturn s.length;\n}\n\n/*\n\tWrite a function that takes a string as input and", "passed": 0}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circularShift(12, 1)\n\t\"21\"\n\t>>> circularShift(12, 2)\n\t\"12\"\n\t*/\nconst circularShift = (x, shift) => {\n\ts = x.toString();\n\tif (shift > s.length)\n\t\treturn s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circularShift(12, 1)\n\t\"21\"\n\t>>> circularShift(12, 2)\n\t\"12\"\n\t*/\nconst circularShift = (x, shift) => {\n\ts = x.toString();\n\tif (shift > s.length)\n\t\treturn s.split('').reverse().join('');\n\treturn s.substr(0, shift) + s.substr(shift, s.length - shift);\n}\n\n/*\n\tGiven a string, return a string where all the occurrences of the\n\tcharacter 'e' are replaced by 'o' and all the occurrences of the\n\tcharacter 'i' are replaced by 'n'.\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo, world!\"\n\t>>> replaceEI( \"Hello, world!\" )\n\t\"Hlo", "passed": 0}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char - 55);\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 0\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 0\n\tdigitSum(\"woArBld\") => 67\n\tdigitSum(\"aAaaaXa\") => 0\n  */\nconst lowerDigitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char - 97);\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char - 55) + (ord_char - 97);\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum2 = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char - 55) + (ord_char - 97) + (ord_char - 32);\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum3 = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char - 55) + (ord_char - 97) + (ord_char - 32) + (ord_char - 32);\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum4 = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char - 55) + (ord_char - 97) + (ord_char - 32) + (ord_char - 32) + (ord_char - 32);\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum5 = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char - 55) + (ord_char - 97) + (ord_char - 32) + (ord_char - 32) + (ord_char - 32) + (ord_char - 32);\n  }, 0);\n}\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the upper and lower\n  characters only' ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst fullDigitSum6 = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (", "passed": 0}
{"task_id": "JavaScript/67", "prompt": "/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(i);\n\tconst total = lis.reduce((a, b) => a + b, 0);\n\treturn n - total;\n}\n\n/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(i);\n\tconst total = lis.reduce((a, b) => a + b, 0);\n\treturn n - total;\n}\n\n/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(i);\n\tconst total = lis.reduce((a, b) => a + b, 0);\n\treturn n - total;\n}\n\n/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(i);\n\tconst total = lis.reduce((a, b) => a + b, 0);\n\treturn n - total;\n}\n\n/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(i);\n\tconst total = lis.reduce((a, b) => a + b, 0);\n\treturn n - total;\n}\n\n/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) =>", "passed": 0}
{"task_id": "JavaScript/68", "prompt": "/*\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\t\tInput: [4,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\t\tInput: [1,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 3:\n\t\t\tInput: []\n\t\t\tOutput: []\n\n\tExample 4:\n\t\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\t\tOutput: [0, 1]\n\t\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= node.value\n\t*/\nconst pluck = (arr) => {\n\tif (arr.length == 0) return [];\n\tvar evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\t\tInput: [4,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\t\tInput: [1,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 3:\n\t\t\tInput: []\n\t\t\tOutput: []\n\n\tExample 4:\n\t\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\t\tOutput: [0, 1]\n\t\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= node.value\n\t*/\nconst pluck = (arr) => {\n\tif (arr.length == 0) return [];\n\tvar evens = arr.filter(x => x % 2 == 0);\n\tvar min = evens[0];\n\tvar minIndex = evens.indexOf(min);\n\tvar result = [min, minIndex];\n\tfor (var i = 1; i < evens.length; i++) {\n\t\tif (evens[i] < min) {\n\t\t\tmin = evens[i];\n\t\t\tminIndex = i;\n\t\t}\n\t}\n\treturn result;\n};\n\nmodule.exports = pluck;<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n\tsearch([4, 1, 2, 2, 3, 1])) == 2\n\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n\tsearch([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n\tsearch([4, 1, 2, 2, 3, 1])) == 2\n\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n\tsearch([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (const i of frq)\n    if (i > ans)\n      ans = i;\n  return ans;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd',", "passed": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrangeSortList([]) == []\n\t*/\nconst strangeSortList = (lst) => {\n\tvar res = [], sw = true;\n\twhile (lst.length) {\n\t\tres.push(sw ? Math.min(...lst) : Math.max(...lst));\n\t\tlst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrangeSortList([]) == []\n\t*/\nconst strangeSortList = (lst) => {\n\tvar res = [], sw = true;\n\twhile (lst.length) {\n\t\tres.push(sw? Math.min(...lst) : Math.max(...lst));\n\t\tlst.splice(lst.indexOf(res.at(-1)), 1);\n\t\tsw =!sw;\n\t}\n\treturn res;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater\n\tthan the third side.\n\tExample:\n\ttriangleArea(3, 4, 5) == 6.00\n\ttriangleArea(1, 2, 10) == -1\n\t*/\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater\n\tthan the third side.\n\tExample:\n\ttriangleArea(3, 4, 5) == 6.00\n\ttriangleArea(1, 2, 10) == -1\n\t*/\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -", "passed": 0}
{"task_id": "JavaScript/72", "prompt": "/*\n\tWrite a function that returns true if the object q will fly, and false otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twillItFly([1, 2], 5) ➞ false\n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twillItFly([3, 2, 3], 1) ➞ false\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twillItFly([3, 2, 3], 9) ➞ true\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twillItFly([3], 5) ➞ true\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t*/\nconst willItFly = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n\tWrite a function that returns true if the object q will fly, and false otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twillItFly([1, 2], 5) ➞ false\n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twillItFly([3, 2, 3], 1) ➞ false\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twillItFly([3, 2, 3], 9) ➞ true\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twillItFly([3], 5) ➞ true\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t*/\nconst willItFly = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly2 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly3 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly4 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly5 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly6 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly7 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly8 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly9 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly10 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly11 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly12 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\n\nconst willItFly13 = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {", "passed": 0}
{"task_id": "JavaScript/73", "prompt": "/*\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallestChange([1,2,3,5,4,7,9,6]) == 4\n\tsmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestChange([1, 2, 3, 2, 1]) == 0\n\t*/\nconst smallestChange = (arr) => {\n\tvar ans = 0;\n\tfor (let i = 0; i < Math.floor(arr.length / 2); i++)\n\t\tif (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallestChange([1,2,3,5,4,7,9,6]) == 4\n\tsmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestChange([1, 2, 3, 2, 1]) == 0\n\t*/\nconst smallestChange = (arr) => {\n\tvar ans = 0;\n\tfor (let i = 0; i < Math.floor(arr.length / 2); i++)\n\t\tif (arr[i]!= arr.at(-i - 1))\n\t\t\tans++;\n\treturn ans;\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 3, 2, 1,", "passed": 0}
{"task_id": "JavaScript/74", "prompt": "/*\n\tWrite a function that accepts two lists of strings and returns the list that has\n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotalMatch([], []) ➞ []\n\ttotalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n\ttotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n\ttotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n\ttotalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n\t*/\nconst totalMatch = (lst1, lst2) => {\n\tvar l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n\tvar l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n\tif (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n\tWrite a function that accepts two lists of strings and returns the list that has\n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotalMatch([], []) ➞ []\n\ttotalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n\ttotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n\ttotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n\ttotalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n\t*/\nconst totalMatch = (lst1, lst2) => {\n\tvar l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n\tvar l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n\tif (l1 <= l2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar", "passed": 0}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tisSimplePower(1, 4) => true\n\tisSimplePower(2, 2) => true\n\tisSimplePower(8, 2) => true\n\tisSimplePower(3, 2) => false\n\tisSimplePower(3, 1) => false\n\tisSimplePower(5, 3) => false\n\t*/\nconst isSimplePower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tisSimplePower(1, 4) => true\n\tisSimplePower(2, 2) => true\n\tisSimplePower(8, 2) => true\n\tisSimplePower(3, 2) => false\n\tisSimplePower(3, 1) => false\n\tisSimplePower(5, 3) => false\n\t*/\nconst isSimplePower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x % n == 0) {\n\t\tx /= n;\n\t\tpower *= n;\n\t}\n\treturn (x == 1);\n}\n\n/*\n\tYour task is to write a function that returns true if a number x is a perfect power of n and false in other cases.\n\tx is a perfect power of n if n**int=x**int\n\tFor example:\n\tisPerfectPower(1, 4) => true\n\tisPerfectPower(2, 2) => true\n\tisPerfectPower(8, 2) => true\n\tisPerfectPower(3, 2) => false\n\tisPerfectPower(3, 1) => false\n\tisPerfectPower(5, 3) => false\n\t*/\nconst isPerfectPower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x % n == 0) {\n\t\tx /= n;\n\t\tpower *= n;\n\t}\n\treturn (x == 1);\n}\n\n/*\n\tYour task is to write a function that returns true if a number x is a perfect power of n and false in other cases.\n\tx is a perfect power of n if n**int=x**int\n\tFor example:\n\tisPerfectPower(1, 4) => true\n\tisPerfectPower(2, 2) => true\n\tisPerfectPower(8, 2) => true\n\tisPerfectPower(3, 2) => false\n\tisPerfectPower(3, 1) => false\n\tisPerfectPower(5, 3) => false\n\t*/\nconst isPerfectPower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x % n == 0) {\n\t\tx /= n;\n\t\tpower *= n;\n\t}\n\treturn (x == 1);\n}\n\n/*\n\tYour task is to write a function that returns true if a number x is a perfect power of n and false in other cases.\n\tx is a perfect power of n if n**int=x**int\n\tFor example:\n\tisPerfectPower(1, 4) => true\n\tisPerfectPower(2, 2) => true\n\tisPerfectPower(8, 2) => true\n\tisPerfectPower(3, 2) => false\n\tisPerfectPower(3, 1) => false\n\tisPerfectPower(5, 3) => false\n\t*/\nconst isPerfectPower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x % n == 0) {\n\t\tx /= n;\n\t\tpower *= n;\n\t}\n\treturn (x == 1);\n}\n\n/*\n\tYour task is to write a function that returns true if a number x is a perfect power of n and false in other cases.\n\tx is a perfect power of n if n**int=x**int\n\tFor example:\n\tisPerfectPower(1, 4) => true\n\tisPerfectPower(2, 2) => true\n\tisPerfectPower(8, 2) => true\n\tisPerfectPower(3, 2) => false\n\tisPerfectPower(3, 1) => false\n\tisPerfectPower(5, 3) => false\n\t*/\nconst isPerfectPower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x % n == 0) {\n\t\tx /= n;\n\t\tpower *= n;\n\t}\n\treturn (x == 1);\n}\n\n/*\n\tYour task is to write a function that returns true if a number x is a perfect power of n and false in other cases.\n\tx is a perfect power of n if n**int=x**int\n\tFor example:\n\tisPerfectPower(1, 4) => true\n\tisPerfectPower(2, 2) => true\n\tisPerfectPower(8, 2) => true\n\tisPerfectPower(3, 2) => false\n\tisPerfectPower(3, 1) => false\n\tisPerfectPower(5, 3) => false\n\t*/\nconst isPerfectPower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x % n == 0) {\n\t\tx /= n;\n\t\tpower *= n;\n\t}\n\treturn (x == 1);\n}\n\n/*\n\tYour task is to write a function that returns true if a number x is a perfect power of n and false in other cases.\n\tx is a perfect power of n if n**int=x**int\n\tFor example:\n\tisPerfectPower(1, 4) => true\n\tisPerfectPower(2, 2) => true\n\tisPerfectPower(8, 2) => true\n\tisPerfectPower(3, 2) => false\n\tisPerfectPower(3, 1) => false\n\tisPerfectPower(5, 3) => false\n\t*/\nconst isPerfectPower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x % n == 0) {\n\t\tx /= n;\n\t\tpower *= n;\n\t}\n\treturn (x == 1);\n}\n\n/*\n\tYour task is to write a function that returns true if a number x is a perfect power of n and false in other cases.\n\tx is a perfect power of n if n**int=x**int\n\tFor example:\n\tisPerfectPower(1, 4) => true\n\tisPerfectPower(2, 2) => true\n\tisPerfectPower(8, 2) => true\n\tisPerfectPower(3, 2) => false\n\tisPerfectPower(3, 1) => false\n\tisPerfectPower(5, 3) => false\n", "passed": 0}
{"task_id": "JavaScript/77", "prompt": "/*\n\tWrite a function that takes an integer a and returns true\n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> true\n\tiscube(2) ==> false\n\tiscube(-1) ==> true\n\tiscube(64) ==> true\n\tiscube(0) ==> true\n\tiscube(180) ==> false\n\t*/\nconst iscube = (a) => {\n\ta = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n\tWrite a function that takes an integer a and returns true\n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> true\n\tiscube(2) ==> false\n\tiscube(-1) ==> true\n\tiscube(64) ==> true\n\tiscube(0) ==> true\n\tiscube(180) ==> false\n\t*/\nconst iscube = (a) => {\n\ta = Math.abs(a);\n\tlet i = 1;\n\twhile (a > i) {\n\t\tif (a % i === 0) {\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n\ta hexadecimal number as a string and counts the number of hexadecimal\n\tdigits that are primes (prime number=== or a prime=== is a natural number\n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n\tPrime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n\tSo you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n\tB (=decimal 11)=== D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string===\n\tand symbols A===B===C===D===E===F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t*/\nconst hexKey = (num) => {\n\tvar primes = \"2357BD\",\n\t\t\ttotal = 0;\n\tfor (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n\ta hexadecimal number as a string and counts the number of hexadecimal\n\tdigits that are primes (prime number=== or a prime=== is a natural number\n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n\tPrime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n\tSo you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n\tB (=decimal 11)=== D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string===\n\tand symbols A===B===C===D===E===F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t*/\nconst hexKey = (num) => {\n\tvar primes = \"2357BD\",\n\t\t\ttotal = 0;\n\tfor (let i = 0; i < num.length; i++)\n\t\ttotal += (primes.indexOf(num.charAt(i)) === -1)? 0 : 1;\n\treturn total;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn \"db\" + decimal.toString(2) + \"db\";\n}\n\n/*\n\tConverts a binary string to decimal number.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary.slice(2), 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a binary string to decimal number.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a binary string to decimal number.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn decimal.toString(2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tbinaryToDecimal(\"db1111db\")   # returns 15\n\tbinaryToDecimal(\"db100000db\") # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary, 2);\n}\n\n/*\n\tConverts a decimal number to binary string.\n\n\tExamples:\n\tdecimalToBinary", "passed": 0}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sumProduct([])\n\t(0, 1)\n\t>>> sumProduct([1, 2, 3, 4])\n\t(10, 24)\n\t*/\nconst sumProduct = (numbers, int) => {\n\tvar sum_value = 0, prod_value = 1;\n\tfor (const n of numbers) {\n\t\tsum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sumProduct([])\n\t(0, 1)\n\t>>> sumProduct([1, 2, 3, 4])\n\t(10, 24)\n\t*/\nconst sumProduct = (numbers, int) => {\n\tvar sum_value = 0, prod_value = 1;\n\tfor (const n of numbers) {\n\t\tsum_value += n;\n\t\tprod_value *= n;\n\t}\n\treturn [sum_value, prod_value];\n};\n\n/*\n\tGiven a list of strings, return a list of strings where each string is a permutation of the original string.\n\t>>> permute(\"abc\")\n\t['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n\t>>> permute(\"ab\")\n\t['ab', 'ba']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"\")\n\t[]\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a\")\n\t['a']\n\t>>> permute(\"a", "passed": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tisHappy(a) => false\n\tisHappy(aa) => false\n\tisHappy(abcd) => true\n\tisHappy(aabb) => false\n\tisHappy(adb) => true\n\tisHappy(xyy) => false\n\t*/\nconst isHappy = (s) => {\n\tif (s.length < 3)\n\t\treturn false;\n\tfor (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tisHappy(a) => false\n\tisHappy(aa) => false\n\tisHappy(abcd) => true\n\tisHappy(aabb) => false\n\tisHappy(adb) => true\n\tisHappy(xyy) => false\n\t*/\nconst isHappy = (s) => {\n\tif (s.length < 3)\n\t\treturn false;\n\tfor (let i = 0; i < s.length - 2; i++)\n\t\tif (s[i] == s[i + 1] && s[i] == s[i + 2])\n\t\t\treturn false;\n\treturn true;\n}\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write\n\ta function that can output a list of letter grades using the following table:\n\t\t\t\t\t GPA       |    Letter grade\n\t\t\t\t\t\t4.0                A+\n\t\t\t\t\t> 3.7                A\n\t\t\t\t\t> 3.3                A-\n\t\t\t\t\t> 3.0                B+\n\t\t\t\t\t> 2.7                B\n\t\t\t\t\t> 2.3                B-\n\t\t\t\t\t> 2.0                C+\n\t\t\t\t\t> 1.7                C\n\t\t\t\t\t> 1.3                C-\n\t\t\t\t\t> 1.0                D+\n\t\t\t\t\t> 0.7                D\n\t\t\t\t\t> 0.0                D-\n\t\t\t\t\t\t0.0                E\n\n\n\tExample:\n\tnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t*/\nconst numericalLetterGrade = (grades) => {\n\tlet letter_grade = []\n\tfor (let i = 0, len = grades.length; i < len; i++) {\n\t\tlet gpa = grades[i]\n\t\tif (gpa == 4.0) {\n\t\t\tletter_grade.push('A+')\n\t\t} else if (gpa > 3.7) {\n\t\t\tletter_grade.push('A')\n\t\t} else if (gpa > 3.3) {\n\t\t\tletter_grade.push('A-')\n\t\t} else if (gpa > 3.0) {\n\t\t\tletter_grade.push('B+')\n\t\t} else if (gpa > 2.7) {\n\t\t\tletter_grade.push('B')\n\t\t} else if (gpa > 2.3) {\n\t\t\tletter_grade.push('B-')\n\t\t} else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write\n\ta function that can output a list of letter grades using the following table:\n\t\t\t\t\t GPA       |    Letter grade\n\t\t\t\t\t\t4.0                A+\n\t\t\t\t\t> 3.7                A\n\t\t\t\t\t> 3.3                A-\n\t\t\t\t\t> 3.0                B+\n\t\t\t\t\t> 2.7                B\n\t\t\t\t\t> 2.3                B-\n\t\t\t\t\t> 2.0                C+\n\t\t\t\t\t> 1.7                C\n\t\t\t\t\t> 1.3                C-\n\t\t\t\t\t> 1.0                D+\n\t\t\t\t\t> 0.7                D\n\t\t\t\t\t> 0.0                D-\n\t\t\t\t\t\t0.0                E\n\n\n\tExample:\n\tnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t*/\nconst numericalLetterGrade = (grades) => {\n\tlet letter_grade = []\n\tfor (let i = 0, len = grades.length; i < len; i++) {\n\t\tlet gpa = grades[i]\n\t\tif (gpa == 4.0) {\n\t\t\tletter_grade.push('A+')\n\t\t} else if (gpa > 3.7) {\n\t\t\tletter_grade.push('A')\n\t\t} else if (gpa > 3.3) {\n\t\t\tletter_grade.push('A-')\n\t\t} else if (gpa > 3.0) {\n\t\t\tletter_grade.push('B+')\n\t\t} else if (gpa > 2.7) {\n\t\t\tletter_grade.push('B')\n\t\t} else if (gpa > 2.3) {\n\t\t\tletter_grade.push('B-')\n\t\t} else if (gpa > 2.0) {\n\t\t\tletter_grade.push('C+')\n\t\t} else if (gpa > 1.7) {\n\t\t\tletter_grade.push('C')\n\t\t} else if (gpa > 1.3) {\n\t\t\tletter_grade.push('C-')\n\t\t} else if (gpa > 1.0) {\n\t\t\tletter_grade.push('D+')\n\t\t} else if (gpa > 0.7) {\n\t\t\tletter_grade.push('D')\n\t\t} else if (gpa > 0.0) {\n\t\t\tletter_grade.push('D-')\n\t\t} else {\n\t\t\tletter_grade.push('E')\n\t\t}\n\t}\n\treturn letter_grade\n}\n\n/*\n\tThis is the function you will write.\n\tIt has to return a list of grades.\n\tThe grades are given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\tThe list of numbers is given as a list of numbers.\n\t", "passed": 0}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n\tlength is a prime number or false otherwise\n\tExamples\n\tprimeLength('Hello') == true\n\tprimeLength('abcdcba') == true\n\tprimeLength('kittens') == true\n\tprimeLength('orange') == false\n\t*/\nconst primeLength = (string) => {\n\tlet len = string.length\n\tif (len == 1 || len == 0) { return false }\n\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n\tlength is a prime number or false otherwise\n\tExamples\n\tprimeLength('Hello') == true\n\tprimeLength('abcdcba') == true\n\tprimeLength('kittens') == true\n\tprimeLength('orange') == false\n\t*/\nconst primeLength = (string) => {\n\tlet len = string.length\n\tif (len == 1 || len == 0) { return false }\n\tfor (let i = 2; i * i <= len; i++) {\n\t\tif (string.indexOf(i.toString()) == -1) { return false }\n\t}\n\treturn true\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in upper case\nExamples\nupperCase('Hello') == 5\nupperCase('hello') == 5\nupperCase('Hello World') == 11\nupperCase('Hello World') == 11\nupperCase('Hello World') == 11\n*/\nconst upperCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toUpperCase() == string[i]) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in lower case\nExamples\nlowerCase('Hello') == 5\nlowerCase('hello') == 5\nlowerCase('Hello World') == 11\nlowerCase('Hello World') == 11\nlowerCase('Hello World') == 11\n*/\nconst lowerCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toLowerCase() == string[i]) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in upper case and lower case\nExamples\nupperLowerCase('Hello') == 11\nupperLowerCase('hello') == 11\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\n*/\nconst upperLowerCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toLowerCase() == string[i].toUpperCase()) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in lower case and upper case\nExamples\nupperLowerCase('Hello') == 5\nupperLowerCase('hello') == 5\nupperLowerCase('Hello World') == 11\nupperLowerCase('Hello World') == 11\nupperLowerCase('Hello World') == 11\n*/\nconst lowerUpperCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toUpperCase() == string[i].toLowerCase()) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in upper case and lower case\nExamples\nupperLowerCase('Hello') == 11\nupperLowerCase('hello') == 11\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\n*/\nconst upperLowerCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toLowerCase() == string[i].toUpperCase()) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in lower case and upper case\nExamples\nupperLowerCase('Hello') == 5\nupperLowerCase('hello') == 5\nupperLowerCase('Hello World') == 11\nupperLowerCase('Hello World') == 11\nupperLowerCase('Hello World') == 11\n*/\nconst lowerUpperCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toUpperCase() == string[i].toLowerCase()) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in upper case and lower case\nExamples\nupperLowerCase('Hello') == 11\nupperLowerCase('hello') == 11\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\n*/\nconst upperLowerCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toLowerCase() == string[i].toUpperCase()) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in lower case and upper case\nExamples\nupperLowerCase('Hello') == 5\nupperLowerCase('hello') == 5\nupperLowerCase('Hello World') == 11\nupperLowerCase('Hello World') == 11\nupperLowerCase('Hello World') == 11\n*/\nconst lowerUpperCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toUpperCase() == string[i].toLowerCase()) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\nWrite a function that takes a string and returns the number of\ncharacters that are in upper case and lower case\nExamples\nupperLowerCase('Hello') == 11\nupperLowerCase('hello') == 11\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\nupperLowerCase('Hello World') == 22\n*/\nconst upperLowerCase = (string) => {\n\tlet len = string.length\n\tlet count = 0\n\tfor (let i = 0; i < len; i++) {\n\t\tif (string[i].toLowerCase() == string[", "passed": 0}
{"task_id": "JavaScript/83", "prompt": "/*\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t*/\nconst startsOneEnds = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t*/\nconst startsOneEnds = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds2 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds2(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds3 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds3(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds4 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds4(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds5 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds5(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds6 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds6(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds7 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds7(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds8 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds8(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds9 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds9(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds10 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds10(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds11 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds11(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds12 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds12(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds13 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds13(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds14 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds14(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds15 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds15(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds16 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds16(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds17 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds17(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds18 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds18(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds19 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds19(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds20 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds20(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds21 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds21(i)\n\t}\n\treturn t\n}\n\nconst startsOneEnds22 = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds22", "passed": 0}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n\tExample\n\t\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n\tVariables:\n\t\t\t@N integer\n\t\t\t\t\t Constraints: 0 ≤ N ≤ 10000.\n\tOutput:\n\t\t\t a string of binary number\n\t*/\nconst solve = (N) => {\n\tlet t = 0\n\twhile (N > 0) {\n\t\tt += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n\tExample\n\t\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n\tVariables:\n\t\t\t@N integer\n\t\t\t\t\t Constraints: 0 ≤ N ≤ 10000.\n\tOutput:\n\t\t\t a string of binary number\n\t*/\nconst solve = (N) => {\n\tlet t = 0\n\twhile (N > 0) {\n\t\tt += N % 10\n\t\tN = N / 10\n\t}\n\treturn t\n}\n\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n", "passed": 0}
{"task_id": "JavaScript/86", "prompt": "/*\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tantiShuffle('Hi') returns 'Hi'\n\tantiShuffle('hello') returns 'ehllo'\n\tantiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\t*/\nconst antiShuffle = (s) => {\n\tlet arr = s.split(/\\s/)\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < arr[i].length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < arr[i].length; k++) {\n\t\t\t\tif (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\tarr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tantiShuffle('Hi') returns 'Hi'\n\tantiShuffle('hello') returns 'ehllo'\n\tantiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n\t*/\nconst antiShuffle = (s) => {\n\tlet arr = s.split(/\\s/)\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < arr[i].length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < arr[i].length; k++) {\n\t\t\t\tif (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\tarr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow2 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow3 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow4 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow5 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow6 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow7 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow8 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0] - b[0])\n  t.sort((a, b) => b[1] - a[1])\n  return t\n}\n\nconst getRow9 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  t.sort((a, b) => a[0]", "passed": 0}
{"task_id": "JavaScript/88", "prompt": "/*\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sortArray([]) => []\n\t* sortArray([5]) => [5]\n\t* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t*/\nconst sortArray = (array) => {\n\tlet arr = array\n\tlet tot = arr[0] + arr[arr.length-1]\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n\t\t\t\tind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sortArray([]) => []\n\t* sortArray([5]) => [5]\n\t* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t*/\nconst sortArray = (array) => {\n\tlet arr = array\n\tlet tot = arr[0] + arr[arr.length-1]\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet temp = arr[j]\n\t\t\tarr[j] = arr[ind]\n\t\t\tarr[ind] = temp\n\t\t}\n\t}\n\treturn arr\n}\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 5, 6]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t*/\nconst encrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 4\n\t\tif (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t*/\nconst encrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 4\n\t\tif (p > 122) { p -= 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tCreate a function decrypt that takes a string as an argument and\n\treturns a string decrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift up by two multiplied to two places.\n\tFor example:\n\tdecrypt('lm') returns 'hi'\n\tdecrypt('ewhjklnop') returns 'asdfghjkl'\n\tdecrypt('kj') returns 'gf'\n\tdecrypt('ix') returns 'et'\n\t*/\nconst decrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() - 4\n\t\tif (p < 97) { p += 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tCreate a function rotate that takes a string as an argument and\n\treturns a string rotated by the alphabet. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift up by two multiplied to two places.\n\tFor example:\n\trotate('hi') returns 'ih'\n\trotate('asdfghjkl') returns 'jkl'\n\trotate('gf') returns 'f'\n\trotate('et') returns 't'\n\t*/\nconst rotate = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 2\n\t\tif (p > 122) { p -= 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tCreate a function rotate that takes a string as an argument and\n\treturns a string rotated by the alphabet. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\trotate('ih') returns 'hi'\n\trotate('jkl') returns 'asdfghjkl'\n\trotate('f') returns 'gf'\n\trotate('t') returns 'et'\n\t*/\nconst rotateBack = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() - 2\n\t\tif (p < 97) { p += 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tCreate a function rotate that takes a string as an argument and\n\treturns a string rotated by the alphabet. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift up by two multiplied to two places.\n\tFor example:\n\trotate('ih') returns 'hi'\n\trotate('jkl') returns 'asdfghjkl'\n\trotate('f') returns 'gf'\n\trotate('t') returns 'et'\n\t*/\nconst rotateBack2 = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() - 4\n\t\tif (p < 97) { p += 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tCreate a function rotate that takes a string as an argument and\n\treturns a string rotated by the alphabet. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift up by two multiplied to two places.\n\tFor example:\n\trotate('ih') returns 'hi'\n\trotate('jkl') returns 'asdfghjkl'\n\trotate('f') returns 'gf'\n\trotate('t') returns 'et'\n\t*/\nconst rotateBack3 = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() - 6\n\t\tif (p < 97) { p += 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tCreate a function rotate that takes a string as an argument and\n\treturns a string rotated by the alphabet. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift up by two multiplied to two places.\n\tFor example:\n\trotate('ih') returns 'hi'\n\trotate('jkl') returns 'asdfghjkl'\n\trotate('f') returns 'gf'\n\trotate('t') returns 'et'\n\t*/\nconst rotateBack4 = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() - 8\n\t\tif (p < 97) { p += 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tCreate a function rotate that takes a string as an argument and\n\treturns a string rotated by the alphabet. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift up by two multiplied to two places.\n\tFor example:\n\trotate('ih') returns 'hi'\n\trotate('jkl') returns 'asdfghjkl'\n\trotate('f') returns 'gf'\n\trotate('t') returns 'et'\n\t*/\nconst rotateBack5 = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p =", "passed": 0}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t*/\nconst rollingMax = (numbers) => {\n\tvar running_max, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = n;\n\t\telse\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t*/\nconst rollingMax = (numbers) => {\n\tvar running_max, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = n;\n\t\telse\n\t\t\trunning_max = Math.max(running_max, n);\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n\tin the sequence.\n\t>>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 2, 2, 3, 3, 3]\n\t*/\nconst rollingMin = (numbers) => {\n\tvar running_min, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_min == undefined)\n\t\t\trunning_min = n;\n\t\telse\n\t\t\trunning_min = Math.min(running_min, n);\n\t\tresult.push(running_min);\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling median element found until given moment\n\tin the sequence.\n\t>>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 2, 2, 3, 3, 3]\n\t*/\nconst rollingMedian = (numbers) => {\n\tvar running_median, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_median == undefined)\n\t\t\trunning_median = n;\n\t\telse\n\t\t\trunning_median = Math.floor((running_median + n) / 2);\n\t\tresult.push(running_median);\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling mode element found until given moment\n\tin the sequence.\n\t>>> rollingMode([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 2, 2, 3, 3, 3]\n\t*/\nconst rollingMode = (numbers) => {\n\tvar running_mode, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_mode == undefined)\n\t\t\trunning_mode = n;\n\t\telse\n\t\t\trunning_mode = Math.max(running_mode, n);\n\t\tresult.push(running_mode);\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling sum element found until given moment\n\tin the sequence.\n\t>>> rollingSum([1, 2, 3, 2, 3, 4, 2])\n\t[1, 3, 5, 7, 9, 11, 13]\n\t*/\nconst rollingSum = (numbers) => {\n\tvar running_sum, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_sum == undefined)\n\t\t\trunning_sum = n;\n\t\telse\n\t\t\trunning_sum = running_sum + n;\n\t\tresult.push(running_sum);\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling variance element found until given moment\n\tin the sequence.\n\t>>> rollingVariance([1, 2, 3, 2, 3, 4, 2])\n\t[0, 1, 1, 1, 1, 1, 1]\n\t*/\nconst rollingVariance = (numbers) => {\n\tvar running_variance, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_variance == undefined)\n\t\t\trunning_variance = n;\n\t\telse\n\t\t\trunning_variance = running_variance + Math.pow(n - running_variance, 2);\n\t\tresult.push(running_variance);\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling standard deviation element found until given moment\n\tin the sequence.\n\t>>> rollingStandardDeviation([1, 2, 3, 2, 3, 4, 2])\n\t[0, 1, 1, 1, 1, 1, 1]\n\t*/\nconst rollingStandardDeviation = (numbers) => {\n\tvar running_standardDeviation, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_standardDeviation == undefined)\n\t\t\trunning_standardDeviation = n;\n\t\telse\n\t\t\trunning_standardDeviation = running_standardDeviation + Math.pow(n - running_standardDeviation, 2);\n\t\tresult.push(Math.sqrt(running_standardDeviation));\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling median deviation element found until given moment\n\tin the sequence.\n\t>>> rollingMedianDeviation([1, 2, 3, 2, 3, 4, 2])\n\t[0, 1, 1, 1, 1, 1, 1]\n\t*/\nconst rollingMedianDeviation = (numbers) => {\n\tvar running_medianDeviation, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_medianDeviation == undefined)\n\t\t\trunning_medianDeviation = n;\n\t\telse\n\t\t\trunning_medianDeviation = running_medianDeviation + Math.pow(n - running_medianDeviation, 2);\n\t\tresult.push(Math.sqrt(running_medianDeviation));\n\t}\n\treturn result;\n};\n\n/* From a given list of integers, generate a list of rolling skewness element found until given moment\n\tin the sequence.\n\t>>> rollingSkewness([1, 2, 3, 2, 3, 4, 2])\n\t[0, 0, 0, 0, 0, 0, 0]\n\t*/\nconst rollingSkewness = (numbers) => {\n\tvar running_skewness, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_skewness == undefined)\n\t\t\trunning_skewness = n;\n\t\telse\n\t\t\trunning_skewness = running_skewness + Math.pow(n - running_skewness, 3);\n\t\tresult.push(Math.sqrt(running_skewness));\n\t}\n\treturn result;\n};\n\n/* From a given list of", "passed": 0}
{"task_id": "JavaScript/90", "prompt": "/*\n\tYou are given a list of integers.\n\tWrite a function nextSmallest() that returns the 2nd smallest element of the list.\n\tReturn null if there is no such element.\n  \n\tnextSmallest([1, 2, 3, 4, 5]) == 2\n\tnextSmallest([5, 1, 4, 3, 2]) == 2\n\tnextSmallest([]) == null\n\tnextSmallest([1, 1]) == null\n\t*/\nconst nextSmallest = (lst) => {\n\tlet arr = lst\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif (arr[k] < arr[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tlet tmp = arr[j]\n\t\tarr[j] = arr[ind]\n\t\tarr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n\tYou are given a list of integers.\n\tWrite a function nextSmallest() that returns the 2nd smallest element of the list.\n\tReturn null if there is no such element.\n  \n\tnextSmallest([1, 2, 3, 4, 5]) == 2\n\tnextSmallest([5, 1, 4, 3, 2]) == 2\n\tnextSmallest([]) == null\n\tnextSmallest([1, 1]) == null\n\t*/\nconst nextSmallest = (lst) => {\n\tlet arr = lst\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif (arr[k] < arr[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tlet tmp = arr[j]\n\t\tarr[j] = arr[ind]\n\t\tarr[ind] = tmp\n\t}\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] < 2) {\n\t\t\treturn arr[i]\n\t\t}\n\t}\n\treturn null\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\nconsole.log(nextSmallest([1, 2, 3, 4, 5, 6]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/91", "prompt": "/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBored(\"Hello world\")\n\t0\n\t>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBored = (S) => {\n\tlet t = 0\n\tif (S[0] == 'I' && S[1] == ' ') { t = 1 }\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBored(\"Hello world\")\n\t0\n\t>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBored = (S) => {\n\tlet t = 0\n\tif (S[0] == 'I' && S[1] =='') { t = 1 }\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt++\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring sentences. A sentence is a string of words, delimited by '.',\n\t'?' or '!'.\n \n\tFor example:\n\t>>> isBoring(\"Hello world\")\n\t0\n\t>>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBoring = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt++\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring sentences. A sentence is a string of words, delimited by '.',\n\t'?' or '!'.\n \n\tFor example:\n\t>>> isBoring(\"Hello world\")\n\t0\n\t>>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBoring = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt++\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring sentences. A sentence is a string of words, delimited by '.',\n\t'?' or '!'.\n \n\tFor example:\n\t>>> isBoring(\"Hello world\")\n\t0\n\t>>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBoring = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt++\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring sentences. A sentence is a string of words, delimited by '.',\n\t'?' or '!'.\n \n\tFor example:\n\t>>> isBoring(\"Hello world\")\n\t0\n\t>>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBoring = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt++\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring sentences. A sentence is a string of words, delimited by '.',\n\t'?' or '!'.\n \n\tFor example:\n\t>>> isBoring(\"Hello world\")\n\t0\n\t>>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBoring = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt++\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring sentences. A sentence is a string of words, delimited by '.',\n\t'?' or '!'.\n \n\tFor example:\n\t>>> isBoring(\"Hello world\")\n\t0\n\t>>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBoring = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt++", "passed": 0}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n", "passed": 0}
{"task_id": "JavaScript/93", "prompt": "/*\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t*/\nconst encode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t*/\nconst encode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and decodes it in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> decode('TGST')\n\t'This is a message'\n\t>>> decode('HKS KS C MGSSCGG')\n\t'This is a message'\n\t*/\nconst decode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and encodes it in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('This is a message')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'TGST'\n\t*/\nconst encode2 = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and decodes it in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> decode('TGST')\n\t'This is a message'\n\t>>> decode('TGST')\n\t'This is a message'\n\t*/\nconst decode2 = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and encodes it in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('This is a message')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'TGST'\n\t*/\nconst encode3 = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and decodes it in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> decode('TGST')\n\t'This is a message'\n\t>>> decode('TGST')\n\t'This is a message'\n\t*/\nconst decode3 = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and encodes it in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('This is a message')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'TGST'\n\t*/\nconst encode4 = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and decodes it in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe", "passed": 0}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t*/\nconst skjkasdkd = (lst) => {\n\tlet t = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t*/\nconst skjkasdkd = (lst) => {\n\tlet t = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p == 1 && lst[i] > t) { t = lst[i] }\n\t}\n\treturn t\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n\tGiven a dictionary, return true if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return false.\n\tThe function should return false is the given dictionary is empty.\n\tExamples:\n\tcheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n\tcheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n\tcheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n\tcheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n\tcheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n\t*/\nconst checkDictCase = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tfor (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n\tGiven a dictionary, return true if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return false.\n\tThe function should return false is the given dictionary is empty.\n\tExamples:\n\tcheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n\tcheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n\tcheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n\tcheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n\tcheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n\t*/\nconst checkDictCase = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tfor (let i = 0; i < key.length; i++) {\n\t\t\tif (key[i].toUpperCase() === key[i].toLowerCase()) {\n\t\t\t\tlo = 0\n\t\t\t}\n\t\t\tif (key[i].toUpperCase()!== key[i].toLowerCase()) {\n\t\t\t\thi = 0\n\t\t\t}\n\t\t}\n\t}\n\treturn c === 0 || c === hi || c === lo\n}\n\n/*\n\tGiven a string, return true if the string is a palindrome, \n\telse return false.\n\tExamples:\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return true.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A man, a plan, a canal, Panama\") should return false.\n\tisPalindrome(\"A", "passed": 0}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcountUpTo(5) => [2,3]\n\tcountUpTo(11) => [2,3,5,7]\n\tcountUpTo(0) => []\n\tcountUpTo(20) => [2,3,5,7,11,13,17,19]\n\tcountUpTo(1) => []\n\tcountUpTo(18) => [2,3,5,7,11,13,17]\n\t*/\nconst countUpTo = (n) => {\n\tlet t = []\n\tfor (let i = 2; i < n; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= i; j++) {\n\t\t\tif (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcountUpTo(5) => [2,3]\n\tcountUpTo(11) => [2,3,5,7]\n\tcountUpTo(0) => []\n\tcountUpTo(20) => [2,3,5,7,11,13,17,19]\n\tcountUpTo(1) => []\n\tcountUpTo(18) => [2,3,5,7,11,13,17]\n\t*/\nconst countUpTo = (n) => {\n\tlet t = []\n\tfor (let i = 2; i < n; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= i; j++) {\n\t\t\tif (i % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p) t.push(i)\n\t}\n\treturn t\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>", "passed": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t*/\nconst multiply = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t*/\nconst multiply = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet a_digits = a.toString().split('').map(x => parseInt(x))\n\tlet b_digits = b.toString().split('').map(x => parseInt(x))\n\tlet a_digits_length = a_digits.length\n\tlet b_digits_length = b_digits.length\n\tlet product = 0\n\tfor (let i = 0; i < a_digits_length; i++) {\n\t\tfor (let j = 0; j < b_digits_length; j++) {\n\t\t\tproduct += a_digits[i] * b_digits[j]\n\t\t}\n\t}\n\treturn product\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe sum of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tadd(148, 412) should return 8.\n\tadd(19, 28) should return 39.\n\tadd(2020, 1851) should return 0.\n\tadd(14,-15) should return -1.\n\t*/\nconst add = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet a_digits = a.toString().split('').map(x => parseInt(x))\n\tlet b_digits = b.toString().split('').map(x => parseInt(x))\n\tlet a_digits_length = a_digits.length\n\tlet b_digits_length = b_digits.length\n\tlet sum = 0\n\tfor (let i = 0; i < a_digits_length; i++) {\n\t\tfor (let j = 0; j < b_digits_length; j++) {\n\t\t\tsum += a_digits[i] + b_digits[j]\n\t\t}\n\t}\n\treturn sum\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe difference of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tsubtract(148, 412) should return -4.\n\tsubtract(19, 28) should return -1.\n\tsubtract(2020, 1851) should return 0.\n\tsubtract(14,-15) should return 1.\n\t*/\nconst subtract = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet a_digits = a.toString().split('').map(x => parseInt(x))\n\tlet b_digits = b.toString().split('').map(x => parseInt(x))\n\tlet a_digits_length = a_digits.length\n\tlet b_digits_length = b_digits.length\n\tlet sum = 0\n\tfor (let i = 0; i < a_digits_length; i++) {\n\t\tfor (let j = 0; j < b_digits_length; j++) {\n\t\t\tsum += a_digits[i] - b_digits[j]\n\t\t}\n\t}\n\treturn sum\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t*/\nconst multiply_with_mod = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet a_digits = a.toString().split('').map(x => parseInt(x))\n\tlet b_digits = b.toString().split('').map(x => parseInt(x))\n\tlet a_digits_length = a_digits.length\n\tlet b_digits_length = b_digits.length\n\tlet product = 0\n\tfor (let i = 0; i < a_digits_length; i++) {\n\t\tfor (let j = 0; j < b_digits_length; j++) {\n\t\t\tproduct += a_digits[i] * b_digits[j]\n\t\t}\n\t}\n\tlet mod = product % 10\n\treturn product\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe sum of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tadd(148, 412) should return 8.\n\tadd(19, 28) should return 39.\n\tadd(2020, 1851) should return 0.\n\tadd(14,-15) should return -1.\n\t*/\nconst add_with_mod = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet a_digits = a.toString().split('').map(x => parseInt(x))\n\tlet b_digits = b.toString().split('').map(x => parseInt(x))\n\tlet a_digits_length = a_digits.length\n\tlet b_digits_length = b_digits.length\n\tlet sum = 0\n\tfor (let i = 0; i < a_digits_length; i++) {\n\t\tfor (let j = 0; j < b_digits_length; j++) {\n\t\t\tsum += a_digits[i] + b_digits[j]\n\t\t}\n\t}\n\tlet mod = sum % 10\n\treturn sum\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe difference of their unit digits.\n\tAssume", "passed": 0}
{"task_id": "JavaScript/98", "prompt": "/*\n\tGiven a string s, count the number of uppercase vowels in even indices.\n  \n\tFor example:\n\tcountUpper('aBCdEf') returns 1\n\tcountUpper('abcdefg') returns 0\n\tcountUpper('dBBE') returns 0\n\t*/\nconst countUpper = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 2) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a string s, count the number of uppercase vowels in even indices.\n  \n\tFor example:\n\tcountUpper('aBCdEf') returns 1\n\tcountUpper('abcdefg') returns 0\n\tcountUpper('dBBE') returns 0\n\t*/\nconst countUpper = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 2) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of lowercase vowels in odd indices.\n  \n\tFor example:\n\tcountLower('aBCdEf') returns 1\n\tcountLower('abcdefg') returns 0\n\tcountLower('dBBE') returns 0\n\t*/\nconst countLower = (s) => {\n\tlet p = 0\n\tfor (let i = 1; i < s.length; i += 2) {\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of vowels in the string.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 3\n\tcountVowels('abcdefg') returns 0\n\tcountVowels('dBBE') returns 2\n\t*/\nconst countVowels = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' || s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of consonants in the string.\n  \n\tFor example:\n\tcountConsonants('aBCdEf') returns 2\n\tcountConsonants('abcdefg') returns 0\n\tcountConsonants('dBBE') returns 1\n\t*/\nconst countConsonants = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= 'O' && s[i]!= 'U' && s[i]!= 'a' && s[i]!= 'e' && s[i]!= 'i' && s[i]!= 'o' && s[i]!= 'u') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of consonants in the string.\n  \n\tFor example:\n\tcountConsonants('aBCdEf') returns 2\n\tcountConsonants('abcdefg') returns 0\n\tcountConsonants('dBBE') returns 1\n\t*/\nconst countConsonants2 = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= 'O' && s[i]!= 'U' && s[i]!= 'a' && s[i]!= 'e' && s[i]!= 'i' && s[i]!= 'o' && s[i]!= 'u') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of consonants in the string.\n  \n\tFor example:\n\tcountConsonants('aBCdEf') returns 2\n\tcountConsonants('abcdefg') returns 0\n\tcountConsonants('dBBE') returns 1\n\t*/\nconst countConsonants3 = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= 'O' && s[i]!= 'U' && s[i]!= 'a' && s[i]!= 'e' && s[i]!= 'i' && s[i]!= 'o' && s[i]!= 'u') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of consonants in the string.\n  \n\tFor example:\n\tcountConsonants('aBCdEf') returns 2\n\tcountConsonants('abcdefg') returns 0\n\tcountConsonants('dBBE') returns 1\n\t*/\nconst countConsonants4 = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= 'O' && s[i]!= 'U' && s[i]!= 'a' && s[i]!= 'e' && s[i]!= 'i' && s[i]!= 'o' && s[i]!= 'u') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of consonants in the string.\n  \n\tFor example:\n\tcountConsonants('aBCdEf') returns 2\n\tcountConsonants('abcdefg') returns 0\n\tcountConsonants('dBBE') returns 1\n\t*/\nconst countConsonants5 = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= '", "passed": 0}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3", "passed": 0}
