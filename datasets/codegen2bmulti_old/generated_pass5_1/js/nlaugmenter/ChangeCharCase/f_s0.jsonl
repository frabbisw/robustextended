{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const list = numbers.map(number => number);\n  const sortedList = list.sort((a, b) => a - b);\n  const thresholdedList = sortedList.filter(number => number > threshold);\n  return thresholdedList.length === 2;\n};\n\nexport default hasCloseElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let paren_list = [];\n  let paren_count = 0;\n  let current_paren = 0;\n  let current_char = 0;\n  let current_char_index = 0;\n  let current_paren_index = 0;\n  let current_paren_count = 0;\n  let current_paren_count_index = 0;\n  let current_paren_count_char = 0;\n  let current_paren_count_char_index = 0;\n  let current_paren_count_char_index_index = 0;\n  let current_paren_count_char_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_paren_count_char_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n  const prefix = string.substring(0, 1);\n  const suffix = string.substring(string.length - 1);\n  const reversed = suffix.split('').reverse().join('');\n  return prefix + reversed + suffix;\n}\n\n/*\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('catcat')\n  'catcat'\n  >>> makePalindrome('catcatcatcat')\n  'catcatcatcat'\n  */\n\n/*\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('catcat')\n  true\n  >>> isPalindrome('catcatcatcat')\n  true\n  >>> isPalindrome('catcatcatcatcat')\n  true\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> isPalindrome('catcat')\n  false\n  >>> isPalindrome('catcatcatcat')\n  false\n  >>> isPalindrome('catcatcatcatcat')\n  false\n  */\n\n/*\n  >>> isPalindrome('cat')\n  false\n  >>> isPalindrome('cata')\n  false\n  >>> is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n < 1) {\n    return [];\n  }\n  const pile = [];\n  let nExt = n;\n  let nNext = n;\n  let nExtOfNext = nExt;\n  let nNextOfNext = nNext;\n  let nExtOfNextOfNext = nExtOfNext;\n  while (nExtOfNextOfNext > 0) {\n    pile.push(nExtOfNextOfNext);\n    nExtOfNextOfNext = nExtOfNextOfNext - 1;\n    nExtOfNext = nExtOfNextOfNext;\n    nNextOfNext = nNextOfNext - 1;\n    nNext = nNextOfNext;\n  }\n  return pile;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = [];\n  let str = s.toLowerCase();\n  let i = 0;\n  while (i < str.length) {\n    let j = 0;\n    while (j < str.length && str[i] === str[j]) {\n      j++;\n    }\n    if (j > 0) {\n      words.push(str.substring(i, j));\n    }\n    i++;\n  }\n  return words;\n};\n\n// test\nconsole.log(wordsString(\"Hi, my name is John\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));\nconsole.log(wordsString(\"One, two, three, four, five, six", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const x_y = x - y;\n  const x_x = x - x_y;\n  const y_y = y - y_x;\n  const y_x = y - y_y;\n  const x_y_y_y = x_y * y_y;\n  const x_x_x_x = x_x * x_x;\n  const y_y_y_y = y_y * y_y;\n  const y_x_x_x = y_x * x_x;\n  const x_y_y_y_y = x_y * y_y * y_y;\n  const x_x_x_x_x = x_x * x_x * x_x;\n  const y_y_y_y_y_y = y_y * y_y * y_y * y_y;\n  const y_x_x_x_x_x = y_x * x_x * x_x * x_x;\n  const x_y_y_y_y_y_y = x_y * y_y * y_y * y_y * y_y;\n  const x_x_x_x_x_x_x = x_x * x_x * x_x * x_x * x_x * x_x;\n  const y_y_y_y_y_y_y_y = y_y * y_y * y_y * y_y * y_y * y_y * y_y;\n  const y_x_x_x_x_x_x_x = y_x * x_x * x_x * x_x * x_x * x_x * x_x;\n  const x_y_y_y_y_y_y_y_y = x_y * y_y * y_y * y_y * y_y * y_y * y_y * y_y;\n  const x_x_x_x_x_x_x_x_x = x_x * x_x * x_x * x_x * x_x * x_x * x_x * x_x;\n  const y_y_y_y_y_y_y_y_y_y = y_y * y_y * y_y * y_y * y_y * y_y * y_y * y_y;\n  const y_x_x_x_x_x_x_x_x_x = y_x * x_x * x_x * x_x * x_x * x_x * x_x * x_x;\n  const x_y_y_y_y_y_y_y_y_y_y = x_y * y_y * y_y * y_y * y_y * y_y * y_y * y_y;\n  const x_x_x_x_x_x_x_x_x_x_x = x_x * x_x * x_x * x_x * x_x * x_x * x_x * x_x;\n  const y_y_y_y_y_y_y_y_y_y_y_y_y = y_y * y_y * y_y * y_y * y_y * y_y * y_y * y_y;\n  const y_x_x_x_x_x_x_x_x_x_x_x_x = y_x * x_x * x_x * x_x * x_x * x_x * x_x * x_x * x_x;\n  const x_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_y_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < 0 || m < 0) {\n    return -1;\n  }\n  if (n === 0 && m === 0) {\n    return 0;\n  }\n  if (n === 0 || m === 0) {\n    return 0;\n  }\n  if (n === m) {\n    return n;\n  }\n  if (n > m) {\n    return roundedAvg(m, n - m);\n  }\n  return roundedAvg(n - m, m);\n};\n\n// https://www.hackerrank.com/challenges/rounded-average/problem\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [];\n  for (let i = 0; i < x.length; i++) {\n    let digit = x[i];\n    if (result.indexOf(digit) === -1) {\n      result.push(digit);\n    }\n  }\n  return result;\n};\n\nmodule.exports = uniqueDigits;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num >= 1 && num <= 9) {\n      result.push(num);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  const result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num.toLowerCase() === \"one\" || num.toLowerCase() === \"two\" || num.toLowerCase() === \"three\" || num.toLowerCase() === \"four\" || num.toLowerCase() === \"five\" || num.toLowerCase() === \"six\" || num.toLowerCase() === \"seven\" || num.toLowerCase() === \"eight\" || num.toLowerCase() === \"nine\") {\n      result.push(num);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byNameAndLength = (arr) => {\n  const result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num.toLowerCase() === \"one\" || num.toLowerCase() === \"two\" || num.toLowerCase() === \"three\" || num.toLowerCase() === \"four\" || num.toLowerCase() === \"five\" || num.toLowerCase() === \"six\" || num.toLowerCase() === \"seven\" || num.toLowerCase() === \"eight\" || num.toLowerCase() === \"nine\") {\n      result.push(num);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byNameAndLengthAndReverse = (arr) => {\n  const result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num.toLowerCase() === \"one\" || num.toLowerCase() === \"two\" || num.toLowerCase() === \"three\" || num.toLowerCase() === \"four\" || num.toLowerCase() === \"five\" || num.toLowerCase() === \"six\" || num.toLowerCase() === \"seven\" || num.toLowerCase() === \"eight\" || num.toLowerCase() === \"nine\") {\n      result.push(num);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byNameAndLengthAndReverseAndLength = (arr) => {\n  const result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num.toLowerCase() === \"one\" || num.toLowerCase() === \"two\" || num.toLowerCase() === \"three\" || num.toLowerCase() === \"four\" || num.toLowerCase() === \"five\" || num.toLowerCase() === \"six\" || num.toLowerCase() === \"seven\" || num.toLowerCase() === \"eight\" || num.toLowerCase() === \"nine\") {\n      result.push(num);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byNameAndLengthAndReverseAndLengthAndReverse = (arr) => {\n  const result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num.toLowerCase() === \"one\" || num.toLowerCase() === \"two\" || num.toLowerCase() === \"three\" || num.toLowerCase() === \"four\" || num.toLowerCase() === \"five\" || num.toLowerCase() === \"six\" || num.toLowerCase() === \"seven\" || num.toLowerCase() === \"eight\" || num.toLowerCase() === \"nine\") {\n      result.push(num);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byNameAndLengthAndReverseAndLengthAndReverseAndLength = (arr) => {\n  const result = [];\n  let len = arr.length;\n  let i = 0;\n  while (i < len) {\n    const num = arr[i];\n    if (num.toLowerCase() === \"one\" || num.toLowerCase() === \"two\" || num.toLowerCase() === \"three\" || num.toLowerCase() === \"four\" || num.toLowerCase() === \"five\" || num.toLowerCase() === \"six\" || num.toLowerCase() === \"seven\" || num.toLowerCase() === \"eight\" || num.toLowerCase() === \"nine\") {\n      result.push(num);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst byNameAndLengthAndReverseAndLengthAndReverseAndLengthAndReverse =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n % 2 === 0) {\n    return [1, n];\n  }\n  return [n, n * 2];\n};\n\nconst impLemeNt = (n) => {\n  const res = f(n);\n  console.log(res);\n  return res;\n};\n\nimpLemeNt(5);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0\n  let odd = 0\n  let i = 1\n  while (i <= n) {\n    let palindrome = i\n    let j = i\n    while (j <= n) {\n      if (palindrome % 2 === 0) {\n        even++\n      } else {\n        odd++\n      }\n      palindrome = palindrome * 2\n      j++\n    }\n    i++\n  }\n  return [even, odd]\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums2 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums20 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums21 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum > 0? arr.length : 0;\n};\n\nconst countNums22 = (arr) => {\n  let sum = 0;\n  for (let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let arrLen = arr.length;\n  let arrTemp = arr.slice();\n  let arrTempLen = arrTemp.length;\n  let arrTempIndex = 0;\n  let arrTempIndex2 = 0;\n  let arrTempIndex3 = 0;\n  let arrTempIndex4 = 0;\n  let arrTempIndex5 = 0;\n  let arrTempIndex6 = 0;\n  let arrTempIndex7 = 0;\n  let arrTempIndex8 = 0;\n  let arrTempIndex9 = 0;\n  let arrTempIndex10 = 0;\n  let arrTempIndex11 = 0;\n  let arrTempIndex12 = 0;\n  let arrTempIndex13 = 0;\n  let arrTempIndex14 = 0;\n  let arrTempIndex15 = 0;\n  let arrTempIndex16 = 0;\n  let arrTempIndex17 = 0;\n  let arrTempIndex18 = 0;\n  let arrTempIndex19 = 0;\n  let arrTempIndex20 = 0;\n  let arrTempIndex21 = 0;\n  let arrTempIndex22 = 0;\n  let arrTempIndex23 = 0;\n  let arrTempIndex24 = 0;\n  let arrTempIndex25 = 0;\n  let arrTempIndex26 = 0;\n  let arrTempIndex27 = 0;\n  let arrTempIndex28 = 0;\n  let arrTempIndex29 = 0;\n  let arrTempIndex30 = 0;\n  let arrTempIndex31 = 0;\n  let arrTempIndex32 = 0;\n  let arrTempIndex33 = 0;\n  let arrTempIndex34 = 0;\n  let arrTempIndex35 = 0;\n  let arrTempIndex36 = 0;\n  let arrTempIndex37 = 0;\n  let arrTempIndex38 = 0;\n  let arrTempIndex39 = 0;\n  let arrTempIndex40 = 0;\n  let arrTempIndex41 = 0;\n  let arrTempIndex42 = 0;\n  let arrTempIndex43 = 0;\n  let arrTempIndex44 = 0;\n  let arrTempIndex45 = 0;\n  let arrTempIndex46 = 0;\n  let arrTempIndex47 = 0;\n  let arrTempIndex48 = 0;\n  let arrTempIndex49 = 0;\n  let arrTempIndex50 = 0;\n  let arrTempIndex51 = 0;\n  let arrTempIndex52 = 0;\n  let arrTempIndex53 = 0;\n  let arrTempIndex54 = 0;\n  let arrTempIndex55 = 0;\n  let arrTempIndex56 = 0;\n  let arrTempIndex57 = 0;\n  let arrTempIndex58 = 0;\n  let arrTempIndex59 = 0;\n  let arrTempIndex60 = 0;\n  let arrTempIndex61 = 0;\n  let arrTempIndex62 = 0;\n  let arrTempIndex63 = 0;\n  let arrTempIndex64 = 0;\n  let arrTempIndex65 = 0;\n  let arrTempIndex66 = 0;\n  let arrTempIndex67 = 0;\n  let arrTempIndex68 = 0;\n  let arrTempIndex69 = 0;\n  let arrTempIndex70 = 0;\n  let arrTempIndex71 = 0;\n  let arrTempIndex72 = 0;\n  let arrTempIndex73 = 0;\n  let arrTempIndex74 = 0;\n  let arrTempIndex75 = 0;\n  let arrTempIndex76 = 0;\n  let arrTempIndex77 = 0;\n  let arrTempIndex78 = 0;\n  let arrTempIndex79 = 0;\n  let arrTempIndex80 = 0;\n  let arrTempIndex81 = 0;\n  let arrTempIndex82 = 0;\n  let arrTempIndex83 = 0;\n  let arrTempIndex84 = 0;\n  let arrTempIndex85 = 0;\n  let arrTempIndex86 = 0;\n  let arrTempIndex87 = 0;\n  let arrTempIndex88 = 0;\n  let arrTempIndex89 = 0;\n  let arrTempIndex90 = 0;\n  let arrTempIndex91 = 0;\n  let arrTempIndex92 = 0;\n  let arrTempIndex93 = 0;\n  let arrTempIndex94 = 0;\n  let arrTempIndex95 = 0;\n  let arrTempIndex96 = 0;\n  let arrTempIndex97 = 0;\n  let arrTempIndex98 = 0;\n  let arrTempIndex99 = 0;\n  let arrTempIndex100 = 0;\n  let arrTempIndex101 = 0;\n  let arrTempIndex102 = 0;\n  let arr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i]!== b[i]);\n  }\n  return result.join('');\n};\n\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Inputs must be the same length');\n  }\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0;\n  let j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] < lst2[j]) {\n      lst1.splice(i, 1);\n      lst2.splice(j, 1);\n      i++;\n    } else if (lst1[i] > lst2[j]) {\n      lst2.splice(j, 1);\n      lst1.splice(i, 1);\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return (lst1.length === 0 && lst2.length === 0)? \"YES\" : \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let counter = 0;\n  let last = '';\n  let lastCount = 0;\n  let lastCount2 = 0;\n  let lastCount3 = 0;\n  let lastCount4 = 0;\n  let lastCount5 = 0;\n  let lastCount6 = 0;\n  let lastCount7 = 0;\n  let lastCount8 = 0;\n  let lastCount9 = 0;\n  let lastCount10 = 0;\n  let lastCount11 = 0;\n  let lastCount12 = 0;\n  let lastCount13 = 0;\n  let lastCount14 = 0;\n  let lastCount15 = 0;\n  let lastCount16 = 0;\n  let lastCount17 = 0;\n  let lastCount18 = 0;\n  let lastCount19 = 0;\n  let lastCount20 = 0;\n  let lastCount21 = 0;\n  let lastCount22 = 0;\n  let lastCount23 = 0;\n  let lastCount24 = 0;\n  let lastCount25 = 0;\n  let lastCount26 = 0;\n  let lastCount27 = 0;\n  let lastCount28 = 0;\n  let lastCount29 = 0;\n  let lastCount30 = 0;\n  let lastCount31 = 0;\n  let lastCount32 = 0;\n  let lastCount33 = 0;\n  let lastCount34 = 0;\n  let lastCount35 = 0;\n  let lastCount36 = 0;\n  let lastCount37 = 0;\n  let lastCount38 = 0;\n  let lastCount39 = 0;\n  let lastCount40 = 0;\n  let lastCount41 = 0;\n  let lastCount42 = 0;\n  let lastCount43 = 0;\n  let lastCount44 = 0;\n  let lastCount45 = 0;\n  let lastCount46 = 0;\n  let lastCount47 = 0;\n  let lastCount48 = 0;\n  let lastCount49 = 0;\n  let lastCount50 = 0;\n  let lastCount51 = 0;\n  let lastCount52 = 0;\n  let lastCount53 = 0;\n  let lastCount54 = 0;\n  let lastCount55 = 0;\n  let lastCount56 = 0;\n  let lastCount57 = 0;\n  let lastCount58 = 0;\n  let lastCount59 = 0;\n  let lastCount60 = 0;\n  let lastCount61 = 0;\n  let lastCount62 = 0;\n  let lastCount63 = 0;\n  let lastCount64 = 0;\n  let lastCount65 = 0;\n  let lastCount66 = 0;\n  let lastCount67 = 0;\n  let lastCount68 = 0;\n  let lastCount69 = 0;\n  let lastCount70 = 0;\n  let lastCount71 = 0;\n  let lastCount72 = 0;\n  let lastCount73 = 0;\n  let lastCount74 = 0;\n  let lastCount75 = 0;\n  let lastCount76 = 0;\n  let lastCount77 = 0;\n  let lastCount78 = 0;\n  let lastCount79 = 0;\n  let lastCount80 = 0;\n  let lastCount81 = 0;\n  let lastCount82 = 0;\n  let lastCount83 = 0;\n  let lastCount84 = 0;\n  let lastCount85 = 0;\n  let lastCount86 = 0;\n  let lastCount87 = 0;\n  let lastCount88 = 0;\n  let lastCount89 = 0;\n  let lastCount90 = 0;\n  let lastCount91 = 0;\n  let lastCount92 = 0;\n  let lastCount93 = 0;\n  let lastCount94 = 0;\n  let lastCount95 = 0;\n  let lastCount96 = 0;\n  let lastCount97 = 0;\n  let lastCount98 = 0;\n  let lastCount99 = 0;\n  let lastCount100 = 0;\n  let lastCount101 = 0;\n  let lastCount102 = 0;\n  let lastCount103 = 0;\n  let lastCount104 = 0;\n  let lastCount105 = 0;\n  let lastCount106 = 0;\n  let lastCount107 = 0;\n  let lastCount108 = 0;\n  let lastCount109 = 0;\n  let lastCount110 = 0;\n  let lastCount111 = 0;\n  let lastCount112 = 0;\n  let lastCount113 = 0;\n  let lastCount114 = 0;\n  let lastCount115 = 0;\n  let lastCount116 = 0;\n  let lastCount117 = 0;\n  let lastCount118 = 0;\n  let lastCount119 = 0;\n  let lastCount120 = 0;\n  let lastCount121 = 0;\n  let lastCount122 = 0;\n  let lastCount123 = 0;\n  let lastCount124 = 0;\n  let lastCount125 = 0;\n  let lastCount126 = 0;\n  let lastCount127 = 0;\n  let lastCount128 = 0;\n  let lastCount129 = 0;\n  let lastCount130 = 0;\n  let lastCount131 = 0;\n  let lastCount132 = 0;\n  let lastCount133 = 0;\n  let lastCount134 = 0;\n  let lastCount135 = 0;\n  let lastCount136 = 0;\n  let lastCount137 = 0;\n  let lastCount138 = 0;\n  let lastCount139 = 0;\n  let lastCount140 = 0;\n  let lastCount141 = 0;\n  let lastCount142 = 0;\n  let lastCount143 = 0;\n  let lastCount", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i++;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete2 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete3 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete4 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete5 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete6 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete7 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete8 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete9 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete10 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete11 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === c) {\n      flag = true;\n      break;\n    }\n    result += s[i];\n    i--;\n  }\n  if (flag) {\n    return [result, true];\n  }\n  return [result, false];\n};\n\nconst reverseDelete12 = (s, c) => {\n  let result = '';\n  let flag = false;\n  let i =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let res = [];\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      count++;\n    }\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      res.push(`the number of odd elements ${count}n the str${lst[i]}ng ${lst[i]} of the ${lst[i]}nput.`);\n      count = 0;\n    } else {\n      count++;\n    }\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Infinity;\n  let minIndex = -1;\n  let minSumIndex = -1;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n      minSumIndex = i;\n    }\n    if (sum === minSum) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(i * cols + j);\n      }\n    }\n  }\n  const bucket_capacity = capacity;\n  let num_buckets = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        let bucket = buckets[i * cols + j];\n        while (bucket_capacity > 0 && bucket_capacity < bucket) {\n          bucket = buckets[bucket];\n        }\n        if (bucket_capacity < bucket) {\n          num_buckets++;\n        }\n      }\n    }\n  }\n  return num_buckets;\n};\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst sortArray2 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray3 = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst sortArray4 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray5 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray6 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray7 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray8 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray9 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray10 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray11 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray12 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray13 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray14 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray15 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray16 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray17 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray18 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray19 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray20 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray21 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray22 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray23 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray24 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray25 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray26 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray27 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray28 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray29 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray30 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray31 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray32 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray33 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray34 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray35 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray36 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray37 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray38 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray39 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray40 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray41 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray42 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray43 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray44 = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst sortArray45 = (arr) => {\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + n);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i += n;\n  }\n  return words;\n};\n\nconst getWords = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString2 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString3 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString4 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString5 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString6 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString7 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString8 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString9 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString10 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString11 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n};\n\nconst getWordsFromString12 = (s) => {\n  let words = [];\n  let i = 0;\n  while (i < s.length) {\n    let word = s.substring(i, i + 1);\n    if (word.trim().length > 0) {\n      words.push(word);\n    }\n    i++;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = \"\";\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let vowelArray = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let vowelArrayLength = vowelArray.length;\n  let wordLength = word.length;\n  let vowelLength = 0;\n  let vowelIndex = 0;\n  let vowelIndexLength = 0;\n  let vowelIndexArray = [];\n  let vowelIndexArrayLength = vowelIndexArray.length;\n  let vowelIndexArrayLength2 = 0;\n  let vowelIndexArrayLength3 = 0;\n  let vowelIndexArrayLength4 = 0;\n  let vowelIndexArrayLength5 = 0;\n  let vowelIndexArrayLength6 = 0;\n  let vowelIndexArrayLength7 = 0;\n  let vowelIndexArrayLength8 = 0;\n  let vowelIndexArrayLength9 = 0;\n  let vowelIndexArrayLength10 = 0;\n  let vowelIndexArrayLength11 = 0;\n  let vowelIndexArrayLength12 = 0;\n  let vowelIndexArrayLength13 = 0;\n  let vowelIndexArrayLength14 = 0;\n  let vowelIndexArrayLength15 = 0;\n  let vowelIndexArrayLength16 = 0;\n  let vowelIndexArrayLength17 = 0;\n  let vowelIndexArrayLength18 = 0;\n  let vowelIndexArrayLength19 = 0;\n  let vowelIndexArrayLength20 = 0;\n  let vowelIndexArrayLength21 = 0;\n  let vowelIndexArrayLength22 = 0;\n  let vowelIndexArrayLength23 = 0;\n  let vowelIndexArrayLength24 = 0;\n  let vowelIndexArrayLength25 = 0;\n  let vowelIndexArrayLength26 = 0;\n  let vowelIndexArrayLength27 = 0;\n  let vowelIndexArrayLength28 = 0;\n  let vowelIndexArrayLength29 = 0;\n  let vowelIndexArrayLength30 = 0;\n  let vowelIndexArrayLength31 = 0;\n  let vowelIndexArrayLength32 = 0;\n  let vowelIndexArrayLength33 = 0;\n  let vowelIndexArrayLength34 = 0;\n  let vowelIndexArrayLength35 = 0;\n  let vowelIndexArrayLength36 = 0;\n  let vowelIndexArrayLength37 = 0;\n  let vowelIndexArrayLength38 = 0;\n  let vowelIndexArrayLength39 = 0;\n  let vowelIndexArrayLength40 = 0;\n  let vowelIndexArrayLength41 = 0;\n  let vowelIndexArrayLength42 = 0;\n  let vowelIndexArrayLength43 = 0;\n  let vowelIndexArrayLength44 = 0;\n  let vowelIndexArrayLength45 = 0;\n  let vowelIndexArrayLength46 = 0;\n  let vowelIndexArrayLength47 = 0;\n  let vowelIndexArrayLength48 = 0;\n  let vowelIndexArrayLength49 = 0;\n  let vowelIndexArrayLength50 = 0;\n  let vowelIndexArrayLength51 = 0;\n  let vowelIndexArrayLength52 = 0;\n  let vowelIndexArrayLength53 = 0;\n  let vowelIndexArrayLength54 = 0;\n  let vowelIndexArrayLength55 = 0;\n  let vowelIndexArrayLength56 = 0;\n  let vowelIndexArrayLength57 = 0;\n  let vowelIndexArrayLength58 = 0;\n  let vowelIndexArrayLength59 = 0;\n  let vowelIndexArrayLength60 = 0;\n  let vowelIndexArrayLength61 = 0;\n  let vowelIndexArrayLength62 = 0;\n  let vowelIndexArrayLength63 = 0;\n  let vowelIndexArrayLength64 = 0;\n  let vowelIndexArrayLength65 = 0;\n  let vowelIndexArrayLength66 = 0;\n  let vowelIndexArrayLength67 = 0;\n  let vowelIndexArrayLength68 = 0;\n  let vowelIndexArrayLength69 = 0;\n  let vowelIndexArrayLength70 = 0;\n  let vowelIndexArrayLength71 = 0;\n  let vowelIndexArrayLength72 = 0;\n  let vowelIndexArrayLength73 = 0;\n  let vowelIndexArrayLength74 = 0;\n  let vowelIndexArrayLength75 = 0;\n  let vowelIndexArrayLength76 = 0;\n  let vowelIndexArrayLength77 = 0;\n  let vowelIndexArrayLength78 = 0;\n  let vowelIndexArrayLength79 = 0;\n  let vowelIndexArrayLength80 = 0;\n  let vowelIndexArrayLength81 = 0;\n  let vowelIndexArrayLength82 = 0;\n  let vowelIndexArrayLength83 = 0;\n  let vowelIndexArrayLength84 = 0;\n  let vowelIndexArrayLength85 = 0;\n  let vowelIndexArrayLength86 = 0;\n  let vowelIndexArrayLength87 = 0;\n  let vowelIndexArrayLength88 = 0;\n  let vowelIndexArrayLength89 = 0;\n  let vowelIndexArrayLength90 = 0;\n  let vowelIndexArrayLength91 = 0;\n  let vowelIndexArrayLength92 = 0;\n  let vowelIndexArrayLength93 = 0;\n  let vowelIndexArrayLength94 = 0;\n  let vowelIndexArrayLength95 = 0;\n  let vowelIndexArrayLength96 = 0;\n  let vowelIndexArrayLength97 = 0;\n  let vowelIndexArrayLength98 = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i]!== '(' && lst[i]!== ')') {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nconst test = () => {\n  console.log(matchParens(['()(', ')']));\n  console.log(matchParens([')', ')']));\n  console.log(matchParens([')', '(']));\n  console.log(matchParens([')', '()']));\n  console.log(matchParens([')', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchParens([')', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()', '()']));\n  console.log(matchP", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > max.length) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 0) return arr;\n  if (k === 1) return arr[0] > arr[1]? arr[0] : arr[1];\n  let max = arr[0];\n  let i = 1;\n  while (i < k) {\n    if (arr[i] > max) max = arr[i];\n    i++;\n  }\n  return max;\n};\n\nexport { maximum };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nmodule.exports = solution;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((a, b) => a + b, 0);\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = [1];\n  let i = 2;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      collatz.push(i);\n    }\n    i = i * 2;\n  }\n  return collatz.sort((a, b) => a - b);\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const day = date.split('-')[2];\n  const month = date.split('-')[1];\n  const year = date.split('-')[0];\n  const dayOfMonth = parseInt(day);\n  const monthOfYear = parseInt(month);\n  const yearOfYear = parseInt(year);\n\n  if (dayOfMonth < 1 || dayOfMonth > 31) {\n    return false;\n  }\n\n  if (monthOfYear < 1 || monthOfYear > 12) {\n    return false;\n  }\n\n  if (yearOfYear < 1970 || yearOfYear > 2099) {\n    return false;\n  }\n\n  if (dayOfMonth > 30) {\n    if (monthOfYear === 1 || monthOfYear === 3 || monthOfYear === 5 || monthOfYear === 7 || monthOfYear === 8 || monthOfYear === 10 || monthOfYear === 12) {\n      return false;\n    }\n  }\n\n  if (monthOfYear === 2) {\n    if (dayOfMonth > 29) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let word = \"\";\n  let i = 0;\n  let len = txt.length;\n  while (i < len) {\n    if (txt[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += txt[i];\n    }\n    i++;\n  }\n  words.push(word);\n  return words;\n};\n\nmodule.exports = splitWords;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted2 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted3 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted4 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted5 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted6 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted7 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted8 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted9 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted10 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted11 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      isSorted = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  return isSorted;\n};\n\nconst isSorted12 = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let isSorted = true;\n  while (i < j) {\n    if (lst[i] < lst[j]) {\n      is", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2) {\n    return \"NO\";\n  }\n  if (start2 > end1) {\n    return \"NO\";\n  }\n  if (start1 < start2) {\n    return \"NO\";\n  }\n  if (end1 < end2) {\n    return \"NO\";\n  }\n  if (start1 === start2 && end1 === end2) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\nmodule.exports = intersection;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  const res = arr.reduce((acc, curr) => {\n    if (curr === 0) {\n      return acc;\n    }\n    return acc + curr;\n  }, 0);\n  return res;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const gridSize = grid.length;\n  const gridSize2 = gridSize * gridSize;\n  const gridSize3 = gridSize2 * gridSize;\n  const gridSize4 = gridSize3 * gridSize;\n  const gridSize5 = gridSize4 * gridSize;\n  const gridSize6 = gridSize5 * gridSize;\n  const gridSize7 = gridSize6 * gridSize;\n  const gridSize8 = gridSize7 * gridSize;\n  const gridSize9 = gridSize8 * gridSize;\n  const gridSize10 = gridSize9 * gridSize;\n  const gridSize11 = gridSize10 * gridSize;\n  const gridSize12 = gridSize11 * gridSize;\n  const gridSize13 = gridSize12 * gridSize;\n  const gridSize14 = gridSize13 * gridSize;\n  const gridSize15 = gridSize14 * gridSize;\n  const gridSize16 = gridSize15 * gridSize;\n  const gridSize17 = gridSize16 * gridSize;\n  const gridSize18 = gridSize17 * gridSize;\n  const gridSize19 = gridSize18 * gridSize;\n  const gridSize20 = gridSize19 * gridSize;\n  const gridSize21 = gridSize20 * gridSize;\n  const gridSize22 = gridSize21 * gridSize;\n  const gridSize23 = gridSize22 * gridSize;\n  const gridSize24 = gridSize23 * gridSize;\n  const gridSize25 = gridSize24 * gridSize;\n  const gridSize26 = gridSize25 * gridSize;\n  const gridSize27 = gridSize26 * gridSize;\n  const gridSize28 = gridSize27 * gridSize;\n  const gridSize29 = gridSize28 * gridSize;\n  const gridSize30 = gridSize29 * gridSize;\n  const gridSize31 = gridSize30 * gridSize;\n  const gridSize32 = gridSize31 * gridSize;\n  const gridSize33 = gridSize32 * gridSize;\n  const gridSize34 = gridSize33 * gridSize;\n  const gridSize35 = gridSize34 * gridSize;\n  const gridSize36 = gridSize35 * gridSize;\n  const gridSize37 = gridSize36 * gridSize;\n  const gridSize38 = gridSize37 * gridSize;\n  const gridSize39 = gridSize38 * gridSize;\n  const gridSize40 = gridSize39 * gridSize;\n  const gridSize41 = gridSize40 * gridSize;\n  const gridSize42 = gridSize41 * gridSize;\n  const gridSize43 = gridSize42 * gridSize;\n  const gridSize44 = gridSize43 * gridSize;\n  const gridSize45 = gridSize44 * gridSize;\n  const gridSize46 = gridSize45 * gridSize;\n  const gridSize47 = gridSize46 * gridSize;\n  const gridSize48 = gridSize47 * gridSize;\n  const gridSize49 = gridSize48 * gridSize;\n  const gridSize50 = gridSize49 * gridSize;\n  const gridSize51 = gridSize50 * gridSize;\n  const gridSize52 = gridSize51 * gridSize;\n  const gridSize53 = gridSize52 * gridSize;\n  const gridSize54 = gridSize53 * gridSize;\n  const gridSize55 = gridSize54 * gridSize;\n  const gridSize56 = gridSize55 * gridSize;\n  const gridSize57 = gridSize56 * gridSize;\n  const gridSize58 = gridSize57 * gridSize;\n  const gridSize59 = gridSize58 * gridSize;\n  const gridSize60 = gridSize59 * gridSize;\n  const gridSize61 = gridSize60 * gridSize;\n  const gridSize62 = gridSize61 * gridSize;\n  const gridSize63 = gridSize62 * gridSize;\n  const gridSize64 = gridSize63 * gridSize;\n  const gridSize65 = gridSize64 * gridSize", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1 || b === 1) {\n    return 1;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a < b) {\n    return greatestCommonDivisor(b, a);\n  }\n  let d = a % b;\n  while (d!== 0) {\n    a = b;\n    b = d;\n    d = a % b;\n  }\n  return a;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 1, 1];\n  let b = [1, 2, 3];\n  let c = [1, 3, 2];\n  let d = [1, 2, 1];\n  let e = [1, 3, 1];\n  let f = [1, 2, 1];\n  let g = [1, 3, 1];\n  let h = [1, 2, 1];\n  let i = [1, 3, 1];\n  let j = [1, 2, 1];\n  let k = [1, 3, 1];\n  let l = [1, 2, 1];\n  let m = [1, 3, 1];\n  let n = [1, 2, 1];\n  let o = [1, 3, 1];\n  let p = [1, 2, 1];\n  let q = [1, 3, 1];\n  let r = [1, 2, 1];\n  let s = [1, 3, 1];\n  let t = [1, 2, 1];\n  let u = [1, 3, 1];\n  let v = [1, 2, 1];\n  let w = [1, 3, 1];\n  let x = [1, 2, 1];\n  let y = [1, 3, 1];\n  let z = [1, 2, 1];\n  let aa = [1, 3, 1];\n  let bb = [1, 2, 1];\n  let cc = [1, 3, 1];\n  let dd = [1, 2, 1];\n  let ee = [1, 3, 1];\n  let ff = [1, 2, 1];\n  let gg = [1, 3, 1];\n  let hh = [1, 2, 1];\n  let ii = [1, 3, 1];\n  let jj = [1, 2, 1];\n  let kk = [1, 3, 1];\n  let ll = [1, 2, 1];\n  let mm = [1, 3, 1];\n  let nn = [1, 2, 1];\n  let oo = [1, 3, 1];\n  let pp = [1, 2, 1];\n  let qq = [1, 3, 1];\n  let rr = [1, 2, 1];\n  let ss = [1, 3, 1];\n  let tt = [1, 2, 1];\n  let uu = [1, 3, 1];\n  let vv = [1, 2, 1];\n  let ww = [1, 3, 1];\n  let xx = [1, 2, 1];\n  let yy = [1, 3, 1];\n  let zz = [1, 2, 1];\n  let aa = [1, 3, 1];\n  let bb = [1, 2, 1];\n  let cc = [1, 3, 1];\n  let dd = [1, 2, 1];\n  let ee = [1, 3, 1];\n  let ff = [1, 2, 1];\n  let gg = [1, 3, 1];\n  let hh = [1, 2, 1];\n  let ii = [1, 3, 1];\n  let jj = [1, 2, 1];\n  let kk = [1, 3, 1];\n  let ll = [1, 2, 1];\n  let mm = [1, 3, 1];\n  let nn = [1, 2, 1];\n  let oo = [1, 3, 1];\n  let pp = [1, 2, 1];\n  let qq = [1, 3, 1];\n  let rr = [1, 2, 1];\n  let ss = [1, 3, 1];\n  let tt = [1, 2, 1];\n  let uu = [1, 3, 1];\n  let vv = [1, 2, 1];\n  let ww = [1, 3, 1];\n  let xx = [1, 2, 1];\n  let yy = [1, 3, 1];\n  let zz = [1, 2, 1];\n  let aa = [1, 3, 1];\n  let bb = [1, 2, 1];\n  let cc = [1, 3, 1];\n  let dd = [1, 2, 1];\n  let ee = [1, 3, 1];\n  let ff = [1, 2, 1];\n  let gg = [1, 3, 1];\n  let hh = [1, 2, 1];\n  let ii = [1, 3, 1];\n  let jj = [1, 2, 1];\n  let kk = [1, 3, 1];\n  let ll = [1, 2, 1];\n  let mm = [1, 3, 1];\n  let nn = [1, 2, 1];\n  let oo = [1, 3, 1];\n  let pp = [1, 2, 1];\n  let qq = [1, 3, 1];\n  let rr = [1, 2, 1];\n  let ss = [1, 3, 1];\n  let tt = [1, 2, 1];\n  let uu = [1, 3, 1];\n  let vv = [1, 2, 1];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let i = 0\n  while (n > 0) {\n    n = n % 10\n    i++\n  }\n  return i\n}\n\nconst isOdd = (n) => {\n  return n % 2 === 1\n}\n\nconst isEven = (n) => {\n  return n % 2 === 0\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime2 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime3 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime4 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime5 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime6 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime7 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime8 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime9 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime10 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime11 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime12 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime13 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime14 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime15 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime16 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime17 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime18 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime19 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime20 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime21 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime22 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime23 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime24 = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n  let stack = [];\n  let i = 0;\n  let j = 0;\n  let isNested = false;\n  let isBracket = false;\n  let isBracketed = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtEnd = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtStart = false;\n  let isBracketedAtEnd = false;\n  let isBracket", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) {\n    return false;\n  }\n  let lastChar = txt[txt.length - 1];\n  let isALetter = /[a-zA-Z]/.test(lastChar);\n  return isALetter;\n};\n\nmodule.exports = checkIfLastCharIsALetter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length < 2) {\n    return -1;\n  }\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i] > arr[j]) {\n      return -1;\n    }\n    if (arr[i] < arr[j]) {\n      return i + 1;\n    }\n    i++;\n    j--;\n  }\n  return i + 1;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let l = lst.length;\n  let t = lst[0];\n  let i = 1;\n  while (i < l) {\n    if (lst[i] > t) {\n      t = lst[i];\n    }\n    i++;\n  }\n  return [t, lst.slice(0, i).join('')];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  if (a === b) {\n    return nuLL;\n  }\n  if (isNaN(a) && isNaN(b)) {\n    return nuLL;\n  }\n  if (isNaN(a)) {\n    return b;\n  }\n  if (isNaN(b)) {\n    return a;\n  }\n  if (a < b) {\n    return nuLL;\n  }\n  if (a > b) {\n    return nuLL;\n  }\n  return nuLL;\n};\n\n//compareTwo(1, 2.5) ➞ 2.5\n//compareTwo(1, \"2,3\") ➞ \"2,3\"\n//compareTwo(\"5,1\", \"6\") ➞ \"6\"\n//compareTwo(\"1\", 1) ➞ nuLl\n//compareTwo(\"1\", \"2,3\") ➞ nuLl\n//compareTwo(\"2,3\", \"1\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25\") ➞ nuLl\n//compareTwo(\"2,3\", \"1,2,3,4,5,6,7,", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  return n % 2 === 0 && n % 3 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0 && n % 17 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0 && n % 17 === 0 && n % 19 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven9 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0 && n % 17 === 0 && n % 19 === 0 && n % 23 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven10 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0 && n % 17 === 0 && n % 19 === 0 && n % 23 === 0 && n % 29 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven11 = (n) => {\n  return n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0 && n % 17 === 0 && n % 19 === 0 && n % 23 === 0 && n %", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 1) {\n    throw new Error('The specialFactorial function should receive a positive integer as input.');\n  }\n  return n!== 1? n * specialFactorial(n - 1) : 1;\n};\n\nexport default specialFactorial;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes3 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes4 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes5 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes6 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes7 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes8 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes9 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes10 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes11 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes12 = (string) => {\n  const prefixes = [];\n  const prefix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === prefix) {\n      prefixes.push(prefix);\n    } else {\n      prefixes.push(prefix + string[i]);\n    }\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces2 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces3 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces4 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces5 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces6 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces7 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces8 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces9 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces10 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces11 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces12 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces13 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result;\n};\n\nconst fixSpaces14 = (text) => {\n  let result = text;\n  let spaces = 0;\n  let i = 0;\n  while (result.charAt(i) ==='') {\n    spaces++;\n    i++;\n  }\n  if (spaces > 1) {\n    result = result.replace(/\\s+/g, '-');\n  }\n  return result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.toLowerCase();\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_letters = file_name_check.match(/[a-zA-Z]/g);\n  let file_name_check_dot = file_name_check.match(/\\./g);\n  let file_name_check_dot_length = file_name_check_dot.length;\n  let file_name_check_dot_letters = file_name_check_dot.match(/\\./g);\n  let file_name_check_dot_letters_length = file_name_check_dot_letters.length;\n  let file_name_check_dot_letters_letters = file_name_check_dot_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_length = file_name_check_dot_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters = file_name_check_dot_letters_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_letters_length = file_name_check_dot_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_length = file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters.length;\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters = file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters.match(/\\./g);\n  let file_name_check_dot_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence2 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence3 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence4 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence5 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence6 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence7 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence8 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence9 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence10 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence11 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence12 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence13 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence14 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence15 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence16 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence17 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence18 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence19 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence20 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence21 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence22 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence23 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence24 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence25 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence26 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence27 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence28 = (sentence) => {\n  const words = sentence.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nconst wordsInSentence29 = (sentence) => {\n  const words = sentence", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n  let num = x.split(\"/\");\n  let den = n.split(\"/\");\n  let num_ = num[0];\n  let den_ = den[0];\n  let num_den = num[1];\n  let den_num = den[1];\n  let num_den_ = num_den.split(\"\");\n  let den_num_ = den_num.split(\"\");\n  let num_den_num = num_den_[0];\n  let den_num_num = den_num_[0];\n  let num_den_num_ = num_den_[1];\n  let den_num_num_ = den_num_[1];\n  let num_den_num_den = num_den_num_[0];\n  let den_num_num_den = den_num_num_[0];\n  let num_den_num_den_ = num_den_num_[1];\n  let den_num_num_den_ = den_num_num_[1];\n  let num_den_num_den_den = num_den_num_den_[0];\n  let den_num_num_den_den = den_num_num_den_[0];\n  let num_den_num_den_den_ = num_den_num_den_[1];\n  let den_num_num_den_den_ = den_num_num_den_[1];\n  let num_den_num_den_den_den = num_den_num_den_den_[0];\n  let den_num_num_den_den_den = den_num_num_den_den_[0];\n  let num_den_num_den_den_den_ = num_den_num_den_den_[1];\n  let den_num_num_den_den_den_ = den_num_num_den_den_[1];\n  let num_den_num_den_den_den_den = num_den_num_den_den_den_[0];\n  let den_num_num_den_den_den_den = den_num_num_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = num_den_num_den_den_den_den[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den[0];\n  let num_den_num_den_den_den_den_ = num_den_num_den_den_den_den[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den[0];\n  let num_den_num_den_den_den_den_ = num_den_num_den_den_den_den[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let num_den_num_den_den_den_den_ = den_num_num_den_den_den_den_[0];\n  let den_num_num_den_den_den_den_ = den_num_num_den_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const digits = [];\n  let i = 0;\n  while (i < nums.length) {\n    const digit = nums[i];\n    if (digit < 0) {\n      digits.push(digit);\n      nums.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  const sorted = digits.sort((a, b) => a - b);\n  return sorted;\n};\n\nexport default orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let num = nums[i];\n    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      if (i!== j) {\n        sum += nums[j];\n      }\n    }\n    if (sum > 10) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n).keys()].map((i) => i * i - i + 1);\n  const A = [...Array(n).keys()].map((i) => i + 1);\n  const B = [...Array(n).keys()].map((i) => i + 2);\n  const C = [...Array(n).keys()].map((i) => i + 3);\n  const D = [...Array(n).keys()].map((i) => i + 4);\n  const E = [...Array(n).keys()].map((i) => i + 5);\n  const F = [...Array(n).keys()].map((i) => i + 6);\n  const G = [...Array(n).keys()].map((i) => i + 7);\n  const H = [...Array(n).keys()].map((i) => i + 8);\n  const I = [...Array(n).keys()].map((i) => i + 9);\n  const J = [...Array(n).keys()].map((i) => i + 10);\n  const K = [...Array(n).keys()].map((i) => i + 11);\n  const L = [...Array(n).keys()].map((i) => i + 12);\n  const M = [...Array(n).keys()].map((i) => i + 13);\n  const N = [...Array(n).keys()].map((i) => i + 14);\n  const O = [...Array(n).keys()].map((i) => i + 15);\n  const P = [...Array(n).keys()].map((i) => i + 16);\n  const Q = [...Array(n).keys()].map((i) => i + 17);\n  const R = [...Array(n).keys()].map((i) => i + 18);\n  const S = [...Array(n).keys()].map((i) => i + 19);\n  const T = [...Array(n).keys()].map((i) => i + 20);\n  const U = [...Array(n).keys()].map((i) => i + 21);\n  const V = [...Array(n).keys()].map((i) => i + 22);\n  const W = [...Array(n).keys()].map((i) => i + 23);\n  const X = [...Array(n).keys()].map((i) => i + 24);\n  const Y = [...Array(n).keys()].map((i) => i + 25);\n  const Z = [...Array(n).keys()].map((i) => i + 26);\n  const aa = [...Array(n).keys()].map((i) => i + 27);\n  const bb = [...Array(n).keys()].map((i) => i + 28);\n  const cc = [...Array(n).keys()].map((i) => i + 29);\n  const dd = [...Array(n).keys()].map((i) => i + 30);\n  const ee = [...Array(n).keys()].map((i) => i + 31);\n  const ff = [...Array(n).keys()].map((i) => i + 32);\n  const gg = [...Array(n).keys()].map((i) => i + 33);\n  const hh = [...Array(n).keys()].map((i) => i + 34);\n  const ii = [...Array(n).keys()].map((i) => i + 35);\n  const jj = [...Array(n).keys()].map((i) => i + 36);\n  const kk = [...Array(n).keys()].map((i) => i + 37);\n  const ll = [...Array(n).keys()].map((i) => i + 38);\n  const mm = [...Array(n).keys()].map((i) => i + 39);\n  const nn = [...Array(n).keys()].map((i) => i + 40);\n  const oo = [...Array(n).keys()].map((i) => i + 41);\n  const pp = [...Array(n).keys()].map((i) => i + 42);\n  const qq = [...Array(n).keys()].map((i) => i + 43);\n  const rr = [...Array(n).keys()].map((i) => i + 44);\n  const ss = [...Array(n).keys()].map((i) => i + 45);\n  const tt = [...Array(n).keys()].map((i) => i + 46);\n  const uu = [...Array(n).keys()].map((i) => i + 47);\n  const vv = [...Array(n).keys()].map((i) => i + 48);\n  const ww = [...Array(n).keys()].map((i) => i + 49);\n  const xx = [...Array(n).keys()].map((i) => i + 50);\n  const yy = [...Array(n).keys()].map((i) => i + 51);\n  const zz = [...Array(n).keys()].map((i) => i + 52);\n  const aa2 = [...Array(n).keys()].map((i) => i + 53);\n  const bb2 = [...Array(n).keys()].map((i) => i + 54);\n  const cc2 = [...Array(n).keys()].map((i) => i + 55);\n  const dd2 = [...Array(n).keys()].map((i) => i + 56", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1Orbit = planet1.split(/\\s+/);\n  let planet2Orbit = planet2.split(/\\s+/);\n  let planet1OrbitSorted = planet1Orbit.sort();\n  let planet2OrbitSorted = planet2Orbit.sort();\n  let planet1OrbitSortedLength = planet1OrbitSorted.length;\n  let planet2OrbitSortedLength = planet2OrbitSorted.length;\n  let planet1OrbitSortedIndex = 0;\n  let planet2OrbitSortedIndex = 0;\n  let planet1OrbitSortedIndex2 = 0;\n  let planet2OrbitSortedIndex2 = 0;\n  let planet1OrbitSortedIndex3 = 0;\n  let planet2OrbitSortedIndex3 = 0;\n  let planet1OrbitSortedIndex4 = 0;\n  let planet2OrbitSortedIndex4 = 0;\n  let planet1OrbitSortedIndex5 = 0;\n  let planet2OrbitSortedIndex5 = 0;\n  let planet1OrbitSortedIndex6 = 0;\n  let planet2OrbitSortedIndex6 = 0;\n  let planet1OrbitSortedIndex7 = 0;\n  let planet2OrbitSortedIndex7 = 0;\n  let planet1OrbitSortedIndex8 = 0;\n  let planet2OrbitSortedIndex8 = 0;\n  let planet1OrbitSortedIndex9 = 0;\n  let planet2OrbitSortedIndex9 = 0;\n  let planet1OrbitSortedIndex10 = 0;\n  let planet2OrbitSortedIndex10 = 0;\n  let planet1OrbitSortedIndex11 = 0;\n  let planet2OrbitSortedIndex11 = 0;\n  let planet1OrbitSortedIndex12 = 0;\n  let planet2OrbitSortedIndex12 = 0;\n  let planet1OrbitSortedIndex13 = 0;\n  let planet2OrbitSortedIndex13 = 0;\n  let planet1OrbitSortedIndex14 = 0;\n  let planet2OrbitSortedIndex14 = 0;\n  let planet1OrbitSortedIndex15 = 0;\n  let planet2OrbitSortedIndex15 = 0;\n  let planet1OrbitSortedIndex16 = 0;\n  let planet2OrbitSortedIndex16 = 0;\n  let planet1OrbitSortedIndex17 = 0;\n  let planet2OrbitSortedIndex17 = 0;\n  let planet1OrbitSortedIndex18 = 0;\n  let planet2OrbitSortedIndex18 = 0;\n  let planet1OrbitSortedIndex19 = 0;\n  let planet2OrbitSortedIndex19 = 0;\n  let planet1OrbitSortedIndex20 = 0;\n  let planet2OrbitSortedIndex20 = 0;\n  let planet1OrbitSortedIndex21 = 0;\n  let planet2OrbitSortedIndex21 = 0;\n  let planet1OrbitSortedIndex22 = 0;\n  let planet2OrbitSortedIndex22 = 0;\n  let planet1OrbitSortedIndex23 = 0;\n  let planet2OrbitSortedIndex23 = 0;\n  let planet1OrbitSortedIndex24 = 0;\n  let planet2OrbitSortedIndex24 = 0;\n  let planet1OrbitSortedIndex25 = 0;\n  let planet2OrbitSortedIndex25 = 0;\n  let planet1OrbitSortedIndex26 = 0;\n  let planet2OrbitSortedIndex26 = 0;\n  let planet1OrbitSortedIndex27 = 0;\n  let planet2OrbitSortedIndex27 = 0;\n  let planet1OrbitSortedIndex28 = 0;\n  let planet2OrbitSortedIndex28 = 0;\n  let planet1OrbitSortedIndex29 = 0;\n  let planet2OrbitSortedIndex29 = 0;\n  let planet1OrbitSortedIndex30 = 0;\n  let planet2OrbitSortedIndex30 = 0;\n  let planet1OrbitSortedIndex31 = 0;\n  let planet2OrbitSortedIndex31 = 0;\n  let planet1OrbitSortedIndex32 = 0;\n  let planet2OrbitSortedIndex32 = 0;\n  let planet1OrbitSortedIndex33 = 0;\n  let planet2OrbitSortedIndex33 = 0;\n  let planet1OrbitSortedIndex34 = 0;\n  let planet2OrbitSortedIndex34 = 0;\n  let planet1OrbitSortedIndex35 = 0;\n  let planet2OrbitSortedIndex35 = 0;\n  let planet1OrbitSortedIndex36 = 0;\n  let planet2OrbitSortedIndex36 = 0;\n  let planet1OrbitSortedIndex37 = 0;\n  let planet2OrbitSortedIndex37 = 0;\n  let planet1OrbitSortedIndex38 = 0;\n  let planet2OrbitSortedIndex38 = 0;\n  let planet1OrbitSortedIndex39 = 0;\n  let planet2OrbitSortedIndex39 = 0;\n  let planet1OrbitSortedIndex40 = 0;\n  let planet2OrbitSorted", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum2 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum3 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum4 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum5 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum6 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum7 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum8 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum9 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum10 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum11 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum12 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum13 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum14 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum15 = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  const sum = lst.reduce((acc, curr) => acc + curr.length, 0);\n  return sorted.map((curr) => curr.length);\n};\n\nconst sortedListSum16 = (lst) => {\n  const sorted = lst.sort((a, b) => a.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence2: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence3: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence4: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence5: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence6: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence7: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence8: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence9: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence10: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence11: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence12: n must be >= 0')\n  }\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += '0'\n  }\n  return s\n}\n\n/*\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  if (n < 0) {\n    throw new Error('stringSequence13: n must be >= 0')\n  }\n  let s = ''\n  for", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return xOrY(n, x, y);\n};\n\nconst xOrY = (n, x, y) => {\n  if (n === x || n === y) {\n    return n;\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(lst[i], 2)\n    } else {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/*\n  GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(lst[i], 2)\n    } else {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/*\n  GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(lst[i], 2)\n    } else {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/*\n  GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(lst[i], 2)\n    } else {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/*\n  GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(lst[i], 2)\n    } else {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/*\n  GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      sum += Math.pow(lst[i], 2)\n    } else {\n      sum += Math.pow(lst[i], 2)\n    }\n  }\n  return sum\n}\n\n/*\n  GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = 0;\n  let guessCount = 0;\n  let guessIndex = 0;\n  let guessValue = 0;\n  let guessValueIndex = 0;\n  let guessValueCount = 0;\n  let guessValueIndexCount = 0;\n  let guessValueIndexCount2 = 0;\n  let guessValueIndexCount3 = 0;\n  let guessValueIndexCount4 = 0;\n  let guessValueIndexCount5 = 0;\n  let guessValueIndexCount6 = 0;\n  let guessValueIndexCount7 = 0;\n  let guessValueIndexCount8 = 0;\n  let guessValueIndexCount9 = 0;\n  let guessValueIndexCount10 = 0;\n  let guessValueIndexCount11 = 0;\n  let guessValueIndexCount12 = 0;\n  let guessValueIndexCount13 = 0;\n  let guessValueIndexCount14 = 0;\n  let guessValueIndexCount15 = 0;\n  let guessValueIndexCount16 = 0;\n  let guessValueIndexCount17 = 0;\n  let guessValueIndexCount18 = 0;\n  let guessValueIndexCount19 = 0;\n  let guessValueIndexCount20 = 0;\n  let guessValueIndexCount21 = 0;\n  let guessValueIndexCount22 = 0;\n  let guessValueIndexCount23 = 0;\n  let guessValueIndexCount24 = 0;\n  let guessValueIndexCount25 = 0;\n  let guessValueIndexCount26 = 0;\n  let guessValueIndexCount27 = 0;\n  let guessValueIndexCount28 = 0;\n  let guessValueIndexCount29 = 0;\n  let guessValueIndexCount30 = 0;\n  let guessValueIndexCount31 = 0;\n  let guessValueIndexCount32 = 0;\n  let guessValueIndexCount33 = 0;\n  let guessValueIndexCount34 = 0;\n  let guessValueIndexCount35 = 0;\n  let guessValueIndexCount36 = 0;\n  let guessValueIndexCount37 = 0;\n  let guessValueIndexCount38 = 0;\n  let guessValueIndexCount39 = 0;\n  let guessValueIndexCount40 = 0;\n  let guessValueIndexCount41 = 0;\n  let guessValueIndexCount42 = 0;\n  let guessValueIndexCount43 = 0;\n  let guessValueIndexCount44 = 0;\n  let guessValueIndexCount45 = 0;\n  let guessValueIndexCount46 = 0;\n  let guessValueIndexCount47 = 0;\n  let guessValueIndexCount48 = 0;\n  let guessValueIndexCount49 = 0;\n  let guessValueIndexCount50 = 0;\n  let guessValueIndexCount51 = 0;\n  let guessValueIndexCount52 = 0;\n  let guessValueIndexCount53 = 0;\n  let guessValueIndexCount54 = 0;\n  let guessValueIndexCount55 = 0;\n  let guessValueIndexCount56 = 0;\n  let guessValueIndexCount57 = 0;\n  let guessValueIndexCount58 = 0;\n  let guessValueIndexCount59 = 0;\n  let guessValueIndexCount60 = 0;\n  let guessValueIndexCount61 = 0;\n  let guessValueIndexCount62 = 0;\n  let guessValueIndexCount63 = 0;\n  let guessValueIndexCount64 = 0;\n  let guessValueIndexCount65 = 0;\n  let guessValueIndexCount66 = 0;\n  let guessValueIndexCount67 = 0;\n  let guessValueIndexCount68 = 0;\n  let guessValueIndexCount69 = 0;\n  let guessValueIndexCount70 = 0;\n  let guessValueIndexCount71 = 0;\n  let guessValueIndexCount72 = 0;\n  let guessValueIndexCount73 = 0;\n  let guessValueIndexCount74 = 0;\n  let guessValueIndexCount75 = 0;\n  let guessValueIndexCount76 = 0;\n  let guessValueIndexCount77 = 0;\n  let guessValueIndexCount78 = 0;\n  let guessValueIndexCount79 = 0;\n  let guessValueIndexCount80 = 0;\n  let guessValueIndexCount81 = 0;\n  let guessValueIndexCount82 = 0;\n  let guessValueIndexCount83 = 0;\n  let guessValueIndexCount84 = 0;\n  let guessValueIndexCount85 = 0;\n  let guessValueIndexCount86 = 0;\n  let guessValueIndexCount87 = 0;\n  let guessValueIndexCount88 = 0;\n  let guessValueIndexCount89 = 0;\n  let guessValueIndexCount90 = 0;\n  let guessValueIndexCount91 = 0;\n  let guessValueIndexCount92 = 0;\n  let guessValueIndexCount93 = 0;\n  let guessValueIndexCount94 = 0;\n  let guessValueIndexCount95 = 0;\n  let guessValueIndexCount96 = 0;\n  let guessValueIndexCount97 = 0;\n  let guessValueIndexCount98 = 0;\n  let guessValueIndexCount99 = 0;\n  let guessValueIndexCount100 = 0;\n  let guessValueIndexCount101 = 0;\n  let guessValue", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let strongest = extensions[0];\n  let strength = 0;\n  extensions.forEach((extension) => {\n    if (extension.toLowerCase().indexOf(class_name.toLowerCase())!== -1) {\n      if (extension.toLowerCase().indexOf(strongest.toLowerCase())!== -1) {\n        if (extension.toLowerCase().indexOf(strongest.toLowerCase()) >\n            strongest.toLowerCase().indexOf(strongest)) {\n          strongest = extension;\n        }\n      } else {\n        strongest = extension;\n      }\n      strength = strength + 1;\n    }\n  });\n  return strongest;\n};\n\nmodule.exports = {\n  strongestExtension\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return i == aa.length && j == bb.length;\n};\n\n//const cycpatternCheck = (a, b) => {\n//  let aa = a.split(\"\");\n//  let bb = b.split(\"\");\n//  let i = 0;\n//  let j = 0;\n//  while (i < aa.length && j < bb.length) {\n//    if (aa[i] == bb[j]) {\n//      i++;\n//      j++;\n//    } else {\n//      if (aa[i] < bb[j]) {\n//        i++;\n//      } else {\n//        j++;\n//      }\n//    }\n//  }\n//  return i == aa.length && j == bb.length;\n//};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return i == aa.length && j == bb.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return i == aa.length && j == bb.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return i == aa.length && j == bb.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return i == aa.length && j == bb.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return i == aa.length && j == bb.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return i == aa.length && j == bb.length;\n};\n\nconst cycpatternCheck = (a, b) => {\n  let aa = a.split(\"\");\n  let bb = b.split(\"\");\n  let i = 0;\n  let j = 0;\n  while (i < aa.length && j < bb.length) {\n    if (aa[i] == bb[j]) {\n      i++;\n      j++;\n    } else {\n      if (aa[i] < bb[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num % 2 === 0) {\n    return [1, 0];\n  } else {\n    return [1, 1];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount = (num) => {\n  if (num % 2 === 0) {\n    return [0, 1];\n  } else {\n    return [1, 0];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount2 = (num) => {\n  if (num % 2 === 0) {\n    return [1, 0];\n  } else {\n    return [0, 1];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount2 = (num) => {\n  if (num % 2 === 0) {\n    return [0, 1];\n  } else {\n    return [1, 0];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount3 = (num) => {\n  if (num % 2 === 0) {\n    return [1, 0];\n  } else {\n    return [0, 1];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount3 = (num) => {\n  if (num % 2 === 0) {\n    return [0, 1];\n  } else {\n    return [1, 0];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount4 = (num) => {\n  if (num % 2 === 0) {\n    return [1, 0];\n  } else {\n    return [0, 1];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount4 = (num) => {\n  if (num % 2 === 0) {\n    return [0, 1];\n  } else {\n    return [1, 0];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount5 = (num) => {\n  if (num % 2 === 0) {\n    return [1, 0];\n  } else {\n    return [0, 1];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount5 = (num) => {\n  if (num % 2 === 0) {\n    return [0, 1];\n  } else {\n    return [1, 0];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount6 = (num) => {\n  if (num % 2 === 0) {\n    return [1, 0];\n  } else {\n    return [0, 1];\n  }\n};\n\n/**\n   GiveN an iNtegeR return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst oddEvenCount6 = (num) => {\n  if (num % 2 === 0) {\n    return [0, 1];\n  } else {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = [\n    ['I', 'V', 'X', 'L', 'C', 'D', 'M'],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['', '', '', '', '', '', ''],\n    ['',", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let a1 = a % 360;\n  let a2 = a1 + 90;\n  let b1 = b % 360;\n  let b2 = b1 + 90;\n  let c1 = c % 360;\n  let c2 = c1 + 90;\n  return a1 === b1 && b2 === c2 && c1 === a2;\n};\n\nexport default rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  let maxLength = words[0].length;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > maxLength) {\n      max = words[i];\n      maxIndex = i;\n      maxLength = max.length;\n    }\n  }\n  return max;\n};\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n//findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n\n//findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n//findMax([\"name\", \"Enam", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < 0 || number > 1000) {\n    throw new Error('Number must be between 0 and 1000')\n  }\n  if (need < 0 || need > 1000) {\n    throw new Error('Need must be between 0 and 1000')\n  }\n  if (remaining < 0 || remaining > 1000) {\n    throw new Error('Remaining must be between 0 and 1000')\n  }\n  if (number + need > remaining) {\n    throw new Error('Need must be less than remaining')\n  }\n  return [number, need, remaining]\n}\n\nmodule.exports = eat\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string[i] === string[i + 1]) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let s1 = s.split(\"\");\n  let s2 = s1.reverse().join(\"\");\n  return s2;\n};\n\n// tests\nconst tests = [\n  [\"1234\", \"4321\"],\n  [\"ab\", \"AB\"],\n  [\"#a@C\", \"#A@c\"],\n  [\"a\", \"A\"],\n  [\"a\", \"a\"],\n  [\"a\", \"aa\"],\n  [\"a\", \"aaa\"],\n  [\"a\", \"aaaa\"],\n  [\"a\", \"aaaaa\"],\n  [\"a\", \"aaaaaa\"],\n  [\"a\", \"aaaaaaa\"],\n  [\"a\", \"aaaaaaaa\"],\n  [\"a\", \"aaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"],\n  [\"a\", \"aaaaaaaaaaaaaaaaaaaaaaaa", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('md5');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('md5');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha1 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('sha1');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha256 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('sha256');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha512 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('sha512');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_224 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('sha3_224');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_256 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('sha3_256');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst sha3_384 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const textToHash = text.split('');\n  const hash = crypto.createHash('sha3_384');\n  for (let i = 0; i < textToHash.length; i++) {\n    hash.update(textToHash[i]);\n  }\n  return hash.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash e", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    return generateIntegers(b, a)\n  }\n  const result = []\n  for (let i = a; i <= b; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nmodule.exports = generateIntegers\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let current_note = 0;\n  let current_note_length = 0;\n  let current_note_position = 0;\n  let current_note_direction = 0;\n  let current_note_octave = 0;\n  let current_note_accidental = 0;\n  let current_note_octave_length = 0;\n  let current_note_octave_position = 0;\n  let current_note_octave_direction = 0;\n  let current_note_octave_accidental = 0;\n  let current_note_octave_accidental_length = 0;\n  let current_note_octave_accidental_position = 0;\n  let current_note_octave_accidental_direction = 0;\n  let current_note_octave_accidental_accidental = 0;\n  let current_note_octave_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_position = 0;\n  let current_note_octave_accidental_accidental_direction = 0;\n  let current_note_octave_accidental_accidental_accidental = 0;\n  let current_note_octave_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_position = 0;\n  let current_note_octave_accidental_accidental_accidental_direction = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_position = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_direction = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_position = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_direction = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_position = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_direction = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_position = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_direction = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_length = 0;\n  let current_note_octave_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_accidental_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while (index < string.length) {\n    if (string.substring(index, index + substring.length) === substring) {\n      count++\n      index += substring.length\n    } else {\n      index++\n    }\n  }\n  return count\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '';\n  let number = '';\n  let i = 0;\n  while (i < numbers.length) {\n    number = numbers[i];\n    if (number.length === 1) {\n      result += number;\n      i++;\n    } else {\n      result += number.charAt(0);\n      i++;\n      while (i < numbers.length && numbers[i].length === 1) {\n        result += numbers[i];\n        i++;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberAsString = number.toString();\n  const numberAsInt = parseInt(numberAsString);\n  const numberAsDecimal = numberAsInt.toString();\n  const numberAsDecimalLength = numberAsDecimal.length;\n  const numberAsDecimalPart = numberAsDecimal.substring(0, numberAsDecimalLength - 1);\n  const numberAsDecimalPartLength = numberAsDecimalPart.length;\n  const numberAsDecimalPartAsInt = parseInt(numberAsDecimalPart);\n  const numberAsDecimalPartAsIntLength = numberAsDecimalPartAsInt.toString().length;\n  const numberAsDecimalPartAsIntPart = numberAsDecimalPartAsInt.toString().substring(numberAsDecimalPartAsIntLength - 1);\n  const numberAsDecimalPartAsIntPartLength = numberAsDecimalPartAsIntPart.length;\n  const numberAsDecimalPartAsIntPartPart = numberAsDecimalPartAsIntPart.substring(0, numberAsDecimalPartAsIntPartLength - 1);\n  const numberAsDecimalPartAsIntPartPartLength = numberAsDecimalPartAsIntPartPart.length;\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartLength - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPartPartPart.length - 1);\n  const numberAsDecimalPartAsIntPartPartPart = numberAsDecimalPartAsIntPartPart.substring(0, numberAsDecimalPartAsIntPart", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[numbers.length - 1];\n  const mid = (min + max) / 2;\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i] < mid) {\n      min = numbers[i];\n      i++;\n    } else if (numbers[i] > mid) {\n      max = numbers[i];\n      i++;\n    } else {\n      return [mid, numbers[i]];\n    }\n  }\n  return [min, max];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit2([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit3 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit3([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit4 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit4([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit5 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit5([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit6 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit6([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit7 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit7([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit8 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit8([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit9 = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const range = max - min;\n  const scale = range / (numbers.length - 1);\n  return numbers.map((number) => {\n    return number - min;\n  }).map((number) => {\n    return number * scale;\n  });\n};\n\n/*\n  >>> rescaleToUnit9([1.0, 2.0", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* FilTer gIven a list of strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* FilTer gIven a list of booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/* FilTer gIven a list of objects\n  >>> filterObjects(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/* FilTer gIven a list of numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* FilTer gIven a list of strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* FilTer gIven a list of booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/* FilTer gIven a list of objects\n  >>> filterObjects(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/* FilTer gIven a list of numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* FilTer gIven a list of strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* FilTer gIven a list of booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/* FilTer gIven a list of objects\n  >>> filterObjects(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/* FilTer gIven a list of numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* FilTer gIven a list of strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* FilTer", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n * RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen2 = (string) => {\n  if (string.length === 0) {\n    return 0;\n  }\n  return string.length;\n};\n\nmodule.exports = {\n  strlen,\n  strlen2,\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor2 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor3 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor4 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor5 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor6 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor7 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor8 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor9 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor10 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor11 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor12 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor13 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp > largest) {\n        largest = temp;\n      }\n    }\n  }\n  return largest;\n};\n\nconst largestDivisor14 = (n) => {\n  let largest = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = i;\n      while (temp % n === 0) {\n        temp = temp / n;\n      }\n      if (temp >", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize3 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize4 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize5 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize6 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize7 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize8 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize9 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize10 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize11 = (n) => {\n  let [a, b] = [n, 1];\n  while (b > 1) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return [a, b];\n};\n\n/*\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize12 = (n) => {\n  let [a, b] = [", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i]!== numbers[i + 1]) {\n      result.push(numbers[i]);\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n};\n\n/*\n  FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isUpperCase = (string) => {\n  return string.toUpperCase() === string;\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isLowerCase = (string) => {\n  return string.toLowerCase() === string;\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isDigit = (string) => {\n  return string.match(/\\d/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isAlpha = (string) => {\n  return string.match(/[a-zA-Z]/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isAlphanumeric = (string) => {\n  return string.match(/[a-zA-Z0-9]/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isWhitespace = (string) => {\n  return string.match(/\\s/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isPunctuation = (string) => {\n  return string.match(/[!\\\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~]/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isNumeric = (string) => {\n  return string.match(/[0-9]/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isAlphaNumeric = (string) => {\n  return string.match(/[a-zA-Z0-9]/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isUrl = (string) => {\n  return string.match(/^(https?|ftp):\\/\\/([-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isEmail = (string) => {\n  return string.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isIpv4 = (string) => {\n  return string.match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst isIpv6 = (string) => {\n  return string.match(/^((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, curr) => acc + curr, '');\n};\n\nmodule.exports = concatenate;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  const prefixLength = prefix.length;\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length >= prefixLength && strings[i].substr(0, prefixLength) === prefix) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = filterByPrefix;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const zero = [0, 0, 0];\n  const result = operations.reduce((acc, op) => {\n    const [a, b, c] = op;\n    if (a === 0 && b === 0 && c === 0) {\n      return acc;\n    }\n    return acc.concat([a, b, c]);\n  }, zero);\n  return result.length === 0;\n};\n\nmodule.exports = {\n  aboveZero,\n  belowZero,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*RetuRn onLy negaBers in tHe list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*RetuRn onLy the list with the max value.\n  >>> getMax([-1, 2, -4, 5, 6])\n  6\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getMax = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*RetuRn onLy the list with the min value.\n  >>> getMin([-1, 2, -4, 5, 6])\n  -4\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMin = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*RetuRn onLy the list with the sum of all values.\n  >>> getSum([-1, 2, -4, 5, 6])\n  -5\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -123\n  */\nconst getSum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*RetuRn onLy the list with the average of all values.\n  >>> getAverage([-1, 2, -4, 5, 6])\n  -1.5\n  >>> getAverage([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1.5\n  */\nconst getAverage = (l) => {\n  let sum = getSum(l);\n  return sum / l.length;\n};\n\n/*RetuRn onLy the list with the median of all values.\n  >>> getMedian([-1, 2, -4, 5, 6])\n  -4\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMedian = (l) => {\n  let sorted = getSorted(l);\n  if (sorted.length % 2 === 0) {\n    return (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n  } else {\n    return sorted[sorted.length / 2];\n  }\n};\n\n/*RetuRn onLy the list with the mode of all values.\n  >>> getMode([-1, 2, -4, 5, 6])\n  -4\n  >>> getMode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3\n  */\nconst getMode = (l) => {\n  let sorted = getSorted(l);\n  let mode = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      continue;\n    }\n    mode = sorted[i];\n  }\n  return mode;\n};\n\n/*RetuRn onLy the list with the first element of the list.\n  >>> getFirst([-1, 2, -4, 5, 6])\n  -1\n  >>> getFirst([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1\n  */\nconst getFirst = (l) => {\n  return l[0];\n};\n\n/*RetuRn onLy the list with the last element of the list.\n  >>> getLast([-1, 2, -4, 5, 6])\n  6\n  >>> getLast([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst getLast = (l) => {\n  return l[l.length - 1];\n};\n\n/*RetuRn onLy the list with the first and the last element of the list.\n  >>> getFirstAndLast([-1, 2, -4, 5, 6])\n  [-1, 6]\n  >>> getFirstAndLast([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, 9]\n  */\nconst getFirstAndLast = (l) => {\n  return [l[0], l[l.length - 1]];\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime2 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime3 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime4 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime5 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime6 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime7 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime8 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime9 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime10 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime11 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime12 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime13 = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime14 = (n) => {\n  if (n < 2) {\n    return false;\n  }", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCoeff = 0;\n  let maxCoeffIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let coeff = poly(xs[i]);\n    if (coeff > max) {\n      max = coeff;\n      maxIndex = i;\n      maxCoeff = coeff;\n      maxCoeffIndex = i;\n    }\n  }\n  if (maxCoeff > 0) {\n    return maxCoeffIndex;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  aRe coEFiCiENt of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCoeff = 0;\n  let maxCoeffIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let coeff = poly(xs[i]);\n    if (coeff > max) {\n      max = coeff;\n      maxIndex = i;\n      maxCoeff = coeff;\n      maxCoeffIndex = i;\n    }\n  }\n  if (maxCoeff > 0) {\n    return maxCoeffIndex;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  aRe coEFiCiENt of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero3 = (xs) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCoeff = 0;\n  let maxCoeffIndex = 0;\n  for (let i = 0; i < xs.length; i++) {\n    let coeff = poly(xs[i]);\n    if (coeff > max) {\n      max = coeff;\n      maxIndex = i;\n      maxCoeff = coeff;\n      maxCoeffIndex = i;\n    }\n  }\n  if (maxCoeff > 0) {\n    return maxCoeffIndex;\n  } else {\n    return -1;\n  }\n}\n\n/*\n  aRe coEFiCiENt of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero4 = (xs) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxCoeff = 0;\n  let maxCoeffIndex = 0;\n  for (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  while (i < l.length) {\n    l[k++] = l[i++];\n  }\n  return l;\n};\n\nconst sortFourth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortFifth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortSixth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortSeventh = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortEigth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortNinth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortTenth = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortEleventh = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  while (i < j) {\n    if (l[i] < l[j]) {\n      l[k++] = l[i++];\n    } else if (l[i] > l[j]) {\n      l[k++] = l[j--];\n    } else {\n      l[k++] = l[i++];\n      l[k++] = l[j--];\n    }\n  }\n  return l;\n};\n\nconst sortTwelth = (l) => {\n  let i = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  let i = 0;\n  let len = l.length;\n  let result = [];\n  while (i < len) {\n    if (result.indexOf", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  let maxIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst minElement = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElement = (l) => {\n  let max = l[0];\n  let min = l[0];\n  let median = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (l.length % 2 == 0) {\n    median = (max + min) / 2;\n  } else {\n    median = max;\n  }\n  return median;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst averageElement = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst minElementWithIndex = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElementWithIndex = (l) => {\n  let max = l[0];\n  let min = l[0];\n  let median = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (l.length % 2 == 0) {\n    median = (max + min) / 2;\n  } else {\n    median = max;\n  }\n  return median;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst averageElementWithIndex = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst minElementWithIndexAndIndex = (l) => {\n  let min = l[0];\n  let minIndex = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst medianElementWithIndexAndIndex = (l) => {\n  let max = l[0];\n  let min = l[0];\n  let median = 0;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  if (l.length % 2 == 0) {\n    median = (max + min) / 2;\n  } else {\n    median = max;\n  }\n  return median;\n};\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst averageElementWithIndexAndIndex = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (i <= n) {\n    if (i % 15 === 0 || i % 5 === 0 || i % 3 === 0) {\n      console.log(`${i}`);\n    } else {\n      console.log(i);\n    }\n    i++;\n  }\n};\n\nfizzBuzz(50);\nfizzBuzz(78);\nfizzBuzz(79);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven2 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven3 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven4 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven5 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven6 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven7 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven8 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven9 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst.push(l[i]);\n      i++;\n    } else {\n      lst.push(l[j]);\n      j--;\n    }\n  }\n  while (k < lst.length) {\n    lst.push(lst[k]);\n    k++;\n  }\n  return lst;\n};\n\nconst sortEven10 = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  let k = 0;\n  let lst = [];\n  while (i < j) {\n    if (l[i] % 2 === 0) {\n      lst", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  let ret = '';\n  for (let i = 0; i < s.length; i += 3) {\n    ret += s.slice(i, i + 3);\n  }\n  return ret;\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic2 = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic2 = (s) => {\n  let ret = '';\n  for (let i = 0; i < s.length; i += 3) {\n    ret += s.slice(i, i + 3);\n  }\n  return ret;\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic3 = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic3 = (s) => {\n  let ret = '';\n  for (let i = 0; i < s.length; i += 3) {\n    ret += s.slice(i, i + 3);\n  }\n  return ret;\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic4 = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic4 = (s) => {\n  let ret = '';\n  for (let i = 0; i < s.length; i += 3) {\n    ret += s.slice(i, i + 3);\n  }\n  return ret;\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic5 = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic5 = (s) => {\n  let ret = '';\n  for (let i = 0; i < s.length; i += 3) {\n    ret += s.slice(i, i + 3);\n  }\n  return ret;\n}\n\n/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic6 = (s) => {\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  const fib = [2, 3];\n  let i = 2;\n  while (i < n) {\n    const fibPrev = fib[i - 1];\n    const fibNext = fib[i];\n    const fibCurr = fibNext + fibPrev;\n    fib[i] = fibCurr;\n    i++;\n  }\n  return fib[n - 1];\n};\n\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return primeFib(n) + fibonacci(n - 1);\n};\n\nconst fibonacci_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2);\n};\n\nconst fibonacci_iterative = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_recursive_iterative = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_recursive_iterative_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr = 3;\n  while (fibCurr < n) {\n    fibPrev = fibCurr;\n    fibCurr = fibCurr + fibPrev;\n  }\n  return fibCurr;\n};\n\nconst fibonacci_iterative_recursive_recursive_recursive_recursive = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let fibPrev = 2;\n  let fibCurr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = numbers.reduce((sum, number) => sum + number, 0) / numbers.length\n  const deviation = numbers.reduce((sum, number) => sum + Math.abs(number - mean), 0) / numbers.length\n  return Math.sqrt(deviation / numbers.length)\n}\n\nmodule.exports = meanAbsoluteDeviation\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === l.length;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  if (n.car.x < 0 || n.car.x > n.width || n.car.y < 0 || n.car.y > n.height) {\n    return true;\n  }\n  return false;\n};\n\n// This function is called when the game is over.\nfunction gameOver() {\n  // Clear the screen.\n  clear();\n\n  // Draw the winner's name.\n  drawText(n.winner.name, n.winner.x, n.winner.y);\n\n  // Draw the loser's name.\n  drawText(n.loser.name, n.loser.x, n.loser.y);\n\n  // Draw the winner's score.\n  drawText(n.winner.score, n.winner.x, n.winner.y);\n\n  // Draw the loser's score.\n  drawText(n.loser.score, n.loser.x, n.loser.y);\n\n  // Draw the winner's time.\n  drawText(n.winner.time, n.winner.x, n.winner.y);\n\n  // Draw the loser's time.\n  drawText(n.loser.time, n.loser.x, n.loser.y);\n\n  // Draw the winner's speed.\n  drawText(n.winner.speed, n.winner.x, n.winner.y);\n\n  // Draw the loser's speed.\n  drawText(n.loser.speed, n.loser.x, n.loser.y);\n\n  // Draw the winner's score.\n  drawText(n.winner.score, n.winner.x, n.winner.y);\n\n  // Draw the loser's score.\n  drawText(n.loser.score, n.loser.x, n.loser.y);\n\n  // Draw the winner's time.\n  drawText(n.winner.time, n.winner.x, n.winner.y);\n\n  // Draw the loser's time.\n  drawText(n.loser.time, n.loser.x, n.loser.y);\n\n  // Draw the winner's speed.\n  drawText(n.winner.speed, n.winner.x, n.winner.y);\n\n  // Draw the loser's speed.\n  drawText(n.loser.speed, n.loser.x, n.loser.y);\n\n  // Draw the winner's score.\n  drawText(n.winner.score, n.winner.x, n.winner.y);\n\n  // Draw the loser's score.\n  drawText(n.loser.score, n.loser.x, n.loser.y);\n\n  // Draw the winner's time.\n  drawText(n.winner.time, n.winner.x, n.winner.y);\n\n  // Draw the loser's time.\n  drawText(n.loser.time, n.loser.x, n.loser.y);\n\n  // Draw the winner's speed.\n  drawText(n.winner.speed, n.winner.x, n.winner.y);\n\n  // Draw the loser's speed.\n  drawText(n.loser.speed, n.loser.x, n.loser.y);\n\n  // Draw the winner's score.\n  drawText(n.winner.score, n.winner.x, n.winner.y);\n\n  // Draw the loser's score.\n  drawText(n.loser.score, n.loser.x, n.loser.y);\n\n  // Draw the winner's time.\n  drawText(n.winner.time, n.winner.x, n.winner.y);\n\n  // Draw the loser's time.\n  drawText(n.loser.time, n.loser.x, n.loser.y);\n\n  // Draw the winner's speed.\n  drawText(n.winner.speed, n.winner.x, n.winner.y);\n\n  // Draw the loser's speed.\n  drawText(n.loser.speed, n.loser.x, n.loser.y);\n\n  // Draw the winner's score.\n  drawText(n.winner.score, n.winner.x, n.winner.y);\n\n  // Draw the loser's score.\n  drawText(n.loser.score, n.loser.x, n.loser.y);\n\n  // Draw the winner's time.\n  drawText(n.winner.time, n.winner.x, n.winner.y);\n\n  // Draw the loser's time.\n  drawText(n.loser.time, n.loser.x, n.loser.y);\n\n  // Draw the winner's speed.\n  drawText(n.winner.speed, n.winner.x, n.winner.y);\n\n  // Draw the loser's speed.\n  drawText(n.loser.speed, n.loser.x, n.loser.y);\n\n  // Draw the winner's score.\n  drawText(n.winner.score, n.winner.x, n.winner.y);\n\n  // Draw the loser's score.\n  drawText(n.loser.score, n.loser.x, n.loser.y);\n\n  // Draw the winner's time.\n  drawText(n.winner.time, n.winner.x", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    l[i] += 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrList = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    l[i] -= 1;\n    i += 1;\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst swapList = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    let tmp = l[i];\n    l[i] = l[i + 1];\n    l[i + 1] = tmp;\n    i += 1;\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst removeList = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    if (l[i] === 1) {\n      l.splice(i, 1);\n      len -= 1;\n    } else {\n      i += 1;\n    }\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst removeAllList = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    if (l[i] === 1) {\n      l.splice(i, 1);\n      len -= 1;\n    } else {\n      i += 1;\n    }\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst removeAllList2 = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    if (l[i] === 1) {\n      l.splice(i, 1);\n      len -= 1;\n    } else {\n      i += 1;\n    }\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst removeAllList3 = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    if (l[i] === 1) {\n      l.splice(i, 1);\n      len -= 1;\n    } else {\n      i += 1;\n    }\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst removeAllList4 = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    if (l[i] === 1) {\n      l.splice(i, 1);\n      len -= 1;\n    } else {\n      i += 1;\n    }\n  }\n  return l;\n};\n\n/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst removeAllList5 = (l) => {\n  let i = 0;\n  let len = l.length;\n  while (i < len) {\n    if (l[i] === 1) {\n      l.splice(i, 1);\n      len -= 1;", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0 && l.length === 1;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (x < base) {\n    return x\n  }\n  let res = \"\"\n  while (x > 0) {\n    res = x % base + res\n    x = Math.floor(x / base)\n  }\n  return res\n}\n\n/*\n  Convert a number to a hexadecimal representation.\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  */\nconst hex = (x) => {\n  return (\"0x\" + x.toString(16))\n}\n\n/*\n  Convert a number to a binary representation.\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  */\nconst bin = (x) => {\n  return (\"0b\" + x.toString(2))\n}\n\n/*\n  Convert a number to a decimal representation.\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  */\nconst dec = (x) => {\n  return x.toString(10)\n}\n\n/*\n  Convert a number to a octal representation.\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  */\nconst oct = (x) => {\n  return (\"0o\" + x.toString(8))\n}\n\n/*\n  Convert a number to a hexadecimal representation.\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  */\nconst hex2 = (x) => {\n  return (\"0x\" + x.toString(16))\n}\n\n/*\n  Convert a number to a binary representation.\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  */\nconst bin2 = (x) => {\n  return (\"0b\" + x.toString(2))\n}\n\n/*\n  Convert a number to a decimal representation.\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  */\nconst dec2 = (x) => {\n  return x.toString(10)\n}\n\n/*\n  Convert a number to a octal representation.\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  */\nconst oct2 = (x) => {\n  return (\"0o\" + x.toString(8))\n}\n\n/*\n  Convert a number to a hexadecimal representation.\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  */\nconst hex3 = (x) => {\n  return (\"0x\" + x.toString(16))\n}\n\n/*\n  Convert a number to a binary representation.\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  */\nconst bin3 = (x) => {\n  return (\"0b\" + x.toString(2))\n}\n\n/*\n  Convert a number to a decimal representation.\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  */\nconst dec3 = (x) => {\n  return x.toString(10)\n}\n\n/*\n  Convert a number to a octal representation.\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  */\nconst oct3 = (x) => {\n  return (\"0o\" + x.toString(8))\n}\n\n/*\n  Convert a number to a hexadecimal representation.\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  >>> hex(8)\n  '0x8'\n  */\nconst hex4 = (x) => {\n  return (\"0x\" + x.toString(16))\n}\n\n/*\n  Convert a number to a binary representation.\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  >>> bin(8)\n  '0b1'\n  */\nconst bin4 = (x) => {\n  return (\"0b\" + x.toString(2))\n}\n\n/*\n  Convert a number to a decimal representation.\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  >>> dec(8)\n  '8'\n  */\nconst dec4 = (x) => {\n  return x.toString(10)\n}\n\n/*\n  Convert a number to a octal representation.\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  >>> oct(8)\n  '0o8'\n  */\nconst oct4 = (x) => {\n  return (\"0o\" + x.toString(8))\n}\n\n/*\n  Convert a number to a hexadecimal representation.\n  >>>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h);\n}\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  if (n === 4) {\n    return 2;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci = (n) => {\n  if (n < 0) {\n    throw new Error('fibonacci: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci2 = (n) => {\n  if (n < 0) {\n    throw new Error('fibonacci: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibonacci2(n - 1) + fibonacci2(n - 2);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci3 = (n) => {\n  if (n < 0) {\n    throw new Error('fibonacci: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibonacci3(n - 1) + fibonacci3(n - 2);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci4 = (n) => {\n  if (n < 0) {\n    throw new Error('fibonacci: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibonacci4(n - 1) + fibonacci4(n - 2);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci5 = (n) => {\n  if (n < 0) {\n    throw new Error('fibonacci: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibonacci5(n - 1) + fibonacci5(n - 2);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci6 = (n) => {\n  if (n < 0) {\n    throw new Error('fibonacci: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibonacci6(n - 1) + fibonacci6(n - 2);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci7 = (n) => {\n  if (n < 0) {\n    throw new Error('fibonacci: n must be a positive integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 2;\n  }\n  if (n === 4) {\n    return 3;\n  }\n  return fibonacci7(n - 1) + fibonacci7(n - 2);\n};\n\n// Print Fibonacci numbers up to n\nconst fibonacci8 = (n) => {\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  let sum = 0;\n  let n = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    n++;\n  }\n  return sum / n;\n};\n\nmodule.exports = median;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n\n  let middle = text.substring(1, text.length - 1);\n\n  return middle.toLowerCase() === middle.toUpperCase();\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 0) {\n    throw new Error('Modulo p must be a positive integer.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n % p === 0) {\n    return 0;\n  }\n  return (n % p + p) % p;\n};\n\nmodule.exports = modp;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  if (numbers.length === 1) {\n    return [numbers[0]];\n  }\n  const intersperse = [];\n  let current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] === current) {\n      current = delimeter;\n    } else {\n      intersperse.push(current);\n      current = numbers[i];\n    }\n  }\n  intersperse.push(current);\n  return intersperse;\n};\n\nexport default intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeUrns = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeUrns = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeUrnsShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeUrnsShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeUrnsShiftDecode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeUrnsShiftDecode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeUrnsShiftDecodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeUrnsShiftDecodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. ret", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = 'aeiouAEIOU';\n  let vowelsRegex = new RegExp(vowels, 'g');\n  return text.replace(vowelsRegex, '');\n};\n\n/*\n  removePunctuation is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removePunctuation('abcdef')\n  'bcdef'\n  >>> removePunctuation('aaaaa')\n  ''\n  >>> removePunctuation('aaBAA')\n  'B'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n  let punctuation = '!@#$%^&*()_+-=[]{}|;:<>,./?';\n  let punctuationRegex = new RegExp(punctuation, 'g');\n  return text.replace(punctuationRegex, '');\n};\n\n/*\n  removeSpaces is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'bcdef'\n  >>> removeSpaces('aaaaa')\n  ''\n  >>> removeSpaces('aaBAA')\n  'B'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n  let spaces ='\\t\\n\\r\\f\\v';\n  let spacesRegex = new RegExp(spaces, 'g');\n  return text.replace(spacesRegex, '');\n};\n\n/*\n  removeNonLetters is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT non-letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNonLetters('abcdef')\n  'bcdef'\n  >>> removeNonLetters('aaaaa')\n  ''\n  >>> removeNonLetters('aaBAA')\n  'B'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n  let nonLetters = '!@#$%^&*()_+-=[]{}|;:<>,./?';\n  let nonLettersRegex = new RegExp(nonLetters, 'g');\n  return text.replace(nonLettersRegex, '');\n};\n\n/*\n  removeNonDigits is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT non-digits.\n  >>> removeNonDigits('')\n  ''\n  >>> removeNonDigits(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNonDigits('abcdef')\n  'bcdef'\n  >>> removeNonDigits('aaaaa')\n  ''\n  >>> removeNonDigits('aaBAA')\n  'B'\n  >>> removeNonDigits('zbcd')\n  'zbcd'\n  */\nconst removeNonDigits = (text) => {\n  let nonDigits = '0123456789';\n  let nonDigitsRegex = new RegExp(nonDigits, 'g');\n  return text.replace(nonDigitsRegex, '');\n};\n\n/*\n  removeNonLettersDigits is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT non-letters and digits.\n  >>> removeNonLettersDigits('')\n  ''\n  >>> removeNonLettersDigits(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNonLettersDigits('abcdef')\n  'bcdef'\n  >>> removeNonLettersDigits('aaaaa')\n  ''\n  >>> removeNonLettersDigits('aaBAA')\n  'B'\n  >>> removeNonLettersDigits('zbcd')\n  'zbcd'\n  */\nconst removeNonLettersDigits = (text) => {\n  let nonLettersDigits = '!@#$%^&*()_+-=[]{}|;:<>,./?';\n  let nonLettersDigitsRegex = new RegExp(nonLettersDigits, 'g');\n  return text.replace(nonLettersDigitsRegex, '');\n};\n\n/*\n  removeNonLettersDigits is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT non-letters and digits.\n  >>> removeNonLettersDigits('')\n  ''\n  >>> removeNonLettersDigits(\"abcdef\\nghijklm\")\n  'bcdef\\nghijklm'\n  >>> removeNonLettersDigits('abcdef')\n  'bcdef'\n  >>> removeNonLettersDigits('aaaaa')\n  ''\n  >>> removeNonLettersDigits('aaBAA')\n  'B'\n  >>> removeNonLettersDigits('zbcd')\n  'zbcd'\n  */\nconst removeNonLettersDigits = (text) => {\n  let nonLettersDigits = '!@#$%^&*()_+-=[]{", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(v => v < t);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe above ThrEsholD t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.some(v => v > t);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  */\nconst betweenThreshold = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold2 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold3 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold4 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold5 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold6 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold7 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold8 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5, 10], [100, 5, 10])\n  false\n  >>> betweenThreshold([1, 20, 4, 10], [100, 5, 10], [100, 5, 10])\n  true\n  */\nconst betweenThreshold9 = (l, t1, t2) => {\n  return l.some(v => v >= t1 && v <= t2);\n};\n\n/*RetuRn trUe if aLl nUmberS in the list l aRe between ThrEsholD t1 and t2.\n  >>> betweenThreshold([1, 2, 4, 10], [100, 5", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add27 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add28 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add29 = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add30 = (x, y) => {\n  return x + y;\n};", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib6(n - 1) + fib6(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib7(n - 1) + fib7(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib8(n - 1) + fib8(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib9(n - 1) + fib9(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib10 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib10(n - 1) + fib10(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib11 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib11(n - 1) + fib11(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib12 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib12(n - 1) + fib12(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib13 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib13(n - 1) + fib13(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib14 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib14(n - 1) + fib14(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib15 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib15(n - 1) + fib15(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib16 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib16(n - 1) + fib16(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib17 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib17(n - 1) + fib17(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib18 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib18(n - 1) + fib18(n - 2);\n};\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      if (closeBrackets.indexOf(bracketing[i])!== -1) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst getBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getCloseBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (closeBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketingAndCloseBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketingAndCloseBracketingAndBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketingAndCloseBracketingAndBracketingAndBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketingAndCloseBracketingAndBracketingAndBracketingAndBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketingAndCloseBracketingAndBracketingAndBracketingAndBracketingAndBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketingAndCloseBracketingAndBracketingAndBracketingAndBracketingAndBracketingAndBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n\nconst getOpenBracketingAndCloseBracketingAndBracketingAndBracketingAndBracketingAndBracketingAndBracketingAndBracketing = (brackets) => {\n  const bracketing = brackets.split(\"<>\");\n  const openBrackets = brackets.split(\"<\");\n  const closeBrackets = brackets.split(\">\");\n\n  for (let i = 0; i < bracketing.length; i++) {\n    if (openBrackets.indexOf(bracketing[i])!== -1) {\n      return bracketing[i];\n    }\n  }\n  return \"\";\n};\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic2 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic2([1, 2, 4, 20])\n  true\n  >>> monotonic2([1, 20, 4, 10])\n  false\n  >>> monotonic2([4, 1, 0, -10])\n  true\n  */\nconst monotonic3 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic3([1, 2, 4, 20])\n  true\n  >>> monotonic3([1, 20, 4, 10])\n  false\n  >>> monotonic3([4, 1, 0, -10])\n  true\n  */\nconst monotonic4 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic4([1, 2, 4, 20])\n  true\n  >>> monotonic4([1, 20, 4, 10])\n  false\n  >>> monotonic4([4, 1, 0, -10])\n  true\n  */\nconst monotonic5 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic5([1, 2, 4, 20])\n  true\n  >>> monotonic5([1, 20, 4, 10])\n  false\n  >>> monotonic5([4, 1, 0, -10])\n  true\n  */\nconst monotonic6 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic6([1, 2, 4, 20])\n  true\n  >>> monotonic6([1, 20, 4, 10])\n  false\n  >>> monotonic6([4, 1, 0, -10])\n  true\n  */\nconst monotonic7 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic7([1, 2, 4, 20])\n  true\n  >>> monotonic7([1, 20, 4, 10])\n  false\n  >>> monotonic7([4, 1, 0, -10])\n  true\n  */\nconst monotonic8 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> monotonic8([1, 2, 4, 20])\n  true\n  >>> monotonic8([1, 20, 4, 10])\n  false\n  >>> monotonic8([4, 1, 0, -10])\n  true\n  */\nconst monotonic9 = (l) => {\n  if (l.length === 0) return true;\n  let i = 0;\n  let max = l[0];\n  for (let j = 1; j < l.length; j++) {\n    if (l[j] > max) {\n      max = l[j];\n      i = j;\n    }\n  }\n  return l[i] < max;\n};\n\n/*\n  >>> mon", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len1 = l1.length;\n  const len2 = l2.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let commonLen = 0;\n  while (i < len1 && j < len2) {\n    if (l1[i] === l2[j]) {\n      commonLen++;\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return commonLen;\n};\n\nexport default common;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n\n  const factor = largestPrimeFactor(n / 2);\n  if (n % factor === 0) {\n    return factor;\n  }\n\n  return largestPrimeFactor(n);\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_count = 0;\n  let paren_index = 0;\n  let paren_string_length = paren_string.length;\n  let paren_string_array = [];\n  let paren_string_array_length = 0;\n\n  while (paren_index < paren_string_length) {\n    if (paren_string[paren_index] === '(') {\n      paren_count += 1;\n    } else if (paren_string[paren_index] === ')') {\n      paren_count -= 1;\n    }\n\n    if (paren_count === 0) {\n      paren_string_array_length += 1;\n      paren_string_array.push(paren_string[paren_index]);\n    }\n\n    paren_index += 1;\n  }\n\n  return paren_string_array;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsArray = brackets.split(\"\");\n  const bracketsCount = bracketsArray.length;\n  let bracketsCountCorrect = bracketsCount;\n  let bracketsCountIncorrect = bracketsCount;\n  let bracketsCountCorrectCounter = 0;\n  let bracketsCountIncorrectCounter = 0;\n\n  for (let i = 0; i < bracketsCount; i++) {\n    if (bracketsArray[i] === \"(\") {\n      bracketsCountCorrectCounter++;\n    } else if (bracketsArray[i] === \")\") {\n      bracketsCountIncorrectCounter++;\n    }\n  }\n\n  if (bracketsCountCorrect === bracketsCount) {\n    return true;\n  } else if (bracketsCountCorrectCounter === bracketsCount) {\n    return false;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative3 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative4 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative5 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative6 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative7 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative8 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative9 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative10 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative11 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative12 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative13 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative14 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative15 = (xs) => {\n  const xs2 = xs.map((x) => x * x);\n  return xs2.map((x) => x / x);\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// Test\nconst fibfibTest = (n) => {\n  console.log(fibfib(n));\n};\n\n// Run\nfibfibTest(1);\nfibfibTest(2);\nfibfibTest(3);\nfibfibTest(4);\nfibfibTest(5);\nfibfibTest(8);\nfibfibTest(10);\nfibfibTest(100);\nfibfibTest(1000);\nfibfibTest(10000);\nfibfibTest(100000);\nfibfibTest(1000000);\nfibfibTest(10000000);\nfibfibTest(100000000);\nfibfibTest(1000000000);\nfibfibTest(10000000000);\nfibfibTest(100000000000);\nfibfibTest(1000000000000);\nfibfibTest(10000000000000);\nfibfibTest(100000000000000);\nfibfibTest(1000000000000000);\nfibfibTest(100000000000000000);\nfibfibTest(10000000000000000);\nfibfibTest(100000000000000000);\nfibfibTest(1000000000000000000);\nfibfibTest(10000000000000000000);\nfibfibTest(100000000000000000000);\nfibfibTest(1000000000000000000000);\nfibfibTest(10000000000000000000000);\nfibfibTest(100000000000000000000000);\nfibfibTest(1000000000000000000000000);\nfibfibTest(10000000000000000000000000);\nfibfibTest(100000000000000000000000000);\nfibfibTest(1000000000000000000000000000);\nfibfibTest(10000000000000000000000000000);\nfibfibTest(100000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfibTest(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);\nfibfib", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount2 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount3 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount4 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount5 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\n/*\n  WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount6 = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift === 0) {\n    return x;\n  }\n  let m = 0x00;\n  let r = 0;\n  let c = 0;\n  let i = 0;\n  while (i < shift) {\n    r = (r << 1) | (x & 1);\n    x >>= 1;\n    c += 1;\n    i += 1;\n  }\n  m = x & (0x01 << (shift - 1));\n  x &= ~(0x01 << (shift - 1));\n  x |= r << (shift - 1);\n  if (m) {\n    x = (x ^ 0xFFFFFFFF) | 1;\n  }\n  return x.toString(16);\n};\n\nconst getDigit = (x, n) => {\n  if (n === 0) {\n    return x;\n  }\n  return getDigit(x >>> (n - 1), n - 1) + getDigit(x, n - 1);\n};\n\nconst getDigits = (x, n) => {\n  if (n === 0) {\n    return [x];\n  }\n  return getDigits(x >>> (n - 1), n - 1) + getDigits(x, n - 1);\n};\n\nconst getDigitCount = (x, n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return getDigitCount(x >>> (n - 1), n - 1) + getDigitCount(x, n - 1);\n};\n\nconst getDigitCounts = (x, n) => {\n  if (n === 0) {\n    return [1];\n  }\n  return getDigitCounts(x >>> (n - 1), n - 1) + getDigitCounts(x, n - 1);\n};\n\nconst getDigitCountsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x];\n  }\n  return getDigitCountsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigitsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x, x, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x, x, x, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x, x, x, x, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x, x, x, x, x, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigits = (x, n) => {\n  if (n === 0) {\n    return [1, x, x, x, x, x, x, x, x, x];\n  }\n  return getDigitCountsAndDigitsAndDigitsAndDigits(x >>> (n - 1), n - 1) + getDigitCountsAndDigitsAndDigits(x, n - 1);\n};\n\nconst getDigitCountsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAndDigitsAnd", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  let total = 0;\n  let fruit = 0;\n  let orange = 0;\n  let apple = 0;\n  let orangeS = 0;\n  let appleS = 0;\n  let orangeS_apple = 0;\n  let appleS_orange = 0;\n  let orangeS_appleS = 0;\n  let appleS_orangeS = 0;\n  let orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS = 0;\n  let appleS_orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS = 0;\n  let appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_appleS_orangeS_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return [];\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\nexport { pluck };\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let m = 0\n  while (i < j) {\n    m = (i + j) / 2\n    if (lst[m] === 0) {\n      return m\n    } else if (lst[m] > 0) {\n      i = m + 1\n    } else {\n      j = m - 1\n    }\n  }\n  return -1\n}\n\nmodule.exports = search\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return strings.indexOf(substring)!== -1? [strings[0]] : [];\n  }\n  const result = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      result.push(strings[i]);\n    }\n  }\n  return result;\n};\n\nexport default filterBySubstring;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n  const min = lst[0];\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  const lst2 = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === min) {\n      lst2.push(lst[i]);\n    }\n    if (lst[i] === max) {\n      lst2.push(lst[i]);\n    }\n  }\n  return lst2;\n};\n\nexport default strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const area = (a + b + c) / 2;\n  return area;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n\n  const max = Math.max.apply(Math, q);\n  const min = Math.min.apply(Math, q);\n\n  if (w > max || w < min) {\n    return false;\n  }\n\n  const sum = q.reduce((a, b) => a + b, 0);\n  return sum <= w;\n};\n\nexport default willItFly;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let minIndex = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] === lst2[i]) {\n      total++;\n    }\n    i++;\n  }\n  return total;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime24 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime25 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime26 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime27 = (a) => {\n  if (a % 2 === 0 && a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst isMultiplyPrime28 = (a) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 1 === 0 && a % 2 === 0 && a % 3 === 0 && a % 4 === 0 && a % 5 === 0 && a % 6 === 0 && a % 7 === 0 && a % 8 === 0 && a % 9 === 0 && a % 10 === 0 && a % 11 === 0 && a % 12 === 0 && a % 13 === 0 && a % 14 === 0 && a % 15 === 0 && a % 16 === 0 && a % 17 === 0 && a % 18 === 0 && a % 19 === 0 && a % 20 === 0 && a % 21 === 0 && a % 22 === 0 && a % 23 === 0 && a % 24 === 0 && a % 25 === 0 && a % 26 === 0 && a % 27 === 0 && a % 28 === 0 && a % 29 === 0 && a % 30 === 0 && a % 31 === 0 && a % 32 === 0 && a % 33 === 0 && a % 34 === 0 && a % 35 === 0 && a % 36 === 0 && a % 37 === 0 && a % 38 === 0 && a % 39 === 0 && a % 40 === 0 && a % 41 === 0 && a % 42 === 0 && a % 43 === 0 && a % 44 === 0 && a % 45 === 0 && a % 46 === 0 && a % 47 === 0 && a % 48 === 0 && a % 49 === 0 && a % 50 === 0 && a % 51 === 0 && a % 52 === 0 && a % 53 === 0 && a % 54 === 0 && a % 55 === 0 && a % 56 === 0 && a % 57 === 0 && a % 58 === 0 && a % 59 === 0 && a % 60 === 0;\n};\n\nmodule.exports = iscube;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hexKey = 0;\n  let num = num.toString();\n  for (let i = 0; i < num.length; i++) {\n    let char = num.charAt(i);\n    if (char === '0') {\n      hexKey += 0;\n    } else if (char === '1') {\n      hexKey += 1;\n    } else if (char === '2') {\n      hexKey += 2;\n    } else if (char === '3') {\n      hexKey += 3;\n    } else if (char === '4') {\n      hexKey += 4;\n    } else if (char === '5') {\n      hexKey += 5;\n    } else if (char === '6') {\n      hexKey += 6;\n    } else if (char === '7') {\n      hexKey += 7;\n    } else if (char === '8') {\n      hexKey += 8;\n    } else if (char === '9') {\n      hexKey += 9;\n    } else if (char === 'A') {\n      hexKey += 10;\n    } else if (char === 'B') {\n      hexKey += 11;\n    } else if (char === 'C') {\n      hexKey += 12;\n    } else if (char === 'D') {\n      hexKey += 13;\n    } else if (char === 'E') {\n      hexKey += 14;\n    } else if (char === 'F') {\n      hexKey += 15;\n    }\n  }\n  return hexKey;\n};\n\nconst getPrime = (num) => {\n  let prime = 0;\n  let num = num.toString();\n  for (let i = 0; i < num.length; i++) {\n    let char = num.charAt(i);\n    if (char === '0') {\n      prime += 0;\n    } else if (char === '1') {\n      prime += 1;\n    } else if (char === '2') {\n      prime += 2;\n    } else if (char === '3') {\n      prime += 3;\n    } else if (char === '4') {\n      prime += 4;\n    } else if (char === '5') {\n      prime += 5;\n    } else if (char === '6') {\n      prime += 6;\n    } else if (char === '7') {\n      prime += 7;\n    } else if (char === '8') {\n      prime += 8;\n    } else if (char === '9') {\n      prime += 9;\n    } else if (char === 'A') {\n      prime += 10;\n    } else if (char === 'B') {\n      prime += 11;\n    } else if (char === 'C') {\n      prime += 12;\n    } else if (char === 'D') {\n      prime += 13;\n    } else if (char === 'E') {\n      prime += 14;\n    } else if (char === 'F') {\n      prime += 15;\n    }\n  }\n  return prime;\n};\n\nconst getPrime2 = (num) => {\n  let prime = 0;\n  let num = num.toString();\n  for (let i = 0; i < num.length; i++) {\n    let char = num.charAt(i);\n    if (char === '0') {\n      prime += 0;\n    } else if (char === '1') {\n      prime += 1;\n    } else if (char === '2') {\n      prime += 2;\n    } else if (char === '3') {\n      prime += 3;\n    } else if (char === '4') {\n      prime += 4;\n    } else if (char === '5') {\n      prime += 5;\n    } else if (char === '6') {\n      prime += 6;\n    } else if (char === '7') {\n      prime += 7;\n    } else if (char === '8') {\n      prime += 8;\n    } else if (char === '9') {\n      prime += 9;\n    } else if (char === 'A') {\n      prime += 10;\n    } else if (char === 'B') {\n      prime += 11;\n    } else if (char === 'C') {\n      prime += 12;\n    } else if (char === 'D') {\n      prime += 13;\n    } else if (char === 'E') {\n      prime += 14;\n    } else if (char === 'F') {\n      prime += 15;\n    }\n  }\n  return prime;\n};\n\nconst getPrime3 = (num) => {\n  let prime = 0;\n  let num = num.toString();\n  for (let i = 0; i < num.length; i++) {\n    let char = num.charAt(i);\n    if (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryString = \"\";\n  let binaryNumber = 0;\n  let decimalNumber = 0;\n  let decimalString = \"\";\n  let decimalStringLength = 0;\n  let decimalStringLength2 = 0;\n  let decimalStringLength3 = 0;\n  let decimalStringLength4 = 0;\n  let decimalStringLength5 = 0;\n  let decimalStringLength6 = 0;\n  let decimalStringLength7 = 0;\n  let decimalStringLength8 = 0;\n  let decimalStringLength9 = 0;\n  let decimalStringLength10 = 0;\n  let decimalStringLength11 = 0;\n  let decimalStringLength12 = 0;\n  let decimalStringLength13 = 0;\n  let decimalStringLength14 = 0;\n  let decimalStringLength15 = 0;\n  let decimalStringLength16 = 0;\n  let decimalStringLength17 = 0;\n  let decimalStringLength18 = 0;\n  let decimalStringLength19 = 0;\n  let decimalStringLength20 = 0;\n  let decimalStringLength21 = 0;\n  let decimalStringLength22 = 0;\n  let decimalStringLength23 = 0;\n  let decimalStringLength24 = 0;\n  let decimalStringLength25 = 0;\n  let decimalStringLength26 = 0;\n  let decimalStringLength27 = 0;\n  let decimalStringLength28 = 0;\n  let decimalStringLength29 = 0;\n  let decimalStringLength30 = 0;\n  let decimalStringLength31 = 0;\n  let decimalStringLength32 = 0;\n  let decimalStringLength33 = 0;\n  let decimalStringLength34 = 0;\n  let decimalStringLength35 = 0;\n  let decimalStringLength36 = 0;\n  let decimalStringLength37 = 0;\n  let decimalStringLength38 = 0;\n  let decimalStringLength39 = 0;\n  let decimalStringLength40 = 0;\n  let decimalStringLength41 = 0;\n  let decimalStringLength42 = 0;\n  let decimalStringLength43 = 0;\n  let decimalStringLength44 = 0;\n  let decimalStringLength45 = 0;\n  let decimalStringLength46 = 0;\n  let decimalStringLength47 = 0;\n  let decimalStringLength48 = 0;\n  let decimalStringLength49 = 0;\n  let decimalStringLength50 = 0;\n  let decimalStringLength51 = 0;\n  let decimalStringLength52 = 0;\n  let decimalStringLength53 = 0;\n  let decimalStringLength54 = 0;\n  let decimalStringLength55 = 0;\n  let decimalStringLength56 = 0;\n  let decimalStringLength57 = 0;\n  let decimalStringLength58 = 0;\n  let decimalStringLength59 = 0;\n  let decimalStringLength60 = 0;\n  let decimalStringLength61 = 0;\n  let decimalStringLength62 = 0;\n  let decimalStringLength63 = 0;\n  let decimalStringLength64 = 0;\n  let decimalStringLength65 = 0;\n  let decimalStringLength66 = 0;\n  let decimalStringLength67 = 0;\n  let decimalStringLength68 = 0;\n  let decimalStringLength69 = 0;\n  let decimalStringLength70 = 0;\n  let decimalStringLength71 = 0;\n  let decimalStringLength72 = 0;\n  let decimalStringLength73 = 0;\n  let decimalStringLength74 = 0;\n  let decimalStringLength75 = 0;\n  let decimalStringLength76 = 0;\n  let decimalStringLength77 = 0;\n  let decimalStringLength78 = 0;\n  let decimalStringLength79 = 0;\n  let decimalStringLength80 = 0;\n  let decimalStringLength81 = 0;\n  let decimalStringLength82 = 0;\n  let decimalStringLength83 = 0;\n  let decimalStringLength84 = 0;\n  let decimalStringLength85 = 0;\n  let decimalStringLength86 = 0;\n  let decimalStringLength87 = 0;\n  let decimalStringLength88 = 0;\n  let decimalStringLength89 = 0;\n  let decimalStringLength90 = 0;\n  let decimalStringLength91 = 0;\n  let decimalStringLength92 = 0;\n  let decimalStringLength93 = 0;\n  let decimalStringLength94 = 0;\n  let decimalStringLength95 = 0;\n  let decimalStringLength96 = 0;\n  let decimalStringLength97 = 0;\n  let decimalStringLength98 = 0;\n  let decimalStringLength99 = 0;\n  let decimalStringLength100 = 0;\n  let decimalStringLength101 = 0;\n  let decimalStringLength102 = 0;\n  let decimalStringLength103 = 0;\n  let decimalStringLength104 = 0;\n  let decimalStringLength105 = 0;\n  let decimalStringLength106 = 0;\n  let decimalStringLength107 = 0;\n  let decimalStringLength108 = 0;\n  let decimalStringLength109 = 0;\n  let decimalStringLength110 = 0;\n  let decimalStringLength111 = 0;\n  let decimalStringLength112 = 0;\n  let decimalStringLength113 = 0;\n  let decimalStringLength114 = 0;\n  let decimalStringLength115 = 0;\n  let decimalStringLength116 = 0;\n  let decimalStringLength117 = 0;\n  let decimalStringLength118 = 0;\n  let decimalStringLength119 = 0;\n  let decimalStringLength120 = 0;\n  let decimalStringLength121 = 0;\n  let decimalStringLength122 = 0;\n  let decimalStringLength123 = 0;\n  let decimalStringLength124 = 0;\n  let decimalStringLength125 = 0;\n  let decimalStringLength126 = 0;\n  let decimalStringLength127 = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct2 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct4 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct6 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct8 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct9 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct10 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct11 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct12 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct13 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];\n};\n\nconst sumProduct14 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = 0;\n  const prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i] * prod;\n    prod *= int;\n  }\n  return [sum, prod];", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      sum += 1;\n    }\n  }\n  return sum === 3;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeList = [];\n  grades.forEach((grade) => {\n    if (grade > 3.0) {\n      gradeList.push('A+');\n    } else if (grade > 2.7) {\n      gradeList.push('A');\n    } else if (grade > 2.3) {\n      gradeList.push('A-');\n    } else if (grade > 2.0) {\n      gradeList.push('B+');\n    } else if (grade > 1.7) {\n      gradeList.push('B');\n    } else if (grade > 1.3) {\n      gradeList.push('B-');\n    } else if (grade > 1.0) {\n      gradeList.push('C+');\n    } else if (grade > 0.7) {\n      gradeList.push('C');\n    } else if (grade > 0.3) {\n      gradeList.push('C-');\n    } else if (grade > 0.0) {\n      gradeList.push('D+');\n    } else {\n      gradeList.push('D');\n    }\n  });\n  return gradeList;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false;\n  }\n  let i = 2;\n  while (i < string.length) {\n    if (string.charAt(i) === string.charAt(0)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds2 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds3 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds4 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds5 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds6 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds7 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds8 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds9 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds10 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds11 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds12 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds13 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds14 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds15 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds16 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds17 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds18 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds19 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds20 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds21 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds22 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds23 = (n) => {\n  let count = 0\n  while (n > 0) {\n    if (n % 10 === 1) {\n      count++\n    }\n    n = n / 10\n  }\n  return count\n}\n\nconst startsOneEnds24 = (n) => {\n  let count = 0\n  while (n > 0) {\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += Math.pow(2, i);\n  }\n  return sum.toString(2);\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add2 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add3 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add4 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add5 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add6 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add7 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add8 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add9 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add10 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add11 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add12 = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\n/*\n  GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add13 = (lst) => {\n  let sum = 0\n  for (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let a = s.split('');\n  let b = [];\n  let c = [];\n  let d = [];\n  let e = [];\n  let f = [];\n  let g = [];\n  let h = [];\n  let i = [];\n  let j = [];\n  let k = [];\n  let l = [];\n  let m = [];\n  let n = [];\n  let o = [];\n  let p = [];\n  let q = [];\n  let r = [];\n  let s = [];\n  let t = [];\n  let u = [];\n  let v = [];\n  let w = [];\n  let x = [];\n  let y = [];\n  let z = [];\n  let aa = [];\n  let ab = [];\n  let ac = [];\n  let ad = [];\n  let ae = [];\n  let af = [];\n  let ag = [];\n  let ah = [];\n  let ai = [];\n  let aj = [];\n  let ak = [];\n  let al = [];\n  let am = [];\n  let an = [];\n  let ao = [];\n  let ap = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aaa = [];\n  let aba = [];\n  let abb = [];\n  let abc = [];\n  let abd = [];\n  let ace = [];\n  let ade = [];\n  let aee = [];\n  let aef = [];\n  let afg = [];\n  let agg = [];\n  let ahg = [];\n  let ahh = [];\n  let ahi = [];\n  let ajh = [];\n  let akj = [];\n  let alk = [];\n  let alm = [];\n  let aln = [];\n  let alo = [];\n  let alp = [];\n  let alq = [];\n  let alr = [];\n  let als = [];\n  let alt = [];\n  let alu = [];\n  let alv = [];\n  let alw = [];\n  let alx = [];\n  let ally = [];\n  let alz = [];\n  let ama = [];\n  let amb = [];\n  let amc = [];\n  let adm = [];\n  let ame = [];\n  let amf = [];\n  let amg = [];\n  let amh = [];\n  let ami = [];\n  let amj = [];\n  let amk = [];\n  let aml = [];\n  let amm = [];\n  let amn = [];\n  let amo = [];\n  let amp = [];\n  let amq = [];\n  let amr = [];\n  let ams = [];\n  let amt = [];\n  let amu = [];\n  let amv = [];\n  let amw = [];\n  let amx = [];\n  let amy = [];\n  let amy = [];\n  let amz = [];\n  let ana = [];\n  let anb = [];\n  let anc = [];\n  let and = [];\n  let ane = [];\n  let anf = [];\n  let ng = [];\n  let anh = [];\n  let aij = [];\n  let ank = [];\n  let anl = [];\n  let anm = [];\n  let ann = [];\n  let aoo = [];\n  let apa = [];\n  let apb = [];\n  let apc = [];\n  let apd = [];\n  let ape = [];\n  let apl = [];\n  let aq = [];\n  let ar = [];\n  let as = [];\n  let at = [];\n  let au = [];\n  let av = [];\n  let aw = [];\n  let ax = [];\n  let ay = [];\n  let az = [];\n  let aaa = [];\n  let aba = [];\n  let abb = [];\n  let abc = [];\n  let abd = [];\n  let ace = [];\n  let ade = [];\n  let aee = [];\n  let aef = [];\n  let afg = [];\n  let agg = [];\n  let ahg = [];\n  let ahh = [];\n  let ahi = [];\n  let ajh = [];\n  let akj = [];\n  let alk = [];\n  let alm = [];\n  let aln = [];\n  let alo = [];\n  let alp = [];\n  let alq = [];\n  let alr = [];\n  let als = [];\n  let alt = [];\n  let alu = [];\n  let alv = [];\n  let alw = [];\n  let alx = [];\n  let ally = [];\n  let alz = [];\n  let ama = [];\n  let amb = [];\n  let amc = [];\n  let adm = [];\n  let ame = [];\n  let amf = [];\n  let amg = [];\n  let amh = [];\n  let ami = [];\n  let amj = [];\n  let amk = [];\n  let aml = [];\n  let amm = [];\n  let amn = [];\n  let amo = [];\n  let amp = [];\n  let amq = [];\n  let amr = [];\n  let ams = [];\n  let amt = [];\n  let amu = [];\n  let amv = [];\n  let amw = [];\n  let amx = [];\n  let amy =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) return [];\n  const len = lst.length;\n  const result = [];\n  for (let i = 0; i < len; i++) {\n    const row = lst[i];\n    if (row.length === 0) continue;\n    const rowLen = row.length;\n    if (rowLen === 1) {\n      result.push([x, row[0]]);\n      continue;\n    }\n    const rowX = row[x];\n    let j = 0;\n    while (j < rowLen) {\n      if (row[j] === rowX) {\n        result.push([j, row[j]]);\n        j++;\n      } else {\n        break;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = getRow;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  const sorted = array.slice(0);\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    let c = s.charAt(i);\n    let j = key.indexOf(c);\n    if (j >= 0) {\n      result += key.charAt(j + (j % 2));\n    } else {\n      result += c;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst decrypt = (s) => {\n  let result = '';\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    let c = s.charAt(i);\n    let j = key.indexOf(c);\n    if (j >= 0) {\n      result += key.charAt(j - (j % 2));\n    } else {\n      result += c;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst rotate = (s) => {\n  let result = '';\n  let key = 'abcdefghijklmnopqrstuvwxyz';\n  let i = 0;\n  while (i < s.length) {\n    let c = s.charAt(i);\n    let j = key.indexOf(c);\n    if (j >= 0) {\n      result += key.charAt(j + (j % 2));\n    } else {\n      result += c;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst test = () => {\n  let s = 'abcdefghijklmnopqrstuvwxyz';\n  console.log(encrypt(s));\n  console.log(decrypt(encrypt(s)));\n  console.log(rotate(encrypt(s)));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN previousSmallest() that RetURnS tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  previousSmallest([1, 2, 3, 4, 5]) == 5\n  previousSmallest([5, 1, 4, 3, 2]) == 5\n  previousSmallest([]) == nUll\n  previousSmallest([1, 1]) == 1\n  */\nCOnSt previousSmallest = (lst) => {\n  if (lst.length == 0) return null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN median() that RetURnS tHe median ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  median([1, 2, 3, 4, 5]) == 3\n  median([5, 1, 4, 3, 2]) == 3\n  median([]) == nUll\n  median([1, 1]) == 1\n  */\nCOnSt median = (lst) => {\n  if (lst.length == 0) return null;\n  let len = lst.length;\n  let mid = len / 2;\n  let i = 0;\n  let j = len - 1;\n  while (i < mid && j >= 0) {\n    if (lst[i] > lst[j]) {\n      let tmp = lst[i];\n      lst[i] = lst[j];\n      lst[j] = tmp;\n    }\n    i++;\n    j--;\n  }\n  return lst[mid];\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN min() that RetURnS tHe min ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([]) == nUll\n  min([1, 1]) == 1\n  */\nCOnSt min = (lst) => {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN max() that RetURnS tHe max ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([]) == nUll\n  max([1, 1]) == 1\n  */\nCOnSt max = (lst) => {\n  if (lst.length == 0) return null;\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN sum() that RetURnS tHe sum ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  sum([1, 2, 3, 4, 5]) == 15\n  sum([5, 1, 4, 3, 2]) == 15\n  sum([]) == nUll\n  sum([1, 1]) == 2\n  */\nCOnSt sum = (lst) => {\n  if (lst.length == 0) return null;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN average() that RetURnS tHe average ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  average([1, 2, 3, 4, 5]) == 3\n  average([5, 1, 4, 3, 2]) == 3\n  average([]) == nUll\n  average([1, 1]) == 1\n  */\nCOnSt average = (lst) => {\n  if (lst.length == 0) return null;\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum / lst.length;\n};\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN median()", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let w1 = 0;\n  let w2 = 0;\n  let w3 = 0;\n  let w4 = 0;\n  let w5 = 0;\n  let w6 = 0;\n  let w7 = 0;\n  let w8 = 0;\n  let w9 = 0;\n  let w10 = 0;\n  let w11 = 0;\n  let w12 = 0;\n  let w13 = 0;\n  let w14 = 0;\n  let w15 = 0;\n  let w16 = 0;\n  let w17 = 0;\n  let w18 = 0;\n  let w19 = 0;\n  let w20 = 0;\n  let w21 = 0;\n  let w22 = 0;\n  let w23 = 0;\n  let w24 = 0;\n  let w25 = 0;\n  let w26 = 0;\n  let w27 = 0;\n  let w28 = 0;\n  let w29 = 0;\n  let w30 = 0;\n  let w31 = 0;\n  let w32 = 0;\n  let w33 = 0;\n  let w34 = 0;\n  let w35 = 0;\n  let w36 = 0;\n  let w37 = 0;\n  let w38 = 0;\n  let w39 = 0;\n  let w40 = 0;\n  let w41 = 0;\n  let w42 = 0;\n  let w43 = 0;\n  let w44 = 0;\n  let w45 = 0;\n  let w46 = 0;\n  let w47 = 0;\n  let w48 = 0;\n  let w49 = 0;\n  let w50 = 0;\n  let w51 = 0;\n  let w52 = 0;\n  let w53 = 0;\n  let w54 = 0;\n  let w55 = 0;\n  let w56 = 0;\n  let w57 = 0;\n  let w58 = 0;\n  let w59 = 0;\n  let w60 = 0;\n  let w61 = 0;\n  let w62 = 0;\n  let w63 = 0;\n  let w64 = 0;\n  let w65 = 0;\n  let w66 = 0;\n  let w67 = 0;\n  let w68 = 0;\n  let w69 = 0;\n  let w70 = 0;\n  let w71 = 0;\n  let w72 = 0;\n  let w73 = 0;\n  let w74 = 0;\n  let w75 = 0;\n  let w76 = 0;\n  let w77 = 0;\n  let w78 = 0;\n  let w79 = 0;\n  let w80 = 0;\n  let w81 = 0;\n  let w82 = 0;\n  let w83 = 0;\n  let w84 = 0;\n  let w85 = 0;\n  let w86 = 0;\n  let w87 = 0;\n  let w88 = 0;\n  let w89 = 0;\n  let w90 = 0;\n  let w91 = 0;\n  let w92 = 0;\n  let w93 = 0;\n  let w94 = 0;\n  let w95 = 0;\n  let w96 = 0;\n  let w97 = 0;\n  let w98 = 0;\n  let w99 = 0;\n  let w100 = 0;\n  let w101 = 0;\n  let w102 = 0;\n  let w103 = 0;\n  let w104 = 0;\n  let w105 = 0;\n  let w106 = 0;\n  let w107 = 0;\n  let w108 = 0;\n  let w109 = 0;\n  let w110 = 0;\n  let w111 = 0;\n  let w112 = 0;\n  let w113 = 0;\n  let w114 = 0;\n  let w115 = 0;\n  let w116 = 0;\n  let w117 = 0;\n  let w118 = 0;\n  let w119 = 0;\n  let w120 = 0;\n  let w121 = 0;\n  let w122 = 0;\n  let w123 = 0;\n  let w124 = 0;\n  let w125 = 0;\n  let w126 = 0;\n  let w127 = 0;\n  let w128 = 0;\n  let w129 = 0;\n  let w130 = 0;\n  let w131 = 0;\n  let w132 = 0;\n  let w133 = 0;\n  let w134 = 0;\n  let w135 = 0;\n  let w136 = 0;\n  let w137 = 0;\n  let w138 = 0;\n  let w139 = 0;\n  let w140 = 0;\n  let w141 = 0;\n  let w142 = 0;\n  let w143 = 0;\n  let w144 = 0;\n  let w145 = 0;\n  let w146 = 0;\n  let w147 = 0;\n  let w148 = 0;\n  let w149 = 0;\n  let w150 = 0;\n  let w151 = 0;\n  let w152 = 0;\n  let w153 = 0;\n  let w154 = 0;\n  let w155 = 0;\n  let w156 = 0;\n  let w157 = 0;\n  let w158 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt2 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  return x === y && x === z;\n};\n\n/*\n  CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0\n  let a = 0\n  let b = 0\n  let c = 0\n  let d = 0\n  let e = 0\n  let f = 0\n  let g = 0\n  let h = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n  let q = 0\n  let r = 0\n  let s = 0\n  let t = 0\n  let u = 0\n  let v = 0\n  let w = 0\n  let x = 0\n  let y = 0\n  let z = 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst test = () => {\n  const lst = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\n  console.log(skjkasdkd(lst));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let isCase = true;\n  for (let key in dict) {\n    if (typeof dict[key]!== \"string\") {\n      isCase = false;\n      break;\n    }\n  }\n  return isCase;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let aDigit = a % 10;\n  let bDigit = b % 10;\n  while (aDigit || bDigit) {\n    if (aDigit < bDigit) {\n      result += aDigit * b;\n      a = a % 10;\n    } else {\n      result += bDigit * a;\n      b = b % 10;\n    }\n    aDigit = a % 10;\n    bDigit = b % 10;\n  }\n  return result;\n};\n\nconst multiply2 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply3 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply4 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply5 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply6 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply7 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply8 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply9 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply10 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply11 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply12 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply13 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply14 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply15 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply16 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply17 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply18 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply19 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply20 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply21 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result;\n};\n\nconst multiply22 = (a, b) => {\n  let result = 0;\n  while (a) {\n    result += a * b;\n    a = a % 10;\n    b = b % 10;\n  }\n  return result", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of lowerCase vowEls in EVeN iNdicES.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of vowEl s in EVeN iNdicES.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() || s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of vowEl s in EVeN iNdicES.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels2 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() || s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of vowEl s in EVeN iNdicES.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels3 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() || s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of vowEl s in EVeN iNdicES.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels4 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() || s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of vowEl s in EVeN iNdicES.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels5 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() || s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of vowEl s in EVeN iNdicES.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels6 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() || s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of vowEl s in EVeN iNdicES.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels7 = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase() || s[i] === s[i].toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  GivEn a sTring s, CouNt the Numbe", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const int = parseInt(value, 10);\n  const ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n    18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n    36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n    54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n    72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,\n    90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105,\n    106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n    120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133,\n    134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147,\n    148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161,\n    162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,\n    176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,\n    190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203,\n    204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,\n    218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\n    232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245,\n    246, 247, 248, 249, 250, 251, 252, 253, 254, 255];\n  if (int === 0) {\n    return ints[0];\n  }\n  const i = ints.indexOf(int);\n  if (i === -1) {\n    return ints[ints.length - 1];\n  }\n  return ints[i];\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
