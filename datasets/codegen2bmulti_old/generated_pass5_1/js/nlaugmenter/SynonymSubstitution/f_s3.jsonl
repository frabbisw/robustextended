{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 3, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements5 = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements6 = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements7 = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements8 = (numbers, threshold) => {\n  let result = false;\n  let i = 0;\n  while (i < numbers.length - 1) {\n    if (Math.abs(numbers[i] - numbers[i + 1]) < threshold) {\n      result = true;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers close to each other than \n   give threshold.\n  >>> hasCloseElements([1.0, 2.0, 3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument containing multiple group of nest parenthesis. Your finish is to \n   freestanding those group into freestanding strings and return the list of those. \n   disjoined groups are balanced (each open pair is by rights shut) and not nested within each other \n   dismiss any spaces in the input chain.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let result = [];\n  let open_paren = 0;\n  let closed_paren = 0;\n  let open_paren_count = 0;\n  let closed_paren_count = 0;\n  let open_paren_index = 0;\n  let closed_paren_index = 0;\n  let current_string = '';\n  let current_string_index = 0;\n  let current_string_length = 0;\n  let current_string_open_paren = 0;\n  let current_string_closed_paren = 0;\n  let current_string_open_paren_index = 0;\n  let current_string_closed_paren_index = 0;\n  let current_string_open_paren_count = 0;\n  let current_string_closed_paren_count = 0;\n  let current_string_open_paren_count_index = 0;\n  let current_string_closed_paren_count_index = 0;\n  let current_string_open_paren_count_index_index = 0;\n  let current_string_closed_paren_count_index_index = 0;\n  let current_string_open_paren_count_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_closed_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index = 0;\n  let current_string_open_paren_count_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/* discover the short palindrome that begin with a provide string.\n   Algorithm idea is simple: \n   - line up the longest suffix of supplied string that is a palindrome. \n   - Append to the conclusion of the string reverse of a string prefix that derive before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string.length === 0) {\n    return string;\n  }\n  const longestSuffix = string.split('').reverse().join('');\n  const prefix = string.substr(0, longestSuffix.length);\n  const reversedPrefix = prefix.split('').reverse().join('');\n  return string.replace(reversedPrefix, longestSuffix);\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string = = string.split('').reverse().join('');\n}\n\n/*\n * Test if a string is a palindrome * / \n const isPalindrome = (string) = > { \n   return string", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have to make a pile of n degree of stone. \n   The inaugural degree experience n stones. \n   The issue of stones in the adjacent degree is: \n       - the next leftover number if n is odd. \n       - the future even number if n is even. \n   Return the act of stones in each level in a list, where component at index \n   i typify the issue of stone in the level (i+1).\n\n   example:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = []\n  let left = n\n  while (left > 0) {\n    result.push(left)\n    left = (left % 2)? (left + 1) : (left - 1)\n  }\n  return result\n}\n\nmodule.exports = makeAPile\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 3, "perturbed": true, "gc": "/*\n  You will be given a string of lyric separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString5 = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString6 = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString7 = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString8 = (s) => {\n  let words = s.split(\",\");\n  let wordsArray = [];\n  for (let i = 0; i < words.length; i++) {\n    wordsArray.push(words[i].trim());\n  }\n  return wordsArray;\n};\n\n/*\n  You will be given a string of lyrics separated by comma or distance. Your undertaking is \n   to split the chain into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") ==", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 3, "perturbed": true, "gc": "/*This function takes two convinced numbers x and y and reelect the \n   big even integer number that embody in the compass [x, y] inclusive. If \n   there's no such issue, then the routine should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1\n  }\n  if (x === y) {\n    return x\n  }\n  if (x > y) {\n    return x - y\n  }\n}\n\nmodule.exports = {\n  chooseNum\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 3, "perturbed": true, "gc": "/*You are given two positive integer n and m, and your task is to compute the \n   average of the integer from n through m (include n and m). \n   Round the answer to the near integer and change that to binary. \n   If n is bang-up than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  avg = avg / (m - n + 1);\n  avg = Math.round(avg);\n  if (avg > 0) {\n    avg = avg.toString(2);\n  } else {\n    avg = \"-1\";\n  }\n  return avg;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 3, "perturbed": true, "gc": "/*Given a list of positive integer x. return a sorted list of all \n   elements that hasn't any tied finger. \n\n   Note: Returned list should be screen in increasing ordering. \n  \n   For case:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let arr = [];\n  for (let i = 0; i < x.length; i++) {\n    let temp = x[i];\n    let j = 0;\n    while (j < arr.length) {\n      if (temp === arr[j]) {\n        break;\n      }\n      j++;\n    }\n    if (j === arr.length) {\n      arr.push(temp);\n    }\n  }\n  return arr;\n};\n\nmodule.exports = uniqueDigits;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of integer, sort the integers that are between 1 and 9 inclusive, \n   change by reversal the resulting array, and then supplant each digit by its corresponding name from \n   \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversed = arr.reverse();\n  const reversedSorted = reversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversedSorted.length; i++) {\n    result.push(reversedSorted[i]);\n  }\n  return result;\n};\n\nconst byName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversed = arr.reverse();\n  const reversedSorted = reversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversedSorted.length; i++) {\n    result.push(reversedSorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversed = arr.reverse();\n  const reversedSorted = reversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversedSorted.length; i++) {\n    result.push(reversedSorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName2 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversed = arr.reverse();\n  const reversedSorted = reversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversedSorted.length; i++) {\n    result.push(reversedSorted[i]);\n  }\n  return result;\n};\n\nconst byLengthAndName3 = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length === 1) {\n    return arr;\n  }\n  const sorted = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversed = arr.reverse();\n  const reversedSorted = reversed.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  for (let i = 0; i < reversedSorted.length; i++) {\n    result.push(revers", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 3, "perturbed": true, "gc": "/* Implement the function f that take n as a parameter, \n   and reelect a list of size n, such that the value of the component at exponent i be the factorial of i if i is even \n   or the sum of act from 1 to i otherwise. \n   i begin from 1. \n   the factorial of i is the multiplication of the number from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i * Math.pow(i, i - 1));\n    } else {\n      result.push(i + 1);\n      for (let j = 1; j < i; j++) {\n        result.push(result[j - 1] + result[j]);\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and curious \n   integer palindrome that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0, odd = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    i++;\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function countNums which take an array of integer and return \n   the issue of element which hold a kernel of digit > 0. \n   If a issue exist negative, then its first sign finger will equal negative: \n   e.g. -123 has sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  let sign = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      count++;\n      sign = 1;\n    } else if (arr[i] < 0) {\n      sign = -1;\n    }\n  }\n  return (sign * count);\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\nconsole.log(countNums([]));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integer arr[1], arr[2],... , arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 3, "perturbed": true, "gc": "/*We have an array 'arr' of N integer arr[1], arr[2],..., arr[N].The\n   numbers in the array will be randomly order. Your undertaking is to determine if \n   it is potential to catch an array classify in non - decreasing decree by performing \n   the trace operation on the given array: \n       You are allow to perform correct shift operation any act of time. \n  \n   One right switch mathematical process mean shifting all component of the array by one \n   position in the right guidance. The concluding chemical element of the array will be affect to \n   the starting position in the array i.e. 0th index. \n\n   If it embody possible to obtain the grouped array by performing the above process \n   then return true else return false. \n   If the give array is empty then return true. \n\n   Note: The given list is guarantee to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  let result = true;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = moveOneBall;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 3, "perturbed": true, "gc": "/* Input are two strings a and b dwell only of 1s and zero. \n   do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor2('010', '110')\n  '100'\n  */\nconst stringXor3 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor3('010', '110')\n  '100'\n  */\nconst stringXor4 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor4('010', '110')\n  '100'\n  */\nconst stringXor5 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor5('010', '110')\n  '100'\n  */\nconst stringXor6 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor6('010', '110')\n  '100'\n  */\nconst stringXor7 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor7('010', '110')\n  '100'\n  */\nconst stringXor8 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor8('010', '110')\n  '100'\n  */\nconst stringXor9 = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        result += '1';\n      } else {\n        result += '0';\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Input are two strings a and b dwell only of 1s and zero. \n  do binary XOR on these stimulation and return consequence besides as a chain.\n  >>> stringXor9('010', '110')\n  '100'\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 3, "perturbed": true, "gc": "/*In this problem, you will implement a affair that takes two tilt of number, \n   and settle whether it is potential to do an exchange of component \n   between them to produce lst1 a list of only even numbers. \n   There is no terminus ad quem on the phone number of exchange component between lst1 and lst2.\n   If it be possible to exchange element between the lst1 and lst2 to make \n   all the elements of lst1 to exist even, return \" YES \". \n   Otherwise, return \" NO \".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let lst1_even = [];\n  let lst2_even = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      lst1_even.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      lst2_even.push(lst2[i]);\n    }\n  }\n  let even_lst1 = [];\n  let even_lst2 = [];\n  for (let i = 0; i < lst1_even.length; i++) {\n    if (lst1_even[i] % 2 === 0) {\n      even_lst1.push(lst1_even[i]);\n    }\n  }\n  for (let i = 0; i < lst2_even.length; i++) {\n    if (lst2_even[i] % 2 === 0) {\n      even_lst2.push(lst2_even[i]);\n    }\n  }\n  let even_lst1_even = [];\n  let even_lst2_even = [];\n  for (let i = 0; i < even_lst1.length; i++) {\n    if (even_lst1[i] % 2 === 0) {\n      even_lst1_even.push(even_lst1[i]);\n    }\n  }\n  for (let i = 0; i < even_lst2.length; i++) {\n    if (even_lst2[i] % 2 === 0) {\n      even_lst2_even.push(even_lst2[i]);\n    }\n  }\n  let even_lst1_even_len = even_lst1_even.length;\n  let even_lst2_even_len = even_lst2_even.length;\n  let even_lst1_even_even = [];\n  let even_lst2_even_even = [];\n  for (let i = 0; i < even_lst1_even.length; i++) {\n    if (even_lst1_even[i] % 2 === 0) {\n      even_lst1_even_even.push(even_lst1_even[i]);\n    }\n  }\n  for (let i = 0; i < even_lst2_even.length; i++) {\n    if (even_lst2_even[i] % 2 === 0) {\n      even_lst2_even_even.push(even_lst2_even[i]);\n    }\n  }\n  let even_lst1_even_len_even = even_lst1_even_even.length;\n  let even_lst2_even_len_even = even_lst2_even_even.length;\n  let even_lst1_even_even_even = [];\n  let even_lst2_even_even_even = [];\n  for (let i = 0; i < even_lst1_even_even.length; i++) {\n    if (even_lst1_even_even[i] % 2 === 0) {\n      even_lst1_even_even_even.push(even_lst1_even_even[i]);\n    }\n  }\n  for (let i = 0; i < even_lst2_even_even.length; i++) {\n    if (even_lst2_even_even[i] % 2 === 0) {\n      even_lst2_even_even_even.push(even_lst2_even_even[i]);\n    }\n  }\n  let even_lst1_even_len_even_even = even_lst1_even_even_even.length;\n  let even_lst2_even_len_even_even = even_lst2_even_even_even.length;\n  let even_lst1_even_even_even_even = [];\n  let even_lst2_even_even_even_even = [];\n  for (let i = 0; i < even_lst1_even_even_even.length; i++) {\n    if (even_lst1_even_even_even[i] % 2 === 0) {\n      even_lst1_even_even_even_even.push(even_lst1_even_even_even[i]);\n    }\n  }\n  for (let i = 0; i < even_lst2_even_even_even.length; i++) {\n    if (even_lst2_even_even_even[i] % 2 === 0) {\n      even_lst2_even_even_even_even.push(even_lst2_even_even_even[i]);\n    }\n  }\n  let even_lst1_even_len_even_even_even = even_lst1_even_even_even_even.length;\n  let even_lst2_even_len_even_even_even = even_lst2_even_even_even_even.length;\n  let even_lst1_even_even_even_even_even = [];\n  let even_lst2_even_even_even_even_even = [];\n  for (let i = 0; i < even_lst1_even_even_even_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 3, "perturbed": true, "gc": "/*Given a string representing a outer space separated small letter letter, return a dictionary \n   of the letter with the most repeat and incorporate the correspond count. \n   If several letter have the like occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let histogram = {};\n  let letters = test.split('');\n  let letterCount = 0;\n  let letterCounts = [];\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 1;\n    } else {\n      histogram[letter]++;\n    }\n    if (letterCounts.indexOf(letter) === -1) {\n      letterCounts.push(letter);\n    }\n    letterCount++;\n  }\n  return histogram;\n};\n\nmodule.exports = histogram;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 3, "perturbed": true, "gc": "/*Task \n   We are given two string section s and c, you have to erase all the character in s that be equal to any fictional character in c\n   then match if the result chain be palindrome. \n   A string is call palindrome if it reads the same backward as forward. \n   You should return a tuple containing the resultant role drawstring and true / delusive for the bridle.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let result = [];\n  let isPalindrome = true;\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i] === c[j]) {\n      result.push(s[i]);\n      i++;\n      j--;\n    } else {\n      if (isPalindrome) {\n        result.push(s[i]);\n        isPalindrome = false;\n      }\n      i++;\n    }\n  }\n  if (isPalindrome) {\n    result.push(s[i]);\n  }\n  return [result.reverse().join(''), isPalindrome];\n};\n\nconst test = () => {\n  let s = \"abcde\";\n  let c = \"ae\";\n  let result = reverseDelete(s, c);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 3, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digit, return a list.\n   Each chemical element i of the end product should exist \" the numeral of odd elements in the \n   chain i of the stimulation. \" where all the i's should be substitute by the act \n   of leftover digits in the i'th chain of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const res = [];\n  let n = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let nn = 0;\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        nn++;\n      }\n    }\n    if (nn % 2 === 1) {\n      res.push(`the number of odd elements ${nn} the str${nn}ng ${str} of the ${nn}nput.`);\n    }\n    n += nn;\n  }\n  return res;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of integer nums, find the minimum sum of any non - empty bomber - array \n   of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of well. Each row represent a individual well, \n   and each 1 in a quarrel defend a individual unit of measurement of body of water. \n   Each well has a comparable bucket that can be use to educe body of water from it, \n   and all bucket have the same capacity.\n   Your job is to use the buckets to empty the well. \n   output signal the number of time you want to turn down the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const buckets = [];\n  for (let i = 0; i < rows; i++) {\n    buckets.push([]);\n    for (let j = 0; j < cols; j++) {\n      buckets[i].push(0);\n    }\n  }\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        let bucket = 0;\n        for (let k = 0; k < cols; k++) {\n          if (grid[i][k] === 1) {\n            bucket++;\n          }\n        }\n        buckets[i][j] = bucket;\n      }\n    }\n  }\n  let maxFill = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (buckets[i][j] > maxFill) {\n        maxFill = buckets[i][j];\n      }\n    }\n  }\n  return maxFill;\n};\n\nmodule.exports = maxFill;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non - negative integer accord to \n   act of one in their binary theatrical performance in ascend order. \n   For exchangeable numeral of ones, sort based on decimal value. \n\n   It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray2 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray3 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray4 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray5 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray6 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray7 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray8 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray9 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray10 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray11 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray12 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray13 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray14 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nconst sortArray15 = (arr) => {\n  let sortedArray = arr.slice(0);\n  sortedArray.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    } else {\n      return 0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 3, "perturbed": true, "gc": "/*Given a string s and a lifelike number n, you have been tasked to implement \n   a affair that return a list of all bible from chain s that contain precisely \n   n consonant, in order these quarrel look in the string s.\n   If the bowed stringed instrument s is empty then the function should return an empty list.\n   Note: you may assume the stimulation drawstring contains merely letter and distance.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let result = [];\n  let len = s.length;\n  let i = 0;\n  while (i < len) {\n    let j = i;\n    while (j < len && s[j] === s[i]) {\n      j++;\n    }\n    if (j - i < n) {\n      result.push(s.substring(i, j));\n    }\n    i = j;\n  }\n  return result;\n};\n\nmodule.exports = {\n  selectWords\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 3, "perturbed": true, "gc": "/*You are given a word. Your task is to detect the closest vowel that stand between \n   two consonant from the good english of the word (subject sensible). \n  \n   Vowels in the beginning and conclusion doesn't consider. Return empty string if you didn't \n   determine any vowel met the above condition. \n\n   You may assume that the give string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const vowelsCount = vowels.length\n  const wordLength = word.length\n  let minDistance = Number.MAX_SAFE_INTEGER\n  let minDistanceIndex = 0\n  let minDistanceIndex2 = 0\n  let minDistanceIndex3 = 0\n  let minDistanceIndex4 = 0\n  let minDistanceIndex5 = 0\n  let minDistanceIndex6 = 0\n  let minDistanceIndex7 = 0\n  let minDistanceIndex8 = 0\n  let minDistanceIndex9 = 0\n  let minDistanceIndex10 = 0\n  let minDistanceIndex11 = 0\n  let minDistanceIndex12 = 0\n  let minDistanceIndex13 = 0\n  let minDistanceIndex14 = 0\n  let minDistanceIndex15 = 0\n  let minDistanceIndex16 = 0\n  let minDistanceIndex17 = 0\n  let minDistanceIndex18 = 0\n  let minDistanceIndex19 = 0\n  let minDistanceIndex20 = 0\n  let minDistanceIndex21 = 0\n  let minDistanceIndex22 = 0\n  let minDistanceIndex23 = 0\n  let minDistanceIndex24 = 0\n  let minDistanceIndex25 = 0\n  let minDistanceIndex26 = 0\n  let minDistanceIndex27 = 0\n  let minDistanceIndex28 = 0\n  let minDistanceIndex29 = 0\n  let minDistanceIndex30 = 0\n  let minDistanceIndex31 = 0\n  let minDistanceIndex32 = 0\n  let minDistanceIndex33 = 0\n  let minDistanceIndex34 = 0\n  let minDistanceIndex35 = 0\n  let minDistanceIndex36 = 0\n  let minDistanceIndex37 = 0\n  let minDistanceIndex38 = 0\n  let minDistanceIndex39 = 0\n  let minDistanceIndex40 = 0\n  let minDistanceIndex41 = 0\n  let minDistanceIndex42 = 0\n  let minDistanceIndex43 = 0\n  let minDistanceIndex44 = 0\n  let minDistanceIndex45 = 0\n  let minDistanceIndex46 = 0\n  let minDistanceIndex47 = 0\n  let minDistanceIndex48 = 0\n  let minDistanceIndex49 = 0\n  let minDistanceIndex50 = 0\n  let minDistanceIndex51 = 0\n  let minDistanceIndex52 = 0\n  let minDistanceIndex53 = 0\n  let minDistanceIndex54 = 0\n  let minDistanceIndex55 = 0\n  let minDistanceIndex56 = 0\n  let minDistanceIndex57 = 0\n  let minDistanceIndex58 = 0\n  let minDistanceIndex59 = 0\n  let minDistanceIndex60 = 0\n  let minDistanceIndex61 = 0\n  let minDistanceIndex62 = 0\n  let minDistanceIndex63 = 0\n  let minDistanceIndex64 = 0\n  let minDistanceIndex65 = 0\n  let minDistanceIndex66 = 0\n  let minDistanceIndex67 = 0\n  let minDistanceIndex68 = 0\n  let minDistanceIndex69 = 0\n  let minDistanceIndex70 = 0\n  let minDistanceIndex71 = 0\n  let minDistanceIndex72 = 0\n  let minDistanceIndex73 = 0\n  let minDistanceIndex74 = 0\n  let minDistanceIndex75 = 0\n  let minDistanceIndex76 = 0\n  let minDistanceIndex77 = 0\n  let minDistanceIndex78 = 0\n  let minDistanceIndex79 = 0\n  let minDistanceIndex80 = 0\n  let minDistanceIndex81 = 0\n  let minDistanceIndex82 = 0\n  let minDistanceIndex83 = 0\n  let minDistanceIndex84 = 0\n  let minDistanceIndex85 = 0\n  let minDistanceIndex86 = 0\n  let minDistanceIndex87 = 0\n  let minDistanceIndex88 = 0\n  let minDistanceIndex89 = 0\n  let minDistanceIndex90 = 0\n  let minDistanceIndex91 = 0\n  let minDistanceIndex92 = 0\n  let minDistanceIndex93 = 0\n  let minDistanceIndex94 = 0\n  let minDistanceIndex95 = 0\n  let minDistanceIndex96 = 0\n  let minDistanceIndex97 = 0\n  let minDistanceIndex98 = 0\n  let minDistanceIndex99 = 0\n  let minDistanceIndex100 = 0\n  let minDistanceIndex101 = 0\n  let minDistanceIndex102 = 0\n  let minDistanceIndex103 = 0\n  let minDistanceIndex104 = 0\n  let minDistanceIndex105 = 0\n  let minDistanceIndex106 = 0\n  let minDistanceIndex107 = 0\n  let minDistanceIndex108 = 0\n  let minDistanceIndex109 = 0\n  let minDistanceIndex110 = 0\n  let minDistanceIndex111 = 0\n  let minDistanceIndex112 = 0\n  let minDistanceIndex113 = 0\n  let minDistanceIndex114 = 0\n  let minDistanceIndex115 = 0\n  let minDistanceIndex116 = 0\n  let minDistanceIndex117 = 0\n  let minDistanceIndex118 = 0\n  let minDistanceIndex119 = 0\n  let minDistanceIndex120 = 0\n  let minDistanceIndex121 = 0\n  let minDistanceIndex122 = 0\n  let minDistanceIndex123 = 0\n  let minDistanceIndex124 = 0\n  let minDistanceIndex125 = 0\n  let minDistanceIndex126 = 0\n  let minDistanceIndex127 = 0\n  let minDistanceIndex128 = 0\n  let minDistanceIndex129 = 0\n  let minDistanceIndex130 = 0\n  let minDistanceIndex131 = 0\n  let minDistanceIndex132 = 0\n  let minDistanceIndex133 = 0\n  let minDistanceIndex134 = 0\n  let minDistanceIndex135 = 0\n  let minDistanceIndex136 = 0\n  let minDistanceIndex137 = 0\n  let minDistanceIndex138 = 0\n  let minDistanceIndex139 = 0\n  let minDistanceIndex140 = 0\n  let minDistanceIndex141 = 0\n  let minDistanceIndex142 = 0\n  let minDistanceIndex143 = 0\n  let minDistanceIndex144 = 0\n  let minDistanceIndex145 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 3, "perturbed": true, "gc": "/* You are given a list of two strings, both string section consist of receptive \n   parenthesis' (' or cheeseparing parenthesis')' merely. \n   Your job is to match if it is potential to concatenate the two string in\n   some ordering, that the resulting drawstring will be good. \n   A drawstring S is consider to be good if and only if all parentheses in S \n   embody balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = true;\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i];\n    let l = str.length;\n    let j = 0;\n    while (j < l) {\n      if (str[j] === '(' || str[j] === ')') {\n        j++;\n      } else {\n        break;\n      }\n    }\n    if (j < l) {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 3, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple \n   strings of the same duration. Return nothing in font the stimulation list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) longest = strings[i];\n  }\n  return longest;\n};\n\n/*\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return '';\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of integer and a positive integer k, return a sorted list \n   of duration k with the maximum k issue in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((max, curr) => {\n    if (curr === -1) {\n      return curr;\n    }\n    if (curr === -2) {\n      return curr;\n    }\n    if (curr > max) {\n      return curr;\n    }\n    return max;\n  }, -2);\n  return arr.filter((curr) => {\n    if (curr === -1) {\n      return false;\n    }\n    if (curr === -2) {\n      return false;\n    }\n    if (curr > max) {\n      return false;\n    }\n    return true;\n  });\n};\n\nmodule.exports = maximum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 3, "perturbed": true, "gc": "/*Given a non - empty list of integers, return the sum of all of the curious element that cost in even situation.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nmodule.exports = solution;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 3, "perturbed": true, "gc": "/*\n  Given a non - empty array of integers arr and an integer k, return\n   the union of the element with at most two digit from the inaugural k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nexport default addElements\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd number in collatz succession. \n\n   The Collatz conjecture is a speculation in mathematics that refer a succession defined \n   as follows: start with any plus integer n. Then each condition is obtain from the \n   former terminus as follows: if the former condition is even, the following terminus is one half of \n   the former terminus. If the previous term is leftover, the next term is 3 clock time the former \n   condition plus 1. The guess is that no matter what value of n, the succession will always strive 1. \n\n   Note: \n       1. Collatz(1) is [ 1 ]. \n       2. returned list screen in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let arr = [];\n  let prev = n;\n  let curr = n;\n  while (curr!== 1) {\n    if (curr % 2 === 0) {\n      arr.push(curr);\n    }\n    prev = curr;\n    curr = curr / 2;\n  }\n  return arr;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 3, "perturbed": true, "gc": "/*You have to write a affair which validates a give date chain and \n   recurrence truthful if the date embody valid differently delusive. \n   The date is valid if all of the following convention embody satisfied: \n   1. The date drawstring is not empty. \n   2. The number of day is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or gamey than 30 days for month 4,6,9,11. And, the issue of day is not less than 1 or high than 29 for the month 2. \n   3. The months should not be less than 1 or high than 12. \n   4. The date should equal in the format: mm - dd - yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateChain = date.split('-');\n  const day = dateChain[2];\n  const month = dateChain[1];\n  const year = dateChain[0];\n\n  const dayValid = day.length === 1 && day >= 1 && day <= 31;\n  const monthValid = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid = year.length === 4 && year >= 1 && year <= 2040;\n\n  const dayValid2 = day.length === 1 && day >= 1 && day <= 29;\n  const monthValid2 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid2 = year.length === 4 && year >= 1 && year <= 29;\n\n  const dayValid3 = day.length === 1 && day >= 1 && day <= 30;\n  const monthValid3 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid3 = year.length === 4 && year >= 1 && year <= 30;\n\n  const dayValid4 = day.length === 1 && day >= 1 && day <= 29;\n  const monthValid4 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid4 = year.length === 4 && year >= 1 && year <= 29;\n\n  const dayValid5 = day.length === 1 && day >= 1 && day <= 31;\n  const monthValid5 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid5 = year.length === 4 && year >= 1 && year <= 2040;\n\n  const dayValid6 = day.length === 1 && day >= 1 && day <= 30;\n  const monthValid6 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid6 = year.length === 4 && year >= 1 && year <= 30;\n\n  const dayValid7 = day.length === 1 && day >= 1 && day <= 29;\n  const monthValid7 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid7 = year.length === 4 && year >= 1 && year <= 29;\n\n  const dayValid8 = day.length === 1 && day >= 1 && day <= 31;\n  const monthValid8 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid8 = year.length === 4 && year >= 1 && year <= 2040;\n\n  const dayValid9 = day.length === 1 && day >= 1 && day <= 30;\n  const monthValid9 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid9 = year.length === 4 && year >= 1 && year <= 30;\n\n  const dayValid10 = day.length === 1 && day >= 1 && day <= 29;\n  const monthValid10 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid10 = year.length === 4 && year >= 1 && year <= 29;\n\n  const dayValid11 = day.length === 1 && day >= 1 && day <= 31;\n  const monthValid11 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid11 = year.length === 4 && year >= 1 && year <= 2040;\n\n  const dayValid12 = day.length === 1 && day >= 1 && day <= 30;\n  const monthValid12 = month.length === 3 && month >= 1 && month <= 12;\n  const yearValid12 = year.length === 4 && year >= 1 && year <= 30;\n\n  return dayValid && monthValid && yearValid;\n};\n\nmodule.exports = validDate;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 3, "perturbed": true, "gc": "/* Given a string of lyric, return a list of words separate on whitespace, if no whitespaces exist in the text you \n   should divide on comma',' if no commas exists you should return the issue of lower - lawsuit letter with odd club in the \n   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = [];\n  let last = 0;\n  let current = 0;\n  let currentWord = \"\";\n  let currentWordLength = 0;\n  let currentWordStart = 0;\n  let currentWordEnd = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWordEndLength = 0;\n  let currentWord", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return whether or not they are screen \n   in ascending club. If list have more than 1 extra of the same \n   numeral, return false. wear no minus act and only integer.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0;\n  let j = lst.length - 1;\n  let k = 0;\n  let flag = true;\n  while (i < j) {\n    if (lst[i] > lst[j]) {\n      flag = false;\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (flag) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 3, "perturbed": true, "gc": "/*You are given two intervals, \n   where each interval is a pair of integer. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return \"NO\"\n  }\n  if (interval1.start >= interval2.start && interval1.end <= interval2.end) {\n    return \"YES\"\n  }\n  if (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n    return \"NO\"\n  }\n  return \"NO\"\n}\n\nmodule.exports = intersection\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 3, "perturbed": true, "gc": "/*\n  You are given an array arr of integer and you need to return\n   sum of magnitudes of integer reproduce by merchandise of all augury \n   of each numeral in the array, represented by 1, -1 or 0. \n   Note: return nothing for empty arr.\n\n   case:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) {\n    return null;\n  }\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 3, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N column (N > = 2) and a positive integer k, \n   each cellular telephone of the grid check a value. Every integer in the stove [ 1, N * N ] \n   inclusive appear exactly once on the cell of the grid.\n\n   You have to determine the minimal path of duration k in the grid. You can begin \n   from any cell, and in each dance step you can move to any of the neighbor cell, \n   in early words, you can sound to cell which share an boundary with you current \n   cellular telephone. \n   Please notice that a way of duration k means visiting exactly k cells (not \n   inevitably discrete). \n   You CANNOT become off the grid.\n   A path A (of length k) is consider less than a path B (of length k) if \n   after reach the rate lists of the values on the cellular telephone that A and boron start \n   through (let's address them lst_A and lst_B), lst_A is lexicographically less \n   than lst_B, in early words, there exist an integer exponent i (1 < = i < = k)\n   such that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n   lst_A[j ] = lst_B[j ]. \n   It is guarantee that the answer is alone. \n   Return an ordered list of the values on the cells that the minimum way go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const lst = []\n  const visited = new Set()\n  const dfs = (grid, k, i, j) => {\n    if (i === k) {\n      lst.push(grid[i][j])\n      return\n    }\n    if (visited.has(grid[i][j])) return\n    visited.add(grid[i][j])\n    for (let i = 0; i < k; i++) {\n      if (i === 0) {\n        dfs(grid, k, i + 1, j)\n      } else {\n        dfs(grid, k, i, j + 1)\n      }\n    }\n  }\n  dfs(grid, k, 0, 0)\n  return lst\n}\n\nexport default minPath\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 3, "perturbed": true, "gc": "/* Return a greatest coarse divisor of two integer a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n  if (a === 1 || b === 1) {\n    return 1;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a % b === 0) {\n    return b;\n  }\n  if (b % a === 0) {\n    return a;\n  }\n  return greatestCommonDivisor(a % b, b % a);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 3, "perturbed": true, "gc": "/*Everyone knows Fibonacci succession, it was studied deeply by mathematicians in \n   the final couple century. However, what citizenry don't acknowledge is Tribonacci sequence. \n   Tribonacci sequence is define by the recurrence: \n   tri(1) = 3 \n   tri(n) = 1 + n / 2, if n is even. \n   tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = [1, 3, 2, 8];\n  let b = [];\n  let c = [];\n  let d = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < n) {\n    if (j < k) {\n      a[i] = a[j] + a[k];\n    } else if (j == k) {\n      a[i] = a[j];\n    } else {\n      a[i] = a[j] + a[k];\n    }\n    if (a[i] > n) {\n      a[i] = a[i] - n;\n    }\n    if (a[i] < 0) {\n      a[i] = a[i] + n;\n    }\n    if (a[i] == 0) {\n      b.push(a[i]);\n    } else {\n      c.push(a[i]);\n    }\n    j++;\n    k++;\n    i++;\n  }\n  return b;\n};\n\nconst test = (n) => {\n  let result = tri(n);\n  console.log(result);\n};\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 3, "perturbed": true, "gc": "/*Given a positive integer n, return the product of the odd digits.\n   Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let digits = 0\n  while (n > 0) {\n    digits += n % 10\n    n = n / 10\n  }\n  return digits\n}\n\nmodule.exports = digits\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 3, "perturbed": true, "gc": "/*\n  Create a function that take a string as input which contain merely straight bracket. \n   The affair should return true if and merely if there cost a valid subsequence of bracket \n   where at least one bracket in the subsequence is nested. \n   isNested('[[]]') ➞ dependable \n   isNested('[]]]]]]][[[[[]') ➞ assumed \n   isNested('[][]') ➞ false \n   isNested('[]') ➞ delusive \n   isNested('[[][]]') ➞ true \n   isNested('[[]][[') ➞ dependable \n   * / \n const isNested = (string) = > {\n  let brackets = 0;\n  let openBracket = 0;\n  let closedBracket = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' && string[i + 1] === ']') {\n      brackets++;\n      openBracket++;\n    } else if (string[i] === ']') {\n      brackets--;\n      closedBracket++;\n    }\n  }\n  return brackets === 0 && openBracket === closedBracket;\n}\n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / \n\n// * / ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*You are given a list of numbers. \n   You necessitate to return the sum of squared number in the give list,\n   round each chemical element in the list to the upper int(Ceiling) foremost.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares16 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares17 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares18 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares19 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares20 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst sumSquares21 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 3, "perturbed": true, "gc": "/* Create a function that return true if the final quality \n   of a give string embody an alphabetic character and is not \n   a share of a word, and fake differently. \n   Note: \" news \" is a group of characters separated by distance.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let lastChar = txt.slice(-1);\n  let lastCharIsALetter = false;\n  if (lastChar.match(/[a-zA-Z]/)) {\n    lastCharIsALetter = true;\n  }\n  return lastCharIsALetter;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord2 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord3 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord4 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord5 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord6 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord7 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord8 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord9 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord = false;\n  for (let i = 0; i < wordLength; i++) {\n    if (word[i] === txt) {\n      shareOfWord = true;\n      break;\n    }\n  }\n  return shareOfWord;\n};\n\n/**\n * Check if the given string is a share of a word.\n * @param {string} txt\n * @returns {boolean}\n */\nconst isShareOfWord10 = (txt) => {\n  let word = txt.split(\" \");\n  let wordLength = word.length;\n  let shareOfWord", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 3, "perturbed": true, "gc": "/*Create a function which return the largest exponent of an component which \n   be not capital than or adequate to the component immediately precede it. If \n   no such chemical element exist then return -1. The given array will not check \n   duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = 0;\n  let maxIndex = -1;\n  let i = 0;\n  while (i < arr.length) {\n    let current = arr[i];\n    let j = i + 1;\n    while (j < arr.length) {\n      let next = arr[j];\n      if (current!== next && current.toUpperCase()!== next.toUpperCase()) {\n        break;\n      }\n      j++;\n    }\n    if (j < arr.length) {\n      let currentExponent = current.split('.')[0].length;\n      let nextExponent = next.split('.')[0].length;\n      if (currentExponent > nextExponent) {\n        max = Math.max(max, currentExponent);\n        maxIndex = i;\n      }\n    }\n    i = j;\n  }\n  return maxIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 3, "perturbed": true, "gc": "/* Create a function that return a tuple (a, b), where 'a' be \n   the bombastic of damaging integer, and 'b' is the small \n   of incontrovertible integer in a list.\n   If there is no negative or positive integer, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return [null, null];\n  }\n  if (lst.length === 1) {\n    return [null, lst[0]];\n  }\n  let max = lst[0];\n  let min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 3, "perturbed": true, "gc": "/*\n  Create a function that take integers, float, or chain constitute \n   actual number, and render the larger variable in its give varying character. \n   Return nothing if the values embody adequate. \n   Note: If a real phone number is map as a chain, the float decimal point might equal. or, \n\n   compareOne(1, 2.5) ➞ 2.5 \n   compareOne(1, \" 2,3 \") ➞ \" 2,3 \" \n   compareOne(\"5,1\", \" 6 \") ➞ \" 6 \" \n   compareOne(\"1\", 1) ➞ null \n   * / \n const compareOne = (a, b) = > {\n  if (a === b) {\n   return a;\n  }\n  if (isNaN(a) || isNaN(b)) {\n   return null;\n  }\n  if (a === 0 || b === 0) {\n   return null;\n  }\n  if (a > b) {\n   return a;\n  }\n  if (a < b) {\n   return b;\n  }\n  return null;\n }\n */\n\nconst compareOne = (a, b) => {\n  if (a === b) {\n    return a;\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if (a === 0 || b === 0) {\n    return null;\n  }\n  if (a > b) {\n    return a;\n  }\n  if (a < b) {\n    return b;\n  }\n  return null;\n};\n\nmodule.exports = compareOne;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 3, "perturbed": true, "gc": "/*Evaluate whether the given act n can be written as the union of precisely 4 convinced even number\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return false;\n  }\n  return n % 4 === 0;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isEqualToSumEven2 = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return sum % 2 === 0;\n};\n\nmodule.exports = {\n  isEqualToSumEven,\n  isEqualToSumEven2,\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 3, "perturbed": true, "gc": "/*The Brazilian factorial is specify as: \n   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n   where n > 0 \n\n   For exemplar:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    throw new Error(\"The special factorial of a negative number is not defined\");\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 6;\n  }\n  if (n === 4) {\n    return 24;\n  }\n  if (n === 5) {\n    return 120;\n  }\n  if (n === 6) {\n    return 720;\n  }\n  if (n === 7) {\n    return 5040;\n  }\n  if (n === 8) {\n    return 40320;\n  }\n  if (n === 9) {\n    return 362880;\n  }\n  if (n === 10) {\n    return 3628800;\n  }\n  if (n === 11) {\n    return 39916800;\n  }\n  if (n === 12) {\n    return 479001600;\n  }\n  if (n === 13) {\n    return 6227020800;\n  }\n  if (n === 14) {\n    return 87178291200;\n  }\n  if (n === 15) {\n    return 1307674368000;\n  }\n  if (n === 16) {\n    return 20922789888000;\n  }\n  if (n === 17) {\n    return 355687428096000;\n  }\n  if (n === 18) {\n    return 6402373705728000;\n  }\n  if (n === 19) {\n    return 121645100408832000;\n  }\n  if (n === 20) {\n    return 2432902008176640000;\n  }\n  if (n === 21) {\n    return 51090942171709440000;\n  }\n  if (n === 22) {\n    return 1124000727777607680000;\n  }\n  if (n === 23) {\n    return 25852016738884976640000;\n  }\n  if (n === 24) {\n    return 620448401733239439360000;\n  }\n  if (n === 25) {\n    return 1220703125162738069600000;\n  }\n  if (n === 26) {\n    return 2961413592846848624000000;\n  }\n  if (n === 27) {\n    return 707426164006201376000000;\n  }\n  if (n === 28) {\n    return 18148954370553940500000;\n  }\n  if (n === 29) {\n    return 408971702517092200000000;\n  }\n  if (n === 30) {\n    return 105553116266507584000000;\n  }\n  if (n === 31) {\n    return 25780425130956738400000;\n  }\n  if (n === 32) {\n    return 62299138195341378400000;\n  }\n  if (n === 33) {\n    return 138547990912634352000000;\n  }\n  if (n === 34) {\n    return 29014280250003204000000;\n  }\n  if (n === 35) {\n    return 660511529185597424000000;\n  }\n  if (n === 36) {\n    return 146059604164089100800000;\n  }\n  if (n === 37) {\n    return 393700700592601376000000;\n  }\n  if (n === 38) {\n    return 10888869450418352160000000;\n  }\n  if (n === 39) {\n    return 2977486832812194416000000;\n  }\n  if (n === 40) {\n    return 82228385315271022406400000;\n  }\n  if (n === 41) {\n    return 2183836e+7;\n  }\n  if (n === 42) {\n    return 5497558e+7;\n  }\n  if (n === 43) {\n    return 1e+8;\n  }\n  if (n === 44) {\n    return 3e+8;\n  }\n  if (n === 45) {\n    return 6e+8;\n  }\n  if (n === 46) {\n    return 1e+9;\n  }\n  if (n === 47) {\n    return 3e+9;\n  }\n  if (n === 48) {\n    return 6e+9;\n  }\n  if (n === 49) {\n    return 1e+10;\n  }\n  if (n === 50) {\n    return 3e+10;\n  }\n  if (n === 51) {\n    return 6e+10;\n  }\n  if (n === 52) {\n    return 1e+11;\n  }\n  if (n === 53) {\n    return 3e+11;\n  }\n  if (n === 54) {\n    return 6e+11;\n  }\n  if (n === 55) {\n    return 1e+12;\n  }\n  if (n === 56) {\n    return 3e+12;\n  }\n  if (n === 57) {\n    return 6e+12;\n  }\n  if (n === 58) {\n    return 1e+13;\n  }\n  if (n === 59) {\n    return 3e+13;\n  }\n  if (n === 60) {\n    return 6e+13;\n  }\n  if (n === 61) {\n    return 1e+14;\n  }\n  if (n === 62) {\n    return 3e+14;\n  }\n  if (n === 63) {\n    return 6e+14;\n  }\n  if (n === 64) {\n    return 1e+15;\n  }\n  if", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 3, "perturbed": false, "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n\n  const prefixes = [];\n  let current = string;\n  let i = 0;\n\n  while (i < current.length) {\n    prefixes.push(current.substring(0, i));\n    current = current.substring(i);\n    i = 0;\n  }\n\n  return prefixes;\n};\n\nmodule.exports = allPrefixes;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n   and if a chain have more than 2 straight space, \n   then substitute all straight spaces with - \n  \n   fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, \"_\")\n}\n\nmodule.exports = fixSpaces\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which take a string represent a file's name, and return \n  ' Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 3, "perturbed": true, "gc": "/*Create a function which take a string represent a file's name, and return \n 'Yes' if the the file's name be valid, and returns' No' otherwise. \n   A file's name is study to exist valid if and entirely if all the following conditions \n   are meet: \n   - There should not cost more than three digits (' 0'-'9') in the file's name. \n   - The file's name contains exactly one department of transportation'.' \n   - The substring before the dot should not be empty, and it get down with a letter from \n   the latin alphapet ('a'-'z' and' A'-'Z'). \n   - The substring after the point should constitute one of these: [' txt',' exe',' dll' ]\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let file_name_check = file_name.toLowerCase();\n  let file_name_check_length = file_name_check.length;\n  let file_name_check_digit = file_name_check.match(/[0-9]/g);\n  let file_name_check_dot = file_name_check.match(/\\./g);\n  let file_name_check_letter = file_name_check.match(/[a-zA-Z]/g);\n  let file_name_check_substring = file_name_check.match(/[a-zA-Z0-9]/g);\n  let file_name_check_substring_length = file_name_check_substring.length;\n  let file_name_check_substring_letter = file_name_check_substring.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_length = file_name_check_substring_letter.length;\n  let file_name_check_substring_letter_letter = file_name_check_substring_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_length = file_name_check_substring_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter = file_name_check_substring_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_length = file_name_check_substring_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_length = file_name_check_substring_letter_letter_letter_letter_letter.length;\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_letter_letter = file_name_check_substring_letter_letter_letter_letter_letter.match(/[a-zA-Z]/g);\n  let file_name_check_substring_letter_letter_letter_letter_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 3, "perturbed": true, "gc": "/*\"\n  This function will take a list of integer. For all entries in the list, the function shall square the integer entrance if its exponent is a \n   multiple of 3 and will cube the integer entrance if its index exist a multiple of 4 and not a multiple of 3. The function will not \n   deepen the entry in the list whose index are not a multiple of 3 or 4. The routine shall then return the union of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst sumSquares12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a string represent a sentence,\n   the sentence contains some password discriminate by a quad, \n   and you receive to return a chain that control the words from the original sentence,\n   whose lengths be premier numbers, \n   the club of the words in the new chain should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split('');\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length === 1) {\n      result.push(word);\n    } else {\n      const wordLength = word.length;\n      const isPrime = isPrime(wordLength);\n      if (isPrime) {\n        result.push(word);\n      } else {\n        const prime = getPrime(wordLength);\n        for (let j = 0; j < prime; j++) {\n          result.push(word);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  if (num % 3 === 0) {\n    return false;\n  }\n  if (num % 5 === 0) {\n    return false;\n  }\n  if (num % 7 === 0) {\n    return false;\n  }\n  if (num % 11 === 0) {\n    return false;\n  }\n  if (num % 13 === 0) {\n    return false;\n  }\n  if (num % 17 === 0) {\n    return false;\n  }\n  if (num % 19 === 0) {\n    return false;\n  }\n  if (num % 23 === 0) {\n    return false;\n  }\n  if (num % 29 === 0) {\n    return false;\n  }\n  if (num % 31 === 0) {\n    return false;\n  }\n  if (num % 37 === 0) {\n    return false;\n  }\n  if (num % 41 === 0) {\n    return false;\n  }\n  if (num % 43 === 0) {\n    return false;\n  }\n  if (num % 47 === 0) {\n    return false;\n  }\n  if (num % 53 === 0) {\n    return false;\n  }\n  if (num % 59 === 0) {\n    return false;\n  }\n  if (num % 61 === 0) {\n    return false;\n  }\n  return true;\n};\n\nconst getPrime = (num) => {\n  if (num < 2) {\n    return 0;\n  }\n  if (num % 2 === 0) {\n    return 2;\n  }\n  if (num % 3 === 0) {\n    return 3;\n  }\n  if (num % 5 === 0) {\n    return 5;\n  }\n  if (num % 7 === 0) {\n    return 7;\n  }\n  if (num % 11 === 0) {\n    return 11;\n  }\n  if (num % 13 === 0) {\n    return 13;\n  }\n  if (num % 17 === 0) {\n    return 17;\n  }\n  if (num % 19 === 0) {\n    return 19;\n  }\n  if (num % 23 === 0) {\n    return 23;\n  }\n  if (num % 29 === 0) {\n    return 29;\n  }\n  if (num % 31 === 0) {\n    return 31;\n  }\n  if (num % 37 === 0) {\n    return 37;\n  }\n  if (num % 41 === 0) {\n    return 41;\n  }\n  if (num % 43 === 0) {\n    return 43;\n  }\n  if (num % 47 === 0) {\n    return 47;\n  }\n  if (num % 53 === 0) {\n    return 53;\n  }\n  if (num % 59 === 0) {\n    return 59;\n  }\n  if (num % 61 === 0) {\n    return 61;\n  }\n  return 0;\n};\n\nconst printResult = (result) => {\n  console.log(result);\n};\n\nconst main = () => {\n  const sentence = 'This is a test';\n  const result = wordsInSentence(sentence);\n  printResult(result);\n};\n\nmain();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 3, "perturbed": true, "gc": "/*Your task is to implement a affair that will simplify the expression \n   x * n. The routine render genuine if x * n measure to a solid number and assumed \n   differently. Both x and n, are string representation of a fraction, and own the follow format, \n   < numerator>/<denominator > where both numerator and denominator are cocksure whole numbers. \n\n   You can assume that x, and n are valid fraction, and do not induce zero as denominator. \n\n   simplify(\"1/5\", \" 5/1 \") = dependable \n   simplify(\"1/6\", \" 2/1 \") = assumed \n   simplify(\"7/10\", \" 10/2 \") = false \n   * / \n const simplify = (x, n) = > {\n   const x = x.split(\"/\");\n   const n = n.split(\"/\");\n   const xn = x.length > 1? x.slice(0, -1) : x;\n   const nn = n.length > 1? n.slice(0, -1) : n;\n   const xn_ = xn.length > 1? xn.slice(1) : xn;\n   const nn_ = nn.length > 1? nn.slice(1) : nn;\n   const xn_n = xn_ + \"/\" + nn_;\n   const xn_n_ = xn_n.split(\"/\");\n   const xn_n_n = xn_n_.length > 1? xn_n_.slice(1) : xn_n_;\n   const xn_n_n_ = xn_n_n.split(\"/\");\n   const xn_n_n_n = xn_n_n_.length > 1? xn_n_n_.slice(1) : xn_n_n_;\n   const xn_n_n_n_ = xn_n_n_n.split(\"/\");\n   const xn_n_n_n_n = xn_n_n_n_.length > 1? xn_n_n_n_.slice(1) : xn_n_n_n_;\n   const xn_n_n_n_n_ = xn_n_n_n_n.split(\"/\");\n   const xn_n_n_n_n_n = xn_n_n_n_n_.length > 1? xn_n_n_n_n_.slice(1) : xn_n_n_n_n_;\n   const xn_n_n_n_n_n_ = xn_n_n_n_n_n.split(\"/\");\n   const xn_n_n_n_n_n_n = xn_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_ = xn_n_n_n_n_n_n.split(\"/\");\n   const xn_n_n_n_n_n_n_n = xn_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_n_.slice(1) : xn_n_n_n_n_n_n_n_;\n   const xn_n_n_n_n_n_n_n_n_n_n_n_n_n_ = xn_n_n_n_n_n_n_n_n_.length > 1? xn_n_n_n_n_n_n_n_n_.slice(1)", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function which screen the given list of integer \n   in ascend ordering according to the kernel of their digits. \n   bill: if there cost several items with like kernel of their digits, \n   club them based on their index in master list.\n\n   For exemplar:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let result = [];\n  let sorted = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  let flag = 0;\n  while (i < nums.length) {\n    if (flag === 0) {\n      temp = nums[i];\n      sorted.push(temp);\n      flag = 1;\n    } else {\n      if (nums[i] === sorted[k]) {\n        sorted[k] = nums[i];\n      } else {\n        k++;\n        sorted.push(nums[i]);\n      }\n    }\n    i++;\n  }\n  for (i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n  return result;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 3, "perturbed": true, "gc": "/*Write a function that take an array of number as stimulation and recurrence \n   the act of element in the array that constitute capital than 10 and both \n   first and last finger of a act are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      if (nums[i] % 2 === 1 && nums[i] % 3 === 1 && nums[i] % 5 === 1 && nums[i] % 7 === 1 && nums[i] % 9 === 1) {\n        result++;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = specialFilter;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of distance n.\n       For each i (1 ≤ i ≤ n), the value of a[i ] = i * i - i + 1. \n       Return the numeral of triples (a[i ], a[j ], a[k ]) of a where i < j < k, \n   and a[i ] + a[j ] + a[k ] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.reduce((acc, curr) => {\n    const [i, j, k] = curr.split('');\n    if (i < j && j < k) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n};\n\nmodule.exports = getMaxTriples;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 3, "perturbed": true, "gc": "/* There are eight planets in our solar arrangement: the closerst to the Sun \n   be Mercury, the future one is Venus, then Earth, Mars, Jupiter, Saturn, \n   Uranus, Neptune. \n   Write a affair that takes two satellite names as strings planet1 and planet2.\n   The routine should return a tuple containing all satellite whose orbit are \n   located between the scope of planet1 and the orbit of planet2, sorted by \n   the proximity to the sun. \n   The function should return an empty tuple if planet1 or planet2\n   are not right satellite names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [...new Set([...new Set(planet1),...new Set(planet2)])]\n  const distances = planets.map(planet => {\n    const distance = new Set(planet.split(\" \"))\n    const distanceSet = new Set(distance)\n    return {\n      distanceSet,\n      distance,\n      distanceSet.size,\n      distance.size\n    }\n  })\n  const sorted = distances.sort((a, b) => {\n    return a.distanceSet.size - b.distanceSet.size\n  })\n  const sortedDistances = sorted.map(d => d.distance)\n  const sortedDistancesSet = sortedDistances.map(d => d.distanceSet)\n  const sortedDistancesSetSorted = sortedDistancesSet.sort()\n  return sortedDistancesSetSorted.map(d => d.distance)\n}\n\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Venus\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Jupiter\", \"Uranus\"))\nconsole.log(bf(\"Jupiter\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Mars\"))\nconsole.log(bf(\"Earth\", \"Jupiter\"))\nconsole.log(bf", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 3, "perturbed": true, "gc": "/*Write a function that accept a list of strings as a argument, \n   erase the string that hold leftover length from it, \n   and return the result list with a sorted order, \n   The list is constantly a list of string and never an array of number, \n   and it may contain extra. \n   The order of the list should be ascending by distance of each word, and you \n   should return the list sorted by that rule. \n   If two parole induce the same distance, sort the list alphabetically. \n   The function should return a list of strings in classify order. \n   You may assume that all discussion will induce the same duration.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [];\n  let sorted = [];\n  let sortedLength = 0;\n  let sortedIndex = 0;\n  let sortedIndex2 = 0;\n  let sortedIndex3 = 0;\n  let sortedIndex4 = 0;\n  let sortedIndex5 = 0;\n  let sortedIndex6 = 0;\n  let sortedIndex7 = 0;\n  let sortedIndex8 = 0;\n  let sortedIndex9 = 0;\n  let sortedIndex10 = 0;\n  let sortedIndex11 = 0;\n  let sortedIndex12 = 0;\n  let sortedIndex13 = 0;\n  let sortedIndex14 = 0;\n  let sortedIndex15 = 0;\n  let sortedIndex16 = 0;\n  let sortedIndex17 = 0;\n  let sortedIndex18 = 0;\n  let sortedIndex19 = 0;\n  let sortedIndex20 = 0;\n  let sortedIndex21 = 0;\n  let sortedIndex22 = 0;\n  let sortedIndex23 = 0;\n  let sortedIndex24 = 0;\n  let sortedIndex25 = 0;\n  let sortedIndex26 = 0;\n  let sortedIndex27 = 0;\n  let sortedIndex28 = 0;\n  let sortedIndex29 = 0;\n  let sortedIndex30 = 0;\n  let sortedIndex31 = 0;\n  let sortedIndex32 = 0;\n  let sortedIndex33 = 0;\n  let sortedIndex34 = 0;\n  let sortedIndex35 = 0;\n  let sortedIndex36 = 0;\n  let sortedIndex37 = 0;\n  let sortedIndex38 = 0;\n  let sortedIndex39 = 0;\n  let sortedIndex40 = 0;\n  let sortedIndex41 = 0;\n  let sortedIndex42 = 0;\n  let sortedIndex43 = 0;\n  let sortedIndex44 = 0;\n  let sortedIndex45 = 0;\n  let sortedIndex46 = 0;\n  let sortedIndex47 = 0;\n  let sortedIndex48 = 0;\n  let sortedIndex49 = 0;\n  let sortedIndex50 = 0;\n  let sortedIndex51 = 0;\n  let sortedIndex52 = 0;\n  let sortedIndex53 = 0;\n  let sortedIndex54 = 0;\n  let sortedIndex55 = 0;\n  let sortedIndex56 = 0;\n  let sortedIndex57 = 0;\n  let sortedIndex58 = 0;\n  let sortedIndex59 = 0;\n  let sortedIndex60 = 0;\n  let sortedIndex61 = 0;\n  let sortedIndex62 = 0;\n  let sortedIndex63 = 0;\n  let sortedIndex64 = 0;\n  let sortedIndex65 = 0;\n  let sortedIndex66 = 0;\n  let sortedIndex67 = 0;\n  let sortedIndex68 = 0;\n  let sortedIndex69 = 0;\n  let sortedIndex70 = 0;\n  let sortedIndex71 = 0;\n  let sortedIndex72 = 0;\n  let sortedIndex73 = 0;\n  let sortedIndex74 = 0;\n  let sortedIndex75 = 0;\n  let sortedIndex76 = 0;\n  let sortedIndex77 = 0;\n  let sortedIndex78 = 0;\n  let sortedIndex79 = 0;\n  let sortedIndex80 = 0;\n  let sortedIndex81 = 0;\n  let sortedIndex82 = 0;\n  let sortedIndex83 = 0;\n  let sortedIndex84 = 0;\n  let sortedIndex85 = 0;\n  let sortedIndex86 = 0;\n  let sortedIndex87 = 0;\n  let sortedIndex88 = 0;\n  let sortedIndex89 = 0;\n  let sortedIndex90 = 0;\n  let sortedIndex91 = 0;\n  let sortedIndex92 = 0;\n  let sortedIndex93 = 0;\n  let sortedIndex94 = 0;\n  let sortedIndex95 = 0;\n  let sortedIndex96 = 0;\n  let sortedIndex97 = 0;\n  let sortedIndex98 = 0;\n  let sortedIndex99 = 0;\n  let sortedIndex100 = 0;\n  let sortedIndex101 = 0;\n  let sortedIndex102 = 0;\n  let sortedIndex103 = 0;\n  let sortedIndex104 = 0;\n  let sortedIndex105 = 0;\n  let sortedIndex106 = 0;\n  let sortedIndex107 = 0;\n  let sortedIndex108 = 0;\n  let sortedIndex109 = 0;\n  let sortedIndex110 = 0;\n  let sortedIndex111 = 0;\n  let sortedIndex112 = 0;\n  let sortedIndex113 = 0;\n  let sortedIndex114 = 0;\n  let sortedIndex115 = 0;\n  let sortedIndex116 = 0;\n  let sortedIndex117 = 0;\n  let sortedIndex118 = 0;\n  let sortedIndex119 = 0;\n  let sortedIndex120 = 0;\n  let sortedIndex121 = 0;\n  let sortedIndex122 = 0;\n  let sortedIndex123 = 0;\n  let sortedIndex124 = 0;\n  let sortedIndex125 = 0;\n  let sortedIndex126 = 0;\n  let sortedIndex127 = 0;\n  let sortedIndex128 = 0;\n  let sortedIndex129 = 0;\n  let sortedIndex130 = 0;\n  let sortedIndex131 = 0;\n  let sortedIndex132 = 0;\n  let sortedIndex133 = 0;\n  let sortedIndex134 = 0;\n  let sortedIndex135 = 0;\n  let sortedIndex136 = 0;\n  let sortedIndex137 = 0;\n  let sortedIndex138 = 0;\n  let sortedIndex139 = 0;\n  let sortedIndex140 = 0;\n  let sortedIndex141 = 0;\n  let sortedIndex142 = 0;\n  let sortedIndex143 = 0;\n  let sortedIndex144 = 0;\n  let sortedIndex145 =", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/15", "prompt": "/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 3, "perturbed": true, "gc": "/* Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence10 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence12 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 = (n) => {\n  let s = ''\n  for (let i = 0; i < n; i++) {\n    s += `${i} `\n  }\n  return s\n}\n\n/*\n  Return a string incorporate space - subtend numeral get down from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence14 = (n) => {\n  let s = ''\n  for (let i =", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 3, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n   a prime numeral and should return the value of y differently.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst test = (n, x, y) => {\n  console.log(`${xOrY(n, x, y)}`);\n};\n\ntest(7, 34, 12);\ntest(15, 8, 5);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 3, "perturbed": true, "gc": "/* Given a list of numbers, return the kernel of squares of the number \n   in the list that be curious. Ignore number that be damaging or not integer. \n   doubleTheDifference([1, 3, 2, 0 ]) = = 1 + 9 + 0 + 0 = 10 \n   doubleTheDifference([-1, -2, 0 ]) = = 0 \n   doubleTheDifference([9, -2 ]) = = 81 \n   doubleTheDifference([0]) = = 0 \n   If the input list is empty, return 0. \n   * / \n const doubleTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x * x;\n  }\n  return result;\n}\n\n// * /\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the numbers in the list that be curious. Ignore number that be damaging or not integer. \nconst sumTheDifference = (lst) = > {\n  if (lst.length == 0) return 0;\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let x = lst[i];\n    if (isNaN(x) || x < 0) continue;\n    result += x;\n  }\n  return result;\n}\n\n// Given a list of numbers, return the sum of the", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 3, "perturbed": true, "gc": "/*I think we all remember that impression when the solution of some long - expect \n   consequence is finally know. The spirit and thoughts you have at that consequence are \n   definitely deserving noting down and compare. \n   Your undertaking is to specify if a person correctly estimate the resultant role of a number of matches. \n   You are given two array of score and guesses of adequate distance, where each index shows a catch. \n   Return an array of the same length denote how far off each guess was. If they have guessed correctly, \n   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = game[0],\n    guesses = game[1],\n    guessIndex = guesses.indexOf(guess);\n\n  if (guessIndex === -1) {\n    return [-1, -1];\n  }\n\n  let scoreIndex = game[0].indexOf(score);\n\n  if (scoreIndex === -1) {\n    return [-1, -1];\n  }\n\n  let result = Math.abs(guess - score);\n\n  return [result, scoreIndex];\n};\n\nmodule.exports = compare;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 3, "perturbed": true, "gc": "/*You will be given the name of a course (a string) and a list of extensions.\n   The extensions are to be used to load extra class to the course. The \n   strength of the elongation is as follows: lease CAP cost the number of the uppercase \n   letter in the propagation's name, and get SM be the number of small letter letters \n   in the extension's name, the military capability is given by the fraction CAP - SM. \n   You should recover the solid extension and return a drawstring in this \n   format: ClassName. StrongestExtensionName. \n   If there are two or more extensions with the same military capability, you should \n   choose the one that comes foremost in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let extension_name = '';\n  let extension_strength = 0;\n  let extension_count = 0;\n  let extension_cap = 0;\n  let extension_sm = 0;\n  let extension_count_cap = 0;\n  let extension_count_sm = 0;\n  let extension_cap_count = 0;\n  let extension_sm_count = 0;\n  let extension_cap_sm_count = 0;\n  let extension_cap_sm_count_cap = 0;\n  let extension_cap_sm_count_sm = 0;\n  let extension_cap_sm_count_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap = 0;\n  let extension_cap_sm_count_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm_cap_sm = 0;\n  let extension_cap_sm_count_sm_cap_sm_cap_sm_cap", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 3, "perturbed": true, "gc": "/*You are given 2 words. You necessitate to return true if the second discussion or any of its rotation be a substring in the inaugural parole \n   cycpatternCheck(\"abcd\",\"abd\") = > false \n   cycpatternCheck(\"hello\",\"ell\") = > true \n   cycpatternCheck(\"whassup\",\"psus\") = > assumed \n   cycpatternCheck(\"abab\",\"baa\") = > genuine \n   cycpatternCheck(\"efef\",\"eeff\") = > false \n   cycpatternCheck(\"himenss\",\"simen\") = > on-key \n   * / \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n     } else {\n       j++;\n     }\n   }\n   return (i == a.length && j == b.length);\n }\n \n const cycpatternCheck = (a, b) = > {\n   let a = a.split(\"\");\n   let b = b.split(\"\");\n   let i = 0;\n   let j = 0;\n   while (i < a.length && j < b.length) {\n     if (a[i] == b[j]) {\n       i++;\n       j++;\n     } else if (a[i] < b[j]) {\n       i++;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 3, "perturbed": true, "gc": "/*Given an integer. return a tuple that have the number of even and leftover digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0;\n  let leftOver = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    }\n    num = num / 2;\n  }\n  return [even, leftOver];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a chain, \n   and return it in small letter. \n   restriction: 1 < = num < = 1000 \n\n   Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let miniRoman = '';\n  let num = number;\n  let i = 0;\n  while (num > 0) {\n    miniRoman = num % 10 + miniRoman;\n    num = Math.floor(num / 10);\n    i++;\n  }\n  return miniRoman;\n};\n\nconst main = () => {\n  console.log(intToMiniRoman(19));\n  console.log(intToMiniRoman(152));\n  console.log(intToMiniRoman(426));\n};\n\nif (module === require.main) {\n  main();\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 3, "perturbed": true, "gc": "/*\n Given the lengths of the three side of a triangle. render dependable if the three \n   side form a justly - angled triangulum, false otherwise. \n   A correctly - angled triangulum is a triangle in which one slant is right slant or \n   90 academic degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return a === b && b === c;\n}\n\nexport default rightAngleTriangle;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 3, "perturbed": true, "gc": "/*Write a function that accept a list of strings. \n   The list contain unlike words. Return the news with maximum numeral \n   of unique character. If multiple strings have maximum phone number of alone \n   characters, return the one which fall first in lexicographical orderliness. \n\n   findMax([\"name\", \" of \", \" chain \" ]) = = = \" chain \" \n   findMax([\"name\", \" enam \", \" game \" ]) = = = \" enam \" \n   findMax([\"aaaaaaa\", \" bb \", \" milliliter \" ]) = = = \" \" aaaaaaa \" \n   * / \n const findMax = (words) = > {\n   let max = words[0];\n   let maxIndex = 0;\n   for (let i = 1; i < words.length; i++) {\n     let cur = words[i];\n     if (cur.length > max.length) {\n       max = cur;\n       maxIndex = i;\n     }\n     else if (cur.length === max.length && cur < max) {\n       max = cur;\n       maxIndex = i;\n     }\n   }\n   return max;\n }\n*/\n\nconst findMax = (words) => {\n  let max = words[0];\n  let maxIndex = 0;\n  for (let i = 1; i < words.length; i++) {\n    let cur = words[i];\n    if (cur.length > max.length) {\n      max = cur;\n      maxIndex = i;\n    }\n    else if (cur.length === max.length && cur < max) {\n      max = cur;\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\nmodule.exports = findMax;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 3, "perturbed": true, "gc": "/*\n  You're a hungry lapin, and you already have eaten a certain number of carrot, \n   but nowadays you need to eat more carrot to dispatch the sidereal day's meal. \n   you should return an array of [ total number of eat carrots after your meal, \n                                   the number of carrot left after your meal ] \n   if there are not enough remaining carrot, you will eat all remaining carrot, but will even be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // write your code here\n  let result = [];\n  let left = remaining;\n  while (left > 0) {\n    let eatNum = Math.min(left, need);\n    result.push(eatNum);\n    left -= eatNum;\n  }\n  return result;\n};\n\n// console.log(eat(5, 6, 10));\n// console.log(eat(4, 8, 9));\n// console.log(eat(1, 10, 10));\n// console.log(eat(2, 11, 5));\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 3, "perturbed": true, "gc": "/* Given a string, find out how many distinct characters (regardless of casing) does it dwell of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let char = '';\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char!== char.toLowerCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 3, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The inaugural list has basic algebra operation, and \n   the second list cost a list of integer. practice the two give lists to build the algebric \n   expression and return the evaluation of this formulation. \n\n   The basic algebra operation: \n   Addition (+) \n   Subtraction (-) \n   generation (*) \n   Floor division (//) \n   Exponentiation (* * ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  while (i < operand.length - 1) {\n    let op = operator[i];\n    let op1 = operand[i];\n    let op2 = operand[i + 1];\n    if (op === '+') {\n      result += op1 * op2;\n    } else if (op === '-') {\n      result -= op1 * op2;\n    } else if (op === '*') {\n      result *= op1 * op2;\n    } else if (op === '/') {\n      result /= op1 * op2;\n    } else if (op === '//') {\n      result = Math.floor(result / op1 * op2);\n    } else if (op === '*') {\n      result *= op1 * op2;\n    }\n    i += 2;\n  }\n  return result;\n};\n\nmodule.exports = doAlgebra;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n   differently restrain it as it be. \n   If the chain contain no letters, reverse the drawstring. \n   The affair should return the resulted drawstring.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.toLowerCase();\n  let result = \"\";\n  let i = 0;\n  while (i < str.length) {\n    let ch = str[i];\n    if (ch.match(/[a-z]/)) {\n      result += ch.toUpperCase();\n    } else {\n      result += ch.toLowerCase();\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(solve(\"a\"));\nconsole.log(", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hashish equivalent string. \n   If 'text' is an empty chain, return nothing.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return '';\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n};\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 3, "perturbed": true, "gc": "/*\n  Given two positive integer a and b, return the even digits between a\n   and b, in ascending decree.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i % 10);\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n  ' o' - whole eminence, last four meter \n  ' o|' - half note, last two beatnik \n  ' .|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument representing melodious bill in a particular ASCII format. \n   Your undertaking is to parse this string and return list of integers represent to how many beats does each \n   not final. \n\n   Here is a caption: \n 'o' - whole eminence, last four meter \n 'o|' - half note, last two beatnik \n  '.|' - quater eminence, survive one pulse\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = [];\n  let current_beat = 0;\n  let current_beat_count = 0;\n  let current_note_count = 0;\n  let current_note_beat = 0;\n  let current_note_beat_count = 0;\n  let current_note_beat_count_count = 0;\n  let current_note_beat_count_count_count = 0;\n  let current_note_beat_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0;\n  let current_note_beat_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 3, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n      i += substring.length\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes2 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes3 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes4 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes5 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes6 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes7 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes8 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes9 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) === substring) {\n      count++\n    } else {\n      i++\n    }\n  }\n  return count\n}\n\n/* Find how many times a given substring can be found in the original string. Count overlap subject.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes10 = (string, substring) => {\n  let count = 0\n  let i = 0\n  while (i < string.length) {\n    if (string.substring(i, i + substring.length) ===", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 3, "perturbed": true, "gc": "/* Input is a space - specify string of numberals from' zero' to' nine'. \n   Valid choice are' zero',' one',' two',' three',' four',' five',' six',' seven',' eight' and' nine'. \n   render the string with numbers screen from smallest to big\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let str = '';\n  for (let i = 0; i < numbers.length; i++) {\n    str += numbers[i];\n  }\n  return str;\n};\n\nmodule.exports = sortNumbers;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 3, "perturbed": true, "gc": "/* Given a positive float point number, it can be disintegrate into \n   and integer region (largest integer minor than give number) and decimals \n   (leftover part constantly smaller than 1). \n\n   reelect the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number < 0) {\n    return number\n  }\n  if (number >= 1) {\n    return number\n  }\n  const numberAsInt = Math.floor(number)\n  const numberAsDecimal = number - numberAsInt\n  return numberAsInt\n}\n\nexport default truncateNumber\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 3, "perturbed": true, "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    }\n    if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    }\n    if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    }\n    if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  let closest = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      closest.push(numbers[i]);\n    }\n    if (numbers[i] > max) {\n      closest.push(numbers[i]);\n    }\n  }\n  return closest;\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the close to each \n   early and return them in order (modest numeral, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 3, "perturbed": true, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit)\n  }\n  return result\n}\n\n/**\n * Given a list of numbers, apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToBombastic = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const bombastic = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * bombastic)\n  }\n  return result\n}\n\n/**\n * Given a list of numbers, apply a linear transform to that list,\n   such that the small number will become 0 and the bombastic will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitAndBombastic = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const range = max - min\n  const unit = range / numbers.length\n  const bombastic = range / numbers.length\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i] * unit)\n  }\n  return result\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToBombastic,\n  rescaleToUnitAndBombastic\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 3, "perturbed": false, "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' && isFinite(value);\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/**\n  * Filter given list of any python values only for booleans\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for null\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterNull = (values) => {\n  return values.filter((value) => {\n    return value === null;\n  });\n};\n\n/**\n  * Filter given list of any python values only for undefined\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterUndefined = (values) => {\n  return values.filter((value) => {\n    return value === undefined;\n  });\n};\n\n/**\n  * Filter given list of any python values only for arrays\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterArrays = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'array';\n  });\n};\n\n/**\n  * Filter given list of any python values only for functions\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'function';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeys = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValues = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctions = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctionsAndNull = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctionsAndUndefined = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctionsAndUndefinedAndNull = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctionsAndUndefinedAndNullAndNull = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctionsAndUndefinedAndNullAndNullAndUndefined = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctionsAndUndefinedAndNullAndNullAndUndefinedAndNull = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\n/**\n  * Filter given list of any python values only for objects\n  * @param {Array} values\n  * @returns {Array}\n  */\nconst filterObjectsWithKeysAndValuesAndFunctionsAndUndefinedAndNullAndNullAndUndefinedAndNullAndUndefined = (values) => {\n  return values.filter((value)", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 3, "perturbed": true, "gc": "/* Return length of give string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n  */\nexport const strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n  * Return length of give string\n  * @param {string} string\n  * @returns {number}\n  * @example\n  * const strlen = require('strlen');\n  * const str = 'abc';\n  * console.log(strlen(str));\n  * // 3\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 3, "perturbed": true, "gc": "/* For a given number n, detect the largest issue that separate n evenly, humble than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 1;\n  let largestDivisor = 1;\n  let largestDivisorIndex = 0;\n  let largestDivisorIndex2 = 0;\n  let largestDivisorIndex3 = 0;\n  let largestDivisorIndex4 = 0;\n  let largestDivisorIndex5 = 0;\n  let largestDivisorIndex6 = 0;\n  let largestDivisorIndex7 = 0;\n  let largestDivisorIndex8 = 0;\n  let largestDivisorIndex9 = 0;\n  let largestDivisorIndex10 = 0;\n  let largestDivisorIndex11 = 0;\n  let largestDivisorIndex12 = 0;\n  let largestDivisorIndex13 = 0;\n  let largestDivisorIndex14 = 0;\n  let largestDivisorIndex15 = 0;\n  let largestDivisorIndex16 = 0;\n  let largestDivisorIndex17 = 0;\n  let largestDivisorIndex18 = 0;\n  let largestDivisorIndex19 = 0;\n  let largestDivisorIndex20 = 0;\n  let largestDivisorIndex21 = 0;\n  let largestDivisorIndex22 = 0;\n  let largestDivisorIndex23 = 0;\n  let largestDivisorIndex24 = 0;\n  let largestDivisorIndex25 = 0;\n  let largestDivisorIndex26 = 0;\n  let largestDivisorIndex27 = 0;\n  let largestDivisorIndex28 = 0;\n  let largestDivisorIndex29 = 0;\n  let largestDivisorIndex30 = 0;\n  let largestDivisorIndex31 = 0;\n  let largestDivisorIndex32 = 0;\n  let largestDivisorIndex33 = 0;\n  let largestDivisorIndex34 = 0;\n  let largestDivisorIndex35 = 0;\n  let largestDivisorIndex36 = 0;\n  let largestDivisorIndex37 = 0;\n  let largestDivisorIndex38 = 0;\n  let largestDivisorIndex39 = 0;\n  let largestDivisorIndex40 = 0;\n  let largestDivisorIndex41 = 0;\n  let largestDivisorIndex42 = 0;\n  let largestDivisorIndex43 = 0;\n  let largestDivisorIndex44 = 0;\n  let largestDivisorIndex45 = 0;\n  let largestDivisorIndex46 = 0;\n  let largestDivisorIndex47 = 0;\n  let largestDivisorIndex48 = 0;\n  let largestDivisorIndex49 = 0;\n  let largestDivisorIndex50 = 0;\n  let largestDivisorIndex51 = 0;\n  let largestDivisorIndex52 = 0;\n  let largestDivisorIndex53 = 0;\n  let largestDivisorIndex54 = 0;\n  let largestDivisorIndex55 = 0;\n  let largestDivisorIndex56 = 0;\n  let largestDivisorIndex57 = 0;\n  let largestDivisorIndex58 = 0;\n  let largestDivisorIndex59 = 0;\n  let largestDivisorIndex60 = 0;\n  let largestDivisorIndex61 = 0;\n  let largestDivisorIndex62 = 0;\n  let largestDivisorIndex63 = 0;\n  let largestDivisorIndex64 = 0;\n  let largestDivisorIndex65 = 0;\n  let largestDivisorIndex66 = 0;\n  let largestDivisorIndex67 = 0;\n  let largestDivisorIndex68 = 0;\n  let largestDivisorIndex69 = 0;\n  let largestDivisorIndex70 = 0;\n  let largestDivisorIndex71 = 0;\n  let largestDivisorIndex72 = 0;\n  let largestDivisorIndex73 = 0;\n  let largestDivisorIndex74 = 0;\n  let largestDivisorIndex75 = 0;\n  let largestDivisorIndex76 = 0;\n  let largestDivisorIndex77 = 0;\n  let largestDivisorIndex78 = 0;\n  let largestDivisorIndex79 = 0;\n  let largestDivisorIndex80 = 0;\n  let largestDivisorIndex81 = 0;\n  let largestDivisorIndex82 = 0;\n  let largestDivisorIndex83 = 0;\n  let largestDivisorIndex84 = 0;\n  let largestDivisorIndex85 = 0;\n  let largestDivisorIndex86 = 0;\n  let largestDivisorIndex87 = 0;\n  let largestDivisorIndex88 = 0;\n  let largestDivisorIndex89 = 0;\n  let largestDivisorIndex90 = 0;\n  let largestDivisorIndex91 = 0;\n  let largestDivisorIndex92 = 0;\n  let largestDivisorIndex93 = 0;\n  let largestDivisorIndex94 = 0;\n  let largestDivisorIndex95 = 0;\n  let largestDivisorIndex96 = 0;\n  let largestDivisorIndex97 = 0;\n  let largestDivisorIndex98 = 0;\n  let largestDivisorIndex99 = 0;\n  let largestDivisorIndex100 = 0;\n  let largestDivisorIndex101 = 0;\n  let largestDivisorIndex102 = 0;\n  let largestDivisorIndex103 = 0;\n  let largestDivisorIndex104 = 0;\n  let largestDivisorIndex105 = 0;\n  let largestDivisorIndex106 = 0;\n  let largestDivisorIndex107 = 0;\n  let largestDivisorIndex108 = 0;\n  let largestDivisorIndex109 = 0;\n  let largestDivisorIndex110 = 0;\n  let largestDivisorIndex111 = 0;\n  let largestDivisorIndex112 = 0;\n  let largestDivisorIndex113 = 0;\n  let largestDivisorIndex114 = 0;\n  let largestDivisorIndex115 = 0;\n  let largestDivisorIndex116 = 0;\n  let largestDivisorIndex117 = 0;\n  let largestDivisorIndex118 = 0;\n  let largestDivisorIndex119 = 0;\n  let largestDivisorIndex120 = 0;\n  let largestDivisorIndex121 = 0;\n  let largestDivisorIndex122 = 0;\n  let largestDivisorIndex123", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 3, "perturbed": true, "gc": "/* Return list of prime factor of given integer in the orderliness from small to big. \n   Each of the gene should be listed numeral of time corresponding to how many fourth dimension it appeares in factorization. \n   input signal numeral should be equal to the intersection of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 3, "perturbed": true, "gc": "/* From a list of integers, remove all component that occur more than once. \n   sustain ordering of elements entrust the like as in the stimulation.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates3 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates4 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates5 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates6 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates7 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates8 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates9 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates10 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates11 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates12 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates13 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates14 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates15 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;\n    }\n  }\n  return result;\n};\n\nconst removeDuplicates16 = (numbers) => {\n  let result = [];\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (index === 0 || numbers[i]!== numbers[index]) {\n      result.push(numbers[i]);\n      index++;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 3, "perturbed": true, "gc": "/* For a given string, throw lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/**\n  * Returns a string with the first letter capitalized.\n  * @param {string} string\n  * @returns {string}\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n  * Returns a string with the first letter lowercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst lowercase = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/**\n  * Returns a string with the first letter uppercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst uppercase = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/**\n  * Returns a string with the first letter lowercase and capitalized.\n  * @param {string} string\n  * @returns {string}\n  */\nconst capitalizeAndLowercase = (string) => {\n  return capitalize(lowercase(string));\n};\n\n/**\n  * Returns a string with the first letter uppercase and capitalized.\n  * @param {string} string\n  * @returns {string}\n  */\nconst capitalizeAndUppercase = (string) => {\n  return capitalize(uppercase(string));\n};\n\n/**\n  * Returns a string with the first letter uppercase and lowercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst lowercaseAndUppercase = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/**\n  * Returns a string with the first letter uppercase and lowercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst lowercaseAndCapitalize = (string) => {\n  return lowercase(capitalize(string));\n};\n\n/**\n  * Returns a string with the first letter uppercase and lowercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst lowercaseAndUppercase = (string) => {\n  return lowercase(uppercase(string));\n};\n\n/**\n  * Returns a string with the first letter uppercase and lowercase.\n  * @param {string} string\n  * @returns {string}\n  */\nconst lowercaseAndCapitalize = (string) => {\n  return lowercase(capitalize(string));\n};\n\nmodule.exports = {\n  flipCase,\n  capitalize,\n  lowercase,\n  uppercase,\n  capitalizeAndLowercase,\n  capitalizeAndUppercase,\n  lowercaseAndUppercase,\n  lowercaseAndCapitalize,\n  lowercaseAndUppercase,\n  lowercaseAndCapitalize\n};\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 3, "perturbed": true, "gc": "/* Concatenate list of strings into a single bowed stringed instrument\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, string) => acc + string, '');\n};\n\n/*\n  Convert a string into a list of vowels\n  >>> vowels('a')\n  ['a']\n  >>> vowels('ab')\n  ['a', 'b']\n  >>> vowels('abc')\n  ['a', 'b', 'c']\n  */\nconst vowels = (string) => {\n  return string.split('').filter((char) => char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u');\n};\n\n/*\n  Convert a string into a list of consonants\n  >>> consonants('a')\n  ['a']\n  >>> consonants('ab')\n  ['b']\n  >>> consonants('abc')\n  ['c']\n  */\nconst consonants = (string) => {\n  return string.split('').filter((char) => char!== 'a' && char!== 'e' && char!== 'i' && char!== 'o' && char!== 'u');\n};\n\n/*\n  Convert a string into a list of vowels and consonants\n  >>> vowelsAndConsonants('a')\n  ['a']\n  >>> vowelsAndConsonants('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonants('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonants = (string) => {\n  return vowels(string).concat(consonants(string));\n};\n\n/*\n  Convert a string into a list of vowels and consonants and letters\n  >>> vowelsAndConsonants('a')\n  ['a']\n  >>> vowelsAndConsonants('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonants('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonantsAndLetters = (string) => {\n  return vowelsAndConsonants(string).concat(letters(string));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  >>> vowelsAndConsonantsAndLetters('a')\n  ['a']\n  >>> vowelsAndConsonantsAndLetters('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonantsAndLetters('abc')\n  ['a', 'b', 'c']\n  */\nconst letters = (string) => {\n  return string.split('').filter((char) => char.match(/[a-z]/));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  >>> vowelsAndConsonantsAndLetters('a')\n  ['a']\n  >>> vowelsAndConsonantsAndLetters('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonantsAndLetters('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonantsAndLetters = (string) => {\n  return vowels(string).concat(consonants(string)).concat(letters(string));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  >>> vowelsAndConsonantsAndLetters('a')\n  ['a']\n  >>> vowelsAndConsonantsAndLetters('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonantsAndLetters('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonantsAndLetters = (string) => {\n  return vowels(string).concat(consonants(string)).concat(letters(string));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  >>> vowelsAndConsonantsAndLetters('a')\n  ['a']\n  >>> vowelsAndConsonantsAndLetters('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonantsAndLetters('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonantsAndLetters = (string) => {\n  return vowels(string).concat(consonants(string)).concat(letters(string));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  >>> vowelsAndConsonantsAndLetters('a')\n  ['a']\n  >>> vowelsAndConsonantsAndLetters('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonantsAndLetters('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonantsAndLetters = (string) => {\n  return vowels(string).concat(consonants(string)).concat(letters(string));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  >>> vowelsAndConsonantsAndLetters('a')\n  ['a']\n  >>> vowelsAndConsonantsAndLetters('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonantsAndLetters('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonantsAndLetters = (string) => {\n  return vowels(string).concat(consonants(string)).concat(letters(string));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  >>> vowelsAndConsonantsAndLetters('a')\n  ['a']\n  >>> vowelsAndConsonantsAndLetters('ab')\n  ['a', 'b']\n  >>> vowelsAndConsonantsAndLetters('abc')\n  ['a', 'b', 'c']\n  */\nconst vowelsAndConsonantsAndLetters = (string) => {\n  return vowels(string).concat(consonants(string)).concat(letters(string));\n};\n\n/*\n  Convert a string into a list of vowels, consonants and letters\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 3, "perturbed": true, "gc": "/* Filter an input list of strings only for one that start with a give prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for one that end with a give suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByContains = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContains([], 'a')\n  []\n  >>> filterByContains(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByStartsWith = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.startsWith(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByStartsWith([], 'a')\n  []\n  >>> filterByStartsWith(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByEndsWith = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.endsWith(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByEndsWith([], 'a')\n  []\n  >>> filterByEndsWith(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByContainsAny = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContainsAny([], 'a')\n  []\n  >>> filterByContainsAny(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByContainsAll = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByContainsAllAny = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContainsAll([], 'a')\n  []\n  >>> filterByContainsAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByContainsAnyAll = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContainsAnyAll([], 'a')\n  []\n  >>> filterByContainsAnyAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByContainsAnyAllAny = (strings, substring) => {\n  if (strings.length === 0) {\n    return [];\n  }\n  if (strings.length === 1) {\n    return [strings[0]];\n  }\n  return strings.filter(s => s.includes(substring));\n};\n\n/* Filter an input list of strings only for one that contains a given substring.\n  >>> filterByContainsAnyAll([], 'a')\n  []\n  >>> filterByContainsAnyAll(['abc', 'bcd', 'cde', 'array'], 'd')\n  ['array']\n  */\nconst filterByContainsAnyAllAnyAll = (", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 3, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with \n   zero balance. Your undertaking is to detect if at any period the balance of history fallls below zero, and \n   at that item function should return on-key. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance < 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst aboveZero = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance > 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance2 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance3 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance4 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance5 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance6 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance7 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance8 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance9 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance10 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  >>> aboveZero([1, 2, 3])\n  false\n  >>> aboveZero([1, 2, -4, 5])\n  true\n  */\nconst zeroBalance11 = (operations) => {\n  let balance = 0;\n  let i = 0;\n  while (i < operations.length) {\n    balance += operations[i];\n    if (balance === 0) {\n      return true;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 3, "perturbed": true, "gc": "/*Return only convinced numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/**\n  * Returns the list of numbers in the list, but only those that are\n  * positive.\n  * @param {Array} l The list of numbers to filter.\n  * @returns {Array} The list of positive numbers in the list.\n  * @example\n  * const getPositive = require('getPositive');\n  * getPositive([-1, 2, -4, 5, 6])\n  * // => [2, 5, 6]\n  * getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * // => [5, 3, 9, 123, 1]\n  */\nconst getPositiveList = (l) => {\n  return getPositive(l);\n};\n\nmodule.exports = {\n  getPositive,\n  getPositiveList\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 3, "perturbed": true, "gc": "/*Return true if a give number be premier, and assumed differently.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    if (n % (i + 2) === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n};\n\nmodule.exports = isPrime;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 3, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficient xs at point x.\n   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n   * / \n const poly = (xs, x) = > { \n   return xs.reduce((prev, item, index) = > { \n     return prev + item * Math.pow(x, index);\n   }, 0); \n } \n\n / * \n   xs are coefficients of a polynomial. \n   findZero receive x such that poly(x) = 0. \n   findZero returns merely only zero distributor point, even if there are many. \n   Moreover, findZero only take list xs have even number of coefficient \n   and largest non zero coefficient as it guarantee \n   a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const max = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const min = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeff = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeff = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndex = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndex = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus1 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus1 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus2 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus2 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus3 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus3 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus4 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus4 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus5 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus5 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus6 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus6 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus7 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus7 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus8 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus8 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus9 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus9 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus10 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus10 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus11 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus11 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus12 = xs.reduce((prev, item, index) => {\n    return prev > item? prev : item;\n  }, 0);\n  const minCoeffIndexPlus12 = xs.reduce((prev, item, index) => {\n    return prev < item? prev : item;\n  }, 0);\n  const maxCoeffIndexPlus13 = xs.reduce((prev, item, index) => {\n    return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 3, "perturbed": true, "gc": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the indicies that equal not divisible by three, while its value at the indicies that be divisible by three are equal \n   to the values of the represent indicies of l, but classify.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird2 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird3 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird4 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird5 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird6 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird7 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird8 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird9 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird10 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird11 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird12 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length && l[j] % 3 === 0) {\n      j += 3\n    }\n    if (j > i) {\n      l2.push(l.slice(i, j))\n      i = j\n    }\n  }\n  return l2\n}\n\nconst sortThird13 = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    let j = i\n    while (j < l.length &&", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 3, "perturbed": true, "gc": "/*Return sorted unique component in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  let i = 0;\n  while (i < l.length) {\n    if (l[i]!== l[i + 1]) {\n      result.push(l[i]);\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = unique;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 3, "perturbed": true, "gc": "/*Return maximum component in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return 0;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 3, "perturbed": true, "gc": "/*Return the number of multiplication the digit 7 appear in integer less than n which cost divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  while (n > 0) {\n    if (n % 11 === 0 && n % 13 === 0) {\n      console.log(`${i} ${n}`);\n    } else if (n % 11 === 0) {\n      console.log(`${i} ${n}`);\n    } else if (n % 13 === 0) {\n      console.log(`${i} ${n}`);\n    } else {\n      console.log(`${i} ${n}`);\n    }\n    n = n - 1;\n    i++;\n  }\n};\n\nfizzBuzz(78);\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 3, "perturbed": true, "gc": "/*This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[i] === l[j]) {\n      j++;\n    }\n    if (j - i >= 2) {\n      l2.push(l[i]);\n      i = j;\n    } else {\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven2 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[i] === l[j]) {\n      j++;\n    }\n    if (j - i >= 2) {\n      l2.push(l[i]);\n      i = j;\n    } else {\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven3 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[i] === l[j]) {\n      j++;\n    }\n    if (j - i >= 2) {\n      l2.push(l[i]);\n      i = j;\n    } else {\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven4 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[i] === l[j]) {\n      j++;\n    }\n    if (j - i >= 2) {\n      l2.push(l[i]);\n      i = j;\n    } else {\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven5 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[i] === l[j]) {\n      j++;\n    }\n    if (j - i >= 2) {\n      l2.push(l[i]);\n      i = j;\n    } else {\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven6 = (l) => {\n  let l2 = [];\n  let i = 0;\n  while (i < l.length) {\n    let j = i + 1;\n    while (j < l.length && l[i] === l[j]) {\n      j++;\n    }\n    if (j - i >= 2) {\n      l2.push(l[i]);\n      i = j;\n    } else {\n      l2.push(l[i]);\n      i++;\n    }\n  }\n  return l2;\n};\n\n/*\n  This function takes a list l and return a list l' such that \n   l' is identical to l in the leftover indicies, while its value at the even indicies embody adequate \n   to the value of the even indicies of l, but classify.\n  >>> sortEven([1, 2, 3])\n  [1", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 3, "perturbed": true, "gc": "/*\n  returns encoded bowed stringed instrument by cycling groups of three character. \n   * / \n const encodeCyclic = (s) = > { \n   volt-ampere groups = [ ], groups2 = [ ]; \n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) { \n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   } \n   for (const group of groups) { \n     if (group.length = = 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   } \n   return groups2.join('');\n}\n\n/*\n   takes as input chain encode with encode_cyclic affair. Returns decode bowed stringed instrument. \n   * / \n const decodeCyclic = (s) = > {\n   volt-ampere groups = [ ], groups2 = [ ];\n   for (lease i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n     groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n   }\n   for (const group of groups) {\n     if (group.length == 3) \n       groups2.push(group.slice(1) + group[0]);\n     else \n       groups2.push(group);\n   }\n   return groups2.join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order. \n   * / \n const reverse = (s) = > {\n   return s.split('').reverse().join('');\n}\n*/\n\n/*\n   takes as input a string and returns a string with the same length but with the same characters in reverse order.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 3, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const fib = primeFib(n - 1);\n  const fibNext = primeFib(n - 2);\n  return fib + fibNext;\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNext = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const fib = primeFibNext(n - 1);\n  const fibNext = primeFibNext(n - 2);\n  return fib + fibNext;\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNextNext = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const fib = primeFibNextNext(n - 1);\n  const fibNext = primeFibNextNext(n - 2);\n  const fibNextNext = primeFibNextNext(n - 3);\n  return fib + fibNext + fibNextNext;\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNextNextNext = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const fib = primeFibNextNextNext(n - 1);\n  const fibNext = primeFibNextNextNext(n - 2);\n  const fibNextNext = primeFibNextNextNext(n - 3);\n  const fibNextNextNext = primeFibNextNextNext(n - 4);\n  return fib + fibNext + fibNextNext + fibNextNextNext;\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNextNextNextNext = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const fib = primeFibNextNextNextNext(n - 1);\n  const fibNext = primeFibNextNextNextNext(n - 2);\n  const fibNextNext = primeFibNextNextNextNext(n - 3);\n  const fibNextNextNext = primeFibNextNextNextNext(n - 4);\n  const fibNextNextNextNext = primeFibNextNextNextNext(n - 5);\n  return fib + fibNext + fibNextNext + fibNextNextNext + fibNextNextNextNext;\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNextNextNextNextNext = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const fib = primeFibNextNextNextNextNext(n - 1);\n  const fibNext = primeFibNextNextNextNextNext(n - 2);\n  const fibNextNext = primeFibNextNextNextNextNext(n - 3);\n  const fibNextNextNext = primeFibNextNextNextNextNext(n - 4);\n  const fibNextNextNextNext = primeFibNextNextNextNextNext(n - 5);\n  const fibNextNextNextNextNext = primeFibNextNextNextNextNext(n - 6);\n  return fib + fibNext + fibNextNext + fibNextNextNext + fibNextNextNextNext + fibNextNextNextNextNext;\n};\n\n/*\n  primeFib returns n-th number that be a Fibonacci number and it's besides choice.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFibNextNextNextNextNextNext = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  const fib = primeFibNextNextNextNextNextNext(n - 1);\n  const fibNext = primeFibNextNextNextNextNextNext(n - 2);\n  const fibNextNext = primeFibNextNextNextNextNextNext(n - 3);\n  const fibNextNextNext = primeFibNextNextNextNextNextNext(n - 4);\n  const fibNextNextNextNext = primeFibNextNextNextNextNextNext(n - 5);\n  const fibNextNextNextNextNext = primeFibNextNextNextNextNextNext(n - 6);\n  const fibNextNextNextNextNextNext = primeFibNextNextNextNextNextNext(n - 7);\n  return fib + fibNext + fibNextNext + fibNextNextNext + fibNextNextNextNext + fibNextNextNextNextNext + fibNextNextNextNextNextNext;\n};\n\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 3, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation \n   around the mean of this dataset. \n   Mean Absolute Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Standard Deviation \n   around the mean of this dataset. \n   Standard Deviation is the average absolute remainder between each \n   component and a centerpoint (mean in this subject ): \n   SD = average | x - x_mean |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - mean));\n  return mean(deviations);\n};\n\n/*\n  For a given list of input numbers, calculate Median \n   around the mean of this dataset. \n   Median is the middle value of a sorted list of numbers. \n   >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (numbers) => {\n  const sorted = sort(numbers);\n  return sorted[Math.floor(sorted.length / 2)];\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, 4.0])\n  3\n  */\nconst uniqueValues = (numbers) => {\n  return map(numbers, (x) => x).length;\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, 4.0])\n  3\n  */\nconst uniqueValuesIncludingNaN = (numbers) => {\n  return uniqueValues(numbers).filter((x) => x!== NaN);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingNaNAndInfinity = (numbers) => {\n  return uniqueValuesIncludingNaN(numbers).filter((x) => x!== Infinity);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingInfinity = (numbers) => {\n  return uniqueValues(numbers).filter((x) => x === Infinity);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingNaNAndInfinityAndZero = (numbers) => {\n  return uniqueValuesIncludingNaNAndInfinity(numbers).filter((x) => x!== 0);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingInfinityAndZero = (numbers) => {\n  return uniqueValues(numbers).filter((x) => x === 0);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingNaNAndInfinityAndZero = (numbers) => {\n  return uniqueValuesIncludingNaNAndInfinity(numbers).filter((x) => x!== 0 && x!== Infinity);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingInfinityAndZero = (numbers) => {\n  return uniqueValues(numbers).filter((x) => x === 0 || x === Infinity);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingNaNAndInfinityAndZeroAndNaN = (numbers) => {\n  return uniqueValuesIncludingNaNAndInfinity(numbers).filter((x) => x!== NaN);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingInfinityAndZeroAndNaN = (numbers) => {\n  return uniqueValues(numbers).filter((x) => x === 0 || x === Infinity || x === NaN);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, NaN])\n  3\n  */\nconst uniqueValuesIncludingNaNAndInfinityAndZeroAndNaN = (numbers) => {\n  return uniqueValuesIncludingNaNAndInfinity(numbers).filter((x) => x!== NaN);\n};\n\n/*\n  For a given list of input numbers, calculate the number of \n   unique values in the dataset. \n   >>> uniqueValues([1.0, 2.0, 3.0, Na", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be three discrete element in the list that \n   kernel to zero, and false differently.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      count++;\n    }\n  }\n  return count === 3;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 3, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely retentive lineage. \n   n cable car are drive left to justly;   simultaneously, a different set of n cars \n   are drive correct to left.    The two set of cars start out be very far from \n   each other.   All cars move in the same focal ratio.   Two car are pronounce to clash \n   when a cable car that's travel left to right hits a car that's move correct to exit. \n   However, the cable car are boundlessly sturdy and impregnable; as a result, they retain affect \n   in their trajectory as if they did not clash. \n\n   This routine output the number of such collision. \n   * / \n const carRaceCollision = (n) = > {\n   for (i = 1; i <= n; i++) {\n     for (j = 1; j <= n; j++) {\n       if (i!= j) {\n         if (abs(i - j) == 1) {\n           if (abs(i - j) == 1) {\n             if (abs(i - j) == 1) {\n               if (abs(i - j) == 1) {\n                 if (abs(i - j) == 1) {\n                   if (abs(i - j) == 1) {\n                     if (abs(i - j) == 1) {\n                       if (abs(i - j) == 1) {\n                         if (abs(i - j) == 1) {\n                           if (abs(i - j) == 1) {\n                             if (abs(i - j) == 1) {\n                               if (abs(i - j) == 1) {\n                                 if (abs(i - j) == 1) {\n                                   if (abs(i - j) == 1) {\n                                     if (abs(i - j) == 1) {\n                                       if (abs(i - j) == 1) {\n                                         if (abs(i - j) == 1) {\n                                           if (abs(i - j) == 1) {\n                                             if (abs(i - j) == 1) {\n                                               if (abs(i - j) == 1) {\n                                                if (abs(i - j) == 1) {\n                                                  if (abs(i - j) == 1) {\n                                                    if (abs(i - j) == 1) {\n                                                      if (abs(i - j) == 1) {\n                                                        if (abs(i - j) == 1) {\n                                                          if (abs(i - j) == 1) {\n                                                            if (abs(i - j) == 1) {\n                                                              if (abs(i - j) == 1) {\n                                                                if (abs(i - j) == 1) {\n                                                                  if (abs(i - j) == 1) {\n                                                                    if (abs(i - j) == 1) {\n                                                                      if (abs(i - j) == 1) {\n                                                                        if (abs(i - j) == 1) {\n                                                                          if (abs(i - j) == 1) {\n                                                                            if (abs(i - j) == 1) {\n                                                                              if (abs(i - j) == 1) {\n                                                                                if (abs(i - j) == 1) {\n                                                                                  if (abs(i - j) == 1) {\n                                                                                    if (abs(i - j) == 1) {\n                                                                                      if (abs(i - j) == 1) {\n                                                                                        if (abs(i - j) == 1) {\n                                                                                          if (abs(i - j) == 1) {\n                                                                                            if (abs(i - j) == 1) {\n                                                                                            \tif (abs(i - j) == 1) {\n                                                                                                if (abs(i - j) == 1) {\n                                                                                                \tif (abs(i - j) == 1) {\n                                                                                                    if (abs(i - j) == 1) {\n                                                                                                    \tif (abs(i - j) == 1) {\n                                                                                                    \t  if (abs(i - j) == 1) {\n                                                                                                    \t    if (abs(i - j) == 1) {\n                                                                                                    \t      if (abs(i - j) == 1) {\n                                                                                                              if (abs(i - j) == 1) {\n                                                                                                              \tif (abs(i - j) == 1) {\n                                                                                                                  if (abs(i - j) == 1) {\n                                                                                                                  \tif (abs(i - j) == 1) {\n                                                                                                                  \t  if (abs(i - j) == 1) {\n                                                                                                                  \t    if (abs(i - j) == 1) {\n                                                                                                                  \t      if (abs(i - j) == 1) {\n                                                                                                                  \t        if (abs(i - j) == 1) {\n                                                                                                                  \t          if (abs(i - j) == 1) {\n                                                                                                                  \t          \tif (abs(i - j) == 1) {\n                                                                                                                  \t          \t  if (abs(i - j) == 1) {\n                                                                                                                  \t            \t  if (abs(i - j) == 1) {\n                                                                                                                  \t              \t  if (abs(i - j) == 1) {\n                                                                                                                  \t                \t  if (abs(i - j) == 1) {\n                                                                                                                  \t              \t      \t  if (abs(i - j) == 1) {\n                                                                                                                  \t                \t      \t  \t  if (abs(i - j) == 1) {\n                                                                                                                  \t                \t      \t      \t  \t  if (abs(i - j) == 1) {\n                                                                                                                  \t                \t      \t      \t      \t  \t  \t  if (abs(i - j) == 1) {\n                                                                                                                  \t                \t      \t      \t      \t      \t  \t  \t  \t  \t  \t  \t  \t  \t", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 3, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] + 1;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [1, 2, 3]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 4, 3, 3, 3, 8, 2, 122]\n  */\nconst decrList = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] - 1;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements multiplied by 2.\n  >>> mul2List([1, 2, 3])\n  [2, 4, 6]\n  >>> mul2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 12, 8, 4, 6, 12, 4, 120]\n  */\nconst mul2List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] * 2;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 2.\n  >>> div2List([1, 2, 3])\n  [0.5, 1, 1.5]\n  >>> div2List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3.5, 5.5, 4.5, 3.5, 3.5, 9.5, 1.5, 123.5]\n  */\nconst div2List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] / 2;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements multiplied by 3.\n  >>> mul3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mul3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 6, 15, 4, 6, 15, 12, 3, 150, 120]\n  */\nconst mul3List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] * 3;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 3.\n  >>> div3List([1, 2, 3])\n  [1, 3, 6]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3.5, 6.5, 7.5, 4.5, 3.5, 9.5, 1.5, 123.5]\n  */\nconst div3List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] / 3;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements multiplied by 4.\n  >>> mul4List([1, 2, 3])\n  [4, 8, 12]\n  >>> mul4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [20, 8, 20, 6, 8, 20, 16, 4, 200, 160]\n  */\nconst mul4List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] * 4;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 4.\n  >>> div4List([1, 2, 3])\n  [1, 4, 8]\n  >>> div4List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3.5, 6.5, 7.5, 4.5, 3.5, 9.5, 1.5, 123.5]\n  */\nconst div4List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] / 4;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements multiplied by 5.\n  >>> mul5List([1, 2, 3])\n  [5, 10, 15]\n  >>> mul5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [25, 10, 25, 7, 10, 25, 20, 5, 250, 200]\n  */\nconst mul5List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i] * 5;\n    i++;\n  }\n  return l;\n};\n\n/*Return list with elements divided by 5.\n  >>> div5List([1, 2, 3])\n  [1, 5, 10]\n  >>> div5List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3.5, 6.5, 7.5, 4.5, 3.5, 9.5, 1.5, 123.5]\n  */\nconst div5List = (l) => {\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    l[i] = l[i", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 3, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input signal. \n   it returns on-key if there be two discrete element in the list that \n   kernel to zero, and false differently.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  let count = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      sum += l[i]\n      count++\n    }\n  }\n  if (count === 2) {\n    return true\n  } else {\n    return false\n  }\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 3, "perturbed": true, "gc": "/*Change numerical base of input signal number x to base.\n   return drawstring theatrical performance after the conversion. \n   base phone number are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let n = x;\n  let nBase = base;\n  let nBaseDigits = 0;\n  let nBaseDigitsDigits = 0;\n  let nBaseDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits = 0;\n  let nBaseDigitsDigitsDigitsDigitsDigitsDigits", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*Given length of a slope and high return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea21 = (a, h) => {\n  return a * (Math.sqrt(3) - 1) / 2;\n};\n\n/*Given length of a slope and low return sphere for a triangulum.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea22 = (a, h) => {\n  return a * (Math.sqrt(3) + 1) / 2;\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 3, "perturbed": true, "gc": "/*The Fib4 number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fib4(0) - > 0 \n   fib4(1) - > 0 \n   fib4(2) - > 2 \n   fib4(3) - > 0 \n   fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fib4 number sequence.   Do not practice recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n < 0) {\n    throw new Error('fib4: n must be a non-negative integer');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 4) {\n    return 4;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 6) {\n    return 6;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 8) {\n    return 8;\n  }\n  if (n === 9) {\n    return 9;\n  }\n  if (n === 10) {\n    return 10;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 12) {\n    return 12;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 14) {\n    return 14;\n  }\n  if (n === 15) {\n    return 15;\n  }\n  if (n === 16) {\n    return 16;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 18) {\n    return 18;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 20) {\n    return 20;\n  }\n  if (n === 21) {\n    return 21;\n  }\n  if (n === 22) {\n    return 22;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 24) {\n    return 24;\n  }\n  if (n === 25) {\n    return 25;\n  }\n  if (n === 26) {\n    return 26;\n  }\n  if (n === 27) {\n    return 27;\n  }\n  if (n === 28) {\n    return 28;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 30) {\n    return 30;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 32) {\n    return 32;\n  }\n  if (n === 33) {\n    return 33;\n  }\n  if (n === 34) {\n    return 34;\n  }\n  if (n === 35) {\n    return 35;\n  }\n  if (n === 36) {\n    return 36;\n  }\n  if (n === 37) {\n    return 37;\n  }\n  if (n === 38) {\n    return 38;\n  }\n  if (n === 39) {\n    return 39;\n  }\n  if (n === 40) {\n    return 40;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 42) {\n    return 42;\n  }\n  if (n === 43) {\n    return 43;\n  }\n  if (n === 44) {\n    return 44;\n  }\n  if (n === 45) {\n    return 45;\n  }\n  if (n === 46) {\n    return 46;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 48) {\n    return 48;\n  }\n  if (n === 49) {\n    return 49;\n  }\n  if (n === 50) {\n    return 50;\n  }\n  if (n === 51) {\n    return 51;\n  }\n  if (n === 52) {\n    return 52;\n  }\n  if (n === 53) {\n    return 53;\n  }\n  if (n === 54) {\n    return 54;\n  }\n  if (n === 55) {\n    return 55;\n  }\n  if (n === 56) {\n    return 56;\n  }\n  if (n === 57) {\n    return 57;\n  }\n  if (n === 58) {\n    return 58;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 60) {\n    return 60;\n  }\n  if (n === 61) {\n    return 61;\n  }\n  if (n === 62) {\n    return 62;\n  }\n  if (n === 63) {\n    return 63;\n  }\n  if (n === 64) {\n    return 64;\n  }\n  if (n === 65) {\n    return 65;\n  }\n  if (n === 66) {\n    return 66;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 68) {\n    return 68;\n  }\n  if (n === 69) {\n    return 69;\n  }\n  if (n === 70) {\n    return 70;\n  }\n  if (n === 71) {\n    return 71;\n  }\n  if (n === 72) {\n    return 72;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n === 74) {\n    return 74;\n  }\n  if (n === 75) {\n    return 75;\n  }\n  if (n === 76) {\n    return 76;\n  }\n  if (n ===", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 3, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return null;\n  }\n\n  const sorted = l.sort((a, b) => a - b);\n\n  if (sorted.length % 2 === 0) {\n    return (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n  } else {\n    return sorted[sorted.length / 2];\n  }\n};\n\nexport default median;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 3, "perturbed": true, "gc": "/*\n  Checks if given bowed stringed instrument is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (text.length < 2) {\n    return true;\n  }\n\n  let first = text.charAt(0);\n  let last = text.charAt(text.length - 1);\n\n  if (first!== last) {\n    return false;\n  }\n\n  let middle = text.substr(1, text.length - 2);\n\n  return isPalindrome(middle);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 3, "perturbed": true, "gc": "/*Return 2^n modulo p (exist aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || n >= p) throw new Error(`n must be between 0 and p-1, but was ${n}`)\n  if (n === 0) return 1\n  if (n === 1) return 0\n  if (n === p) return 1\n  if (n % 2 === 0) return modp(n - 1, p)\n  return modp(n - 1, p) + 1\n}\n\nmodule.exports = modp\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 3, "perturbed": true, "gc": "/* Insert a number 'delimeter' between every two consecutive component of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  const current = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (current!== numbers[i]) {\n      result.push(current);\n      current = numbers[i];\n    }\n  }\n  result.push(current);\n  return result;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ) .join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 3, "perturbed": true, "gc": "/*\n  returns encoded bowed stringed instrument by shifting every quality by 5 in the rudiment. \n   * / \n const encodeShift = (s) = > { \n   return s.split(\"\").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n\n / * \n   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n   * / \n const decodeShift = (s) = > {\n   return s.split(\" \").map(ch = > String.fromCharCode(\n     ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n } \n */\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst encodeShift = (s) = > {\n  return s.split(\"\").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst encodeShift = (s) = > {\n  return s.split(\"\").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\" \"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst decodeShift = (s) = > {\n  return s.split(\" \").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) - \" a\".charCodeAt(0) )% 26) + \" a\".charCodeAt(0) \n  ) ).join (\"\"); \n}\n\n// / * \n//   take as stimulation bowed stringed instrument encoded with encode_shift function. return decode string. \n//   * / \nconst encodeShift = (s) = > {\n  return s.split(\"\").map(ch = > String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \" a\".charCodeAt(0", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 3, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes bowed stringed instrument and returns drawstring without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (text.length === 0) {\n    return text;\n  }\n\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let vowelsCount = vowels.length;\n  let vowelsIndex = 0;\n  let newText = '';\n\n  for (let i = 0; i < text.length; i++) {\n    let currentChar = text[i];\n    if (currentChar === vowels[vowelsIndex]) {\n      vowelsIndex++;\n      if (vowelsIndex === vowelsCount) {\n        vowelsIndex = 0;\n      }\n    } else {\n      newText += currentChar;\n    }\n  }\n\n  return newText;\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 3, "perturbed": true, "gc": "/*Return true if all numbers pool in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold2 = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold3 = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold4 = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold5 = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold6 = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold7 = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between threshold t and t+threshold.\n  >>> betweenThreshold([1, 2, 4, 10], 100, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 5)\n  true\n  >>> betweenThreshold([1, 20, 4, 10], 5, 10)\n  false\n  */\nconst betweenThreshold8 = (l, t, tp) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < t || l[i] > tp) return false;\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers pool in the list l are between", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add5 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add6 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add7 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add8 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add9 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add10 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add11 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add12 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add13 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add14 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add15 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add16 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add17 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add18 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add19 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add20 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add21 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add22 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add23 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add24 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add25 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add26 = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 3, "perturbed": true, "gc": "/*\n  Check if two words experience the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChars;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 3, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_recursive = (n) => {\n  if (n < 2) return n;\n  return fib_recursive(n - 1) + fib_recursive(n - 2);\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib_iterative_recursive_recursive_recursive_recursive = (n) => {\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n};\n\n/*Return n-th Fibonacci number using recursion.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string of \" < \" and \" > \". \n   return false if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketCount = 0;\n  let bracketIndex = 0;\n  let bracket = brackets[bracketIndex];\n  let bracketLength = brackets[bracketIndex].length;\n  let bracketIndexNext = bracketIndex + 1;\n  let bracketIndexPrev = bracketIndex - 1;\n  let bracketIndexNextPrev = bracketIndexNext + 1;\n  let bracketIndexNextPrevPrev = bracketIndexNextPrev + 1;\n  let bracketIndexNextNext = bracketIndexNext + 2;\n  let bracketIndexNextNextPrev = bracketIndexNextNextPrev + 1;\n  let bracketIndexNextNextPrevPrev = bracketIndexNextNextPrevPrev + 1;\n  let bracketIndexNextNextNext = bracketIndexNextNextPrevPrev + 2;\n  let bracketIndexNextNextNextPrev = bracketIndexNextNextNextPrevPrev + 3;\n  let bracketIndexNextNextNextNext = bracketIndexNextNextNextPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextPrev = bracketIndexNextNextNextNextPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNext = bracketIndexNextNextNextNextPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev + 3;\n  let bracketIndexNextNextNextNextNextPrev = bracketIndexNextNextNextNextNextPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrevPrev", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 3, "perturbed": true, "gc": "/*Return true is list component are monotonically increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return true;\n  }\n  let min = l[0];\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return min <= max;\n};\n\nexport default monotonic;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 3, "perturbed": true, "gc": "/*Return sorted alone common elements for two tilt.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  const l1Index = [];\n  const l2Index = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  while (i < l1Len && j < l2Len) {\n    if (l1[i] === l2[j]) {\n      l1Index.push(i);\n      l2Index.push(j);\n      i++;\n      j++;\n      k++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n      k++;\n    } else {\n      j++;\n      k++;\n    }\n  }\n  return [...l1Index,...l2Index];\n};\n\nmodule.exports = common;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 3, "perturbed": true, "gc": "/*Return the largest prime component of n. Assume n > 1 and is not a flower.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return n;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 3, "perturbed": true, "gc": "/* Input to this function is a bowed stringed instrument represented multiple group for nested parenthesis separated by quad. \n   For each of the group, output the cryptic level of nesting of digression. \n   E.g. (() ()) has maximal two levels of nest while (( ()) ) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let nested_paren_count = 0;\n  let nested_paren_string = \"\";\n  let nested_paren_string_length = 0;\n  let nested_paren_string_index = 0;\n  let nested_paren_string_length_index = 0;\n  let nested_paren_string_length_index_end = 0;\n  let nested_paren_string_length_index_end_end = 0;\n  let nested_paren_string_length_index_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0;\n  let nested_paren_string_length_index_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 3, "perturbed": true, "gc": "/*sumToN is a function that sums numbers pool from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = sumToN\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 3, "perturbed": true, "gc": "/* brackets is a string of \" (\" and \") \". \n   return true if every possibility bracket have a comparable completion bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketPairs = brackets.split(\"\").map((bracket) => {\n    return bracket.split(\" \");\n  });\n\n  const isComparableBracket = (bracketPair) => {\n    const bracket = bracketPair[0];\n    const bracketPairLength = bracketPair.length;\n    const bracketPairLength2 = bracketPairLength - 1;\n    const bracketPairLength3 = bracketPairLength - 2;\n    const bracketPairLength4 = bracketPairLength - 3;\n\n    const bracketPairLength5 = bracketPairLength - 4;\n\n    const bracketPairLength6 = bracketPairLength - 5;\n\n    const bracketPairLength7 = bracketPairLength - 6;\n\n    const bracketPairLength8 = bracketPairLength - 7;\n\n    const bracketPairLength9 = bracketPairLength - 8;\n\n    const bracketPairLength10 = bracketPairLength - 9;\n\n    const bracketPairLength11 = bracketPairLength - 10;\n\n    const bracketPairLength12 = bracketPairLength - 11;\n\n    const bracketPairLength13 = bracketPairLength - 12;\n\n    const bracketPairLength14 = bracketPairLength - 13;\n\n    const bracketPairLength15 = bracketPairLength - 14;\n\n    const bracketPairLength16 = bracketPairLength - 15;\n\n    const bracketPairLength17 = bracketPairLength - 16;\n\n    const bracketPairLength18 = bracketPairLength - 17;\n\n    const bracketPairLength19 = bracketPairLength - 18;\n\n    const bracketPairLength20 = bracketPairLength - 19;\n\n    const bracketPairLength21 = bracketPairLength - 20;\n\n    const bracketPairLength22 = bracketPairLength - 21;\n\n    const bracketPairLength23 = bracketPairLength - 22;\n\n    const bracketPairLength24 = bracketPairLength - 23;\n\n    const bracketPairLength25 = bracketPairLength - 24;\n\n    const bracketPairLength26 = bracketPairLength - 25;\n\n    const bracketPairLength27 = bracketPairLength - 26;\n\n    const bracketPairLength28 = bracketPairLength - 27;\n\n    const bracketPairLength29 = bracketPairLength - 28;\n\n    const bracketPairLength30 = bracketPairLength - 29;\n\n    const bracketPairLength31 = bracketPairLength - 30;\n\n    const bracketPairLength32 = bracketPairLength - 31;\n\n    const bracketPairLength33 = bracketPairLength - 32;\n\n    const bracketPairLength34 = bracketPairLength - 33;\n\n    const bracketPairLength35 = bracketPairLength - 34;\n\n    const bracketPairLength36 = bracketPairLength - 35;\n\n    const bracketPairLength37 = bracketPairLength - 36;\n\n    const bracketPairLength38 = bracketPairLength - 37;\n\n    const bracketPairLength39 = bracketPairLength - 38;\n\n    const bracketPairLength40 = bracketPairLength - 39;\n\n    const bracketPairLength41 = bracketPairLength - 40;\n\n    const bracketPairLength42 = bracketPairLength - 41;\n\n    const bracketPairLength43 = bracketPairLength - 42;\n\n    const bracketPairLength44 = bracketPairLength - 43;\n\n    const bracketPairLength45 = bracketPairLength - 44;\n\n    const bracketPairLength46 = bracketPairLength - 45;\n\n    const bracketPairLength47 = bracketPairLength - 46;\n\n    const bracketPairLength48 = bracketPairLength - 47;\n\n    const bracketPairLength49 = bracketPairLength - 48;\n\n    const bracketPairLength50 = bracketPairLength - 49;\n\n    const bracketPairLength51 = bracketPairLength - 50;\n\n    const bracketPairLength52 = bracketPairLength - 51;\n\n    const bracketPairLength53 = bracketPairLength - 52;\n\n    const bracketPairLength54 = bracketPairLength - 53;\n\n    const bracketPairLength55 = bracketPairLength - 54;\n\n    const bracketPairLength56 = bracketPairLength - 55;\n\n    const bracketPairLength57 = bracketPairLength - 56;\n\n    const bracketPairLength58 = bracketPairLength - 57;\n\n    const bracketPairLength59 = bracketPairLength - 58;\n\n    const bracketPairLength60 = bracketPairLength - 59;\n\n    const bracketPairLength61 = bracketPairLength - 60;\n\n    const bracketPairLength62 = bracketPairLength - 61;\n\n    const bracketPairLength63 = bracketPairLength - 62;\n\n    const bracketPairLength64 = bracketPairLength - 63;\n\n    const bracketPairLength65 = bracketPairLength - 64;\n\n    const bracketPairLength66 = bracketPairLength - 65;\n\n    const bracketPairLength67 = bracketPairLength - 66;\n\n    const bracketPairLength68 = bracketPairLength - 67;\n\n    const bracketPairLength69 = bracketPairLength - 68;\n\n    const bracketPairLength70 = bracketPairLength - 69;\n\n    const bracketPairLength71 = bracketPairLength - 70;\n\n    const bracketPairLength72 = bracketPairLength - 71;\n\n    const bracketPairLength73 = bracketPairLength - 72;\n\n    const bracketPairLength74 = bracketPairLength - 73;\n\n    const bracketPairLength75 = bracketPairLength - 74;\n\n    const bracketPairLength76 = bracketPairLength - 75;\n\n    const bracketPairLength77 = bracketPairLength - 76;\n\n    const bracketPairLength78 = bracketPairLength - 77;\n\n    const bracketPairLength79 = bracketPairLength - 78;\n\n    const bracketPairLength80 = bracketPairLength - 79;\n\n    const bracketPairLength81 = bracketPairLength - 80;\n\n    const bracketPairLength82 = bracketPairLength - 81;\n\n    const bracketPairLength83 = bracketPairLength - 82;\n\n    const bracketPairLength84 = bracketPairLength - 83;\n\n    const bracketPairLength85 = bracketPairLength - 84;\n\n    const bracketPairLength86 = bracketPairLength - 85;\n\n    const bracket", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 3, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. \n   xs[0] + xs[1] * x + xs[2] * x^2 +.... \n    Return derivative of this polynomial in the same human body.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length;\n  const dxs = [];\n  for (let i = 1; i < n; i++) {\n    dxs.push(xs[i] - xs[i - 1]);\n  }\n  return dxs;\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst power = (x, n) => {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return x;\n  }\n  return x * power(x, n - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst binomial = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return n * binomial(n - 1, k - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst factorial2 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial2(n - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst binomial2 = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return n * binomial2(n - 1, k - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst factorial3 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial3(n - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst binomial3 = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return n * binomial3(n - 1, k - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst factorial4 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial4(n - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst binomial4 = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return n * binomial4(n - 1, k - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst factorial5 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial5(n - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst binomial5 = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return n * binomial5(n - 1, k - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst factorial6 = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial6(n - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n  1\n  */\nconst binomial6 = (n, k) => {\n  if (k === 0) {\n    return 1;\n  }\n  if (k === 1) {\n    return n;\n  }\n  return n * binomial6(n - 1, k - 1);\n};\n\n/*\n  x^n\n  >>> x^3\n  3\n  >>> x^2\n  2\n  >>> x^1\n  1\n  >>> x^0\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 3, "perturbed": true, "gc": "/*The FibFib number sequence is a succession similar to the Fibbonacci sequnece that's defined as take after: \n   fibfib(0) = = 0 \n   fibfib(1) = = 0 \n   fibfib(2) = = 1 \n   fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n   Please spell a affair to efficiently calculate the n-th chemical element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n < 2) {\n    return 0\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nmodule.exports = fibfib\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 3, "perturbed": true, "gc": "/*Write a function vowelsCount which take a string represent \n   a parole as stimulation and fall the numeral of vowels in the string. \n   vowel in this casing are' a',' east',' i',' oxygen',' uranium'. Here,' y' is besides a \n   vowel, but only when it be at the goal of the give word. \n\n   Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      vowels++;\n    }\n  }\n  return vowels;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 3, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n   and return the result as a chain. \n   If shift > numeral of digit, return digit reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = '';\n  let digit = 0;\n  let i = 0;\n  while (i < x.length) {\n    digit = x.charCodeAt(i);\n    result += String.fromCharCode(digit + shift % 10);\n    shift = Math.floor(shift / 10);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a number to a chain.\n  * @param {number} numeral\n  * @returns {string}\n  */\nconst toChain = (numeral) => {\n  let result = '';\n  let digit = 0;\n  let i = 0;\n  while (i < numeral.length) {\n    digit = numeral.charCodeAt(i);\n    result += String.fromCharCode(digit - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit;\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral2 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral3 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral4 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral5 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral6 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral7 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral8 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral9 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain to a number.\n  * @param {string} chain\n  * @returns {number}\n  */\nconst toNumeral10 = (chain) => {\n  let result = 0;\n  let digit = 0;\n  let i = 0;\n  while (i < chain.length) {\n    digit = chain.charCodeAt(i);\n    result += digit * Math.pow(10, chain.length - i - 1);\n    i++;\n  }\n  return result;\n};\n\n/**\n  * Convert a chain", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/66", "prompt": "/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 3, "perturbed": true, "gc": "/*Task \n   Write a affair that takes a drawstring as remark and return the sum of the upper quality merely' \n   ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  let index = 0;\n  while (index < s.length) {\n    let code = s[index];\n    if (code >= '0' && code <= '9') {\n      sum += code - '0';\n    } else {\n      sum += code - 'A' + 10;\n    }\n    index++;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 3, "perturbed": true, "gc": "/*\n  In this task, you will be given a bowed stringed instrument that represents a issue of apple and orange \n   that are distributed in a basket of yield this basket control \n   apples, orange, and mango yield. contribute the string that represent the total number of \n   the orange and apple and an integer that typify the total number of the fruit \n   in the basket return the number of the mango yield in the basket. \n   for examble: \n   fruitDistribution(\"5 apple and 6 orange \", 19) ->19 - 5 - 6 = 8 \n   fruitDistribution(\"0 apples and 1 oranges\",3) - > 3 - 0 - 1 = 2 \n   fruitDistribution(\"2 apples and 3 oranges \", 100) - > 100 - 2 - 3 = 95 \n   fruitDistribution(\"100 apple and 1 oranges\",120) - > 120 - 100 - 1 = 19 \n   * / \n const fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == 'o') {\n      total += n;\n      count++;\n    }\n    i++;\n  }\n  return total;\n}\n\n// * / \n\n// * / \nconst fruitDistribution = (s, n) = > {\n  let total = 0;\n  let count = 0;\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] == 'a') {\n      total += n;\n      count++;\n    }\n    else if (s[i] == '", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/68", "prompt": "/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 3, "perturbed": true, "gc": "/*\n  \" Given an array represent a branch of a tree that have non - damaging integer node \n   your undertaking is to pluck one of the node and return it. \n   The plucked node should equal the lymph node with the smallest tied value. \n   If multiple nodes with the like little even value are establish return the node that has modest exponent. \n\n   The plucked node should be return in a list, [ smalest_value, its exponent ], \n   If there cost no even value or the given array is empty, return [ ].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  let min = arr[0];\n  let min_exp = arr[0];\n  let min_index = 0;\n  let max = arr[0];\n  let max_exp = arr[0];\n  let max_index = 0;\n  let index = 0;\n  let i = 0;\n  while (i < arr.length) {\n    if (arr[i] < min) {\n      min = arr[i];\n      min_exp = arr[i];\n      min_index = i;\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n      max_exp = arr[i];\n      max_index = i;\n    }\n    i++;\n  }\n  if (min_exp === max_exp) {\n    return [min_exp, min_index];\n  }\n  let exp = min_exp - max_exp;\n  let index = min_index;\n  let next_index = index + 1;\n  while (next_index < arr.length) {\n    if (arr[next_index] === arr[index]) {\n      exp++;\n    } else {\n      exp--;\n    }\n    index = next_index;\n    next_index++;\n  }\n  return [exp, index];\n};\n\nmodule.exports = pluck;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a non - empty list of positive integers. refund the great integer that embody great than \n   zero, and has a frequency bang-up than or equal to the value of the integer itself. \n   The frequency of an integer is the issue of times it appears in the list.\n   If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst.reduce((a, b) => a > b? a : b, -1);\n  const maxIndex = lst.findIndex((x) => x > max);\n  if (maxIndex === -1) {\n    return -1;\n  }\n  return lst[maxIndex];\n};\n\nmodule.exports = search;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 3, "perturbed": true, "gc": "/* Filter an input list of strings only for one that contain give substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n\n  return strings.filter(s => s.indexOf(substring)!== -1);\n};\n\nmodule.exports = {\n  filterBySubstring\n};\n<|endoftext|>", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 3, "perturbed": true, "gc": "/*\n  Given list of integers, return list in foreign order. \n   Strange sorting, is when you begin with the minimal value, \n   then utmost of the remain integers, then minimum and so along.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst ||!lst.length) return lst;\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  let result = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i === minIndex) {\n      result.push(min);\n      continue;\n    }\n    result.push(lst[i]);\n  }\n  return result;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 3, "perturbed": true, "gc": "/*\n  Given the lengths of the three side of a triangle. render the area of \n   the triangulum round to 2 decimal point if the three slope imprint a valid triangle. \n   Otherwise return -1 \n   Three side form a valid triangle when the kernel of any two sides is great \n   than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return s * (s - a) * (s - b) * (s - c);\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a +", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that return true if the aim q will vanish, and assumed differently. \n   The aim q will flee if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximal possible weight unit w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array arr of integer, find the minimum number of chemical element that \n   necessitate to be transfer to cook the array palindromic. A palindromic array is an array that \n   is learn the like backwards and forward. In one variety, you can change one element to any early element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const arrLength = arr.length\n  let minChange = arrLength\n  for (let i = 0; i < arrLength; i++) {\n    for (let j = i + 1; j < arrLength; j++) {\n      if (arr[i] === arr[j]) {\n        if (arr[i] < minChange) {\n          minChange = arr[i]\n        }\n      }\n    }\n  }\n  return minChange\n}\n\nconst test = () => {\n  const arr = [1, 2, 3, 5, 4, 7, 9, 6]\n  console.log(smallestChange(arr))\n}\n\nif (module === require.main) {\n  test()\n}\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that accept two lists of string and return the list that has \n   entire number of char in the all strings of the list less than the other list.\n\n   if the two lists consume the same phone number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  let i = 0;\n  while (i < lst1.length && i < lst2.length) {\n    if (lst1[i] < lst2[i]) {\n      result.push(lst1[i]);\n    } else {\n      result.push(lst2[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/75", "prompt": "/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 3, "perturbed": true, "gc": "/*Write a affair that returns on-key if the render numeral cost the generation of 3 premier issue \n   and delusive otherwise. \n   Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime2 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime3 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime4 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime5 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime6 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime7 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime8 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime9 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime10 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime11 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime12 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime13 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime14 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime15 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime16 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime17 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime18 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime19 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime20 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime21 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime22 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isMultiplyPrime23 = (a) => {\n  let i = 2;\n  while (i < a) {\n    if (a % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 3, "perturbed": true, "gc": "/*Your task is to write a affair that returns on-key if a numeral x constitute a elementary \n   power of n and assumed in other lawsuit. \n   x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n === 0) {\n    return false;\n  }\n  return isSimplePower(x, n);\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take an integer a and reelect genuine \n   if this ingeger be a block of some integer number. \n   bill: you may bear the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a % 10 === 0 || a % 100 === 0 || a % 1000 === 0;\n};\n\nmodule.exports = iscube;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 3, "perturbed": true, "gc": "/*You have been tasked to write a affair that receives \n   a hexadecimal phone number as a chain and count the numeral of hexadecimal \n   digits that are primes (flower number=== or a prime=== is a natural numeral \n   greater than 1 that be not a merchandise of two small lifelike numeral). \n   Hexadecimal digit are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. \n   Prime number are 2=== 3=== 5=== 7=== 11=== 13=== 17===... \n   So you have to decide a issue of the comply digit: 2=== 3=== 5=== 7=== \n   B (= decimal 11)=== D (= decimal 13). \n   Note: you may bear the stimulation is constantly correct or empty string=== \n   and symbols A===B===C===D===E===F are constantly uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let hex = num.toString(16).toUpperCase();\n  let hexKey = [];\n  for (let i = 0; i < hex.length; i++) {\n    hexKey.push(hex.charCodeAt(i));\n  }\n  return hexKey;\n};\n\nconst isPrime = (num) => {\n  let hexKey = hexKey(num);\n  let prime = true;\n  for (let i = 0; i < hexKey.length; i++) {\n    if (hexKey[i] === 0 || hexKey[i] === 1 || hexKey[i] === 2 || hexKey[i] === 3 || hexKey[i] === 4 || hexKey[i] === 5 || hexKey[i] === 6 || hexKey[i] === 7 || hexKey[i] === 8 || hexKey[i] === 9 || hexKey[i] === 10 || hexKey[i] === 11 || hexKey[i] === 12 || hexKey[i] === 13 || hexKey[i] === 14 || hexKey[i] === 15 || hexKey[i] === 16 || hexKey[i] === 17 || hexKey[i] === 18 || hexKey[i] === 19 || hexKey[i] === 20 || hexKey[i] === 21 || hexKey[i] === 22 || hexKey[i] === 23 || hexKey[i] === 24 || hexKey[i] === 25 || hexKey[i] === 26 || hexKey[i] === 27 || hexKey[i] === 28 || hexKey[i] === 29 || hexKey[i] === 30 || hexKey[i] === 31 || hexKey[i] === 32 || hexKey[i] === 33 || hexKey[i] === 34 || hexKey[i] === 35 || hexKey[i] === 36 || hexKey[i] === 37 || hexKey[i] === 38 || hexKey[i] === 39 || hexKey[i] === 40 || hexKey[i] === 41 || hexKey[i] === 42 || hexKey[i] === 43 || hexKey[i] === 44 || hexKey[i] === 45 || hexKey[i] === 46 || hexKey[i] === 47 || hexKey[i] === 48 || hexKey[i] === 49 || hexKey[i] === 50 || hexKey[i] === 51 || hexKey[i] === 52 || hexKey[i] === 53 || hexKey[i] === 54 || hexKey[i] === 55 || hexKey[i] === 56 || hexKey[i] === 57 || hexKey[i] === 58 || hexKey[i] === 59 || hexKey[i] === 60 || hexKey[i] === 61 || hexKey[i] === 62 || hexKey[i] === 63 || hexKey[i] === 64 || hexKey[i] === 65 || hexKey[i] === 66 || hexKey[i] === 67 || hexKey[i] === 68 || hexKey[i] === 69 || hexKey[i] === 70 || hexKey[i] === 71 || hexKey[i] === 72 || hexKey[i] === 73 || hexKey[i] === 74 || hexKey[i] === 75 || hexKey[i] === 76 || hexKey[i] === 77 || hexKey[i] === 78 || hexKey[i] === 79 || hexKey[i] === 80 || hexKey[i] === 81 || hexKey[i] === 82 || hexKey[i] === 83 || hexKey[i] === 84 || hexKey[i] === 85 || hexKey[i] === 86 || hexKey[i] === 87 || hexKey[i] === 88 || hexKey[i] === 89 || hexKey[i] === 90 || hexKey[i] === 91 || hexKey[i] === 92 || hexKey[i] === 93 || hexKey[i] === 94 || hexKey[i] === 95 || hexKey[i] === 96 || hexKey[i] === 97 || hexKey[i] === 98 || hexKey[i] === 99 || hexKey[i] === 100 || hexKey[i] === 101 || hexKey[i] === 102 || hexKey[i] === 103 || hexKey[i] === 104 || hexKey[i] === 105 || hexKey[i] === 106 || hexKey[i] === 107 || hexKey[i] === 108 || hexKey[i] === 109 || hexKey[i] === 110 || hexKey[i] === 111 || hexKey[i] === 112 || hexKey[i] === 113 || hexKey[i] === 114 || hexKey[i] === 115 || hexKey[i] === 116 || hexKey[i] === 117 || hexKey[i] === 118 || hexKey[i] === 119 || hexKey[i] === 120 || hexKey[i] === 121 || hexKey[i] === 122 || hexKey[i] === 123 || hexKey[i] === 124 || hexKey[i] === 125 || hexKey[i] === 126 || hexKey[i] === 127 || hexKey[i] === 128 || hexKey[i] === 129 || hexKey[i] === 130 || hexKey[i] === 131 || hexKey[i] === 132 || hexKey[i] === 133 || hexKey[i] === 134 || hexKey[i] === 135 || hexKey[i] === 136 || hexKey[i]", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 3, "perturbed": true, "gc": "/*You will be given a number in decimal kind and your task be to change it to \n   binary format. The function should return a chain, with each character constitute a binary \n   number. Each character in the string will equal' 0' or' 1'. \n\n   There will be an excess couple of characters' db' at the beginning and at the goal of the string. \n   The extra character are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  let binaryLength = decimal.length;\n  let binaryIndex = 0;\n  let decimalIndex = 0;\n  let decimalChar = '';\n  let binaryChar = '';\n  let binaryCharIndex = 0;\n  let binaryCharLength = 0;\n\n  while (decimalIndex < decimalLength) {\n    decimalChar = decimal.charAt(decimalIndex);\n    decimalCharLength = decimalChar.length;\n    binaryChar = '';\n    binaryCharLength = 0;\n    while (binaryCharLength < decimalCharLength) {\n      binaryChar = binaryChar + '0';\n      binaryCharLength++;\n    }\n    binary = binary + binaryChar;\n    binaryIndex++;\n    decimalIndex++;\n  }\n  return binary;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 3, "perturbed": true, "gc": "/* For a given list of integers, return a tuple dwell of a sum and a intersection of all the integer in a list.\n   Empty kernel should be adequate to 0 and empty merchandise should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  let intersection = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    intersection += int[i]\n  }\n  return [sum, intersection]\n}\n\nconst test = () => {\n  let numbers = [1, 2, 3, 4]\n  let int = [1, 2, 3, 4]\n  let result = sumProduct(numbers, int)\n  console.log(result)\n}\n\ntest()\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 3, "perturbed": true, "gc": "/*You are given a string s.\n   Your undertaking is to check if the drawstring is glad or not. \n   A bowed stringed instrument is happy if its duration is at least 3 and every 3 consecutive letter are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsCount = 0;\n  let vowelsCounts = [];\n  let vowelsCountsLength = vowels.length;\n  let vowelsCountsLengths = [];\n  let vowelsCountsLengthsLength = vowelsCountsLength;\n  let vowelsCountsLengthsLengths = [];\n  let vowelsCountsLengthsLengthsLength = vowelsCountsLengthsLength;\n  let vowelsCountsLengthsLengthsLengths = [];\n  let vowelsCountsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengths = [];\n  let vowelsCountsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengths = [];\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength;\n  let vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength = vowelsCountsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLengthsLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/81", "prompt": "/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 3, "perturbed": true, "gc": "/*It is the last workweek of the semester and the teacher has to contribute the grades\n   to student. The teacher has been seduce her own algorithm for grade. \n   The only trouble is, she has lost the code she use for grade. \n   She has give you a list of GPAs for some students and you own to spell \n   a routine that can output a list of letter grades using the follow table: \n            GPA        |     Letter degree \n             4.0                 A+ \n           > 3.7                 A \n           > 3.3                 A- \n           > 3.0                 B+ \n           > 2.7                 B \n           > 2.3                 B- \n           > 2.0                 C+ \n           > 1.7                 C \n           > 1.3                 C- \n           > 1.0                 D+ \n           > 0.7                 five hundred \n           > 0.0                 D- \n             0.0                 east\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = '';\n  let grade = 0;\n  let gradeCount = 0;\n  let gradeLetter = '';\n  let gradeLetterCount = 0;\n  let gradeLetterLetter = '';\n  let gradeLetterLetterCount = 0;\n  let gradeLetterLetterLetter = '';\n  let gradeLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterCount = 0;\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter = '';\n  let gradeLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetterLetter", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 3, "perturbed": true, "gc": "/*Write a function that take a string and returns on-key if the string\n   duration constitute a premier numeral or false differently\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  let isPrime = true;\n  let i = 0;\n  while (i < length) {\n    if (string[i] === '0') {\n      isPrime = false;\n      break;\n    }\n    i++;\n  }\n  return isPrime;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 3, "perturbed": true, "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n   positive integer that begin or end with 1. \n   * / \n const startsOneEnds = (n) = > {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n   if (i % 10 === 1) {\n    count++;\n   }\n   i++;\n  }\n  return count;\n }\n  */\n\nconst startsOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (i <= n) {\n    if (i % 10 === 1) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nmodule.exports = startsOneEnds;<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 3, "perturbed": true, "gc": "/*Given a positive integer N, return the total sum of its digits in binary star.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  while (N > 0) {\n    sum += N % 2;\n    N /= 2;\n  }\n  return sum.toString();\n};\n\nmodule.exports = solve;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/85", "prompt": "/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 3, "perturbed": true, "gc": "/*Given a non - empty list of integers lst. add the even chemical element that constitute at curious index..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let i = 0;\n  let result = 0;\n  while (i < lst.length) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i];\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = add;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take a string and reelect an arranged interpretation of it. \n   arrange interpretation of chain, is a bowed stringed instrument where all words (separate by outer space) \n   are replaced by a modern word where all the quality arrange in\n   ascend order based on ascii value. \n   eminence: You should keep the order of news and blank space in the conviction.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let result = '';\n  let newString = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  let v = 0;\n  let w = 0;\n  let x = 0;\n  let y = 0;\n  let z = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  let e = 0;\n  let f = 0;\n  let g = 0;\n  let h = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let m = 0;\n  let n = 0;\n  let o = 0;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  let s = 0;\n  let t = 0;\n  let u = 0;\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional datum, as a nested lists, \n   which is exchangeable to matrix, however, unlike matrices, \n   each rowing may contain a unlike number of columns. \n   give lst, and integer x, recover integers x in the list,\n   and return list of tuples, [ (x1, y1), (x2, y2)... ] such that \n   each tuple is a coordinate - (row, column), originate with 0. \n   Sort coordinates initially by rows in ascend orderliness. \n   besides, kind coordinates of the row by columns in fall order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow2 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow3 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow4 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow5 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow6 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow7 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow8 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n  return res;\n};\n\nconst getRow9 = (lst, x) => {\n  let res = [];\n  let row = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst.length) {\n    if (lst[i].length === 0) {\n      row = [];\n      res.push(row);\n      i++;\n      continue;\n    }\n    while (j < lst[i].length) {\n      row.push([x, lst[i][j]]);\n      j++;\n    }\n    i++;\n  }\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 3, "perturbed": true, "gc": "/*\n  Given an array of non - negative integers, return a copy of the render array after screen, \n   you will screen the give array in ascending decree if the sum (beginning index value, last exponent value) be odd, \n   or sort it in condescend order if the sum (beginning index value, last exponent value) is even. \n\n   eminence: \n   * don't deepen the give array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return [];\n  }\n  const sorted = array.slice(0);\n  const sortedLength = sorted.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let temp = 0;\n  while (i < sortedLength) {\n    temp = sorted[i];\n    while (j < sortedLength && sorted[j] < temp) {\n      sorted[j] = sorted[j + 1];\n      j++;\n    }\n    sorted[j] = temp;\n    i++;\n    j++;\n  }\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 3, "perturbed": true, "gc": "/*Create a function encrypt that take a string as an argumentation and \n   render a chain code with the rudiment being revolve. \n   The rudiment should be rotate in a manner such that the letters \n   transfer down by two multiply to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let chain = '';\n  let i = 0;\n  while (i < s.length) {\n    chain += s.charAt(i);\n    i++;\n    if (i % 2 === 0) {\n      chain += s.charAt(i);\n      i++;\n    }\n  }\n  return chain;\n};\n\nconst decrypt = (s) => {\n  let chain = '';\n  let i = 0;\n  while (i < s.length) {\n    chain += s.charAt(i);\n    i++;\n    if (i % 2 === 0) {\n      chain += s.charAt(i);\n      i++;\n    }\n  }\n  return chain;\n};\n\nconst test = (s) => {\n  console.log(s);\n  console.log(encrypt(s));\n  console.log(decrypt(encrypt(s)));\n};\n\ntest('hello');\ntest('asdfghjkl');\ntest('gf');\ntest('et');\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 3, "perturbed": true, "gc": "/* From a given list of integers, render a list of rolling maximal component determine until afford here and now \n   in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax2 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    } else {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax3 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    } else {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax4 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    } else {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax5 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    } else {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax6 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    } else {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax7 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    } else {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax8 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    } else {\n      result.push(max);\n      max = numbers[i];\n    }\n  }\n  return result;\n};\n\n/*\n  From a given list of integers, render a list of rolling maximal component determine until afford here and now \n  in the succession.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax9 = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 3, "perturbed": true, "gc": "/*\n  You are given a list of integers. \n   publish a function nextSmallest() that reelect the second smallest chemical element of the list.\n   Return null if there cost no such chemical element. \n  \n   nextSmallest([1, 2, 3, 4, 5 ]) = = 2 \n   nextSmallest([5, 1, 4, 3, 2 ]) = = 2 \n   nextSmallest([]) = = null \n   nextSmallest([1, 1 ]) = = null \n   * / \n const nextSmallest = (lst) = > {\n  if (lst.length == 0) return null;\n  let min = lst[0];\n  let minIndex = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      minIndex = i;\n    }\n  }\n  return lst[minIndex + 1];\n}\n\n// TEST CASES\n\nconst testCases = [\n  [ [1, 2, 3, 4, 5 ], 2 ],\n  [ [5, 1, 4, 3, 2 ], 2 ],\n  [ [], null ],\n  [ [1, 1 ], null ],\n];\n\nfor (let t of testCases) {\n  console.log(`nextSmallest(${t[0]}) = ${nextSmallest(t[0])}`);\n}\n\n// END\n<|endoftext|>", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 3, "perturbed": true, "gc": "/*\n  You'll be given a string of lyric, and your task be to consider the numeral \n   of boredom. A boredom is a conviction that start with the word \" I \". \n   Sentences are demarcate by'.','?' or'!'. \n \n   For case:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let num = 0;\n  let str = S.split(/[.?!]/);\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/^[0-9]$/)) {\n      num += parseInt(str[i]);\n    }\n  }\n  return num;\n};\n\nconst test = () => {\n  let S = \"Hello world\";\n  console.log(isBored(S));\n  S = \"The sky is blue. The sun is shining. I love this weather\";\n  console.log(isBored(S));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 3, "perturbed": true, "gc": "/* Create a function that take 3 numbers. \n   return genuine if one of the issue cost adequate to the kernel of the early two, and all numbers are integer. \n   Returns assumed in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const xIsInt = isInt(x);\n  const yIsInt = isInt(y);\n  const zIsInt = isInt(z);\n  if (xIsInt && yIsInt && zIsInt) {\n    return x === y && x === z;\n  }\n  return false;\n};\n\n/*\n  Create a function that take 3 numbers.\n  return true if the sum of the numbers is a perfect square.\n  Examples\n  isPerfectSquare(5, 2, 7) ➞ true\n  isPerfectSquare(3, 2, 2) ➞ false\n  isPerfectSquare(3, -2, 1) ➞ true\n  isPerfectSquare(3.6, -2.2, 2) ➞ false\n  */\nconst isPerfectSquare = (x, y, z) => {\n  const xIsInt = isInt(x);\n  const yIsInt = isInt(y);\n  const zIsInt = isInt(z);\n  if (xIsInt && yIsInt && zIsInt) {\n    return x + y === (x + y) * (x + y);\n  }\n  return false;\n};\n\n/*\n  Create a function that take 3 numbers.\n  return true if the sum of the numbers is a perfect square.\n  Examples\n  isPerfectSquare(5, 2, 7) ➞ true\n  isPerfectSquare(3, 2, 2) ➞ false\n  isPerfectSquare(3, -2, 1) ➞ true\n  isPerfectSquare(3.6, -2.2, 2) ➞ false\n  */\nconst isPerfectSquare2 = (x, y, z) => {\n  const xIsInt = isInt(x);\n  const yIsInt = isInt(y);\n  const zIsInt = isInt(z);\n  if (xIsInt && yIsInt && zIsInt) {\n    return x + y === (x + y) * (x + y);\n  }\n  return false;\n};\n\n/*\n  Create a function that take 3 numbers.\n  return true if the sum of the numbers is a perfect square.\n  Examples\n  isPerfectSquare(5, 2, 7) ➞ true\n  isPerfectSquare(3, 2, 2) ➞ false\n  isPerfectSquare(3, -2, 1) ➞ true\n  isPerfectSquare(3.6, -2.2, 2) ➞ false\n  */\nconst isPerfectSquare3 = (x, y, z) => {\n  const xIsInt = isInt(x);\n  const yIsInt = isInt(y);\n  const zIsInt = isInt(z);\n  if (xIsInt && yIsInt && zIsInt) {\n    return x + y === (x + y) * (x + y);\n  }\n  return false;\n};\n\n/*\n  Create a function that take 3 numbers.\n  return true if the sum of the numbers is a perfect square.\n  Examples\n  isPerfectSquare(5, 2, 7) ➞ true\n  isPerfectSquare(3, 2, 2) ➞ false\n  isPerfectSquare(3, -2, 1) ➞ true\n  isPerfectSquare(3.6, -2.2, 2) ➞ false\n  */\nconst isPerfectSquare4 = (x, y, z) => {\n  const xIsInt = isInt(x);\n  const yIsInt = isInt(y);\n  const zIsInt = isInt(z);\n  if (xIsInt && yIsInt && zIsInt) {\n    return x + y === (x + y) * (x + y);\n  }\n  return false;\n};\n\n/*\n  Create a function that take 3 numbers.\n  return true if the sum of the numbers is a perfect square.\n  Examples\n  isPerfectSquare(5, 2, 7) ➞ true\n  isPerfectSquare(3, 2, 2) ➞ false\n  isPerfectSquare(3, -2, 1) ➞ true\n  isPerfectSquare(3.6, -2.2, 2) ➞ false\n  */\nconst isPerfectSquare5 = (x, y, z) => {\n  const xIsInt = isInt(x);\n  const yIsInt = isInt(y);\n  const zIsInt = isInt(z);\n  if (xIsInt && yIsInt && zIsInt) {\n    return x + y === (x + y) * (x + y);\n  }\n  return false;\n};\n\n/*\n  Create a function that take 3 numbers.\n  return true if the sum of the numbers is a perfect square.\n  Examples\n  isPerfectSquare(5, 2, 7) ➞ true\n  isPerfectSquare(3, 2, 2) ➞ false\n  isPerfectSquare(3, -2, 1) ➞ true\n  isPerfectSquare(3.6, -2.2, 2) ➞ false\n  */\nconst isPerfectSquare6 = (x, y, z) => {\n  const xIsInt = isInt(x);\n  const yIsInt = isInt(y);\n  const zIsInt = isInt(z);\n  if (xIsInt && yIsInt && zIsInt) {\n    return x + y === (x + y) * (x + y);\n  }\n  return false;\n};\n\n/*\n  Create a function that take 3 numbers.\n  return true if the sum of the numbers is a perfect square.\n  Examples\n  isPerfectSquare(5, 2, 7) ➞ true\n  isPerfectSquare(3, 2, 2) ➞ false\n  isPerfectSquare(3, -2, 1) ➞ true\n  isPerfectSquare(3.6, -2.2, 2) ➞ false\n  */\nconst isPerfectSquare7 = (x, y, z) => {\n  const xIsInt", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 3, "perturbed": true, "gc": "/*\n  Write a function that take a message, and encodes in such a \n   room that it trade shell of all letter, replace all vowels in \n   the message with the letter that appears 2 places ahead of that \n   vowel in the english rudiment. \n   Assume merely letters. \n  \n   example:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  let i = 0\n  while (i < message.length) {\n    let letter = message[i]\n    let nextLetter = message[i + 1]\n    if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n      result += nextLetter\n      i += 2\n    } else {\n      result += letter\n      i += 1\n    }\n  }\n  return result\n}\n\nmodule.exports = encode\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 3, "perturbed": true, "gc": "/*You are given a list of integers. \n   You necessitate to find the big premier value and return the kernel of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let max_prime = 0;\n  let max_prime_index = 0;\n  let max_prime_value = 0;\n  let max_prime_index_value = 0;\n  let max_prime_value_index = 0;\n  let max_prime_value_index_value = 0;\n  let max_prime_value_index_value_index = 0;\n  let max_prime_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index = 0;\n  let max_prime_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value = 0;\n  let max_prime_value_index_value_index_value_index_value_index_value_index_value_index_value_", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 3, "perturbed": true, "gc": "/*\n  Given a dictionary, return truthful if all keys be chain in humble \n   font or all key are strings in upper case, else return false. \n   The function should return false is the afford dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let key in dict) {\n    if (typeof dict[key]!== \"string\") {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 3, "perturbed": true, "gc": "/*Implement a function that take an non - minus integer and return an array of the inaugural n\n   integers that constitute choice act and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 3, "perturbed": true, "gc": "/*Complete the function that take two integers and return \n   the merchandise of their unit of measurement digit. \n   wear the input is constantly valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let a_digit = a % 10;\n  let b_digit = b % 10;\n  while (a_digit >= 0 && b_digit >= 0) {\n    if (a_digit < b_digit) {\n      result += a_digit;\n      a_digit = a % 10;\n    } else {\n      result += b_digit;\n      b_digit = b % 10;\n    }\n  }\n  if (a_digit < 0) {\n    result += a_digit;\n  }\n  if (b_digit < 0) {\n    result += b_digit;\n  }\n  return result;\n};\n\nconst test = () => {\n  console.log(multiply(148, 412));\n  console.log(multiply(19, 28));\n  console.log(multiply(2020, 1851));\n  console.log(multiply(14, -15));\n};\n\ntest();\n<|endoftext|>", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 3, "perturbed": true, "gc": "/*\n  Given a string s, consider the number of capital vowel in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 3, "perturbed": true, "gc": "/* Create a function that take a value (string) represent a numeral \n   and return the close integer to it. If the numeral constitute equidistant \n   from two integers, round it away from zero. \n   model\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let result = parseInt(value);\n  if (isNaN(result)) {\n    return value;\n  }\n  let diff = Math.abs(result - Math.round(result));\n  if (diff < 0.5) {\n    return Math.round(result);\n  }\n  return result;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>", "passed": 0, "run_status": 1}
